// Generated by jextract

package com.github.tornaia.foreign.win.api.searchapi.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class combaseapi_h$constants$0 {

    /* package-private */ combaseapi_h$constants$0() {}
    static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {
    });

    static final int COM_RIGHTS_EXECUTE() { return (int)1L; }

    static final int COM_RIGHTS_EXECUTE_LOCAL() { return (int)2L; }

    static final int COM_RIGHTS_EXECUTE_REMOTE() { return (int)4L; }

    static final int COM_RIGHTS_ACTIVATE_LOCAL() { return (int)8L; }

    static final int COM_RIGHTS_ACTIVATE_REMOTE() { return (int)16L; }

    static final int COM_RIGHTS_RESERVED1() { return (int)32L; }

    static final int COM_RIGHTS_RESERVED2() { return (int)64L; }

    static final int CWMO_MAX_HANDLES() { return (int)56L; }

    static final int REGCLS_SINGLEUSE() { return (int)0L; }

    static final int REGCLS_MULTIPLEUSE() { return (int)1L; }

    static final int REGCLS_MULTI_SEPARATE() { return (int)2L; }

    static final int REGCLS_SUSPENDED() { return (int)4L; }

    static final int REGCLS_SURROGATE() { return (int)8L; }

    static final int REGCLS_AGILE() { return (int)16L; }

    static final int COINITBASE_MULTITHREADED() { return (int)0L; }

    static final FunctionDescriptor CoGetMalloc$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetMalloc$FUNC() { return CoGetMalloc$FUNC_; }

    static final MethodHandle CoGetMalloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetMalloc",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        CoGetMalloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetMalloc$MH() { return CoGetMalloc$MH_; }

    static final FunctionDescriptor CreateStreamOnHGlobal$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateStreamOnHGlobal$FUNC() { return CreateStreamOnHGlobal$FUNC_; }

    static final MethodHandle CreateStreamOnHGlobal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateStreamOnHGlobal",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CreateStreamOnHGlobal$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateStreamOnHGlobal$MH() { return CreateStreamOnHGlobal$MH_; }

    static final FunctionDescriptor GetHGlobalFromStream$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetHGlobalFromStream$FUNC() { return GetHGlobalFromStream$FUNC_; }

    static final MethodHandle GetHGlobalFromStream$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetHGlobalFromStream",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetHGlobalFromStream$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetHGlobalFromStream$MH() { return GetHGlobalFromStream$MH_; }

    static final FunctionDescriptor CoUninitialize$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor CoUninitialize$FUNC() { return CoUninitialize$FUNC_; }

    static final MethodHandle CoUninitialize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoUninitialize",
        "()V",
        CoUninitialize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoUninitialize$MH() { return CoUninitialize$MH_; }

    static final FunctionDescriptor CoGetCurrentProcess$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoGetCurrentProcess$FUNC() { return CoGetCurrentProcess$FUNC_; }

    static final MethodHandle CoGetCurrentProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetCurrentProcess",
        "()I",
        CoGetCurrentProcess$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetCurrentProcess$MH() { return CoGetCurrentProcess$MH_; }

    static final FunctionDescriptor CoInitializeEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoInitializeEx$FUNC() { return CoInitializeEx$FUNC_; }

    static final MethodHandle CoInitializeEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoInitializeEx",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CoInitializeEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoInitializeEx$MH() { return CoInitializeEx$MH_; }

    static final FunctionDescriptor CoGetCallerTID$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetCallerTID$FUNC() { return CoGetCallerTID$FUNC_; }

    static final MethodHandle CoGetCallerTID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetCallerTID",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetCallerTID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetCallerTID$MH() { return CoGetCallerTID$MH_; }

    static final FunctionDescriptor CoGetCurrentLogicalThreadId$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetCurrentLogicalThreadId$FUNC() { return CoGetCurrentLogicalThreadId$FUNC_; }

    static final MethodHandle CoGetCurrentLogicalThreadId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetCurrentLogicalThreadId",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetCurrentLogicalThreadId$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetCurrentLogicalThreadId$MH() { return CoGetCurrentLogicalThreadId$MH_; }

    static final FunctionDescriptor CoGetContextToken$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetContextToken$FUNC() { return CoGetContextToken$FUNC_; }

    static final MethodHandle CoGetContextToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetContextToken",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetContextToken$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetContextToken$MH() { return CoGetContextToken$MH_; }

    static final FunctionDescriptor CoGetDefaultContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetDefaultContext$FUNC() { return CoGetDefaultContext$FUNC_; }

    static final MethodHandle CoGetDefaultContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetDefaultContext",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetDefaultContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetDefaultContext$MH() { return CoGetDefaultContext$MH_; }

    static final FunctionDescriptor CoGetApartmentType$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetApartmentType$FUNC() { return CoGetApartmentType$FUNC_; }

    static final MethodHandle CoGetApartmentType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetApartmentType",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetApartmentType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetApartmentType$MH() { return CoGetApartmentType$MH_; }

    static final MemoryLayout tagServerInformation$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwServerPid"),
        C_LONG.withName("dwServerTid"),
        C_LONGLONG.withName("ui64ServerAddress")
    ).withName("tagServerInformation");
    static final jdk.incubator.foreign.MemoryLayout tagServerInformation$struct$LAYOUT() { return tagServerInformation$struct$LAYOUT_; }

    static final MemoryLayout tagServerInformation$dwServerPid$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagServerInformation$dwServerPid$LAYOUT() { return tagServerInformation$dwServerPid$LAYOUT_; }

    static final VarHandle tagServerInformation$dwServerPid$VH_ = tagServerInformation$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwServerPid"));
    static final java.lang.invoke.VarHandle tagServerInformation$dwServerPid$VH() { return tagServerInformation$dwServerPid$VH_; }

    static final MemoryLayout tagServerInformation$dwServerTid$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagServerInformation$dwServerTid$LAYOUT() { return tagServerInformation$dwServerTid$LAYOUT_; }

    static final VarHandle tagServerInformation$dwServerTid$VH_ = tagServerInformation$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwServerTid"));
    static final java.lang.invoke.VarHandle tagServerInformation$dwServerTid$VH() { return tagServerInformation$dwServerTid$VH_; }

    static final MemoryLayout tagServerInformation$ui64ServerAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagServerInformation$ui64ServerAddress$LAYOUT() { return tagServerInformation$ui64ServerAddress$LAYOUT_; }

    static final VarHandle tagServerInformation$ui64ServerAddress$VH_ = tagServerInformation$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ui64ServerAddress"));
    static final java.lang.invoke.VarHandle tagServerInformation$ui64ServerAddress$VH() { return tagServerInformation$ui64ServerAddress$VH_; }

    static final FunctionDescriptor CoDecodeProxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoDecodeProxy$FUNC() { return CoDecodeProxy$FUNC_; }

    static final MethodHandle CoDecodeProxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoDecodeProxy",
        "(IJLjdk/incubator/foreign/MemoryAddress;)I",
        CoDecodeProxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoDecodeProxy$MH() { return CoDecodeProxy$MH_; }

    static final MemoryLayout CO_MTA_USAGE_COOKIE__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("CO_MTA_USAGE_COOKIE__");
    static final jdk.incubator.foreign.MemoryLayout CO_MTA_USAGE_COOKIE__$struct$LAYOUT() { return CO_MTA_USAGE_COOKIE__$struct$LAYOUT_; }

    static final MemoryLayout CO_MTA_USAGE_COOKIE__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CO_MTA_USAGE_COOKIE__$unused$LAYOUT() { return CO_MTA_USAGE_COOKIE__$unused$LAYOUT_; }

    static final VarHandle CO_MTA_USAGE_COOKIE__$unused$VH_ = CO_MTA_USAGE_COOKIE__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle CO_MTA_USAGE_COOKIE__$unused$VH() { return CO_MTA_USAGE_COOKIE__$unused$VH_; }

    static final FunctionDescriptor CoIncrementMTAUsage$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoIncrementMTAUsage$FUNC() { return CoIncrementMTAUsage$FUNC_; }

    static final MethodHandle CoIncrementMTAUsage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoIncrementMTAUsage",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoIncrementMTAUsage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoIncrementMTAUsage$MH() { return CoIncrementMTAUsage$MH_; }

    static final FunctionDescriptor CoDecrementMTAUsage$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoDecrementMTAUsage$FUNC() { return CoDecrementMTAUsage$FUNC_; }

    static final MethodHandle CoDecrementMTAUsage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoDecrementMTAUsage",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoDecrementMTAUsage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoDecrementMTAUsage$MH() { return CoDecrementMTAUsage$MH_; }

    static final FunctionDescriptor CoAllowUnmarshalerCLSID$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoAllowUnmarshalerCLSID$FUNC() { return CoAllowUnmarshalerCLSID$FUNC_; }

    static final MethodHandle CoAllowUnmarshalerCLSID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoAllowUnmarshalerCLSID",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoAllowUnmarshalerCLSID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoAllowUnmarshalerCLSID$MH() { return CoAllowUnmarshalerCLSID$MH_; }

    static final FunctionDescriptor CoGetObjectContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetObjectContext$FUNC() { return CoGetObjectContext$FUNC_; }

    static final MethodHandle CoGetObjectContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetObjectContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetObjectContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetObjectContext$MH() { return CoGetObjectContext$MH_; }

    static final FunctionDescriptor CoGetClassObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetClassObject$FUNC() { return CoGetClassObject$FUNC_; }

    static final MethodHandle CoGetClassObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetClassObject",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetClassObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetClassObject$MH() { return CoGetClassObject$MH_; }

    static final FunctionDescriptor CoRegisterClassObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterClassObject$FUNC() { return CoRegisterClassObject$FUNC_; }

    static final MethodHandle CoRegisterClassObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterClassObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterClassObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterClassObject$MH() { return CoRegisterClassObject$MH_; }

    static final FunctionDescriptor CoRevokeClassObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRevokeClassObject$FUNC() { return CoRevokeClassObject$FUNC_; }

    static final MethodHandle CoRevokeClassObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRevokeClassObject",
        "(I)I",
        CoRevokeClassObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRevokeClassObject$MH() { return CoRevokeClassObject$MH_; }

    static final FunctionDescriptor CoResumeClassObjects$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoResumeClassObjects$FUNC() { return CoResumeClassObjects$FUNC_; }

    static final MethodHandle CoResumeClassObjects$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoResumeClassObjects",
        "()I",
        CoResumeClassObjects$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoResumeClassObjects$MH() { return CoResumeClassObjects$MH_; }

    static final FunctionDescriptor CoSuspendClassObjects$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoSuspendClassObjects$FUNC() { return CoSuspendClassObjects$FUNC_; }

    static final MethodHandle CoSuspendClassObjects$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoSuspendClassObjects",
        "()I",
        CoSuspendClassObjects$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoSuspendClassObjects$MH() { return CoSuspendClassObjects$MH_; }

    static final FunctionDescriptor CoAddRefServerProcess$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoAddRefServerProcess$FUNC() { return CoAddRefServerProcess$FUNC_; }

    static final MethodHandle CoAddRefServerProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoAddRefServerProcess",
        "()I",
        CoAddRefServerProcess$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoAddRefServerProcess$MH() { return CoAddRefServerProcess$MH_; }

    static final FunctionDescriptor CoReleaseServerProcess$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoReleaseServerProcess$FUNC() { return CoReleaseServerProcess$FUNC_; }

    static final MethodHandle CoReleaseServerProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoReleaseServerProcess",
        "()I",
        CoReleaseServerProcess$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoReleaseServerProcess$MH() { return CoReleaseServerProcess$MH_; }

    static final FunctionDescriptor CoGetPSClsid$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetPSClsid$FUNC() { return CoGetPSClsid$FUNC_; }

    static final MethodHandle CoGetPSClsid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetPSClsid",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetPSClsid$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetPSClsid$MH() { return CoGetPSClsid$MH_; }

    static final FunctionDescriptor CoRegisterPSClsid$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterPSClsid$FUNC() { return CoRegisterPSClsid$FUNC_; }

    static final MethodHandle CoRegisterPSClsid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterPSClsid",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterPSClsid$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterPSClsid$MH() { return CoRegisterPSClsid$MH_; }

    static final FunctionDescriptor CoRegisterSurrogate$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterSurrogate$FUNC() { return CoRegisterSurrogate$FUNC_; }

    static final MethodHandle CoRegisterSurrogate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterSurrogate",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterSurrogate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterSurrogate$MH() { return CoRegisterSurrogate$MH_; }

    static final FunctionDescriptor CoGetMarshalSizeMax$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetMarshalSizeMax$FUNC() { return CoGetMarshalSizeMax$FUNC_; }

    static final MethodHandle CoGetMarshalSizeMax$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetMarshalSizeMax",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        CoGetMarshalSizeMax$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetMarshalSizeMax$MH() { return CoGetMarshalSizeMax$MH_; }

    static final FunctionDescriptor CoMarshalInterface$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoMarshalInterface$FUNC() { return CoMarshalInterface$FUNC_; }

    static final MethodHandle CoMarshalInterface$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoMarshalInterface",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        CoMarshalInterface$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoMarshalInterface$MH() { return CoMarshalInterface$MH_; }

    static final FunctionDescriptor CoUnmarshalInterface$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoUnmarshalInterface$FUNC() { return CoUnmarshalInterface$FUNC_; }

    static final MethodHandle CoUnmarshalInterface$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoUnmarshalInterface",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoUnmarshalInterface$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoUnmarshalInterface$MH() { return CoUnmarshalInterface$MH_; }

    static final FunctionDescriptor CoMarshalHresult$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoMarshalHresult$FUNC() { return CoMarshalHresult$FUNC_; }

    static final MethodHandle CoMarshalHresult$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoMarshalHresult",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CoMarshalHresult$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoMarshalHresult$MH() { return CoMarshalHresult$MH_; }

    static final FunctionDescriptor CoUnmarshalHresult$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoUnmarshalHresult$FUNC() { return CoUnmarshalHresult$FUNC_; }

    static final MethodHandle CoUnmarshalHresult$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoUnmarshalHresult",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoUnmarshalHresult$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoUnmarshalHresult$MH() { return CoUnmarshalHresult$MH_; }

    static final FunctionDescriptor CoReleaseMarshalData$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoReleaseMarshalData$FUNC() { return CoReleaseMarshalData$FUNC_; }

    static final MethodHandle CoReleaseMarshalData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoReleaseMarshalData",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoReleaseMarshalData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoReleaseMarshalData$MH() { return CoReleaseMarshalData$MH_; }

    static final FunctionDescriptor CoDisconnectObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoDisconnectObject$FUNC() { return CoDisconnectObject$FUNC_; }

    static final MethodHandle CoDisconnectObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoDisconnectObject",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CoDisconnectObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoDisconnectObject$MH() { return CoDisconnectObject$MH_; }

    static final FunctionDescriptor CoLockObjectExternal$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoLockObjectExternal$FUNC() { return CoLockObjectExternal$FUNC_; }

    static final MethodHandle CoLockObjectExternal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoLockObjectExternal",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        CoLockObjectExternal$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoLockObjectExternal$MH() { return CoLockObjectExternal$MH_; }

    static final FunctionDescriptor CoGetStandardMarshal$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetStandardMarshal$FUNC() { return CoGetStandardMarshal$FUNC_; }

    static final MethodHandle CoGetStandardMarshal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetStandardMarshal",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CoGetStandardMarshal$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetStandardMarshal$MH() { return CoGetStandardMarshal$MH_; }

    static final FunctionDescriptor CoGetStdMarshalEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetStdMarshalEx$FUNC() { return CoGetStdMarshalEx$FUNC_; }

    static final MethodHandle CoGetStdMarshalEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetStdMarshalEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CoGetStdMarshalEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetStdMarshalEx$MH() { return CoGetStdMarshalEx$MH_; }

    static final int SMEXF_SERVER() { return (int)1L; }

    static final int SMEXF_HANDLER() { return (int)2L; }

    static final FunctionDescriptor CoIsHandlerConnected$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoIsHandlerConnected$FUNC() { return CoIsHandlerConnected$FUNC_; }

    static final MethodHandle CoIsHandlerConnected$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoIsHandlerConnected",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoIsHandlerConnected$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoIsHandlerConnected$MH() { return CoIsHandlerConnected$MH_; }

    static final FunctionDescriptor CoMarshalInterThreadInterfaceInStream$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoMarshalInterThreadInterfaceInStream$FUNC() { return CoMarshalInterThreadInterfaceInStream$FUNC_; }

    static final MethodHandle CoMarshalInterThreadInterfaceInStream$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoMarshalInterThreadInterfaceInStream",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoMarshalInterThreadInterfaceInStream$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoMarshalInterThreadInterfaceInStream$MH() { return CoMarshalInterThreadInterfaceInStream$MH_; }

    static final FunctionDescriptor CoGetInterfaceAndReleaseStream$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetInterfaceAndReleaseStream$FUNC() { return CoGetInterfaceAndReleaseStream$FUNC_; }

    static final MethodHandle CoGetInterfaceAndReleaseStream$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetInterfaceAndReleaseStream",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetInterfaceAndReleaseStream$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetInterfaceAndReleaseStream$MH() { return CoGetInterfaceAndReleaseStream$MH_; }

    static final FunctionDescriptor CoCreateFreeThreadedMarshaler$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCreateFreeThreadedMarshaler$FUNC() { return CoCreateFreeThreadedMarshaler$FUNC_; }

    static final MethodHandle CoCreateFreeThreadedMarshaler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCreateFreeThreadedMarshaler",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoCreateFreeThreadedMarshaler$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCreateFreeThreadedMarshaler$MH() { return CoCreateFreeThreadedMarshaler$MH_; }

    static final FunctionDescriptor CoFreeUnusedLibraries$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor CoFreeUnusedLibraries$FUNC() { return CoFreeUnusedLibraries$FUNC_; }

    static final MethodHandle CoFreeUnusedLibraries$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoFreeUnusedLibraries",
        "()V",
        CoFreeUnusedLibraries$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoFreeUnusedLibraries$MH() { return CoFreeUnusedLibraries$MH_; }

    static final FunctionDescriptor CoFreeUnusedLibrariesEx$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoFreeUnusedLibrariesEx$FUNC() { return CoFreeUnusedLibrariesEx$FUNC_; }

    static final MethodHandle CoFreeUnusedLibrariesEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoFreeUnusedLibrariesEx",
        "(II)V",
        CoFreeUnusedLibrariesEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoFreeUnusedLibrariesEx$MH() { return CoFreeUnusedLibrariesEx$MH_; }

    static final FunctionDescriptor CoDisconnectContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoDisconnectContext$FUNC() { return CoDisconnectContext$FUNC_; }

    static final MethodHandle CoDisconnectContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoDisconnectContext",
        "(I)I",
        CoDisconnectContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoDisconnectContext$MH() { return CoDisconnectContext$MH_; }

    static final FunctionDescriptor CoInitializeSecurity$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoInitializeSecurity$FUNC() { return CoInitializeSecurity$FUNC_; }

    static final MethodHandle CoInitializeSecurity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoInitializeSecurity",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CoInitializeSecurity$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoInitializeSecurity$MH() { return CoInitializeSecurity$MH_; }

    static final FunctionDescriptor CoGetCallContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetCallContext$FUNC() { return CoGetCallContext$FUNC_; }

    static final MethodHandle CoGetCallContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetCallContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetCallContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetCallContext$MH() { return CoGetCallContext$MH_; }

    static final FunctionDescriptor CoQueryProxyBlanket$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoQueryProxyBlanket$FUNC() { return CoQueryProxyBlanket$FUNC_; }

    static final MethodHandle CoQueryProxyBlanket$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoQueryProxyBlanket",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoQueryProxyBlanket$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoQueryProxyBlanket$MH() { return CoQueryProxyBlanket$MH_; }

    static final FunctionDescriptor CoSetProxyBlanket$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoSetProxyBlanket$FUNC() { return CoSetProxyBlanket$FUNC_; }

    static final MethodHandle CoSetProxyBlanket$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoSetProxyBlanket",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        CoSetProxyBlanket$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoSetProxyBlanket$MH() { return CoSetProxyBlanket$MH_; }

    static final FunctionDescriptor CoCopyProxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCopyProxy$FUNC() { return CoCopyProxy$FUNC_; }

    static final MethodHandle CoCopyProxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCopyProxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoCopyProxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCopyProxy$MH() { return CoCopyProxy$MH_; }

    static final FunctionDescriptor CoQueryClientBlanket$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoQueryClientBlanket$FUNC() { return CoQueryClientBlanket$FUNC_; }

    static final MethodHandle CoQueryClientBlanket$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoQueryClientBlanket",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoQueryClientBlanket$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoQueryClientBlanket$MH() { return CoQueryClientBlanket$MH_; }

    static final FunctionDescriptor CoImpersonateClient$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoImpersonateClient$FUNC() { return CoImpersonateClient$FUNC_; }

    static final MethodHandle CoImpersonateClient$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoImpersonateClient",
        "()I",
        CoImpersonateClient$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoImpersonateClient$MH() { return CoImpersonateClient$MH_; }

    static final FunctionDescriptor CoRevertToSelf$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoRevertToSelf$FUNC() { return CoRevertToSelf$FUNC_; }

    static final MethodHandle CoRevertToSelf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRevertToSelf",
        "()I",
        CoRevertToSelf$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRevertToSelf$MH() { return CoRevertToSelf$MH_; }

    static final FunctionDescriptor CoQueryAuthenticationServices$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoQueryAuthenticationServices$FUNC() { return CoQueryAuthenticationServices$FUNC_; }

    static final MethodHandle CoQueryAuthenticationServices$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoQueryAuthenticationServices",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoQueryAuthenticationServices$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoQueryAuthenticationServices$MH() { return CoQueryAuthenticationServices$MH_; }

    static final FunctionDescriptor CoSwitchCallContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoSwitchCallContext$FUNC() { return CoSwitchCallContext$FUNC_; }

    static final MethodHandle CoSwitchCallContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoSwitchCallContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoSwitchCallContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoSwitchCallContext$MH() { return CoSwitchCallContext$MH_; }

    static final FunctionDescriptor CoCreateInstance$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCreateInstance$FUNC() { return CoCreateInstance$FUNC_; }

    static final MethodHandle CoCreateInstance$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCreateInstance",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoCreateInstance$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCreateInstance$MH() { return CoCreateInstance$MH_; }

    static final FunctionDescriptor CoCreateInstanceEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCreateInstanceEx$FUNC() { return CoCreateInstanceEx$FUNC_; }

    static final MethodHandle CoCreateInstanceEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCreateInstanceEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CoCreateInstanceEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCreateInstanceEx$MH() { return CoCreateInstanceEx$MH_; }

    static final FunctionDescriptor CoCreateInstanceFromApp$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCreateInstanceFromApp$FUNC() { return CoCreateInstanceFromApp$FUNC_; }

    static final MethodHandle CoCreateInstanceFromApp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCreateInstanceFromApp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CoCreateInstanceFromApp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCreateInstanceFromApp$MH() { return CoCreateInstanceFromApp$MH_; }

    static final FunctionDescriptor CoRegisterActivationFilter$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterActivationFilter$FUNC() { return CoRegisterActivationFilter$FUNC_; }

    static final MethodHandle CoRegisterActivationFilter$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterActivationFilter",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterActivationFilter$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterActivationFilter$MH() { return CoRegisterActivationFilter$MH_; }

    static final FunctionDescriptor CoGetCancelObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetCancelObject$FUNC() { return CoGetCancelObject$FUNC_; }

    static final MethodHandle CoGetCancelObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetCancelObject",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetCancelObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetCancelObject$MH() { return CoGetCancelObject$MH_; }

    static final FunctionDescriptor CoSetCancelObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoSetCancelObject$FUNC() { return CoSetCancelObject$FUNC_; }

    static final MethodHandle CoSetCancelObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoSetCancelObject",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoSetCancelObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoSetCancelObject$MH() { return CoSetCancelObject$MH_; }

    static final FunctionDescriptor CoCancelCall$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCancelCall$FUNC() { return CoCancelCall$FUNC_; }

    static final MethodHandle CoCancelCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCancelCall",
        "(II)I",
        CoCancelCall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCancelCall$MH() { return CoCancelCall$MH_; }

    static final FunctionDescriptor CoTestCancel$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoTestCancel$FUNC() { return CoTestCancel$FUNC_; }

    static final MethodHandle CoTestCancel$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoTestCancel",
        "()I",
        CoTestCancel$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoTestCancel$MH() { return CoTestCancel$MH_; }

    static final FunctionDescriptor CoEnableCallCancellation$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoEnableCallCancellation$FUNC() { return CoEnableCallCancellation$FUNC_; }

    static final MethodHandle CoEnableCallCancellation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoEnableCallCancellation",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoEnableCallCancellation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoEnableCallCancellation$MH() { return CoEnableCallCancellation$MH_; }

    static final FunctionDescriptor CoDisableCallCancellation$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoDisableCallCancellation$FUNC() { return CoDisableCallCancellation$FUNC_; }

    static final MethodHandle CoDisableCallCancellation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoDisableCallCancellation",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoDisableCallCancellation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoDisableCallCancellation$MH() { return CoDisableCallCancellation$MH_; }

    static final FunctionDescriptor StringFromCLSID$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StringFromCLSID$FUNC() { return StringFromCLSID$FUNC_; }

    static final MethodHandle StringFromCLSID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StringFromCLSID",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        StringFromCLSID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StringFromCLSID$MH() { return StringFromCLSID$MH_; }

    static final FunctionDescriptor CLSIDFromString$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CLSIDFromString$FUNC() { return CLSIDFromString$FUNC_; }

    static final MethodHandle CLSIDFromString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CLSIDFromString",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CLSIDFromString$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CLSIDFromString$MH() { return CLSIDFromString$MH_; }

    static final FunctionDescriptor StringFromIID$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StringFromIID$FUNC() { return StringFromIID$FUNC_; }

    static final MethodHandle StringFromIID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StringFromIID",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        StringFromIID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StringFromIID$MH() { return StringFromIID$MH_; }

    static final FunctionDescriptor IIDFromString$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IIDFromString$FUNC() { return IIDFromString$FUNC_; }

    static final MethodHandle IIDFromString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IIDFromString",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IIDFromString$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IIDFromString$MH() { return IIDFromString$MH_; }

    static final FunctionDescriptor ProgIDFromCLSID$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ProgIDFromCLSID$FUNC() { return ProgIDFromCLSID$FUNC_; }

    static final MethodHandle ProgIDFromCLSID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ProgIDFromCLSID",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ProgIDFromCLSID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ProgIDFromCLSID$MH() { return ProgIDFromCLSID$MH_; }

    static final FunctionDescriptor CLSIDFromProgID$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CLSIDFromProgID$FUNC() { return CLSIDFromProgID$FUNC_; }

    static final MethodHandle CLSIDFromProgID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CLSIDFromProgID",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CLSIDFromProgID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CLSIDFromProgID$MH() { return CLSIDFromProgID$MH_; }

    static final FunctionDescriptor StringFromGUID2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor StringFromGUID2$FUNC() { return StringFromGUID2$FUNC_; }

    static final MethodHandle StringFromGUID2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StringFromGUID2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        StringFromGUID2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StringFromGUID2$MH() { return StringFromGUID2$MH_; }

    static final FunctionDescriptor CoCreateGuid$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCreateGuid$FUNC() { return CoCreateGuid$FUNC_; }

    static final MethodHandle CoCreateGuid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCreateGuid",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoCreateGuid$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCreateGuid$MH() { return CoCreateGuid$MH_; }

    static final FunctionDescriptor PropVariantCopy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PropVariantCopy$FUNC() { return PropVariantCopy$FUNC_; }

    static final MethodHandle PropVariantCopy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PropVariantCopy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        PropVariantCopy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PropVariantCopy$MH() { return PropVariantCopy$MH_; }

    static final FunctionDescriptor PropVariantClear$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PropVariantClear$FUNC() { return PropVariantClear$FUNC_; }

    static final MethodHandle PropVariantClear$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PropVariantClear",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        PropVariantClear$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PropVariantClear$MH() { return PropVariantClear$MH_; }

    static final FunctionDescriptor FreePropVariantArray$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor FreePropVariantArray$FUNC() { return FreePropVariantArray$FUNC_; }

    static final MethodHandle FreePropVariantArray$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreePropVariantArray",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        FreePropVariantArray$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FreePropVariantArray$MH() { return FreePropVariantArray$MH_; }

    static final FunctionDescriptor CoWaitForMultipleHandles$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoWaitForMultipleHandles$FUNC() { return CoWaitForMultipleHandles$FUNC_; }

    static final MethodHandle CoWaitForMultipleHandles$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoWaitForMultipleHandles",
        "(IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoWaitForMultipleHandles$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoWaitForMultipleHandles$MH() { return CoWaitForMultipleHandles$MH_; }

    static final int COWAIT_DEFAULT() { return (int)0L; }

    static final int COWAIT_WAITALL() { return (int)1L; }

    static final int COWAIT_ALERTABLE() { return (int)2L; }

    static final int COWAIT_INPUTAVAILABLE() { return (int)4L; }

    static final int COWAIT_DISPATCH_CALLS() { return (int)8L; }

    static final int COWAIT_DISPATCH_WINDOW_MESSAGES() { return (int)16L; }

    static final int CWMO_DEFAULT() { return (int)0L; }

    static final int CWMO_DISPATCH_CALLS() { return (int)1L; }

    static final int CWMO_DISPATCH_WINDOW_MESSAGES() { return (int)2L; }

    static final FunctionDescriptor CoWaitForMultipleObjects$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoWaitForMultipleObjects$FUNC() { return CoWaitForMultipleObjects$FUNC_; }

    static final MethodHandle CoWaitForMultipleObjects$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoWaitForMultipleObjects",
        "(IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoWaitForMultipleObjects$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoWaitForMultipleObjects$MH() { return CoWaitForMultipleObjects$MH_; }

    static final FunctionDescriptor CoGetTreatAsClass$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetTreatAsClass$FUNC() { return CoGetTreatAsClass$FUNC_; }

    static final MethodHandle CoGetTreatAsClass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetTreatAsClass",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetTreatAsClass$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetTreatAsClass$MH() { return CoGetTreatAsClass$MH_; }

    static final FunctionDescriptor CoInvalidateRemoteMachineBindings$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoInvalidateRemoteMachineBindings$FUNC() { return CoInvalidateRemoteMachineBindings$FUNC_; }

    static final MethodHandle CoInvalidateRemoteMachineBindings$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoInvalidateRemoteMachineBindings",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoInvalidateRemoteMachineBindings$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoInvalidateRemoteMachineBindings$MH() { return CoInvalidateRemoteMachineBindings$MH_; }

    static final int AGILEREFERENCE_DEFAULT() { return (int)0L; }

    static final int AGILEREFERENCE_DELAYEDMARSHAL() { return (int)1L; }

    static final FunctionDescriptor RoGetAgileReference$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RoGetAgileReference$FUNC() { return RoGetAgileReference$FUNC_; }

    static final MethodHandle RoGetAgileReference$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RoGetAgileReference",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RoGetAgileReference$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RoGetAgileReference$MH() { return RoGetAgileReference$MH_; }

    static final FunctionDescriptor DllGetClassObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DllGetClassObject$FUNC() { return DllGetClassObject$FUNC_; }

    static final MethodHandle DllGetClassObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DllGetClassObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DllGetClassObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DllGetClassObject$MH() { return DllGetClassObject$MH_; }

    static final FunctionDescriptor DllCanUnloadNow$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor DllCanUnloadNow$FUNC() { return DllCanUnloadNow$FUNC_; }

    static final MethodHandle DllCanUnloadNow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DllCanUnloadNow",
        "()I",
        DllCanUnloadNow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DllCanUnloadNow$MH() { return DllCanUnloadNow$MH_; }

    static final FunctionDescriptor CoTaskMemAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoTaskMemAlloc$FUNC() { return CoTaskMemAlloc$FUNC_; }

    static final MethodHandle CoTaskMemAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoTaskMemAlloc",
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        CoTaskMemAlloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoTaskMemAlloc$MH() { return CoTaskMemAlloc$MH_; }

    static final FunctionDescriptor CoTaskMemRealloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoTaskMemRealloc$FUNC() { return CoTaskMemRealloc$FUNC_; }

    static final MethodHandle CoTaskMemRealloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoTaskMemRealloc",
        "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        CoTaskMemRealloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoTaskMemRealloc$MH() { return CoTaskMemRealloc$MH_; }

    static final FunctionDescriptor CoTaskMemFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoTaskMemFree$FUNC() { return CoTaskMemFree$FUNC_; }

    static final MethodHandle CoTaskMemFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoTaskMemFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        CoTaskMemFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoTaskMemFree$MH() { return CoTaskMemFree$MH_; }

    static final FunctionDescriptor CoFileTimeNow$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoFileTimeNow$FUNC() { return CoFileTimeNow$FUNC_; }

    static final MethodHandle CoFileTimeNow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoFileTimeNow",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoFileTimeNow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoFileTimeNow$MH() { return CoFileTimeNow$MH_; }

    static final FunctionDescriptor CLSIDFromProgIDEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CLSIDFromProgIDEx$FUNC() { return CLSIDFromProgIDEx$FUNC_; }

    static final MethodHandle CLSIDFromProgIDEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CLSIDFromProgIDEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CLSIDFromProgIDEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CLSIDFromProgIDEx$MH() { return CLSIDFromProgIDEx$MH_; }

    static final MemoryLayout CO_DEVICE_CATALOG_COOKIE__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("CO_DEVICE_CATALOG_COOKIE__");
    static final jdk.incubator.foreign.MemoryLayout CO_DEVICE_CATALOG_COOKIE__$struct$LAYOUT() { return CO_DEVICE_CATALOG_COOKIE__$struct$LAYOUT_; }

    static final MemoryLayout CO_DEVICE_CATALOG_COOKIE__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CO_DEVICE_CATALOG_COOKIE__$unused$LAYOUT() { return CO_DEVICE_CATALOG_COOKIE__$unused$LAYOUT_; }

    static final VarHandle CO_DEVICE_CATALOG_COOKIE__$unused$VH_ = CO_DEVICE_CATALOG_COOKIE__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle CO_DEVICE_CATALOG_COOKIE__$unused$VH() { return CO_DEVICE_CATALOG_COOKIE__$unused$VH_; }

    static final FunctionDescriptor CoRegisterDeviceCatalog$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterDeviceCatalog$FUNC() { return CoRegisterDeviceCatalog$FUNC_; }

    static final MethodHandle CoRegisterDeviceCatalog$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterDeviceCatalog",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterDeviceCatalog$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterDeviceCatalog$MH() { return CoRegisterDeviceCatalog$MH_; }

    static final FunctionDescriptor CoRevokeDeviceCatalog$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRevokeDeviceCatalog$FUNC() { return CoRevokeDeviceCatalog$FUNC_; }

    static final MethodHandle CoRevokeDeviceCatalog$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRevokeDeviceCatalog",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRevokeDeviceCatalog$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRevokeDeviceCatalog$MH() { return CoRevokeDeviceCatalog$MH_; }

    static final int CLSCTX_INPROC() { return (int)3L; }

    static final int CLSCTX_ALL() { return (int)23L; }

    static final int CLSCTX_SERVER() { return (int)21L; }

    static final MemorySegment _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX$SEGMENT_CONSTANT_ = CLinker.toCString("");
    static final jdk.incubator.foreign.MemorySegment _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX() { return _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX$SEGMENT_CONSTANT_; }

}

