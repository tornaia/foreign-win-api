// Generated by jextract

package com.github.tornaia.foreign.win.api.searchapi.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
public final class combaseapi_h  {

    /* package-private */ combaseapi_h() {}
    public static @C("int") int COM_RIGHTS_EXECUTE() {
        return combaseapi_h$constants$0.COM_RIGHTS_EXECUTE();
    }
    public static @C("int") int COM_RIGHTS_EXECUTE_LOCAL() {
        return combaseapi_h$constants$0.COM_RIGHTS_EXECUTE_LOCAL();
    }
    public static @C("int") int COM_RIGHTS_EXECUTE_REMOTE() {
        return combaseapi_h$constants$0.COM_RIGHTS_EXECUTE_REMOTE();
    }
    public static @C("int") int COM_RIGHTS_ACTIVATE_LOCAL() {
        return combaseapi_h$constants$0.COM_RIGHTS_ACTIVATE_LOCAL();
    }
    public static @C("int") int COM_RIGHTS_ACTIVATE_REMOTE() {
        return combaseapi_h$constants$0.COM_RIGHTS_ACTIVATE_REMOTE();
    }
    public static @C("int") int COM_RIGHTS_RESERVED1() {
        return combaseapi_h$constants$0.COM_RIGHTS_RESERVED1();
    }
    public static @C("int") int COM_RIGHTS_RESERVED2() {
        return combaseapi_h$constants$0.COM_RIGHTS_RESERVED2();
    }
    public static @C("int") int CWMO_MAX_HANDLES() {
        return combaseapi_h$constants$0.CWMO_MAX_HANDLES();
    }
    public static @C("int") int REGCLS_SINGLEUSE() {
        return combaseapi_h$constants$0.REGCLS_SINGLEUSE();
    }
    public static @C("int") int REGCLS_MULTIPLEUSE() {
        return combaseapi_h$constants$0.REGCLS_MULTIPLEUSE();
    }
    public static @C("int") int REGCLS_MULTI_SEPARATE() {
        return combaseapi_h$constants$0.REGCLS_MULTI_SEPARATE();
    }
    public static @C("int") int REGCLS_SUSPENDED() {
        return combaseapi_h$constants$0.REGCLS_SUSPENDED();
    }
    public static @C("int") int REGCLS_SURROGATE() {
        return combaseapi_h$constants$0.REGCLS_SURROGATE();
    }
    public static @C("int") int REGCLS_AGILE() {
        return combaseapi_h$constants$0.REGCLS_AGILE();
    }
    public static @C("int") int COINITBASE_MULTITHREADED() {
        return combaseapi_h$constants$0.COINITBASE_MULTITHREADED();
    }
    public static  MethodHandle CoGetMalloc$MH() {
        return combaseapi_h$constants$0.CoGetMalloc$MH();
    }
    public static @C("HRESULT") int CoGetMalloc (@C("DWORD") int dwMemContext, @C("LPMALLOC*") Addressable ppMalloc) {
        try {
            return (int)combaseapi_h$constants$0.CoGetMalloc$MH().invokeExact(dwMemContext, ppMalloc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateStreamOnHGlobal$MH() {
        return combaseapi_h$constants$0.CreateStreamOnHGlobal$MH();
    }
    public static @C("HRESULT") int CreateStreamOnHGlobal (@C("HGLOBAL") Addressable hGlobal, @C("BOOL") int fDeleteOnRelease, @C("LPSTREAM*") Addressable ppstm) {
        try {
            return (int)combaseapi_h$constants$0.CreateStreamOnHGlobal$MH().invokeExact(hGlobal.address(), fDeleteOnRelease, ppstm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetHGlobalFromStream$MH() {
        return combaseapi_h$constants$0.GetHGlobalFromStream$MH();
    }
    public static @C("HRESULT") int GetHGlobalFromStream (@C("LPSTREAM") Addressable pstm, @C("HGLOBAL*") Addressable phglobal) {
        try {
            return (int)combaseapi_h$constants$0.GetHGlobalFromStream$MH().invokeExact(pstm.address(), phglobal.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoUninitialize$MH() {
        return combaseapi_h$constants$0.CoUninitialize$MH();
    }
    public static void CoUninitialize () {
        try {
            combaseapi_h$constants$0.CoUninitialize$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetCurrentProcess$MH() {
        return combaseapi_h$constants$0.CoGetCurrentProcess$MH();
    }
    public static @C("DWORD") int CoGetCurrentProcess () {
        try {
            return (int)combaseapi_h$constants$0.CoGetCurrentProcess$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoInitializeEx$MH() {
        return combaseapi_h$constants$0.CoInitializeEx$MH();
    }
    public static @C("HRESULT") int CoInitializeEx (@C("LPVOID") Addressable pvReserved, @C("DWORD") int dwCoInit) {
        try {
            return (int)combaseapi_h$constants$0.CoInitializeEx$MH().invokeExact(pvReserved.address(), dwCoInit);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetCallerTID$MH() {
        return combaseapi_h$constants$0.CoGetCallerTID$MH();
    }
    public static @C("HRESULT") int CoGetCallerTID (@C("LPDWORD") Addressable lpdwTID) {
        try {
            return (int)combaseapi_h$constants$0.CoGetCallerTID$MH().invokeExact(lpdwTID.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetCurrentLogicalThreadId$MH() {
        return combaseapi_h$constants$0.CoGetCurrentLogicalThreadId$MH();
    }
    public static @C("HRESULT") int CoGetCurrentLogicalThreadId (@C("GUID*") Addressable pguid) {
        try {
            return (int)combaseapi_h$constants$0.CoGetCurrentLogicalThreadId$MH().invokeExact(pguid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetContextToken$MH() {
        return combaseapi_h$constants$0.CoGetContextToken$MH();
    }
    public static @C("HRESULT") int CoGetContextToken (@C("ULONG_PTR*") Addressable pToken) {
        try {
            return (int)combaseapi_h$constants$0.CoGetContextToken$MH().invokeExact(pToken.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetDefaultContext$MH() {
        return combaseapi_h$constants$0.CoGetDefaultContext$MH();
    }
    public static @C("HRESULT") int CoGetDefaultContext (@C("APTTYPE") int aptType, @C("const IID*") Addressable riid, @C("void**") Addressable ppv) {
        try {
            return (int)combaseapi_h$constants$0.CoGetDefaultContext$MH().invokeExact(aptType, riid.address(), ppv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetApartmentType$MH() {
        return combaseapi_h$constants$0.CoGetApartmentType$MH();
    }
    public static @C("HRESULT") int CoGetApartmentType (@C("APTTYPE*") Addressable pAptType, @C("APTTYPEQUALIFIER*") Addressable pAptQualifier) {
        try {
            return (int)combaseapi_h$constants$0.CoGetApartmentType$MH().invokeExact(pAptType.address(), pAptQualifier.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    @C("struct tagServerInformation")public static class tagServerInformation {

        /* package-private */ tagServerInformation() {}
        public static MemoryLayout $LAYOUT() {
            return combaseapi_h$constants$0.tagServerInformation$struct$LAYOUT();
        }
        public static VarHandle dwServerPid$VH() {
            return combaseapi_h$constants$0.tagServerInformation$dwServerPid$VH();
        }
        public static  @C("DWORD") int dwServerPid$get(@C("struct tagServerInformation") MemorySegment seg) {
            return (int)combaseapi_h$constants$0.tagServerInformation$dwServerPid$VH().get(seg);
        }
        public static  @C("DWORD") int dwServerPid$get(@C("struct tagServerInformation") MemorySegment seg, long index) {
            return (int)combaseapi_h$constants$0.tagServerInformation$dwServerPid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwServerPid$set(@C("struct tagServerInformation") MemorySegment seg, @C("DWORD") int x) {
            combaseapi_h$constants$0.tagServerInformation$dwServerPid$VH().set(seg, x);
        }
        public static void dwServerPid$set(@C("struct tagServerInformation") MemorySegment seg, long index, @C("DWORD") int x) {
            combaseapi_h$constants$0.tagServerInformation$dwServerPid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwServerTid$VH() {
            return combaseapi_h$constants$0.tagServerInformation$dwServerTid$VH();
        }
        public static  @C("DWORD") int dwServerTid$get(@C("struct tagServerInformation") MemorySegment seg) {
            return (int)combaseapi_h$constants$0.tagServerInformation$dwServerTid$VH().get(seg);
        }
        public static  @C("DWORD") int dwServerTid$get(@C("struct tagServerInformation") MemorySegment seg, long index) {
            return (int)combaseapi_h$constants$0.tagServerInformation$dwServerTid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwServerTid$set(@C("struct tagServerInformation") MemorySegment seg, @C("DWORD") int x) {
            combaseapi_h$constants$0.tagServerInformation$dwServerTid$VH().set(seg, x);
        }
        public static void dwServerTid$set(@C("struct tagServerInformation") MemorySegment seg, long index, @C("DWORD") int x) {
            combaseapi_h$constants$0.tagServerInformation$dwServerTid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ui64ServerAddress$VH() {
            return combaseapi_h$constants$0.tagServerInformation$ui64ServerAddress$VH();
        }
        public static  @C("UINT64") long ui64ServerAddress$get(@C("struct tagServerInformation") MemorySegment seg) {
            return (long)combaseapi_h$constants$0.tagServerInformation$ui64ServerAddress$VH().get(seg);
        }
        public static  @C("UINT64") long ui64ServerAddress$get(@C("struct tagServerInformation") MemorySegment seg, long index) {
            return (long)combaseapi_h$constants$0.tagServerInformation$ui64ServerAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ui64ServerAddress$set(@C("struct tagServerInformation") MemorySegment seg, @C("UINT64") long x) {
            combaseapi_h$constants$0.tagServerInformation$ui64ServerAddress$VH().set(seg, x);
        }
        public static void ui64ServerAddress$set(@C("struct tagServerInformation") MemorySegment seg, long index, @C("UINT64") long x) {
            combaseapi_h$constants$0.tagServerInformation$ui64ServerAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct tagServerInformation") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct tagServerInformation") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct tagServerInformation[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct tagServerInformation[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct tagServerInformation*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct tagServerInformation*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct tagServerInformation") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct tagServerInformation")public static class ServerInformation extends tagServerInformation {

        /* package-private */ ServerInformation() {}
    }

    public static  MethodHandle CoDecodeProxy$MH() {
        return combaseapi_h$constants$0.CoDecodeProxy$MH();
    }
    public static @C("HRESULT") int CoDecodeProxy (@C("DWORD") int dwClientPid, @C("UINT64") long ui64ProxyAddress, @C("PServerInformation") Addressable pServerInformation) {
        try {
            return (int)combaseapi_h$constants$0.CoDecodeProxy$MH().invokeExact(dwClientPid, ui64ProxyAddress, pServerInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    @C("struct CO_MTA_USAGE_COOKIE__")public static class CO_MTA_USAGE_COOKIE__ {

        /* package-private */ CO_MTA_USAGE_COOKIE__() {}
        public static MemoryLayout $LAYOUT() {
            return combaseapi_h$constants$0.CO_MTA_USAGE_COOKIE__$struct$LAYOUT();
        }
        public static VarHandle unused$VH() {
            return combaseapi_h$constants$0.CO_MTA_USAGE_COOKIE__$unused$VH();
        }
        public static  @C("int") int unused$get(@C("struct CO_MTA_USAGE_COOKIE__") MemorySegment seg) {
            return (int)combaseapi_h$constants$0.CO_MTA_USAGE_COOKIE__$unused$VH().get(seg);
        }
        public static  @C("int") int unused$get(@C("struct CO_MTA_USAGE_COOKIE__") MemorySegment seg, long index) {
            return (int)combaseapi_h$constants$0.CO_MTA_USAGE_COOKIE__$unused$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void unused$set(@C("struct CO_MTA_USAGE_COOKIE__") MemorySegment seg, @C("int") int x) {
            combaseapi_h$constants$0.CO_MTA_USAGE_COOKIE__$unused$VH().set(seg, x);
        }
        public static void unused$set(@C("struct CO_MTA_USAGE_COOKIE__") MemorySegment seg, long index, @C("int") int x) {
            combaseapi_h$constants$0.CO_MTA_USAGE_COOKIE__$unused$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CO_MTA_USAGE_COOKIE__") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CO_MTA_USAGE_COOKIE__") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CO_MTA_USAGE_COOKIE__[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CO_MTA_USAGE_COOKIE__[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CO_MTA_USAGE_COOKIE__*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CO_MTA_USAGE_COOKIE__*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CO_MTA_USAGE_COOKIE__") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle CoIncrementMTAUsage$MH() {
        return combaseapi_h$constants$0.CoIncrementMTAUsage$MH();
    }
    public static @C("HRESULT") int CoIncrementMTAUsage (@C("CO_MTA_USAGE_COOKIE*") Addressable pCookie) {
        try {
            return (int)combaseapi_h$constants$0.CoIncrementMTAUsage$MH().invokeExact(pCookie.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoDecrementMTAUsage$MH() {
        return combaseapi_h$constants$0.CoDecrementMTAUsage$MH();
    }
    public static @C("HRESULT") int CoDecrementMTAUsage (@C("CO_MTA_USAGE_COOKIE") Addressable Cookie) {
        try {
            return (int)combaseapi_h$constants$0.CoDecrementMTAUsage$MH().invokeExact(Cookie.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoAllowUnmarshalerCLSID$MH() {
        return combaseapi_h$constants$0.CoAllowUnmarshalerCLSID$MH();
    }
    public static @C("HRESULT") int CoAllowUnmarshalerCLSID (@C("const IID*") Addressable clsid) {
        try {
            return (int)combaseapi_h$constants$0.CoAllowUnmarshalerCLSID$MH().invokeExact(clsid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetObjectContext$MH() {
        return combaseapi_h$constants$0.CoGetObjectContext$MH();
    }
    public static @C("HRESULT") int CoGetObjectContext (@C("const IID*") Addressable riid, @C("LPVOID*") Addressable ppv) {
        try {
            return (int)combaseapi_h$constants$0.CoGetObjectContext$MH().invokeExact(riid.address(), ppv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetClassObject$MH() {
        return combaseapi_h$constants$0.CoGetClassObject$MH();
    }
    public static @C("HRESULT") int CoGetClassObject (@C("const IID*") Addressable rclsid, @C("DWORD") int dwClsContext, @C("LPVOID") Addressable pvReserved, @C("const IID*") Addressable riid, @C("LPVOID*") Addressable ppv) {
        try {
            return (int)combaseapi_h$constants$0.CoGetClassObject$MH().invokeExact(rclsid.address(), dwClsContext, pvReserved.address(), riid.address(), ppv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoRegisterClassObject$MH() {
        return combaseapi_h$constants$0.CoRegisterClassObject$MH();
    }
    public static @C("HRESULT") int CoRegisterClassObject (@C("const IID*") Addressable rclsid, @C("LPUNKNOWN") Addressable pUnk, @C("DWORD") int dwClsContext, @C("DWORD") int flags, @C("LPDWORD") Addressable lpdwRegister) {
        try {
            return (int)combaseapi_h$constants$0.CoRegisterClassObject$MH().invokeExact(rclsid.address(), pUnk.address(), dwClsContext, flags, lpdwRegister.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoRevokeClassObject$MH() {
        return combaseapi_h$constants$0.CoRevokeClassObject$MH();
    }
    public static @C("HRESULT") int CoRevokeClassObject (@C("DWORD") int dwRegister) {
        try {
            return (int)combaseapi_h$constants$0.CoRevokeClassObject$MH().invokeExact(dwRegister);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoResumeClassObjects$MH() {
        return combaseapi_h$constants$0.CoResumeClassObjects$MH();
    }
    public static @C("HRESULT") int CoResumeClassObjects () {
        try {
            return (int)combaseapi_h$constants$0.CoResumeClassObjects$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoSuspendClassObjects$MH() {
        return combaseapi_h$constants$0.CoSuspendClassObjects$MH();
    }
    public static @C("HRESULT") int CoSuspendClassObjects () {
        try {
            return (int)combaseapi_h$constants$0.CoSuspendClassObjects$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoAddRefServerProcess$MH() {
        return combaseapi_h$constants$0.CoAddRefServerProcess$MH();
    }
    public static @C("ULONG") int CoAddRefServerProcess () {
        try {
            return (int)combaseapi_h$constants$0.CoAddRefServerProcess$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoReleaseServerProcess$MH() {
        return combaseapi_h$constants$0.CoReleaseServerProcess$MH();
    }
    public static @C("ULONG") int CoReleaseServerProcess () {
        try {
            return (int)combaseapi_h$constants$0.CoReleaseServerProcess$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetPSClsid$MH() {
        return combaseapi_h$constants$0.CoGetPSClsid$MH();
    }
    public static @C("HRESULT") int CoGetPSClsid (@C("const IID*") Addressable riid, @C("CLSID*") Addressable pClsid) {
        try {
            return (int)combaseapi_h$constants$0.CoGetPSClsid$MH().invokeExact(riid.address(), pClsid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoRegisterPSClsid$MH() {
        return combaseapi_h$constants$0.CoRegisterPSClsid$MH();
    }
    public static @C("HRESULT") int CoRegisterPSClsid (@C("const IID*") Addressable riid, @C("const IID*") Addressable rclsid) {
        try {
            return (int)combaseapi_h$constants$0.CoRegisterPSClsid$MH().invokeExact(riid.address(), rclsid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoRegisterSurrogate$MH() {
        return combaseapi_h$constants$0.CoRegisterSurrogate$MH();
    }
    public static @C("HRESULT") int CoRegisterSurrogate (@C("LPSURROGATE") Addressable pSurrogate) {
        try {
            return (int)combaseapi_h$constants$0.CoRegisterSurrogate$MH().invokeExact(pSurrogate.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetMarshalSizeMax$MH() {
        return combaseapi_h$constants$0.CoGetMarshalSizeMax$MH();
    }
    public static @C("HRESULT") int CoGetMarshalSizeMax (@C("ULONG*") Addressable pulSize, @C("const IID*") Addressable riid, @C("LPUNKNOWN") Addressable pUnk, @C("DWORD") int dwDestContext, @C("LPVOID") Addressable pvDestContext, @C("DWORD") int mshlflags) {
        try {
            return (int)combaseapi_h$constants$0.CoGetMarshalSizeMax$MH().invokeExact(pulSize.address(), riid.address(), pUnk.address(), dwDestContext, pvDestContext.address(), mshlflags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoMarshalInterface$MH() {
        return combaseapi_h$constants$0.CoMarshalInterface$MH();
    }
    public static @C("HRESULT") int CoMarshalInterface (@C("LPSTREAM") Addressable pStm, @C("const IID*") Addressable riid, @C("LPUNKNOWN") Addressable pUnk, @C("DWORD") int dwDestContext, @C("LPVOID") Addressable pvDestContext, @C("DWORD") int mshlflags) {
        try {
            return (int)combaseapi_h$constants$0.CoMarshalInterface$MH().invokeExact(pStm.address(), riid.address(), pUnk.address(), dwDestContext, pvDestContext.address(), mshlflags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoUnmarshalInterface$MH() {
        return combaseapi_h$constants$0.CoUnmarshalInterface$MH();
    }
    public static @C("HRESULT") int CoUnmarshalInterface (@C("LPSTREAM") Addressable pStm, @C("const IID*") Addressable riid, @C("LPVOID*") Addressable ppv) {
        try {
            return (int)combaseapi_h$constants$0.CoUnmarshalInterface$MH().invokeExact(pStm.address(), riid.address(), ppv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoMarshalHresult$MH() {
        return combaseapi_h$constants$0.CoMarshalHresult$MH();
    }
    public static @C("HRESULT") int CoMarshalHresult (@C("LPSTREAM") Addressable pstm, @C("HRESULT") int hresult) {
        try {
            return (int)combaseapi_h$constants$0.CoMarshalHresult$MH().invokeExact(pstm.address(), hresult);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoUnmarshalHresult$MH() {
        return combaseapi_h$constants$0.CoUnmarshalHresult$MH();
    }
    public static @C("HRESULT") int CoUnmarshalHresult (@C("LPSTREAM") Addressable pstm, @C("HRESULT*") Addressable phresult) {
        try {
            return (int)combaseapi_h$constants$0.CoUnmarshalHresult$MH().invokeExact(pstm.address(), phresult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoReleaseMarshalData$MH() {
        return combaseapi_h$constants$0.CoReleaseMarshalData$MH();
    }
    public static @C("HRESULT") int CoReleaseMarshalData (@C("LPSTREAM") Addressable pStm) {
        try {
            return (int)combaseapi_h$constants$0.CoReleaseMarshalData$MH().invokeExact(pStm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoDisconnectObject$MH() {
        return combaseapi_h$constants$0.CoDisconnectObject$MH();
    }
    public static @C("HRESULT") int CoDisconnectObject (@C("LPUNKNOWN") Addressable pUnk, @C("DWORD") int dwReserved) {
        try {
            return (int)combaseapi_h$constants$0.CoDisconnectObject$MH().invokeExact(pUnk.address(), dwReserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoLockObjectExternal$MH() {
        return combaseapi_h$constants$0.CoLockObjectExternal$MH();
    }
    public static @C("HRESULT") int CoLockObjectExternal (@C("LPUNKNOWN") Addressable pUnk, @C("BOOL") int fLock, @C("BOOL") int fLastUnlockReleases) {
        try {
            return (int)combaseapi_h$constants$0.CoLockObjectExternal$MH().invokeExact(pUnk.address(), fLock, fLastUnlockReleases);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetStandardMarshal$MH() {
        return combaseapi_h$constants$0.CoGetStandardMarshal$MH();
    }
    public static @C("HRESULT") int CoGetStandardMarshal (@C("const IID*") Addressable riid, @C("LPUNKNOWN") Addressable pUnk, @C("DWORD") int dwDestContext, @C("LPVOID") Addressable pvDestContext, @C("DWORD") int mshlflags, @C("LPMARSHAL*") Addressable ppMarshal) {
        try {
            return (int)combaseapi_h$constants$0.CoGetStandardMarshal$MH().invokeExact(riid.address(), pUnk.address(), dwDestContext, pvDestContext.address(), mshlflags, ppMarshal.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetStdMarshalEx$MH() {
        return combaseapi_h$constants$0.CoGetStdMarshalEx$MH();
    }
    public static @C("HRESULT") int CoGetStdMarshalEx (@C("LPUNKNOWN") Addressable pUnkOuter, @C("DWORD") int smexflags, @C("LPUNKNOWN*") Addressable ppUnkInner) {
        try {
            return (int)combaseapi_h$constants$0.CoGetStdMarshalEx$MH().invokeExact(pUnkOuter.address(), smexflags, ppUnkInner.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int SMEXF_SERVER() {
        return combaseapi_h$constants$0.SMEXF_SERVER();
    }
    public static @C("int") int SMEXF_HANDLER() {
        return combaseapi_h$constants$0.SMEXF_HANDLER();
    }
    public static  MethodHandle CoIsHandlerConnected$MH() {
        return combaseapi_h$constants$0.CoIsHandlerConnected$MH();
    }
    public static @C("BOOL") int CoIsHandlerConnected (@C("LPUNKNOWN") Addressable pUnk) {
        try {
            return (int)combaseapi_h$constants$0.CoIsHandlerConnected$MH().invokeExact(pUnk.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoMarshalInterThreadInterfaceInStream$MH() {
        return combaseapi_h$constants$0.CoMarshalInterThreadInterfaceInStream$MH();
    }
    public static @C("HRESULT") int CoMarshalInterThreadInterfaceInStream (@C("const IID*") Addressable riid, @C("LPUNKNOWN") Addressable pUnk, @C("LPSTREAM*") Addressable ppStm) {
        try {
            return (int)combaseapi_h$constants$0.CoMarshalInterThreadInterfaceInStream$MH().invokeExact(riid.address(), pUnk.address(), ppStm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetInterfaceAndReleaseStream$MH() {
        return combaseapi_h$constants$0.CoGetInterfaceAndReleaseStream$MH();
    }
    public static @C("HRESULT") int CoGetInterfaceAndReleaseStream (@C("LPSTREAM") Addressable pStm, @C("const IID*") Addressable iid, @C("LPVOID*") Addressable ppv) {
        try {
            return (int)combaseapi_h$constants$0.CoGetInterfaceAndReleaseStream$MH().invokeExact(pStm.address(), iid.address(), ppv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoCreateFreeThreadedMarshaler$MH() {
        return combaseapi_h$constants$0.CoCreateFreeThreadedMarshaler$MH();
    }
    public static @C("HRESULT") int CoCreateFreeThreadedMarshaler (@C("LPUNKNOWN") Addressable punkOuter, @C("LPUNKNOWN*") Addressable ppunkMarshal) {
        try {
            return (int)combaseapi_h$constants$0.CoCreateFreeThreadedMarshaler$MH().invokeExact(punkOuter.address(), ppunkMarshal.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoFreeUnusedLibraries$MH() {
        return combaseapi_h$constants$0.CoFreeUnusedLibraries$MH();
    }
    public static void CoFreeUnusedLibraries () {
        try {
            combaseapi_h$constants$0.CoFreeUnusedLibraries$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoFreeUnusedLibrariesEx$MH() {
        return combaseapi_h$constants$0.CoFreeUnusedLibrariesEx$MH();
    }
    public static void CoFreeUnusedLibrariesEx (@C("DWORD") int dwUnloadDelay, @C("DWORD") int dwReserved) {
        try {
            combaseapi_h$constants$0.CoFreeUnusedLibrariesEx$MH().invokeExact(dwUnloadDelay, dwReserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoDisconnectContext$MH() {
        return combaseapi_h$constants$0.CoDisconnectContext$MH();
    }
    public static @C("HRESULT") int CoDisconnectContext (@C("DWORD") int dwTimeout) {
        try {
            return (int)combaseapi_h$constants$0.CoDisconnectContext$MH().invokeExact(dwTimeout);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoInitializeSecurity$MH() {
        return combaseapi_h$constants$0.CoInitializeSecurity$MH();
    }
    public static @C("HRESULT") int CoInitializeSecurity (@C("PSECURITY_DESCRIPTOR") Addressable pSecDesc, @C("LONG") int cAuthSvc, @C("SOLE_AUTHENTICATION_SERVICE*") Addressable asAuthSvc, @C("void*") Addressable pReserved1, @C("DWORD") int dwAuthnLevel, @C("DWORD") int dwImpLevel, @C("void*") Addressable pAuthList, @C("DWORD") int dwCapabilities, @C("void*") Addressable pReserved3) {
        try {
            return (int)combaseapi_h$constants$0.CoInitializeSecurity$MH().invokeExact(pSecDesc.address(), cAuthSvc, asAuthSvc.address(), pReserved1.address(), dwAuthnLevel, dwImpLevel, pAuthList.address(), dwCapabilities, pReserved3.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetCallContext$MH() {
        return combaseapi_h$constants$0.CoGetCallContext$MH();
    }
    public static @C("HRESULT") int CoGetCallContext (@C("const IID*") Addressable riid, @C("void**") Addressable ppInterface) {
        try {
            return (int)combaseapi_h$constants$0.CoGetCallContext$MH().invokeExact(riid.address(), ppInterface.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoQueryProxyBlanket$MH() {
        return combaseapi_h$constants$0.CoQueryProxyBlanket$MH();
    }
    public static @C("HRESULT") int CoQueryProxyBlanket (@C("IUnknown*") Addressable pProxy, @C("DWORD*") Addressable pwAuthnSvc, @C("DWORD*") Addressable pAuthzSvc, @C("LPOLESTR*") Addressable pServerPrincName, @C("DWORD*") Addressable pAuthnLevel, @C("DWORD*") Addressable pImpLevel, @C("RPC_AUTH_IDENTITY_HANDLE*") Addressable pAuthInfo, @C("DWORD*") Addressable pCapabilites) {
        try {
            return (int)combaseapi_h$constants$0.CoQueryProxyBlanket$MH().invokeExact(pProxy.address(), pwAuthnSvc.address(), pAuthzSvc.address(), pServerPrincName.address(), pAuthnLevel.address(), pImpLevel.address(), pAuthInfo.address(), pCapabilites.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoSetProxyBlanket$MH() {
        return combaseapi_h$constants$0.CoSetProxyBlanket$MH();
    }
    public static @C("HRESULT") int CoSetProxyBlanket (@C("IUnknown*") Addressable pProxy, @C("DWORD") int dwAuthnSvc, @C("DWORD") int dwAuthzSvc, @C("OLECHAR*") Addressable pServerPrincName, @C("DWORD") int dwAuthnLevel, @C("DWORD") int dwImpLevel, @C("RPC_AUTH_IDENTITY_HANDLE") Addressable pAuthInfo, @C("DWORD") int dwCapabilities) {
        try {
            return (int)combaseapi_h$constants$0.CoSetProxyBlanket$MH().invokeExact(pProxy.address(), dwAuthnSvc, dwAuthzSvc, pServerPrincName.address(), dwAuthnLevel, dwImpLevel, pAuthInfo.address(), dwCapabilities);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoCopyProxy$MH() {
        return combaseapi_h$constants$0.CoCopyProxy$MH();
    }
    public static @C("HRESULT") int CoCopyProxy (@C("IUnknown*") Addressable pProxy, @C("IUnknown**") Addressable ppCopy) {
        try {
            return (int)combaseapi_h$constants$0.CoCopyProxy$MH().invokeExact(pProxy.address(), ppCopy.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoQueryClientBlanket$MH() {
        return combaseapi_h$constants$0.CoQueryClientBlanket$MH();
    }
    public static @C("HRESULT") int CoQueryClientBlanket (@C("DWORD*") Addressable pAuthnSvc, @C("DWORD*") Addressable pAuthzSvc, @C("LPOLESTR*") Addressable pServerPrincName, @C("DWORD*") Addressable pAuthnLevel, @C("DWORD*") Addressable pImpLevel, @C("RPC_AUTHZ_HANDLE*") Addressable pPrivs, @C("DWORD*") Addressable pCapabilities) {
        try {
            return (int)combaseapi_h$constants$0.CoQueryClientBlanket$MH().invokeExact(pAuthnSvc.address(), pAuthzSvc.address(), pServerPrincName.address(), pAuthnLevel.address(), pImpLevel.address(), pPrivs.address(), pCapabilities.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoImpersonateClient$MH() {
        return combaseapi_h$constants$0.CoImpersonateClient$MH();
    }
    public static @C("HRESULT") int CoImpersonateClient () {
        try {
            return (int)combaseapi_h$constants$0.CoImpersonateClient$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoRevertToSelf$MH() {
        return combaseapi_h$constants$0.CoRevertToSelf$MH();
    }
    public static @C("HRESULT") int CoRevertToSelf () {
        try {
            return (int)combaseapi_h$constants$0.CoRevertToSelf$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoQueryAuthenticationServices$MH() {
        return combaseapi_h$constants$0.CoQueryAuthenticationServices$MH();
    }
    public static @C("HRESULT") int CoQueryAuthenticationServices (@C("DWORD*") Addressable pcAuthSvc, @C("SOLE_AUTHENTICATION_SERVICE**") Addressable asAuthSvc) {
        try {
            return (int)combaseapi_h$constants$0.CoQueryAuthenticationServices$MH().invokeExact(pcAuthSvc.address(), asAuthSvc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoSwitchCallContext$MH() {
        return combaseapi_h$constants$0.CoSwitchCallContext$MH();
    }
    public static @C("HRESULT") int CoSwitchCallContext (@C("IUnknown*") Addressable pNewObject, @C("IUnknown**") Addressable ppOldObject) {
        try {
            return (int)combaseapi_h$constants$0.CoSwitchCallContext$MH().invokeExact(pNewObject.address(), ppOldObject.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoCreateInstance$MH() {
        return combaseapi_h$constants$0.CoCreateInstance$MH();
    }
    public static @C("HRESULT") int CoCreateInstance (@C("const IID*") Addressable rclsid, @C("LPUNKNOWN") Addressable pUnkOuter, @C("DWORD") int dwClsContext, @C("const IID*") Addressable riid, @C("LPVOID*") Addressable ppv) {
        try {
            return (int)combaseapi_h$constants$0.CoCreateInstance$MH().invokeExact(rclsid.address(), pUnkOuter.address(), dwClsContext, riid.address(), ppv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoCreateInstanceEx$MH() {
        return combaseapi_h$constants$0.CoCreateInstanceEx$MH();
    }
    public static @C("HRESULT") int CoCreateInstanceEx (@C("const IID*") Addressable Clsid, @C("IUnknown*") Addressable punkOuter, @C("DWORD") int dwClsCtx, @C("COSERVERINFO*") Addressable pServerInfo, @C("DWORD") int dwCount, @C("MULTI_QI*") Addressable pResults) {
        try {
            return (int)combaseapi_h$constants$0.CoCreateInstanceEx$MH().invokeExact(Clsid.address(), punkOuter.address(), dwClsCtx, pServerInfo.address(), dwCount, pResults.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoCreateInstanceFromApp$MH() {
        return combaseapi_h$constants$0.CoCreateInstanceFromApp$MH();
    }
    public static @C("HRESULT") int CoCreateInstanceFromApp (@C("const IID*") Addressable Clsid, @C("IUnknown*") Addressable punkOuter, @C("DWORD") int dwClsCtx, @C("PVOID") Addressable reserved, @C("DWORD") int dwCount, @C("MULTI_QI*") Addressable pResults) {
        try {
            return (int)combaseapi_h$constants$0.CoCreateInstanceFromApp$MH().invokeExact(Clsid.address(), punkOuter.address(), dwClsCtx, reserved.address(), dwCount, pResults.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoRegisterActivationFilter$MH() {
        return combaseapi_h$constants$0.CoRegisterActivationFilter$MH();
    }
    public static @C("HRESULT") int CoRegisterActivationFilter (@C("IActivationFilter*") Addressable pActivationFilter) {
        try {
            return (int)combaseapi_h$constants$0.CoRegisterActivationFilter$MH().invokeExact(pActivationFilter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetCancelObject$MH() {
        return combaseapi_h$constants$0.CoGetCancelObject$MH();
    }
    public static @C("HRESULT") int CoGetCancelObject (@C("DWORD") int dwThreadId, @C("const IID*") Addressable iid, @C("void**") Addressable ppUnk) {
        try {
            return (int)combaseapi_h$constants$0.CoGetCancelObject$MH().invokeExact(dwThreadId, iid.address(), ppUnk.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoSetCancelObject$MH() {
        return combaseapi_h$constants$0.CoSetCancelObject$MH();
    }
    public static @C("HRESULT") int CoSetCancelObject (@C("IUnknown*") Addressable pUnk) {
        try {
            return (int)combaseapi_h$constants$0.CoSetCancelObject$MH().invokeExact(pUnk.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoCancelCall$MH() {
        return combaseapi_h$constants$0.CoCancelCall$MH();
    }
    public static @C("HRESULT") int CoCancelCall (@C("DWORD") int dwThreadId, @C("ULONG") int ulTimeout) {
        try {
            return (int)combaseapi_h$constants$0.CoCancelCall$MH().invokeExact(dwThreadId, ulTimeout);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoTestCancel$MH() {
        return combaseapi_h$constants$0.CoTestCancel$MH();
    }
    public static @C("HRESULT") int CoTestCancel () {
        try {
            return (int)combaseapi_h$constants$0.CoTestCancel$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoEnableCallCancellation$MH() {
        return combaseapi_h$constants$0.CoEnableCallCancellation$MH();
    }
    public static @C("HRESULT") int CoEnableCallCancellation (@C("LPVOID") Addressable pReserved) {
        try {
            return (int)combaseapi_h$constants$0.CoEnableCallCancellation$MH().invokeExact(pReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoDisableCallCancellation$MH() {
        return combaseapi_h$constants$0.CoDisableCallCancellation$MH();
    }
    public static @C("HRESULT") int CoDisableCallCancellation (@C("LPVOID") Addressable pReserved) {
        try {
            return (int)combaseapi_h$constants$0.CoDisableCallCancellation$MH().invokeExact(pReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle StringFromCLSID$MH() {
        return combaseapi_h$constants$0.StringFromCLSID$MH();
    }
    public static @C("HRESULT") int StringFromCLSID (@C("const IID*") Addressable rclsid, @C("LPOLESTR*") Addressable lplpsz) {
        try {
            return (int)combaseapi_h$constants$0.StringFromCLSID$MH().invokeExact(rclsid.address(), lplpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CLSIDFromString$MH() {
        return combaseapi_h$constants$0.CLSIDFromString$MH();
    }
    public static @C("HRESULT") int CLSIDFromString (@C("LPCOLESTR") Addressable lpsz, @C("LPCLSID") Addressable pclsid) {
        try {
            return (int)combaseapi_h$constants$0.CLSIDFromString$MH().invokeExact(lpsz.address(), pclsid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle StringFromIID$MH() {
        return combaseapi_h$constants$0.StringFromIID$MH();
    }
    public static @C("HRESULT") int StringFromIID (@C("const IID*") Addressable rclsid, @C("LPOLESTR*") Addressable lplpsz) {
        try {
            return (int)combaseapi_h$constants$0.StringFromIID$MH().invokeExact(rclsid.address(), lplpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IIDFromString$MH() {
        return combaseapi_h$constants$0.IIDFromString$MH();
    }
    public static @C("HRESULT") int IIDFromString (@C("LPCOLESTR") Addressable lpsz, @C("LPIID") Addressable lpiid) {
        try {
            return (int)combaseapi_h$constants$0.IIDFromString$MH().invokeExact(lpsz.address(), lpiid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ProgIDFromCLSID$MH() {
        return combaseapi_h$constants$0.ProgIDFromCLSID$MH();
    }
    public static @C("HRESULT") int ProgIDFromCLSID (@C("const IID*") Addressable clsid, @C("LPOLESTR*") Addressable lplpszProgID) {
        try {
            return (int)combaseapi_h$constants$0.ProgIDFromCLSID$MH().invokeExact(clsid.address(), lplpszProgID.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CLSIDFromProgID$MH() {
        return combaseapi_h$constants$0.CLSIDFromProgID$MH();
    }
    public static @C("HRESULT") int CLSIDFromProgID (@C("LPCOLESTR") Addressable lpszProgID, @C("LPCLSID") Addressable lpclsid) {
        try {
            return (int)combaseapi_h$constants$0.CLSIDFromProgID$MH().invokeExact(lpszProgID.address(), lpclsid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle StringFromGUID2$MH() {
        return combaseapi_h$constants$0.StringFromGUID2$MH();
    }
    public static @C("int") int StringFromGUID2 (@C("const GUID*") Addressable rguid, @C("LPOLESTR") Addressable lpsz, @C("int") int cchMax) {
        try {
            return (int)combaseapi_h$constants$0.StringFromGUID2$MH().invokeExact(rguid.address(), lpsz.address(), cchMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoCreateGuid$MH() {
        return combaseapi_h$constants$0.CoCreateGuid$MH();
    }
    public static @C("HRESULT") int CoCreateGuid (@C("GUID*") Addressable pguid) {
        try {
            return (int)combaseapi_h$constants$0.CoCreateGuid$MH().invokeExact(pguid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PropVariantCopy$MH() {
        return combaseapi_h$constants$0.PropVariantCopy$MH();
    }
    public static @C("HRESULT") int PropVariantCopy (@C("PROPVARIANT*") Addressable pvarDest, @C("const PROPVARIANT*") Addressable pvarSrc) {
        try {
            return (int)combaseapi_h$constants$0.PropVariantCopy$MH().invokeExact(pvarDest.address(), pvarSrc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PropVariantClear$MH() {
        return combaseapi_h$constants$0.PropVariantClear$MH();
    }
    public static @C("HRESULT") int PropVariantClear (@C("PROPVARIANT*") Addressable pvar) {
        try {
            return (int)combaseapi_h$constants$0.PropVariantClear$MH().invokeExact(pvar.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreePropVariantArray$MH() {
        return combaseapi_h$constants$0.FreePropVariantArray$MH();
    }
    public static @C("HRESULT") int FreePropVariantArray (@C("ULONG") int cVariants, @C("PROPVARIANT*") Addressable rgvars) {
        try {
            return (int)combaseapi_h$constants$0.FreePropVariantArray$MH().invokeExact(cVariants, rgvars.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoWaitForMultipleHandles$MH() {
        return combaseapi_h$constants$0.CoWaitForMultipleHandles$MH();
    }
    public static @C("HRESULT") int CoWaitForMultipleHandles (@C("DWORD") int dwFlags, @C("DWORD") int dwTimeout, @C("ULONG") int cHandles, @C("LPHANDLE") Addressable pHandles, @C("LPDWORD") Addressable lpdwindex) {
        try {
            return (int)combaseapi_h$constants$0.CoWaitForMultipleHandles$MH().invokeExact(dwFlags, dwTimeout, cHandles, pHandles.address(), lpdwindex.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int COWAIT_DEFAULT() {
        return combaseapi_h$constants$0.COWAIT_DEFAULT();
    }
    public static @C("int") int COWAIT_WAITALL() {
        return combaseapi_h$constants$0.COWAIT_WAITALL();
    }
    public static @C("int") int COWAIT_ALERTABLE() {
        return combaseapi_h$constants$0.COWAIT_ALERTABLE();
    }
    public static @C("int") int COWAIT_INPUTAVAILABLE() {
        return combaseapi_h$constants$0.COWAIT_INPUTAVAILABLE();
    }
    public static @C("int") int COWAIT_DISPATCH_CALLS() {
        return combaseapi_h$constants$0.COWAIT_DISPATCH_CALLS();
    }
    public static @C("int") int COWAIT_DISPATCH_WINDOW_MESSAGES() {
        return combaseapi_h$constants$0.COWAIT_DISPATCH_WINDOW_MESSAGES();
    }
    public static @C("int") int CWMO_DEFAULT() {
        return combaseapi_h$constants$0.CWMO_DEFAULT();
    }
    public static @C("int") int CWMO_DISPATCH_CALLS() {
        return combaseapi_h$constants$0.CWMO_DISPATCH_CALLS();
    }
    public static @C("int") int CWMO_DISPATCH_WINDOW_MESSAGES() {
        return combaseapi_h$constants$0.CWMO_DISPATCH_WINDOW_MESSAGES();
    }
    public static  MethodHandle CoWaitForMultipleObjects$MH() {
        return combaseapi_h$constants$0.CoWaitForMultipleObjects$MH();
    }
    public static @C("HRESULT") int CoWaitForMultipleObjects (@C("DWORD") int dwFlags, @C("DWORD") int dwTimeout, @C("ULONG") int cHandles, @C("const HANDLE*") Addressable pHandles, @C("LPDWORD") Addressable lpdwindex) {
        try {
            return (int)combaseapi_h$constants$0.CoWaitForMultipleObjects$MH().invokeExact(dwFlags, dwTimeout, cHandles, pHandles.address(), lpdwindex.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoGetTreatAsClass$MH() {
        return combaseapi_h$constants$0.CoGetTreatAsClass$MH();
    }
    public static @C("HRESULT") int CoGetTreatAsClass (@C("const IID*") Addressable clsidOld, @C("LPCLSID") Addressable pClsidNew) {
        try {
            return (int)combaseapi_h$constants$0.CoGetTreatAsClass$MH().invokeExact(clsidOld.address(), pClsidNew.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoInvalidateRemoteMachineBindings$MH() {
        return combaseapi_h$constants$0.CoInvalidateRemoteMachineBindings$MH();
    }
    public static @C("HRESULT") int CoInvalidateRemoteMachineBindings (@C("LPOLESTR") Addressable pszMachineName) {
        try {
            return (int)combaseapi_h$constants$0.CoInvalidateRemoteMachineBindings$MH().invokeExact(pszMachineName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int AGILEREFERENCE_DEFAULT() {
        return combaseapi_h$constants$0.AGILEREFERENCE_DEFAULT();
    }
    public static @C("int") int AGILEREFERENCE_DELAYEDMARSHAL() {
        return combaseapi_h$constants$0.AGILEREFERENCE_DELAYEDMARSHAL();
    }
    public static  MethodHandle RoGetAgileReference$MH() {
        return combaseapi_h$constants$0.RoGetAgileReference$MH();
    }
    public static @C("HRESULT") int RoGetAgileReference (@C("enum AgileReferenceOptions") int options, @C("const IID*") Addressable riid, @C("IUnknown*") Addressable pUnk, @C("IAgileReference**") Addressable ppAgileReference) {
        try {
            return (int)combaseapi_h$constants$0.RoGetAgileReference$MH().invokeExact(options, riid.address(), pUnk.address(), ppAgileReference.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DllGetClassObject$MH() {
        return combaseapi_h$constants$0.DllGetClassObject$MH();
    }
    public static @C("HRESULT") int DllGetClassObject (@C("const IID*") Addressable rclsid, @C("const IID*") Addressable riid, @C("LPVOID*") Addressable ppv) {
        try {
            return (int)combaseapi_h$constants$0.DllGetClassObject$MH().invokeExact(rclsid.address(), riid.address(), ppv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DllCanUnloadNow$MH() {
        return combaseapi_h$constants$0.DllCanUnloadNow$MH();
    }
    public static @C("HRESULT") int DllCanUnloadNow () {
        try {
            return (int)combaseapi_h$constants$0.DllCanUnloadNow$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoTaskMemAlloc$MH() {
        return combaseapi_h$constants$0.CoTaskMemAlloc$MH();
    }
    public static @C("LPVOID") MemoryAddress CoTaskMemAlloc (@C("SIZE_T") long cb) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)combaseapi_h$constants$0.CoTaskMemAlloc$MH().invokeExact(cb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoTaskMemRealloc$MH() {
        return combaseapi_h$constants$0.CoTaskMemRealloc$MH();
    }
    public static @C("LPVOID") MemoryAddress CoTaskMemRealloc (@C("LPVOID") Addressable pv, @C("SIZE_T") long cb) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)combaseapi_h$constants$0.CoTaskMemRealloc$MH().invokeExact(pv.address(), cb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoTaskMemFree$MH() {
        return combaseapi_h$constants$0.CoTaskMemFree$MH();
    }
    public static void CoTaskMemFree (@C("LPVOID") Addressable pv) {
        try {
            combaseapi_h$constants$0.CoTaskMemFree$MH().invokeExact(pv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoFileTimeNow$MH() {
        return combaseapi_h$constants$0.CoFileTimeNow$MH();
    }
    public static @C("HRESULT") int CoFileTimeNow (@C("FILETIME*") Addressable lpFileTime) {
        try {
            return (int)combaseapi_h$constants$0.CoFileTimeNow$MH().invokeExact(lpFileTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CLSIDFromProgIDEx$MH() {
        return combaseapi_h$constants$0.CLSIDFromProgIDEx$MH();
    }
    public static @C("HRESULT") int CLSIDFromProgIDEx (@C("LPCOLESTR") Addressable lpszProgID, @C("LPCLSID") Addressable lpclsid) {
        try {
            return (int)combaseapi_h$constants$0.CLSIDFromProgIDEx$MH().invokeExact(lpszProgID.address(), lpclsid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    @C("struct CO_DEVICE_CATALOG_COOKIE__")public static class CO_DEVICE_CATALOG_COOKIE__ {

        /* package-private */ CO_DEVICE_CATALOG_COOKIE__() {}
        public static MemoryLayout $LAYOUT() {
            return combaseapi_h$constants$0.CO_DEVICE_CATALOG_COOKIE__$struct$LAYOUT();
        }
        public static VarHandle unused$VH() {
            return combaseapi_h$constants$0.CO_DEVICE_CATALOG_COOKIE__$unused$VH();
        }
        public static  @C("int") int unused$get(@C("struct CO_DEVICE_CATALOG_COOKIE__") MemorySegment seg) {
            return (int)combaseapi_h$constants$0.CO_DEVICE_CATALOG_COOKIE__$unused$VH().get(seg);
        }
        public static  @C("int") int unused$get(@C("struct CO_DEVICE_CATALOG_COOKIE__") MemorySegment seg, long index) {
            return (int)combaseapi_h$constants$0.CO_DEVICE_CATALOG_COOKIE__$unused$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void unused$set(@C("struct CO_DEVICE_CATALOG_COOKIE__") MemorySegment seg, @C("int") int x) {
            combaseapi_h$constants$0.CO_DEVICE_CATALOG_COOKIE__$unused$VH().set(seg, x);
        }
        public static void unused$set(@C("struct CO_DEVICE_CATALOG_COOKIE__") MemorySegment seg, long index, @C("int") int x) {
            combaseapi_h$constants$0.CO_DEVICE_CATALOG_COOKIE__$unused$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CO_DEVICE_CATALOG_COOKIE__") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CO_DEVICE_CATALOG_COOKIE__") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CO_DEVICE_CATALOG_COOKIE__[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CO_DEVICE_CATALOG_COOKIE__[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CO_DEVICE_CATALOG_COOKIE__*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CO_DEVICE_CATALOG_COOKIE__*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CO_DEVICE_CATALOG_COOKIE__") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle CoRegisterDeviceCatalog$MH() {
        return combaseapi_h$constants$0.CoRegisterDeviceCatalog$MH();
    }
    public static @C("HRESULT") int CoRegisterDeviceCatalog (@C("PCWSTR") Addressable deviceInstanceId, @C("CO_DEVICE_CATALOG_COOKIE*") Addressable cookie) {
        try {
            return (int)combaseapi_h$constants$0.CoRegisterDeviceCatalog$MH().invokeExact(deviceInstanceId.address(), cookie.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CoRevokeDeviceCatalog$MH() {
        return combaseapi_h$constants$0.CoRevokeDeviceCatalog$MH();
    }
    public static @C("HRESULT") int CoRevokeDeviceCatalog (@C("CO_DEVICE_CATALOG_COOKIE") Addressable cookie) {
        try {
            return (int)combaseapi_h$constants$0.CoRevokeDeviceCatalog$MH().invokeExact(cookie.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CLSCTX_INPROC() {
        return combaseapi_h$constants$0.CLSCTX_INPROC();
    }
    public static @C("int") int CLSCTX_ALL() {
        return combaseapi_h$constants$0.CLSCTX_ALL();
    }
    public static @C("int") int CLSCTX_SERVER() {
        return combaseapi_h$constants$0.CLSCTX_SERVER();
    }
    public static @C("char*") MemorySegment _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX() {
        return combaseapi_h$constants$0._CRT_INTERNAL_COMBASE_SYMBOL_PREFIX();
    }
    @C("struct tagPROPVARIANT")public static class PROPVARIANT {

        /* package-private */ PROPVARIANT() {}
        public static @C("struct tagPROPVARIANT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct tagPROPVARIANT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
    }

}


