// Generated by jextract

package com.github.tornaia.foreign.win.api.winbase.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
public final class winbase_h extends winbase_h$0 {

    /* package-private */ winbase_h() {}
    public static @C("int") int FILE_BEGIN() {
        return winbase_h$constants$0.FILE_BEGIN();
    }
    public static @C("int") int FILE_CURRENT() {
        return winbase_h$constants$0.FILE_CURRENT();
    }
    public static @C("int") int FILE_END() {
        return winbase_h$constants$0.FILE_END();
    }
    public static @C("int") int FILE_FLAG_OVERLAPPED() {
        return winbase_h$constants$0.FILE_FLAG_OVERLAPPED();
    }
    public static @C("int") int FILE_FLAG_NO_BUFFERING() {
        return winbase_h$constants$0.FILE_FLAG_NO_BUFFERING();
    }
    public static @C("int") int FILE_FLAG_RANDOM_ACCESS() {
        return winbase_h$constants$0.FILE_FLAG_RANDOM_ACCESS();
    }
    public static @C("int") int FILE_FLAG_SEQUENTIAL_SCAN() {
        return winbase_h$constants$0.FILE_FLAG_SEQUENTIAL_SCAN();
    }
    public static @C("int") int FILE_FLAG_DELETE_ON_CLOSE() {
        return winbase_h$constants$0.FILE_FLAG_DELETE_ON_CLOSE();
    }
    public static @C("int") int FILE_FLAG_BACKUP_SEMANTICS() {
        return winbase_h$constants$0.FILE_FLAG_BACKUP_SEMANTICS();
    }
    public static @C("int") int FILE_FLAG_POSIX_SEMANTICS() {
        return winbase_h$constants$0.FILE_FLAG_POSIX_SEMANTICS();
    }
    public static @C("int") int FILE_FLAG_SESSION_AWARE() {
        return winbase_h$constants$0.FILE_FLAG_SESSION_AWARE();
    }
    public static @C("int") int FILE_FLAG_OPEN_REPARSE_POINT() {
        return winbase_h$constants$0.FILE_FLAG_OPEN_REPARSE_POINT();
    }
    public static @C("int") int FILE_FLAG_OPEN_NO_RECALL() {
        return winbase_h$constants$0.FILE_FLAG_OPEN_NO_RECALL();
    }
    public static @C("int") int FILE_FLAG_FIRST_PIPE_INSTANCE() {
        return winbase_h$constants$0.FILE_FLAG_FIRST_PIPE_INSTANCE();
    }
    public static @C("int") int FILE_FLAG_OPEN_REQUIRING_OPLOCK() {
        return winbase_h$constants$0.FILE_FLAG_OPEN_REQUIRING_OPLOCK();
    }
    public static @C("int") int PROGRESS_CONTINUE() {
        return winbase_h$constants$0.PROGRESS_CONTINUE();
    }
    public static @C("int") int PROGRESS_CANCEL() {
        return winbase_h$constants$0.PROGRESS_CANCEL();
    }
    public static @C("int") int PROGRESS_STOP() {
        return winbase_h$constants$0.PROGRESS_STOP();
    }
    public static @C("int") int PROGRESS_QUIET() {
        return winbase_h$constants$0.PROGRESS_QUIET();
    }
    public static @C("int") int CALLBACK_CHUNK_FINISHED() {
        return winbase_h$constants$0.CALLBACK_CHUNK_FINISHED();
    }
    public static @C("int") int CALLBACK_STREAM_SWITCH() {
        return winbase_h$constants$0.CALLBACK_STREAM_SWITCH();
    }
    public static @C("int") int COPY_FILE_FAIL_IF_EXISTS() {
        return winbase_h$constants$0.COPY_FILE_FAIL_IF_EXISTS();
    }
    public static @C("int") int COPY_FILE_RESTARTABLE() {
        return winbase_h$constants$0.COPY_FILE_RESTARTABLE();
    }
    public static @C("int") int COPY_FILE_OPEN_SOURCE_FOR_WRITE() {
        return winbase_h$constants$0.COPY_FILE_OPEN_SOURCE_FOR_WRITE();
    }
    public static @C("int") int COPY_FILE_ALLOW_DECRYPTED_DESTINATION() {
        return winbase_h$constants$0.COPY_FILE_ALLOW_DECRYPTED_DESTINATION();
    }
    public static @C("int") int COPY_FILE_COPY_SYMLINK() {
        return winbase_h$constants$0.COPY_FILE_COPY_SYMLINK();
    }
    public static @C("int") int COPY_FILE_NO_BUFFERING() {
        return winbase_h$constants$0.COPY_FILE_NO_BUFFERING();
    }
    public static @C("int") int COPY_FILE_REQUEST_SECURITY_PRIVILEGES() {
        return winbase_h$constants$0.COPY_FILE_REQUEST_SECURITY_PRIVILEGES();
    }
    public static @C("int") int COPY_FILE_RESUME_FROM_PAUSE() {
        return winbase_h$constants$0.COPY_FILE_RESUME_FROM_PAUSE();
    }
    public static @C("int") int COPY_FILE_NO_OFFLOAD() {
        return winbase_h$constants$0.COPY_FILE_NO_OFFLOAD();
    }
    public static @C("int") int COPY_FILE_IGNORE_EDP_BLOCK() {
        return winbase_h$constants$0.COPY_FILE_IGNORE_EDP_BLOCK();
    }
    public static @C("int") int COPY_FILE_IGNORE_SOURCE_ENCRYPTION() {
        return winbase_h$constants$0.COPY_FILE_IGNORE_SOURCE_ENCRYPTION();
    }
    public static @C("int") int COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC() {
        return winbase_h$constants$0.COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC();
    }
    public static @C("int") int COPY_FILE_REQUEST_COMPRESSED_TRAFFIC() {
        return winbase_h$constants$0.COPY_FILE_REQUEST_COMPRESSED_TRAFFIC();
    }
    public static @C("int") int COPY_FILE_OPEN_AND_COPY_REPARSE_POINT() {
        return winbase_h$constants$0.COPY_FILE_OPEN_AND_COPY_REPARSE_POINT();
    }
    public static @C("int") int COPY_FILE_DIRECTORY() {
        return winbase_h$constants$0.COPY_FILE_DIRECTORY();
    }
    public static @C("int") int COPY_FILE_SKIP_ALTERNATE_STREAMS() {
        return winbase_h$constants$0.COPY_FILE_SKIP_ALTERNATE_STREAMS();
    }
    public static @C("int") int COPY_FILE_DISABLE_PRE_ALLOCATION() {
        return winbase_h$constants$0.COPY_FILE_DISABLE_PRE_ALLOCATION();
    }
    public static @C("int") int COPY_FILE_ENABLE_LOW_FREE_SPACE_MODE() {
        return winbase_h$constants$0.COPY_FILE_ENABLE_LOW_FREE_SPACE_MODE();
    }
    public static @C("int") int REPLACEFILE_WRITE_THROUGH() {
        return winbase_h$constants$0.REPLACEFILE_WRITE_THROUGH();
    }
    public static @C("int") int REPLACEFILE_IGNORE_MERGE_ERRORS() {
        return winbase_h$constants$0.REPLACEFILE_IGNORE_MERGE_ERRORS();
    }
    public static @C("int") int REPLACEFILE_IGNORE_ACL_ERRORS() {
        return winbase_h$constants$0.REPLACEFILE_IGNORE_ACL_ERRORS();
    }
    public static @C("int") int PIPE_ACCESS_INBOUND() {
        return winbase_h$constants$0.PIPE_ACCESS_INBOUND();
    }
    public static @C("int") int PIPE_ACCESS_OUTBOUND() {
        return winbase_h$constants$0.PIPE_ACCESS_OUTBOUND();
    }
    public static @C("int") int PIPE_ACCESS_DUPLEX() {
        return winbase_h$constants$0.PIPE_ACCESS_DUPLEX();
    }
    public static @C("int") int PIPE_CLIENT_END() {
        return winbase_h$constants$0.PIPE_CLIENT_END();
    }
    public static @C("int") int PIPE_SERVER_END() {
        return winbase_h$constants$0.PIPE_SERVER_END();
    }
    public static @C("int") int PIPE_WAIT() {
        return winbase_h$constants$0.PIPE_WAIT();
    }
    public static @C("int") int PIPE_NOWAIT() {
        return winbase_h$constants$0.PIPE_NOWAIT();
    }
    public static @C("int") int PIPE_READMODE_BYTE() {
        return winbase_h$constants$0.PIPE_READMODE_BYTE();
    }
    public static @C("int") int PIPE_READMODE_MESSAGE() {
        return winbase_h$constants$0.PIPE_READMODE_MESSAGE();
    }
    public static @C("int") int PIPE_TYPE_BYTE() {
        return winbase_h$constants$0.PIPE_TYPE_BYTE();
    }
    public static @C("int") int PIPE_TYPE_MESSAGE() {
        return winbase_h$constants$0.PIPE_TYPE_MESSAGE();
    }
    public static @C("int") int PIPE_ACCEPT_REMOTE_CLIENTS() {
        return winbase_h$constants$0.PIPE_ACCEPT_REMOTE_CLIENTS();
    }
    public static @C("int") int PIPE_REJECT_REMOTE_CLIENTS() {
        return winbase_h$constants$0.PIPE_REJECT_REMOTE_CLIENTS();
    }
    public static @C("int") int PIPE_UNLIMITED_INSTANCES() {
        return winbase_h$constants$0.PIPE_UNLIMITED_INSTANCES();
    }
    public static @C("int") int SECURITY_CONTEXT_TRACKING() {
        return winbase_h$constants$0.SECURITY_CONTEXT_TRACKING();
    }
    public static @C("int") int SECURITY_EFFECTIVE_ONLY() {
        return winbase_h$constants$0.SECURITY_EFFECTIVE_ONLY();
    }
    public static @C("int") int SECURITY_SQOS_PRESENT() {
        return winbase_h$constants$0.SECURITY_SQOS_PRESENT();
    }
    public static @C("int") int SECURITY_VALID_SQOS_FLAGS() {
        return winbase_h$constants$0.SECURITY_VALID_SQOS_FLAGS();
    }
    public static @C("int") int FAIL_FAST_GENERATE_EXCEPTION_ADDRESS() {
        return winbase_h$constants$0.FAIL_FAST_GENERATE_EXCEPTION_ADDRESS();
    }
    public static @C("int") int FAIL_FAST_NO_HARD_ERROR_DLG() {
        return winbase_h$constants$0.FAIL_FAST_NO_HARD_ERROR_DLG();
    }
    public static @C("int") int DTR_CONTROL_DISABLE() {
        return winbase_h$constants$0.DTR_CONTROL_DISABLE();
    }
    public static @C("int") int DTR_CONTROL_ENABLE() {
        return winbase_h$constants$0.DTR_CONTROL_ENABLE();
    }
    public static @C("int") int DTR_CONTROL_HANDSHAKE() {
        return winbase_h$constants$0.DTR_CONTROL_HANDSHAKE();
    }
    public static @C("int") int RTS_CONTROL_DISABLE() {
        return winbase_h$constants$0.RTS_CONTROL_DISABLE();
    }
    public static @C("int") int RTS_CONTROL_ENABLE() {
        return winbase_h$constants$0.RTS_CONTROL_ENABLE();
    }
    public static @C("int") int RTS_CONTROL_HANDSHAKE() {
        return winbase_h$constants$0.RTS_CONTROL_HANDSHAKE();
    }
    public static @C("int") int RTS_CONTROL_TOGGLE() {
        return winbase_h$constants$0.RTS_CONTROL_TOGGLE();
    }
    public static @C("int") int GMEM_FIXED() {
        return winbase_h$constants$0.GMEM_FIXED();
    }
    public static @C("int") int GMEM_MOVEABLE() {
        return winbase_h$constants$0.GMEM_MOVEABLE();
    }
    public static @C("int") int GMEM_NOCOMPACT() {
        return winbase_h$constants$0.GMEM_NOCOMPACT();
    }
    public static @C("int") int GMEM_NODISCARD() {
        return winbase_h$constants$0.GMEM_NODISCARD();
    }
    public static @C("int") int GMEM_ZEROINIT() {
        return winbase_h$constants$0.GMEM_ZEROINIT();
    }
    public static @C("int") int GMEM_MODIFY() {
        return winbase_h$constants$0.GMEM_MODIFY();
    }
    public static @C("int") int GMEM_DISCARDABLE() {
        return winbase_h$constants$0.GMEM_DISCARDABLE();
    }
    public static @C("int") int GMEM_NOT_BANKED() {
        return winbase_h$constants$0.GMEM_NOT_BANKED();
    }
    public static @C("int") int GMEM_SHARE() {
        return winbase_h$constants$0.GMEM_SHARE();
    }
    public static @C("int") int GMEM_DDESHARE() {
        return winbase_h$constants$0.GMEM_DDESHARE();
    }
    public static @C("int") int GMEM_NOTIFY() {
        return winbase_h$constants$0.GMEM_NOTIFY();
    }
    public static @C("int") int GMEM_VALID_FLAGS() {
        return winbase_h$constants$0.GMEM_VALID_FLAGS();
    }
    public static @C("int") int GMEM_INVALID_HANDLE() {
        return winbase_h$constants$0.GMEM_INVALID_HANDLE();
    }
    public static @C("int") int GMEM_DISCARDED() {
        return winbase_h$constants$0.GMEM_DISCARDED();
    }
    public static @C("int") int GMEM_LOCKCOUNT() {
        return winbase_h$constants$0.GMEM_LOCKCOUNT();
    }
    public static @C("int") int DEBUG_PROCESS() {
        return winbase_h$constants$0.DEBUG_PROCESS();
    }
    public static @C("int") int DEBUG_ONLY_THIS_PROCESS() {
        return winbase_h$constants$0.DEBUG_ONLY_THIS_PROCESS();
    }
    public static @C("int") int CREATE_SUSPENDED() {
        return winbase_h$constants$0.CREATE_SUSPENDED();
    }
    public static @C("int") int DETACHED_PROCESS() {
        return winbase_h$constants$0.DETACHED_PROCESS();
    }
    public static @C("int") int CREATE_NEW_CONSOLE() {
        return winbase_h$constants$0.CREATE_NEW_CONSOLE();
    }
    public static @C("int") int NORMAL_PRIORITY_CLASS() {
        return winbase_h$constants$0.NORMAL_PRIORITY_CLASS();
    }
    public static @C("int") int IDLE_PRIORITY_CLASS() {
        return winbase_h$constants$0.IDLE_PRIORITY_CLASS();
    }
    public static @C("int") int HIGH_PRIORITY_CLASS() {
        return winbase_h$constants$0.HIGH_PRIORITY_CLASS();
    }
    public static @C("int") int REALTIME_PRIORITY_CLASS() {
        return winbase_h$constants$0.REALTIME_PRIORITY_CLASS();
    }
    public static @C("int") int CREATE_NEW_PROCESS_GROUP() {
        return winbase_h$constants$0.CREATE_NEW_PROCESS_GROUP();
    }
    public static @C("int") int CREATE_UNICODE_ENVIRONMENT() {
        return winbase_h$constants$0.CREATE_UNICODE_ENVIRONMENT();
    }
    public static @C("int") int CREATE_SEPARATE_WOW_VDM() {
        return winbase_h$constants$0.CREATE_SEPARATE_WOW_VDM();
    }
    public static @C("int") int CREATE_SHARED_WOW_VDM() {
        return winbase_h$constants$0.CREATE_SHARED_WOW_VDM();
    }
    public static @C("int") int CREATE_FORCEDOS() {
        return winbase_h$constants$0.CREATE_FORCEDOS();
    }
    public static @C("int") int BELOW_NORMAL_PRIORITY_CLASS() {
        return winbase_h$constants$0.BELOW_NORMAL_PRIORITY_CLASS();
    }
    public static @C("int") int ABOVE_NORMAL_PRIORITY_CLASS() {
        return winbase_h$constants$0.ABOVE_NORMAL_PRIORITY_CLASS();
    }
    public static @C("int") int INHERIT_PARENT_AFFINITY() {
        return winbase_h$constants$0.INHERIT_PARENT_AFFINITY();
    }
    public static @C("int") int INHERIT_CALLER_PRIORITY() {
        return winbase_h$constants$0.INHERIT_CALLER_PRIORITY();
    }
    public static @C("int") int CREATE_PROTECTED_PROCESS() {
        return winbase_h$constants$0.CREATE_PROTECTED_PROCESS();
    }
    public static @C("int") int EXTENDED_STARTUPINFO_PRESENT() {
        return winbase_h$constants$0.EXTENDED_STARTUPINFO_PRESENT();
    }
    public static @C("int") int PROCESS_MODE_BACKGROUND_BEGIN() {
        return winbase_h$constants$0.PROCESS_MODE_BACKGROUND_BEGIN();
    }
    public static @C("int") int PROCESS_MODE_BACKGROUND_END() {
        return winbase_h$constants$0.PROCESS_MODE_BACKGROUND_END();
    }
    public static @C("int") int CREATE_SECURE_PROCESS() {
        return winbase_h$constants$0.CREATE_SECURE_PROCESS();
    }
    public static @C("int") int CREATE_BREAKAWAY_FROM_JOB() {
        return winbase_h$constants$0.CREATE_BREAKAWAY_FROM_JOB();
    }
    public static @C("int") int CREATE_PRESERVE_CODE_AUTHZ_LEVEL() {
        return winbase_h$constants$0.CREATE_PRESERVE_CODE_AUTHZ_LEVEL();
    }
    public static @C("int") int CREATE_DEFAULT_ERROR_MODE() {
        return winbase_h$constants$0.CREATE_DEFAULT_ERROR_MODE();
    }
    public static @C("int") int CREATE_NO_WINDOW() {
        return winbase_h$constants$0.CREATE_NO_WINDOW();
    }
    public static @C("int") int PROFILE_USER() {
        return winbase_h$constants$0.PROFILE_USER();
    }
    public static @C("int") int PROFILE_KERNEL() {
        return winbase_h$constants$0.PROFILE_KERNEL();
    }
    public static @C("int") int PROFILE_SERVER() {
        return winbase_h$constants$0.PROFILE_SERVER();
    }
    public static @C("int") int STACK_SIZE_PARAM_IS_A_RESERVATION() {
        return winbase_h$constants$0.STACK_SIZE_PARAM_IS_A_RESERVATION();
    }
    public static @C("int") int THREAD_PRIORITY_NORMAL() {
        return winbase_h$constants$0.THREAD_PRIORITY_NORMAL();
    }
    public static @C("int") int THREAD_MODE_BACKGROUND_BEGIN() {
        return winbase_h$constants$0.THREAD_MODE_BACKGROUND_BEGIN();
    }
    public static @C("int") int THREAD_MODE_BACKGROUND_END() {
        return winbase_h$constants$0.THREAD_MODE_BACKGROUND_END();
    }
    public static @C("int") int VOLUME_NAME_DOS() {
        return winbase_h$constants$0.VOLUME_NAME_DOS();
    }
    public static @C("int") int VOLUME_NAME_GUID() {
        return winbase_h$constants$0.VOLUME_NAME_GUID();
    }
    public static @C("int") int VOLUME_NAME_NT() {
        return winbase_h$constants$0.VOLUME_NAME_NT();
    }
    public static @C("int") int VOLUME_NAME_NONE() {
        return winbase_h$constants$0.VOLUME_NAME_NONE();
    }
    public static @C("int") int FILE_NAME_NORMALIZED() {
        return winbase_h$constants$0.FILE_NAME_NORMALIZED();
    }
    public static @C("int") int FILE_NAME_OPENED() {
        return winbase_h$constants$0.FILE_NAME_OPENED();
    }
    public static @C("int") int DRIVE_UNKNOWN() {
        return winbase_h$constants$0.DRIVE_UNKNOWN();
    }
    public static @C("int") int DRIVE_NO_ROOT_DIR() {
        return winbase_h$constants$0.DRIVE_NO_ROOT_DIR();
    }
    public static @C("int") int DRIVE_REMOVABLE() {
        return winbase_h$constants$0.DRIVE_REMOVABLE();
    }
    public static @C("int") int DRIVE_FIXED() {
        return winbase_h$constants$0.DRIVE_FIXED();
    }
    public static @C("int") int DRIVE_REMOTE() {
        return winbase_h$constants$0.DRIVE_REMOTE();
    }
    public static @C("int") int DRIVE_CDROM() {
        return winbase_h$constants$0.DRIVE_CDROM();
    }
    public static @C("int") int DRIVE_RAMDISK() {
        return winbase_h$constants$0.DRIVE_RAMDISK();
    }
    public static @C("int") int FILE_TYPE_UNKNOWN() {
        return winbase_h$constants$0.FILE_TYPE_UNKNOWN();
    }
    public static @C("int") int FILE_TYPE_DISK() {
        return winbase_h$constants$0.FILE_TYPE_DISK();
    }
    public static @C("int") int FILE_TYPE_CHAR() {
        return winbase_h$constants$0.FILE_TYPE_CHAR();
    }
    public static @C("int") int FILE_TYPE_PIPE() {
        return winbase_h$constants$0.FILE_TYPE_PIPE();
    }
    public static @C("int") int FILE_TYPE_REMOTE() {
        return winbase_h$constants$0.FILE_TYPE_REMOTE();
    }
    public static @C("int") int NOPARITY() {
        return winbase_h$constants$0.NOPARITY();
    }
    public static @C("int") int ODDPARITY() {
        return winbase_h$constants$0.ODDPARITY();
    }
    public static @C("int") int EVENPARITY() {
        return winbase_h$constants$0.EVENPARITY();
    }
    public static @C("int") int MARKPARITY() {
        return winbase_h$constants$0.MARKPARITY();
    }
    public static @C("int") int SPACEPARITY() {
        return winbase_h$constants$0.SPACEPARITY();
    }
    public static @C("int") int ONESTOPBIT() {
        return winbase_h$constants$0.ONESTOPBIT();
    }
    public static @C("int") int ONE5STOPBITS() {
        return winbase_h$constants$0.ONE5STOPBITS();
    }
    public static @C("int") int TWOSTOPBITS() {
        return winbase_h$constants$0.TWOSTOPBITS();
    }
    public static @C("int") int IGNORE() {
        return winbase_h$constants$0.IGNORE();
    }
    public static @C("int") int CBR_110() {
        return winbase_h$constants$0.CBR_110();
    }
    public static @C("int") int CBR_300() {
        return winbase_h$constants$0.CBR_300();
    }
    public static @C("int") int CBR_600() {
        return winbase_h$constants$0.CBR_600();
    }
    public static @C("int") int CBR_1200() {
        return winbase_h$constants$0.CBR_1200();
    }
    public static @C("int") int CBR_2400() {
        return winbase_h$constants$0.CBR_2400();
    }
    public static @C("int") int CBR_4800() {
        return winbase_h$constants$0.CBR_4800();
    }
    public static @C("int") int CBR_9600() {
        return winbase_h$constants$0.CBR_9600();
    }
    public static @C("int") int CBR_14400() {
        return winbase_h$constants$0.CBR_14400();
    }
    public static @C("int") int CBR_19200() {
        return winbase_h$constants$0.CBR_19200();
    }
    public static @C("int") int CBR_38400() {
        return winbase_h$constants$0.CBR_38400();
    }
    public static @C("int") int CBR_56000() {
        return winbase_h$constants$0.CBR_56000();
    }
    public static @C("int") int CBR_57600() {
        return winbase_h$constants$0.CBR_57600();
    }
    public static @C("int") int CBR_115200() {
        return winbase_h$constants$0.CBR_115200();
    }
    public static @C("int") int CBR_128000() {
        return winbase_h$constants$0.CBR_128000();
    }
    public static @C("int") int CBR_256000() {
        return winbase_h$constants$0.CBR_256000();
    }
    public static @C("int") int CE_RXOVER() {
        return winbase_h$constants$0.CE_RXOVER();
    }
    public static @C("int") int CE_OVERRUN() {
        return winbase_h$constants$0.CE_OVERRUN();
    }
    public static @C("int") int CE_RXPARITY() {
        return winbase_h$constants$0.CE_RXPARITY();
    }
    public static @C("int") int CE_FRAME() {
        return winbase_h$constants$0.CE_FRAME();
    }
    public static @C("int") int CE_BREAK() {
        return winbase_h$constants$0.CE_BREAK();
    }
    public static @C("int") int CE_TXFULL() {
        return winbase_h$constants$0.CE_TXFULL();
    }
    public static @C("int") int CE_PTO() {
        return winbase_h$constants$0.CE_PTO();
    }
    public static @C("int") int CE_IOE() {
        return winbase_h$constants$0.CE_IOE();
    }
    public static @C("int") int CE_DNS() {
        return winbase_h$constants$0.CE_DNS();
    }
    public static @C("int") int CE_OOP() {
        return winbase_h$constants$0.CE_OOP();
    }
    public static @C("int") int CE_MODE() {
        return winbase_h$constants$0.CE_MODE();
    }
    public static @C("int") int EV_RXCHAR() {
        return winbase_h$constants$0.EV_RXCHAR();
    }
    public static @C("int") int EV_RXFLAG() {
        return winbase_h$constants$0.EV_RXFLAG();
    }
    public static @C("int") int EV_TXEMPTY() {
        return winbase_h$constants$0.EV_TXEMPTY();
    }
    public static @C("int") int EV_CTS() {
        return winbase_h$constants$0.EV_CTS();
    }
    public static @C("int") int EV_DSR() {
        return winbase_h$constants$0.EV_DSR();
    }
    public static @C("int") int EV_RLSD() {
        return winbase_h$constants$0.EV_RLSD();
    }
    public static @C("int") int EV_BREAK() {
        return winbase_h$constants$0.EV_BREAK();
    }
    public static @C("int") int EV_ERR() {
        return winbase_h$constants$0.EV_ERR();
    }
    public static @C("int") int EV_RING() {
        return winbase_h$constants$0.EV_RING();
    }
    public static @C("int") int EV_PERR() {
        return winbase_h$constants$0.EV_PERR();
    }
    public static @C("int") int EV_RX80FULL() {
        return winbase_h$constants$0.EV_RX80FULL();
    }
    public static @C("int") int EV_EVENT1() {
        return winbase_h$constants$0.EV_EVENT1();
    }
    public static @C("int") int EV_EVENT2() {
        return winbase_h$constants$0.EV_EVENT2();
    }
    public static @C("int") int SETXOFF() {
        return winbase_h$constants$0.SETXOFF();
    }
    public static @C("int") int SETXON() {
        return winbase_h$constants$0.SETXON();
    }
    public static @C("int") int SETRTS() {
        return winbase_h$constants$0.SETRTS();
    }
    public static @C("int") int CLRRTS() {
        return winbase_h$constants$0.CLRRTS();
    }
    public static @C("int") int SETDTR() {
        return winbase_h$constants$0.SETDTR();
    }
    public static @C("int") int CLRDTR() {
        return winbase_h$constants$0.CLRDTR();
    }
    public static @C("int") int RESETDEV() {
        return winbase_h$constants$0.RESETDEV();
    }
    public static @C("int") int SETBREAK() {
        return winbase_h$constants$0.SETBREAK();
    }
    public static @C("int") int CLRBREAK() {
        return winbase_h$constants$0.CLRBREAK();
    }
    public static @C("int") int PURGE_TXABORT() {
        return winbase_h$constants$0.PURGE_TXABORT();
    }
    public static @C("int") int PURGE_RXABORT() {
        return winbase_h$constants$0.PURGE_RXABORT();
    }
    public static @C("int") int PURGE_TXCLEAR() {
        return winbase_h$constants$0.PURGE_TXCLEAR();
    }
    public static @C("int") int PURGE_RXCLEAR() {
        return winbase_h$constants$0.PURGE_RXCLEAR();
    }
    public static @C("int") int LPTx() {
        return winbase_h$constants$0.LPTx();
    }
    public static @C("int") int S_QUEUEEMPTY() {
        return winbase_h$constants$0.S_QUEUEEMPTY();
    }
    public static @C("int") int S_THRESHOLD() {
        return winbase_h$constants$0.S_THRESHOLD();
    }
    public static @C("int") int S_ALLTHRESHOLD() {
        return winbase_h$constants$0.S_ALLTHRESHOLD();
    }
    public static @C("int") int S_NORMAL() {
        return winbase_h$constants$0.S_NORMAL();
    }
    public static @C("int") int S_LEGATO() {
        return winbase_h$constants$0.S_LEGATO();
    }
    public static @C("int") int S_STACCATO() {
        return winbase_h$constants$0.S_STACCATO();
    }
    public static @C("int") int S_PERIOD512() {
        return winbase_h$constants$0.S_PERIOD512();
    }
    public static @C("int") int S_PERIOD1024() {
        return winbase_h$constants$0.S_PERIOD1024();
    }
    public static @C("int") int S_PERIOD2048() {
        return winbase_h$constants$0.S_PERIOD2048();
    }
    public static @C("int") int S_PERIODVOICE() {
        return winbase_h$constants$0.S_PERIODVOICE();
    }
    public static @C("int") int S_WHITE512() {
        return winbase_h$constants$0.S_WHITE512();
    }
    public static @C("int") int S_WHITE1024() {
        return winbase_h$constants$0.S_WHITE1024();
    }
    public static @C("int") int S_WHITE2048() {
        return winbase_h$constants$0.S_WHITE2048();
    }
    public static @C("int") int S_WHITEVOICE() {
        return winbase_h$constants$0.S_WHITEVOICE();
    }
    public static @C("int") int NMPWAIT_NOWAIT() {
        return winbase_h$constants$0.NMPWAIT_NOWAIT();
    }
    public static @C("int") int NMPWAIT_USE_DEFAULT_WAIT() {
        return winbase_h$constants$0.NMPWAIT_USE_DEFAULT_WAIT();
    }
    public static @C("int") int OF_READ() {
        return winbase_h$constants$0.OF_READ();
    }
    public static @C("int") int OF_WRITE() {
        return winbase_h$constants$0.OF_WRITE();
    }
    public static @C("int") int OF_READWRITE() {
        return winbase_h$constants$0.OF_READWRITE();
    }
    public static @C("int") int OF_SHARE_COMPAT() {
        return winbase_h$constants$0.OF_SHARE_COMPAT();
    }
    public static @C("int") int OF_SHARE_EXCLUSIVE() {
        return winbase_h$constants$0.OF_SHARE_EXCLUSIVE();
    }
    public static @C("int") int OF_SHARE_DENY_WRITE() {
        return winbase_h$constants$0.OF_SHARE_DENY_WRITE();
    }
    public static @C("int") int OF_SHARE_DENY_READ() {
        return winbase_h$constants$0.OF_SHARE_DENY_READ();
    }
    public static @C("int") int OF_SHARE_DENY_NONE() {
        return winbase_h$constants$0.OF_SHARE_DENY_NONE();
    }
    public static @C("int") int OF_PARSE() {
        return winbase_h$constants$0.OF_PARSE();
    }
    public static @C("int") int OF_DELETE() {
        return winbase_h$constants$0.OF_DELETE();
    }
    public static @C("int") int OF_VERIFY() {
        return winbase_h$constants$0.OF_VERIFY();
    }
    public static @C("int") int OF_CANCEL() {
        return winbase_h$constants$0.OF_CANCEL();
    }
    public static @C("int") int OF_CREATE() {
        return winbase_h$constants$0.OF_CREATE();
    }
    public static @C("int") int OF_PROMPT() {
        return winbase_h$constants$0.OF_PROMPT();
    }
    public static @C("int") int OF_EXIST() {
        return winbase_h$constants$0.OF_EXIST();
    }
    public static @C("int") int OF_REOPEN() {
        return winbase_h$constants$0.OF_REOPEN();
    }
    public static @C("int") int OFS_MAXPATHNAME() {
        return winbase_h$constants$0.OFS_MAXPATHNAME();
    }
    public static @C("int") int MAXINTATOM() {
        return winbase_h$constants$0.MAXINTATOM();
    }
    public static @C("int") int SCS_32BIT_BINARY() {
        return winbase_h$constants$0.SCS_32BIT_BINARY();
    }
    public static @C("int") int SCS_DOS_BINARY() {
        return winbase_h$constants$0.SCS_DOS_BINARY();
    }
    public static @C("int") int SCS_WOW_BINARY() {
        return winbase_h$constants$0.SCS_WOW_BINARY();
    }
    public static @C("int") int SCS_PIF_BINARY() {
        return winbase_h$constants$0.SCS_PIF_BINARY();
    }
    public static @C("int") int SCS_POSIX_BINARY() {
        return winbase_h$constants$0.SCS_POSIX_BINARY();
    }
    public static @C("int") int SCS_OS216_BINARY() {
        return winbase_h$constants$0.SCS_OS216_BINARY();
    }
    public static @C("int") int SCS_64BIT_BINARY() {
        return winbase_h$constants$0.SCS_64BIT_BINARY();
    }
    public static @C("int") int FIBER_FLAG_FLOAT_SWITCH() {
        return winbase_h$constants$0.FIBER_FLAG_FLOAT_SWITCH();
    }
    public static @C("int") int PROCESS_DEP_ENABLE() {
        return winbase_h$constants$0.PROCESS_DEP_ENABLE();
    }
    public static @C("int") int PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION() {
        return winbase_h$constants$0.PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION();
    }
    public static @C("int") int FILE_SKIP_COMPLETION_PORT_ON_SUCCESS() {
        return winbase_h$constants$0.FILE_SKIP_COMPLETION_PORT_ON_SUCCESS();
    }
    public static @C("int") int FILE_SKIP_SET_EVENT_ON_HANDLE() {
        return winbase_h$constants$0.FILE_SKIP_SET_EVENT_ON_HANDLE();
    }
    public static @C("int") int SEM_FAILCRITICALERRORS() {
        return winbase_h$constants$0.SEM_FAILCRITICALERRORS();
    }
    public static @C("int") int SEM_NOGPFAULTERRORBOX() {
        return winbase_h$constants$0.SEM_NOGPFAULTERRORBOX();
    }
    public static @C("int") int SEM_NOALIGNMENTFAULTEXCEPT() {
        return winbase_h$constants$0.SEM_NOALIGNMENTFAULTEXCEPT();
    }
    public static @C("int") int SEM_NOOPENFILEERRORBOX() {
        return winbase_h$constants$0.SEM_NOOPENFILEERRORBOX();
    }
    public static @C("int") int HANDLE_FLAG_INHERIT() {
        return winbase_h$constants$0.HANDLE_FLAG_INHERIT();
    }
    public static @C("int") int HANDLE_FLAG_PROTECT_FROM_CLOSE() {
        return winbase_h$constants$0.HANDLE_FLAG_PROTECT_FROM_CLOSE();
    }
    public static @C("int") int HINSTANCE_ERROR() {
        return winbase_h$constants$0.HINSTANCE_ERROR();
    }
    public static @C("int") int GET_TAPE_MEDIA_INFORMATION() {
        return winbase_h$constants$0.GET_TAPE_MEDIA_INFORMATION();
    }
    public static @C("int") int GET_TAPE_DRIVE_INFORMATION() {
        return winbase_h$constants$0.GET_TAPE_DRIVE_INFORMATION();
    }
    public static @C("int") int SET_TAPE_MEDIA_INFORMATION() {
        return winbase_h$constants$0.SET_TAPE_MEDIA_INFORMATION();
    }
    public static @C("int") int SET_TAPE_DRIVE_INFORMATION() {
        return winbase_h$constants$0.SET_TAPE_DRIVE_INFORMATION();
    }
    public static @C("int") int FORMAT_MESSAGE_ALLOCATE_BUFFER() {
        return winbase_h$constants$0.FORMAT_MESSAGE_ALLOCATE_BUFFER();
    }
    public static @C("int") int FORMAT_MESSAGE_IGNORE_INSERTS() {
        return winbase_h$constants$0.FORMAT_MESSAGE_IGNORE_INSERTS();
    }
    public static @C("int") int FORMAT_MESSAGE_FROM_STRING() {
        return winbase_h$constants$0.FORMAT_MESSAGE_FROM_STRING();
    }
    public static @C("int") int FORMAT_MESSAGE_FROM_HMODULE() {
        return winbase_h$constants$0.FORMAT_MESSAGE_FROM_HMODULE();
    }
    public static @C("int") int FORMAT_MESSAGE_FROM_SYSTEM() {
        return winbase_h$constants$0.FORMAT_MESSAGE_FROM_SYSTEM();
    }
    public static @C("int") int FORMAT_MESSAGE_ARGUMENT_ARRAY() {
        return winbase_h$constants$0.FORMAT_MESSAGE_ARGUMENT_ARRAY();
    }
    public static @C("int") int FORMAT_MESSAGE_MAX_WIDTH_MASK() {
        return winbase_h$constants$0.FORMAT_MESSAGE_MAX_WIDTH_MASK();
    }
    public static @C("int") int FILE_ENCRYPTABLE() {
        return winbase_h$constants$0.FILE_ENCRYPTABLE();
    }
    public static @C("int") int FILE_IS_ENCRYPTED() {
        return winbase_h$constants$0.FILE_IS_ENCRYPTED();
    }
    public static @C("int") int FILE_SYSTEM_ATTR() {
        return winbase_h$constants$0.FILE_SYSTEM_ATTR();
    }
    public static @C("int") int FILE_ROOT_DIR() {
        return winbase_h$constants$0.FILE_ROOT_DIR();
    }
    public static @C("int") int FILE_SYSTEM_DIR() {
        return winbase_h$constants$0.FILE_SYSTEM_DIR();
    }
    public static @C("int") int FILE_UNKNOWN() {
        return winbase_h$constants$0.FILE_UNKNOWN();
    }
    public static @C("int") int FILE_SYSTEM_NOT_SUPPORT() {
        return winbase_h$constants$0.FILE_SYSTEM_NOT_SUPPORT();
    }
    public static @C("int") int FILE_USER_DISALLOWED() {
        return winbase_h$constants$0.FILE_USER_DISALLOWED();
    }
    public static @C("int") int FILE_READ_ONLY() {
        return winbase_h$constants$0.FILE_READ_ONLY();
    }
    public static @C("int") int FILE_DIR_DISALLOWED() {
        return winbase_h$constants$0.FILE_DIR_DISALLOWED();
    }
    public static @C("int") int BACKUP_INVALID() {
        return winbase_h$constants$0.BACKUP_INVALID();
    }
    public static @C("int") int BACKUP_DATA() {
        return winbase_h$constants$0.BACKUP_DATA();
    }
    public static @C("int") int BACKUP_EA_DATA() {
        return winbase_h$constants$0.BACKUP_EA_DATA();
    }
    public static @C("int") int BACKUP_SECURITY_DATA() {
        return winbase_h$constants$0.BACKUP_SECURITY_DATA();
    }
    public static @C("int") int BACKUP_ALTERNATE_DATA() {
        return winbase_h$constants$0.BACKUP_ALTERNATE_DATA();
    }
    public static @C("int") int BACKUP_LINK() {
        return winbase_h$constants$0.BACKUP_LINK();
    }
    public static @C("int") int BACKUP_PROPERTY_DATA() {
        return winbase_h$constants$0.BACKUP_PROPERTY_DATA();
    }
    public static @C("int") int BACKUP_OBJECT_ID() {
        return winbase_h$constants$0.BACKUP_OBJECT_ID();
    }
    public static @C("int") int BACKUP_REPARSE_DATA() {
        return winbase_h$constants$0.BACKUP_REPARSE_DATA();
    }
    public static @C("int") int BACKUP_SPARSE_BLOCK() {
        return winbase_h$constants$0.BACKUP_SPARSE_BLOCK();
    }
    public static @C("int") int BACKUP_TXFS_DATA() {
        return winbase_h$constants$0.BACKUP_TXFS_DATA();
    }
    public static @C("int") int BACKUP_GHOSTED_FILE_EXTENTS() {
        return winbase_h$constants$0.BACKUP_GHOSTED_FILE_EXTENTS();
    }
    public static @C("int") int STREAM_NORMAL_ATTRIBUTE() {
        return winbase_h$constants$0.STREAM_NORMAL_ATTRIBUTE();
    }
    public static @C("int") int STREAM_MODIFIED_WHEN_READ() {
        return winbase_h$constants$0.STREAM_MODIFIED_WHEN_READ();
    }
    public static @C("int") int STREAM_CONTAINS_SECURITY() {
        return winbase_h$constants$0.STREAM_CONTAINS_SECURITY();
    }
    public static @C("int") int STREAM_CONTAINS_PROPERTIES() {
        return winbase_h$constants$0.STREAM_CONTAINS_PROPERTIES();
    }
    public static @C("int") int STREAM_SPARSE_ATTRIBUTE() {
        return winbase_h$constants$0.STREAM_SPARSE_ATTRIBUTE();
    }
    public static @C("int") int STREAM_CONTAINS_GHOSTED_FILE_EXTENTS() {
        return winbase_h$constants$0.STREAM_CONTAINS_GHOSTED_FILE_EXTENTS();
    }
    public static @C("int") int STARTF_USESHOWWINDOW() {
        return winbase_h$constants$0.STARTF_USESHOWWINDOW();
    }
    public static @C("int") int STARTF_USESIZE() {
        return winbase_h$constants$0.STARTF_USESIZE();
    }
    public static @C("int") int STARTF_USEPOSITION() {
        return winbase_h$constants$0.STARTF_USEPOSITION();
    }
    public static @C("int") int STARTF_USECOUNTCHARS() {
        return winbase_h$constants$0.STARTF_USECOUNTCHARS();
    }
    public static @C("int") int STARTF_USEFILLATTRIBUTE() {
        return winbase_h$constants$0.STARTF_USEFILLATTRIBUTE();
    }
    public static @C("int") int STARTF_RUNFULLSCREEN() {
        return winbase_h$constants$0.STARTF_RUNFULLSCREEN();
    }
    public static @C("int") int STARTF_FORCEONFEEDBACK() {
        return winbase_h$constants$0.STARTF_FORCEONFEEDBACK();
    }
    public static @C("int") int STARTF_FORCEOFFFEEDBACK() {
        return winbase_h$constants$0.STARTF_FORCEOFFFEEDBACK();
    }
    public static @C("int") int STARTF_USESTDHANDLES() {
        return winbase_h$constants$0.STARTF_USESTDHANDLES();
    }
    public static @C("int") int STARTF_USEHOTKEY() {
        return winbase_h$constants$0.STARTF_USEHOTKEY();
    }
    public static @C("int") int STARTF_TITLEISLINKNAME() {
        return winbase_h$constants$0.STARTF_TITLEISLINKNAME();
    }
    public static @C("int") int STARTF_TITLEISAPPID() {
        return winbase_h$constants$0.STARTF_TITLEISAPPID();
    }
    public static @C("int") int STARTF_PREVENTPINNING() {
        return winbase_h$constants$0.STARTF_PREVENTPINNING();
    }
    public static @C("int") int STARTF_UNTRUSTEDSOURCE() {
        return winbase_h$constants$0.STARTF_UNTRUSTEDSOURCE();
    }
    public static @C("int") int SHUTDOWN_NORETRY() {
        return winbase_h$constants$0.SHUTDOWN_NORETRY();
    }
    public static @C("int") int PROTECTION_LEVEL_WINTCB_LIGHT() {
        return winbase_h$constants$0.PROTECTION_LEVEL_WINTCB_LIGHT();
    }
    public static @C("int") int PROTECTION_LEVEL_WINDOWS() {
        return winbase_h$constants$0.PROTECTION_LEVEL_WINDOWS();
    }
    public static @C("int") int PROTECTION_LEVEL_WINDOWS_LIGHT() {
        return winbase_h$constants$0.PROTECTION_LEVEL_WINDOWS_LIGHT();
    }
    public static @C("int") int PROTECTION_LEVEL_ANTIMALWARE_LIGHT() {
        return winbase_h$constants$0.PROTECTION_LEVEL_ANTIMALWARE_LIGHT();
    }
    public static @C("int") int PROTECTION_LEVEL_LSA_LIGHT() {
        return winbase_h$constants$0.PROTECTION_LEVEL_LSA_LIGHT();
    }
    public static @C("int") int PROTECTION_LEVEL_WINTCB() {
        return winbase_h$constants$0.PROTECTION_LEVEL_WINTCB();
    }
    public static @C("int") int PROTECTION_LEVEL_CODEGEN_LIGHT() {
        return winbase_h$constants$0.PROTECTION_LEVEL_CODEGEN_LIGHT();
    }
    public static @C("int") int PROTECTION_LEVEL_AUTHENTICODE() {
        return winbase_h$constants$0.PROTECTION_LEVEL_AUTHENTICODE();
    }
    public static @C("int") int PROTECTION_LEVEL_PPL_APP() {
        return winbase_h$constants$0.PROTECTION_LEVEL_PPL_APP();
    }
    public static @C("int") int PROCESS_NAME_NATIVE() {
        return winbase_h$constants$0.PROCESS_NAME_NATIVE();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_NUMBER() {
        return winbase_h$constants$0.PROC_THREAD_ATTRIBUTE_NUMBER();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_THREAD() {
        return winbase_h$constants$0.PROC_THREAD_ATTRIBUTE_THREAD();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_INPUT() {
        return winbase_h$constants$0.PROC_THREAD_ATTRIBUTE_INPUT();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_ADDITIVE() {
        return winbase_h$constants$0.PROC_THREAD_ATTRIBUTE_ADDITIVE();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE() {
        return winbase_h$constants$0.PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE() {
        return winbase_h$constants$0.PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE() {
        return winbase_h$constants$0.PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE();
    }
    public static @C("int") int PROCESS_CREATION_CHILD_PROCESS_RESTRICTED() {
        return winbase_h$constants$0.PROCESS_CREATION_CHILD_PROCESS_RESTRICTED();
    }
    public static @C("int") int PROCESS_CREATION_CHILD_PROCESS_OVERRIDE() {
        return winbase_h$constants$0.PROCESS_CREATION_CHILD_PROCESS_OVERRIDE();
    }
    public static @C("int") int PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE() {
        return winbase_h$constants$0.PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE();
    }
    public static @C("int") int PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT() {
        return winbase_h$constants$0.PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT();
    }
    public static @C("int") int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE() {
        return winbase_h$constants$0.PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE();
    }
    public static @C("int") int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE() {
        return winbase_h$constants$0.PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE();
    }
    public static @C("int") int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE() {
        return winbase_h$constants$0.PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE();
    }
    public static @C("int") int ATOM_FLAG_GLOBAL() {
        return winbase_h$constants$0.ATOM_FLAG_GLOBAL();
    }
    public static @C("int") int BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE() {
        return winbase_h$constants$0.BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE();
    }
    public static @C("int") int BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE() {
        return winbase_h$constants$0.BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE();
    }
    public static @C("int") int BASE_SEARCH_PATH_PERMANENT() {
        return winbase_h$constants$0.BASE_SEARCH_PATH_PERMANENT();
    }
    public static @C("int") int DDD_RAW_TARGET_PATH() {
        return winbase_h$constants$0.DDD_RAW_TARGET_PATH();
    }
    public static @C("int") int DDD_REMOVE_DEFINITION() {
        return winbase_h$constants$0.DDD_REMOVE_DEFINITION();
    }
    public static @C("int") int DDD_EXACT_MATCH_ON_REMOVE() {
        return winbase_h$constants$0.DDD_EXACT_MATCH_ON_REMOVE();
    }
    public static @C("int") int DDD_NO_BROADCAST_SYSTEM() {
        return winbase_h$constants$0.DDD_NO_BROADCAST_SYSTEM();
    }
    public static @C("int") int DDD_LUID_BROADCAST_DRIVE() {
        return winbase_h$constants$0.DDD_LUID_BROADCAST_DRIVE();
    }
    public static @C("int") int MOVEFILE_REPLACE_EXISTING() {
        return winbase_h$constants$0.MOVEFILE_REPLACE_EXISTING();
    }
    public static @C("int") int MOVEFILE_COPY_ALLOWED() {
        return winbase_h$constants$0.MOVEFILE_COPY_ALLOWED();
    }
    public static @C("int") int MOVEFILE_DELAY_UNTIL_REBOOT() {
        return winbase_h$constants$0.MOVEFILE_DELAY_UNTIL_REBOOT();
    }
    public static @C("int") int MOVEFILE_WRITE_THROUGH() {
        return winbase_h$constants$0.MOVEFILE_WRITE_THROUGH();
    }
    public static @C("int") int MOVEFILE_CREATE_HARDLINK() {
        return winbase_h$constants$0.MOVEFILE_CREATE_HARDLINK();
    }
    public static @C("int") int MOVEFILE_FAIL_IF_NOT_TRACKABLE() {
        return winbase_h$constants$0.MOVEFILE_FAIL_IF_NOT_TRACKABLE();
    }
    public static @C("int") int EVENTLOG_FULL_INFO() {
        return winbase_h$constants$0.EVENTLOG_FULL_INFO();
    }
    public static @C("int") int OPERATION_API_VERSION() {
        return winbase_h$constants$0.OPERATION_API_VERSION();
    }
    public static @C("int") int OPERATION_START_TRACE_CURRENT_THREAD() {
        return winbase_h$constants$0.OPERATION_START_TRACE_CURRENT_THREAD();
    }
    public static @C("int") int OPERATION_END_DISCARD() {
        return winbase_h$constants$0.OPERATION_END_DISCARD();
    }
    public static @C("int") int MAX_COMPUTERNAME_LENGTH() {
        return winbase_h$constants$0.MAX_COMPUTERNAME_LENGTH();
    }
    public static @C("int") int LOGON32_LOGON_INTERACTIVE() {
        return winbase_h$constants$0.LOGON32_LOGON_INTERACTIVE();
    }
    public static @C("int") int LOGON32_LOGON_NETWORK() {
        return winbase_h$constants$0.LOGON32_LOGON_NETWORK();
    }
    public static @C("int") int LOGON32_LOGON_BATCH() {
        return winbase_h$constants$0.LOGON32_LOGON_BATCH();
    }
    public static @C("int") int LOGON32_LOGON_SERVICE() {
        return winbase_h$constants$0.LOGON32_LOGON_SERVICE();
    }
    public static @C("int") int LOGON32_LOGON_UNLOCK() {
        return winbase_h$constants$0.LOGON32_LOGON_UNLOCK();
    }
    public static @C("int") int LOGON32_LOGON_NETWORK_CLEARTEXT() {
        return winbase_h$constants$0.LOGON32_LOGON_NETWORK_CLEARTEXT();
    }
    public static @C("int") int LOGON32_LOGON_NEW_CREDENTIALS() {
        return winbase_h$constants$0.LOGON32_LOGON_NEW_CREDENTIALS();
    }
    public static @C("int") int LOGON32_PROVIDER_DEFAULT() {
        return winbase_h$constants$0.LOGON32_PROVIDER_DEFAULT();
    }
    public static @C("int") int LOGON32_PROVIDER_WINNT35() {
        return winbase_h$constants$0.LOGON32_PROVIDER_WINNT35();
    }
    public static @C("int") int LOGON32_PROVIDER_WINNT40() {
        return winbase_h$constants$0.LOGON32_PROVIDER_WINNT40();
    }
    public static @C("int") int LOGON32_PROVIDER_WINNT50() {
        return winbase_h$constants$0.LOGON32_PROVIDER_WINNT50();
    }
    public static @C("int") int LOGON32_PROVIDER_VIRTUAL() {
        return winbase_h$constants$0.LOGON32_PROVIDER_VIRTUAL();
    }
    public static @C("int") int LOGON_WITH_PROFILE() {
        return winbase_h$constants$0.LOGON_WITH_PROFILE();
    }
    public static @C("int") int LOGON_NETCREDENTIALS_ONLY() {
        return winbase_h$constants$0.LOGON_NETCREDENTIALS_ONLY();
    }
    public static @C("int") int HW_PROFILE_GUIDLEN() {
        return winbase_h$constants$0.HW_PROFILE_GUIDLEN();
    }
    public static @C("int") int MAX_PROFILE_LEN() {
        return winbase_h$constants$0.MAX_PROFILE_LEN();
    }
    public static @C("int") int TC_NORMAL() {
        return winbase_h$constants$0.TC_NORMAL();
    }
    public static @C("int") int TC_HARDERR() {
        return winbase_h$constants$0.TC_HARDERR();
    }
    public static @C("int") int TC_GP_TRAP() {
        return winbase_h$constants$0.TC_GP_TRAP();
    }
    public static @C("int") int TC_SIGNAL() {
        return winbase_h$constants$0.TC_SIGNAL();
    }
    public static @C("int") int AC_LINE_OFFLINE() {
        return winbase_h$constants$0.AC_LINE_OFFLINE();
    }
    public static @C("int") int AC_LINE_ONLINE() {
        return winbase_h$constants$0.AC_LINE_ONLINE();
    }
    public static @C("int") int AC_LINE_BACKUP_POWER() {
        return winbase_h$constants$0.AC_LINE_BACKUP_POWER();
    }
    public static @C("int") int AC_LINE_UNKNOWN() {
        return winbase_h$constants$0.AC_LINE_UNKNOWN();
    }
    public static @C("int") int BATTERY_FLAG_HIGH() {
        return winbase_h$constants$0.BATTERY_FLAG_HIGH();
    }
    public static @C("int") int BATTERY_FLAG_LOW() {
        return winbase_h$constants$0.BATTERY_FLAG_LOW();
    }
    public static @C("int") int BATTERY_FLAG_CRITICAL() {
        return winbase_h$constants$0.BATTERY_FLAG_CRITICAL();
    }
    public static @C("int") int BATTERY_FLAG_CHARGING() {
        return winbase_h$constants$0.BATTERY_FLAG_CHARGING();
    }
    public static @C("int") int BATTERY_FLAG_NO_BATTERY() {
        return winbase_h$constants$0.BATTERY_FLAG_NO_BATTERY();
    }
    public static @C("int") int BATTERY_FLAG_UNKNOWN() {
        return winbase_h$constants$0.BATTERY_FLAG_UNKNOWN();
    }
    public static @C("int") int BATTERY_PERCENTAGE_UNKNOWN() {
        return winbase_h$constants$0.BATTERY_PERCENTAGE_UNKNOWN();
    }
    public static @C("int") int SYSTEM_STATUS_FLAG_POWER_SAVING_ON() {
        return winbase_h$constants$0.SYSTEM_STATUS_FLAG_POWER_SAVING_ON();
    }
    public static @C("int") int ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED() {
        return winbase_h$constants$0.ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED();
    }
    public static @C("int") int RESTART_MAX_CMD_LINE() {
        return winbase_h$constants$0.RESTART_MAX_CMD_LINE();
    }
    public static @C("int") int RESTART_NO_CRASH() {
        return winbase_h$constants$0.RESTART_NO_CRASH();
    }
    public static @C("int") int RESTART_NO_HANG() {
        return winbase_h$constants$0.RESTART_NO_HANG();
    }
    public static @C("int") int RESTART_NO_PATCH() {
        return winbase_h$constants$0.RESTART_NO_PATCH();
    }
    public static @C("int") int RESTART_NO_REBOOT() {
        return winbase_h$constants$0.RESTART_NO_REBOOT();
    }
    public static @C("int") int RECOVERY_DEFAULT_PING_INTERVAL() {
        return winbase_h$constants$0.RECOVERY_DEFAULT_PING_INTERVAL();
    }
    public static @C("int") int FILE_RENAME_FLAG_REPLACE_IF_EXISTS() {
        return winbase_h$constants$0.FILE_RENAME_FLAG_REPLACE_IF_EXISTS();
    }
    public static @C("int") int FILE_RENAME_FLAG_POSIX_SEMANTICS() {
        return winbase_h$constants$0.FILE_RENAME_FLAG_POSIX_SEMANTICS();
    }
    public static @C("int") int FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE() {
        return winbase_h$constants$0.FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE();
    }
    public static @C("int") int FILE_DISPOSITION_FLAG_DO_NOT_DELETE() {
        return winbase_h$constants$0.FILE_DISPOSITION_FLAG_DO_NOT_DELETE();
    }
    public static @C("int") int FILE_DISPOSITION_FLAG_DELETE() {
        return winbase_h$constants$0.FILE_DISPOSITION_FLAG_DELETE();
    }
    public static @C("int") int FILE_DISPOSITION_FLAG_POSIX_SEMANTICS() {
        return winbase_h$constants$0.FILE_DISPOSITION_FLAG_POSIX_SEMANTICS();
    }
    public static @C("int") int FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK() {
        return winbase_h$constants$0.FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK();
    }
    public static @C("int") int FILE_DISPOSITION_FLAG_ON_CLOSE() {
        return winbase_h$constants$0.FILE_DISPOSITION_FLAG_ON_CLOSE();
    }
    public static @C("int") int FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE() {
        return winbase_h$constants$0.FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE();
    }
    public static @C("int") int STORAGE_INFO_FLAGS_ALIGNED_DEVICE() {
        return winbase_h$constants$0.STORAGE_INFO_FLAGS_ALIGNED_DEVICE();
    }
    public static @C("int") int STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE() {
        return winbase_h$constants$0.STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE();
    }
    public static @C("int") int REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK() {
        return winbase_h$constants$0.REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK();
    }
    public static @C("int") int REMOTE_PROTOCOL_INFO_FLAG_OFFLINE() {
        return winbase_h$constants$0.REMOTE_PROTOCOL_INFO_FLAG_OFFLINE();
    }
    public static @C("int") int REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE() {
        return winbase_h$constants$0.REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE();
    }
    public static @C("int") int RPI_FLAG_SMB2_SHARECAP_TIMEWARP() {
        return winbase_h$constants$0.RPI_FLAG_SMB2_SHARECAP_TIMEWARP();
    }
    public static @C("int") int RPI_FLAG_SMB2_SHARECAP_DFS() {
        return winbase_h$constants$0.RPI_FLAG_SMB2_SHARECAP_DFS();
    }
    public static @C("int") int RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY() {
        return winbase_h$constants$0.RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY();
    }
    public static @C("int") int RPI_FLAG_SMB2_SHARECAP_SCALEOUT() {
        return winbase_h$constants$0.RPI_FLAG_SMB2_SHARECAP_SCALEOUT();
    }
    public static @C("int") int RPI_FLAG_SMB2_SHARECAP_CLUSTER() {
        return winbase_h$constants$0.RPI_FLAG_SMB2_SHARECAP_CLUSTER();
    }
    public static @C("int") int RPI_SMB2_FLAG_SERVERCAP_DFS() {
        return winbase_h$constants$0.RPI_SMB2_FLAG_SERVERCAP_DFS();
    }
    public static @C("int") int RPI_SMB2_FLAG_SERVERCAP_LEASING() {
        return winbase_h$constants$0.RPI_SMB2_FLAG_SERVERCAP_LEASING();
    }
    public static @C("int") int RPI_SMB2_FLAG_SERVERCAP_LARGEMTU() {
        return winbase_h$constants$0.RPI_SMB2_FLAG_SERVERCAP_LARGEMTU();
    }
    public static @C("int") int RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL() {
        return winbase_h$constants$0.RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL();
    }
    public static @C("int") int RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES() {
        return winbase_h$constants$0.RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES();
    }
    public static @C("int") int RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING() {
        return winbase_h$constants$0.RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING();
    }
    public static @C("int") int MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS() {
        return winbase_h$constants$0.MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS();
    }
    @C("struct _COMMPROP")public static class _COMMPROP {

        /* package-private */ _COMMPROP() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$0._COMMPROP$struct$LAYOUT();
        }
        public static VarHandle wPacketLength$VH() {
            return winbase_h$constants$0._COMMPROP$wPacketLength$VH();
        }
        public static  @C("WORD") short wPacketLength$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (short)winbase_h$constants$0._COMMPROP$wPacketLength$VH().get(seg);
        }
        public static  @C("WORD") short wPacketLength$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._COMMPROP$wPacketLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wPacketLength$set(@C("struct _COMMPROP") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._COMMPROP$wPacketLength$VH().set(seg, x);
        }
        public static void wPacketLength$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._COMMPROP$wPacketLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wPacketVersion$VH() {
            return winbase_h$constants$0._COMMPROP$wPacketVersion$VH();
        }
        public static  @C("WORD") short wPacketVersion$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (short)winbase_h$constants$0._COMMPROP$wPacketVersion$VH().get(seg);
        }
        public static  @C("WORD") short wPacketVersion$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._COMMPROP$wPacketVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wPacketVersion$set(@C("struct _COMMPROP") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._COMMPROP$wPacketVersion$VH().set(seg, x);
        }
        public static void wPacketVersion$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._COMMPROP$wPacketVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwServiceMask$VH() {
            return winbase_h$constants$0._COMMPROP$dwServiceMask$VH();
        }
        public static  @C("DWORD") int dwServiceMask$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwServiceMask$VH().get(seg);
        }
        public static  @C("DWORD") int dwServiceMask$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwServiceMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwServiceMask$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwServiceMask$VH().set(seg, x);
        }
        public static void dwServiceMask$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwServiceMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwReserved1$VH() {
            return winbase_h$constants$0._COMMPROP$dwReserved1$VH();
        }
        public static  @C("DWORD") int dwReserved1$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwReserved1$VH().get(seg);
        }
        public static  @C("DWORD") int dwReserved1$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwReserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwReserved1$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwReserved1$VH().set(seg, x);
        }
        public static void dwReserved1$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwReserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMaxTxQueue$VH() {
            return winbase_h$constants$0._COMMPROP$dwMaxTxQueue$VH();
        }
        public static  @C("DWORD") int dwMaxTxQueue$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwMaxTxQueue$VH().get(seg);
        }
        public static  @C("DWORD") int dwMaxTxQueue$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwMaxTxQueue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwMaxTxQueue$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwMaxTxQueue$VH().set(seg, x);
        }
        public static void dwMaxTxQueue$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwMaxTxQueue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMaxRxQueue$VH() {
            return winbase_h$constants$0._COMMPROP$dwMaxRxQueue$VH();
        }
        public static  @C("DWORD") int dwMaxRxQueue$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwMaxRxQueue$VH().get(seg);
        }
        public static  @C("DWORD") int dwMaxRxQueue$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwMaxRxQueue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwMaxRxQueue$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwMaxRxQueue$VH().set(seg, x);
        }
        public static void dwMaxRxQueue$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwMaxRxQueue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMaxBaud$VH() {
            return winbase_h$constants$0._COMMPROP$dwMaxBaud$VH();
        }
        public static  @C("DWORD") int dwMaxBaud$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwMaxBaud$VH().get(seg);
        }
        public static  @C("DWORD") int dwMaxBaud$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwMaxBaud$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwMaxBaud$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwMaxBaud$VH().set(seg, x);
        }
        public static void dwMaxBaud$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwMaxBaud$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwProvSubType$VH() {
            return winbase_h$constants$0._COMMPROP$dwProvSubType$VH();
        }
        public static  @C("DWORD") int dwProvSubType$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwProvSubType$VH().get(seg);
        }
        public static  @C("DWORD") int dwProvSubType$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwProvSubType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwProvSubType$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwProvSubType$VH().set(seg, x);
        }
        public static void dwProvSubType$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwProvSubType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwProvCapabilities$VH() {
            return winbase_h$constants$0._COMMPROP$dwProvCapabilities$VH();
        }
        public static  @C("DWORD") int dwProvCapabilities$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwProvCapabilities$VH().get(seg);
        }
        public static  @C("DWORD") int dwProvCapabilities$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwProvCapabilities$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwProvCapabilities$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwProvCapabilities$VH().set(seg, x);
        }
        public static void dwProvCapabilities$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwProvCapabilities$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwSettableParams$VH() {
            return winbase_h$constants$0._COMMPROP$dwSettableParams$VH();
        }
        public static  @C("DWORD") int dwSettableParams$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwSettableParams$VH().get(seg);
        }
        public static  @C("DWORD") int dwSettableParams$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwSettableParams$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwSettableParams$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwSettableParams$VH().set(seg, x);
        }
        public static void dwSettableParams$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwSettableParams$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwSettableBaud$VH() {
            return winbase_h$constants$0._COMMPROP$dwSettableBaud$VH();
        }
        public static  @C("DWORD") int dwSettableBaud$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwSettableBaud$VH().get(seg);
        }
        public static  @C("DWORD") int dwSettableBaud$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwSettableBaud$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwSettableBaud$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwSettableBaud$VH().set(seg, x);
        }
        public static void dwSettableBaud$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwSettableBaud$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wSettableData$VH() {
            return winbase_h$constants$0._COMMPROP$wSettableData$VH();
        }
        public static  @C("WORD") short wSettableData$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (short)winbase_h$constants$0._COMMPROP$wSettableData$VH().get(seg);
        }
        public static  @C("WORD") short wSettableData$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._COMMPROP$wSettableData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wSettableData$set(@C("struct _COMMPROP") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._COMMPROP$wSettableData$VH().set(seg, x);
        }
        public static void wSettableData$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._COMMPROP$wSettableData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wSettableStopParity$VH() {
            return winbase_h$constants$0._COMMPROP$wSettableStopParity$VH();
        }
        public static  @C("WORD") short wSettableStopParity$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (short)winbase_h$constants$0._COMMPROP$wSettableStopParity$VH().get(seg);
        }
        public static  @C("WORD") short wSettableStopParity$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._COMMPROP$wSettableStopParity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wSettableStopParity$set(@C("struct _COMMPROP") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._COMMPROP$wSettableStopParity$VH().set(seg, x);
        }
        public static void wSettableStopParity$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._COMMPROP$wSettableStopParity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwCurrentTxQueue$VH() {
            return winbase_h$constants$0._COMMPROP$dwCurrentTxQueue$VH();
        }
        public static  @C("DWORD") int dwCurrentTxQueue$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwCurrentTxQueue$VH().get(seg);
        }
        public static  @C("DWORD") int dwCurrentTxQueue$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwCurrentTxQueue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwCurrentTxQueue$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwCurrentTxQueue$VH().set(seg, x);
        }
        public static void dwCurrentTxQueue$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwCurrentTxQueue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwCurrentRxQueue$VH() {
            return winbase_h$constants$0._COMMPROP$dwCurrentRxQueue$VH();
        }
        public static  @C("DWORD") int dwCurrentRxQueue$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwCurrentRxQueue$VH().get(seg);
        }
        public static  @C("DWORD") int dwCurrentRxQueue$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwCurrentRxQueue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwCurrentRxQueue$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwCurrentRxQueue$VH().set(seg, x);
        }
        public static void dwCurrentRxQueue$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwCurrentRxQueue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwProvSpec1$VH() {
            return winbase_h$constants$0._COMMPROP$dwProvSpec1$VH();
        }
        public static  @C("DWORD") int dwProvSpec1$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwProvSpec1$VH().get(seg);
        }
        public static  @C("DWORD") int dwProvSpec1$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwProvSpec1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwProvSpec1$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwProvSpec1$VH().set(seg, x);
        }
        public static void dwProvSpec1$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwProvSpec1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwProvSpec2$VH() {
            return winbase_h$constants$0._COMMPROP$dwProvSpec2$VH();
        }
        public static  @C("DWORD") int dwProvSpec2$get(@C("struct _COMMPROP") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMPROP$dwProvSpec2$VH().get(seg);
        }
        public static  @C("DWORD") int dwProvSpec2$get(@C("struct _COMMPROP") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMPROP$dwProvSpec2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwProvSpec2$set(@C("struct _COMMPROP") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwProvSpec2$VH().set(seg, x);
        }
        public static void dwProvSpec2$set(@C("struct _COMMPROP") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMPROP$dwProvSpec2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment wcProvChar$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(60, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _COMMPROP") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _COMMPROP") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _COMMPROP[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _COMMPROP[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _COMMPROP*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _COMMPROP*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _COMMPROP") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _COMMPROP")public static class COMMPROP extends _COMMPROP {

        /* package-private */ COMMPROP() {}
    }

    @C("struct _COMSTAT")public static class _COMSTAT {

        /* package-private */ _COMSTAT() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$0._COMSTAT$struct$LAYOUT();
        }
        public static VarHandle cbInQue$VH() {
            return winbase_h$constants$0._COMSTAT$cbInQue$VH();
        }
        public static  @C("DWORD") int cbInQue$get(@C("struct _COMSTAT") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMSTAT$cbInQue$VH().get(seg);
        }
        public static  @C("DWORD") int cbInQue$get(@C("struct _COMSTAT") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMSTAT$cbInQue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cbInQue$set(@C("struct _COMSTAT") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMSTAT$cbInQue$VH().set(seg, x);
        }
        public static void cbInQue$set(@C("struct _COMSTAT") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMSTAT$cbInQue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cbOutQue$VH() {
            return winbase_h$constants$0._COMSTAT$cbOutQue$VH();
        }
        public static  @C("DWORD") int cbOutQue$get(@C("struct _COMSTAT") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMSTAT$cbOutQue$VH().get(seg);
        }
        public static  @C("DWORD") int cbOutQue$get(@C("struct _COMSTAT") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMSTAT$cbOutQue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cbOutQue$set(@C("struct _COMSTAT") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMSTAT$cbOutQue$VH().set(seg, x);
        }
        public static void cbOutQue$set(@C("struct _COMSTAT") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMSTAT$cbOutQue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _COMSTAT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _COMSTAT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _COMSTAT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _COMSTAT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _COMSTAT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _COMSTAT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _COMSTAT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _COMSTAT")public static class COMSTAT extends _COMSTAT {

        /* package-private */ COMSTAT() {}
    }

    @C("struct _DCB")public static class _DCB {

        /* package-private */ _DCB() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$0._DCB$struct$LAYOUT();
        }
        public static VarHandle DCBlength$VH() {
            return winbase_h$constants$0._DCB$DCBlength$VH();
        }
        public static  @C("DWORD") int DCBlength$get(@C("struct _DCB") MemorySegment seg) {
            return (int)winbase_h$constants$0._DCB$DCBlength$VH().get(seg);
        }
        public static  @C("DWORD") int DCBlength$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._DCB$DCBlength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DCBlength$set(@C("struct _DCB") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._DCB$DCBlength$VH().set(seg, x);
        }
        public static void DCBlength$set(@C("struct _DCB") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._DCB$DCBlength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaudRate$VH() {
            return winbase_h$constants$0._DCB$BaudRate$VH();
        }
        public static  @C("DWORD") int BaudRate$get(@C("struct _DCB") MemorySegment seg) {
            return (int)winbase_h$constants$0._DCB$BaudRate$VH().get(seg);
        }
        public static  @C("DWORD") int BaudRate$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._DCB$BaudRate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaudRate$set(@C("struct _DCB") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._DCB$BaudRate$VH().set(seg, x);
        }
        public static void BaudRate$set(@C("struct _DCB") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._DCB$BaudRate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wReserved$VH() {
            return winbase_h$constants$0._DCB$wReserved$VH();
        }
        public static  @C("WORD") short wReserved$get(@C("struct _DCB") MemorySegment seg) {
            return (short)winbase_h$constants$0._DCB$wReserved$VH().get(seg);
        }
        public static  @C("WORD") short wReserved$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._DCB$wReserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wReserved$set(@C("struct _DCB") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._DCB$wReserved$VH().set(seg, x);
        }
        public static void wReserved$set(@C("struct _DCB") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._DCB$wReserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle XonLim$VH() {
            return winbase_h$constants$0._DCB$XonLim$VH();
        }
        public static  @C("WORD") short XonLim$get(@C("struct _DCB") MemorySegment seg) {
            return (short)winbase_h$constants$0._DCB$XonLim$VH().get(seg);
        }
        public static  @C("WORD") short XonLim$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._DCB$XonLim$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void XonLim$set(@C("struct _DCB") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._DCB$XonLim$VH().set(seg, x);
        }
        public static void XonLim$set(@C("struct _DCB") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._DCB$XonLim$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle XoffLim$VH() {
            return winbase_h$constants$0._DCB$XoffLim$VH();
        }
        public static  @C("WORD") short XoffLim$get(@C("struct _DCB") MemorySegment seg) {
            return (short)winbase_h$constants$0._DCB$XoffLim$VH().get(seg);
        }
        public static  @C("WORD") short XoffLim$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._DCB$XoffLim$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void XoffLim$set(@C("struct _DCB") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._DCB$XoffLim$VH().set(seg, x);
        }
        public static void XoffLim$set(@C("struct _DCB") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._DCB$XoffLim$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ByteSize$VH() {
            return winbase_h$constants$0._DCB$ByteSize$VH();
        }
        public static  @C("BYTE") byte ByteSize$get(@C("struct _DCB") MemorySegment seg) {
            return (byte)winbase_h$constants$0._DCB$ByteSize$VH().get(seg);
        }
        public static  @C("BYTE") byte ByteSize$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$0._DCB$ByteSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ByteSize$set(@C("struct _DCB") MemorySegment seg, @C("BYTE") byte x) {
            winbase_h$constants$0._DCB$ByteSize$VH().set(seg, x);
        }
        public static void ByteSize$set(@C("struct _DCB") MemorySegment seg, long index, @C("BYTE") byte x) {
            winbase_h$constants$0._DCB$ByteSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Parity$VH() {
            return winbase_h$constants$0._DCB$Parity$VH();
        }
        public static  @C("BYTE") byte Parity$get(@C("struct _DCB") MemorySegment seg) {
            return (byte)winbase_h$constants$0._DCB$Parity$VH().get(seg);
        }
        public static  @C("BYTE") byte Parity$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$0._DCB$Parity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Parity$set(@C("struct _DCB") MemorySegment seg, @C("BYTE") byte x) {
            winbase_h$constants$0._DCB$Parity$VH().set(seg, x);
        }
        public static void Parity$set(@C("struct _DCB") MemorySegment seg, long index, @C("BYTE") byte x) {
            winbase_h$constants$0._DCB$Parity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StopBits$VH() {
            return winbase_h$constants$0._DCB$StopBits$VH();
        }
        public static  @C("BYTE") byte StopBits$get(@C("struct _DCB") MemorySegment seg) {
            return (byte)winbase_h$constants$0._DCB$StopBits$VH().get(seg);
        }
        public static  @C("BYTE") byte StopBits$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$0._DCB$StopBits$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StopBits$set(@C("struct _DCB") MemorySegment seg, @C("BYTE") byte x) {
            winbase_h$constants$0._DCB$StopBits$VH().set(seg, x);
        }
        public static void StopBits$set(@C("struct _DCB") MemorySegment seg, long index, @C("BYTE") byte x) {
            winbase_h$constants$0._DCB$StopBits$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle XonChar$VH() {
            return winbase_h$constants$0._DCB$XonChar$VH();
        }
        public static  @C("char") byte XonChar$get(@C("struct _DCB") MemorySegment seg) {
            return (byte)winbase_h$constants$0._DCB$XonChar$VH().get(seg);
        }
        public static  @C("char") byte XonChar$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$0._DCB$XonChar$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void XonChar$set(@C("struct _DCB") MemorySegment seg, @C("char") byte x) {
            winbase_h$constants$0._DCB$XonChar$VH().set(seg, x);
        }
        public static void XonChar$set(@C("struct _DCB") MemorySegment seg, long index, @C("char") byte x) {
            winbase_h$constants$0._DCB$XonChar$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle XoffChar$VH() {
            return winbase_h$constants$0._DCB$XoffChar$VH();
        }
        public static  @C("char") byte XoffChar$get(@C("struct _DCB") MemorySegment seg) {
            return (byte)winbase_h$constants$0._DCB$XoffChar$VH().get(seg);
        }
        public static  @C("char") byte XoffChar$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$0._DCB$XoffChar$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void XoffChar$set(@C("struct _DCB") MemorySegment seg, @C("char") byte x) {
            winbase_h$constants$0._DCB$XoffChar$VH().set(seg, x);
        }
        public static void XoffChar$set(@C("struct _DCB") MemorySegment seg, long index, @C("char") byte x) {
            winbase_h$constants$0._DCB$XoffChar$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ErrorChar$VH() {
            return winbase_h$constants$0._DCB$ErrorChar$VH();
        }
        public static  @C("char") byte ErrorChar$get(@C("struct _DCB") MemorySegment seg) {
            return (byte)winbase_h$constants$0._DCB$ErrorChar$VH().get(seg);
        }
        public static  @C("char") byte ErrorChar$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$0._DCB$ErrorChar$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ErrorChar$set(@C("struct _DCB") MemorySegment seg, @C("char") byte x) {
            winbase_h$constants$0._DCB$ErrorChar$VH().set(seg, x);
        }
        public static void ErrorChar$set(@C("struct _DCB") MemorySegment seg, long index, @C("char") byte x) {
            winbase_h$constants$0._DCB$ErrorChar$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EofChar$VH() {
            return winbase_h$constants$0._DCB$EofChar$VH();
        }
        public static  @C("char") byte EofChar$get(@C("struct _DCB") MemorySegment seg) {
            return (byte)winbase_h$constants$0._DCB$EofChar$VH().get(seg);
        }
        public static  @C("char") byte EofChar$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$0._DCB$EofChar$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EofChar$set(@C("struct _DCB") MemorySegment seg, @C("char") byte x) {
            winbase_h$constants$0._DCB$EofChar$VH().set(seg, x);
        }
        public static void EofChar$set(@C("struct _DCB") MemorySegment seg, long index, @C("char") byte x) {
            winbase_h$constants$0._DCB$EofChar$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EvtChar$VH() {
            return winbase_h$constants$0._DCB$EvtChar$VH();
        }
        public static  @C("char") byte EvtChar$get(@C("struct _DCB") MemorySegment seg) {
            return (byte)winbase_h$constants$0._DCB$EvtChar$VH().get(seg);
        }
        public static  @C("char") byte EvtChar$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$0._DCB$EvtChar$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EvtChar$set(@C("struct _DCB") MemorySegment seg, @C("char") byte x) {
            winbase_h$constants$0._DCB$EvtChar$VH().set(seg, x);
        }
        public static void EvtChar$set(@C("struct _DCB") MemorySegment seg, long index, @C("char") byte x) {
            winbase_h$constants$0._DCB$EvtChar$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wReserved1$VH() {
            return winbase_h$constants$0._DCB$wReserved1$VH();
        }
        public static  @C("WORD") short wReserved1$get(@C("struct _DCB") MemorySegment seg) {
            return (short)winbase_h$constants$0._DCB$wReserved1$VH().get(seg);
        }
        public static  @C("WORD") short wReserved1$get(@C("struct _DCB") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._DCB$wReserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wReserved1$set(@C("struct _DCB") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._DCB$wReserved1$VH().set(seg, x);
        }
        public static void wReserved1$set(@C("struct _DCB") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._DCB$wReserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _DCB") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _DCB") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _DCB[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _DCB[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _DCB*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _DCB*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _DCB") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _DCB")public static class DCB extends _DCB {

        /* package-private */ DCB() {}
    }

    @C("struct _COMMTIMEOUTS")public static class _COMMTIMEOUTS {

        /* package-private */ _COMMTIMEOUTS() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$0._COMMTIMEOUTS$struct$LAYOUT();
        }
        public static VarHandle ReadIntervalTimeout$VH() {
            return winbase_h$constants$0._COMMTIMEOUTS$ReadIntervalTimeout$VH();
        }
        public static  @C("DWORD") int ReadIntervalTimeout$get(@C("struct _COMMTIMEOUTS") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMTIMEOUTS$ReadIntervalTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int ReadIntervalTimeout$get(@C("struct _COMMTIMEOUTS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMTIMEOUTS$ReadIntervalTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReadIntervalTimeout$set(@C("struct _COMMTIMEOUTS") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMTIMEOUTS$ReadIntervalTimeout$VH().set(seg, x);
        }
        public static void ReadIntervalTimeout$set(@C("struct _COMMTIMEOUTS") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMTIMEOUTS$ReadIntervalTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReadTotalTimeoutMultiplier$VH() {
            return winbase_h$constants$0._COMMTIMEOUTS$ReadTotalTimeoutMultiplier$VH();
        }
        public static  @C("DWORD") int ReadTotalTimeoutMultiplier$get(@C("struct _COMMTIMEOUTS") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMTIMEOUTS$ReadTotalTimeoutMultiplier$VH().get(seg);
        }
        public static  @C("DWORD") int ReadTotalTimeoutMultiplier$get(@C("struct _COMMTIMEOUTS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMTIMEOUTS$ReadTotalTimeoutMultiplier$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReadTotalTimeoutMultiplier$set(@C("struct _COMMTIMEOUTS") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMTIMEOUTS$ReadTotalTimeoutMultiplier$VH().set(seg, x);
        }
        public static void ReadTotalTimeoutMultiplier$set(@C("struct _COMMTIMEOUTS") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMTIMEOUTS$ReadTotalTimeoutMultiplier$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReadTotalTimeoutConstant$VH() {
            return winbase_h$constants$0._COMMTIMEOUTS$ReadTotalTimeoutConstant$VH();
        }
        public static  @C("DWORD") int ReadTotalTimeoutConstant$get(@C("struct _COMMTIMEOUTS") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMTIMEOUTS$ReadTotalTimeoutConstant$VH().get(seg);
        }
        public static  @C("DWORD") int ReadTotalTimeoutConstant$get(@C("struct _COMMTIMEOUTS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMTIMEOUTS$ReadTotalTimeoutConstant$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReadTotalTimeoutConstant$set(@C("struct _COMMTIMEOUTS") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMTIMEOUTS$ReadTotalTimeoutConstant$VH().set(seg, x);
        }
        public static void ReadTotalTimeoutConstant$set(@C("struct _COMMTIMEOUTS") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMTIMEOUTS$ReadTotalTimeoutConstant$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle WriteTotalTimeoutMultiplier$VH() {
            return winbase_h$constants$0._COMMTIMEOUTS$WriteTotalTimeoutMultiplier$VH();
        }
        public static  @C("DWORD") int WriteTotalTimeoutMultiplier$get(@C("struct _COMMTIMEOUTS") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMTIMEOUTS$WriteTotalTimeoutMultiplier$VH().get(seg);
        }
        public static  @C("DWORD") int WriteTotalTimeoutMultiplier$get(@C("struct _COMMTIMEOUTS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMTIMEOUTS$WriteTotalTimeoutMultiplier$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void WriteTotalTimeoutMultiplier$set(@C("struct _COMMTIMEOUTS") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMTIMEOUTS$WriteTotalTimeoutMultiplier$VH().set(seg, x);
        }
        public static void WriteTotalTimeoutMultiplier$set(@C("struct _COMMTIMEOUTS") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMTIMEOUTS$WriteTotalTimeoutMultiplier$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle WriteTotalTimeoutConstant$VH() {
            return winbase_h$constants$0._COMMTIMEOUTS$WriteTotalTimeoutConstant$VH();
        }
        public static  @C("DWORD") int WriteTotalTimeoutConstant$get(@C("struct _COMMTIMEOUTS") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMTIMEOUTS$WriteTotalTimeoutConstant$VH().get(seg);
        }
        public static  @C("DWORD") int WriteTotalTimeoutConstant$get(@C("struct _COMMTIMEOUTS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMTIMEOUTS$WriteTotalTimeoutConstant$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void WriteTotalTimeoutConstant$set(@C("struct _COMMTIMEOUTS") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMTIMEOUTS$WriteTotalTimeoutConstant$VH().set(seg, x);
        }
        public static void WriteTotalTimeoutConstant$set(@C("struct _COMMTIMEOUTS") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMTIMEOUTS$WriteTotalTimeoutConstant$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _COMMTIMEOUTS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _COMMTIMEOUTS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _COMMTIMEOUTS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _COMMTIMEOUTS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _COMMTIMEOUTS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _COMMTIMEOUTS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _COMMTIMEOUTS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _COMMTIMEOUTS")public static class COMMTIMEOUTS extends _COMMTIMEOUTS {

        /* package-private */ COMMTIMEOUTS() {}
    }

    @C("struct _COMMCONFIG")public static class _COMMCONFIG {

        /* package-private */ _COMMCONFIG() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$0._COMMCONFIG$struct$LAYOUT();
        }
        public static VarHandle dwSize$VH() {
            return winbase_h$constants$0._COMMCONFIG$dwSize$VH();
        }
        public static  @C("DWORD") int dwSize$get(@C("struct _COMMCONFIG") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMCONFIG$dwSize$VH().get(seg);
        }
        public static  @C("DWORD") int dwSize$get(@C("struct _COMMCONFIG") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMCONFIG$dwSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwSize$set(@C("struct _COMMCONFIG") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMCONFIG$dwSize$VH().set(seg, x);
        }
        public static void dwSize$set(@C("struct _COMMCONFIG") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMCONFIG$dwSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wVersion$VH() {
            return winbase_h$constants$0._COMMCONFIG$wVersion$VH();
        }
        public static  @C("WORD") short wVersion$get(@C("struct _COMMCONFIG") MemorySegment seg) {
            return (short)winbase_h$constants$0._COMMCONFIG$wVersion$VH().get(seg);
        }
        public static  @C("WORD") short wVersion$get(@C("struct _COMMCONFIG") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._COMMCONFIG$wVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wVersion$set(@C("struct _COMMCONFIG") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._COMMCONFIG$wVersion$VH().set(seg, x);
        }
        public static void wVersion$set(@C("struct _COMMCONFIG") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._COMMCONFIG$wVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wReserved$VH() {
            return winbase_h$constants$0._COMMCONFIG$wReserved$VH();
        }
        public static  @C("WORD") short wReserved$get(@C("struct _COMMCONFIG") MemorySegment seg) {
            return (short)winbase_h$constants$0._COMMCONFIG$wReserved$VH().get(seg);
        }
        public static  @C("WORD") short wReserved$get(@C("struct _COMMCONFIG") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._COMMCONFIG$wReserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wReserved$set(@C("struct _COMMCONFIG") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._COMMCONFIG$wReserved$VH().set(seg, x);
        }
        public static void wReserved$set(@C("struct _COMMCONFIG") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._COMMCONFIG$wReserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment dcb$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 28));
        }
        public static VarHandle dwProviderSubType$VH() {
            return winbase_h$constants$0._COMMCONFIG$dwProviderSubType$VH();
        }
        public static  @C("DWORD") int dwProviderSubType$get(@C("struct _COMMCONFIG") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMCONFIG$dwProviderSubType$VH().get(seg);
        }
        public static  @C("DWORD") int dwProviderSubType$get(@C("struct _COMMCONFIG") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMCONFIG$dwProviderSubType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwProviderSubType$set(@C("struct _COMMCONFIG") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMCONFIG$dwProviderSubType$VH().set(seg, x);
        }
        public static void dwProviderSubType$set(@C("struct _COMMCONFIG") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMCONFIG$dwProviderSubType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwProviderOffset$VH() {
            return winbase_h$constants$0._COMMCONFIG$dwProviderOffset$VH();
        }
        public static  @C("DWORD") int dwProviderOffset$get(@C("struct _COMMCONFIG") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMCONFIG$dwProviderOffset$VH().get(seg);
        }
        public static  @C("DWORD") int dwProviderOffset$get(@C("struct _COMMCONFIG") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMCONFIG$dwProviderOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwProviderOffset$set(@C("struct _COMMCONFIG") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMCONFIG$dwProviderOffset$VH().set(seg, x);
        }
        public static void dwProviderOffset$set(@C("struct _COMMCONFIG") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMCONFIG$dwProviderOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwProviderSize$VH() {
            return winbase_h$constants$0._COMMCONFIG$dwProviderSize$VH();
        }
        public static  @C("DWORD") int dwProviderSize$get(@C("struct _COMMCONFIG") MemorySegment seg) {
            return (int)winbase_h$constants$0._COMMCONFIG$dwProviderSize$VH().get(seg);
        }
        public static  @C("DWORD") int dwProviderSize$get(@C("struct _COMMCONFIG") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._COMMCONFIG$dwProviderSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwProviderSize$set(@C("struct _COMMCONFIG") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._COMMCONFIG$dwProviderSize$VH().set(seg, x);
        }
        public static void dwProviderSize$set(@C("struct _COMMCONFIG") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._COMMCONFIG$dwProviderSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment wcProviderData$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _COMMCONFIG") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _COMMCONFIG") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _COMMCONFIG[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _COMMCONFIG[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _COMMCONFIG*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _COMMCONFIG*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _COMMCONFIG") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _COMMCONFIG")public static class COMMCONFIG extends _COMMCONFIG {

        /* package-private */ COMMCONFIG() {}
    }

    @C("struct _MEMORYSTATUS")public static class _MEMORYSTATUS {

        /* package-private */ _MEMORYSTATUS() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$0._MEMORYSTATUS$struct$LAYOUT();
        }
        public static VarHandle dwLength$VH() {
            return winbase_h$constants$0._MEMORYSTATUS$dwLength$VH();
        }
        public static  @C("DWORD") int dwLength$get(@C("struct _MEMORYSTATUS") MemorySegment seg) {
            return (int)winbase_h$constants$0._MEMORYSTATUS$dwLength$VH().get(seg);
        }
        public static  @C("DWORD") int dwLength$get(@C("struct _MEMORYSTATUS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._MEMORYSTATUS$dwLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwLength$set(@C("struct _MEMORYSTATUS") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._MEMORYSTATUS$dwLength$VH().set(seg, x);
        }
        public static void dwLength$set(@C("struct _MEMORYSTATUS") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._MEMORYSTATUS$dwLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMemoryLoad$VH() {
            return winbase_h$constants$0._MEMORYSTATUS$dwMemoryLoad$VH();
        }
        public static  @C("DWORD") int dwMemoryLoad$get(@C("struct _MEMORYSTATUS") MemorySegment seg) {
            return (int)winbase_h$constants$0._MEMORYSTATUS$dwMemoryLoad$VH().get(seg);
        }
        public static  @C("DWORD") int dwMemoryLoad$get(@C("struct _MEMORYSTATUS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._MEMORYSTATUS$dwMemoryLoad$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwMemoryLoad$set(@C("struct _MEMORYSTATUS") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._MEMORYSTATUS$dwMemoryLoad$VH().set(seg, x);
        }
        public static void dwMemoryLoad$set(@C("struct _MEMORYSTATUS") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._MEMORYSTATUS$dwMemoryLoad$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwTotalPhys$VH() {
            return winbase_h$constants$0._MEMORYSTATUS$dwTotalPhys$VH();
        }
        public static  @C("SIZE_T") long dwTotalPhys$get(@C("struct _MEMORYSTATUS") MemorySegment seg) {
            return (long)winbase_h$constants$0._MEMORYSTATUS$dwTotalPhys$VH().get(seg);
        }
        public static  @C("SIZE_T") long dwTotalPhys$get(@C("struct _MEMORYSTATUS") MemorySegment seg, long index) {
            return (long)winbase_h$constants$0._MEMORYSTATUS$dwTotalPhys$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwTotalPhys$set(@C("struct _MEMORYSTATUS") MemorySegment seg, @C("SIZE_T") long x) {
            winbase_h$constants$0._MEMORYSTATUS$dwTotalPhys$VH().set(seg, x);
        }
        public static void dwTotalPhys$set(@C("struct _MEMORYSTATUS") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winbase_h$constants$0._MEMORYSTATUS$dwTotalPhys$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwAvailPhys$VH() {
            return winbase_h$constants$0._MEMORYSTATUS$dwAvailPhys$VH();
        }
        public static  @C("SIZE_T") long dwAvailPhys$get(@C("struct _MEMORYSTATUS") MemorySegment seg) {
            return (long)winbase_h$constants$0._MEMORYSTATUS$dwAvailPhys$VH().get(seg);
        }
        public static  @C("SIZE_T") long dwAvailPhys$get(@C("struct _MEMORYSTATUS") MemorySegment seg, long index) {
            return (long)winbase_h$constants$0._MEMORYSTATUS$dwAvailPhys$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwAvailPhys$set(@C("struct _MEMORYSTATUS") MemorySegment seg, @C("SIZE_T") long x) {
            winbase_h$constants$0._MEMORYSTATUS$dwAvailPhys$VH().set(seg, x);
        }
        public static void dwAvailPhys$set(@C("struct _MEMORYSTATUS") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winbase_h$constants$0._MEMORYSTATUS$dwAvailPhys$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwTotalPageFile$VH() {
            return winbase_h$constants$0._MEMORYSTATUS$dwTotalPageFile$VH();
        }
        public static  @C("SIZE_T") long dwTotalPageFile$get(@C("struct _MEMORYSTATUS") MemorySegment seg) {
            return (long)winbase_h$constants$0._MEMORYSTATUS$dwTotalPageFile$VH().get(seg);
        }
        public static  @C("SIZE_T") long dwTotalPageFile$get(@C("struct _MEMORYSTATUS") MemorySegment seg, long index) {
            return (long)winbase_h$constants$0._MEMORYSTATUS$dwTotalPageFile$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwTotalPageFile$set(@C("struct _MEMORYSTATUS") MemorySegment seg, @C("SIZE_T") long x) {
            winbase_h$constants$0._MEMORYSTATUS$dwTotalPageFile$VH().set(seg, x);
        }
        public static void dwTotalPageFile$set(@C("struct _MEMORYSTATUS") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winbase_h$constants$0._MEMORYSTATUS$dwTotalPageFile$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwAvailPageFile$VH() {
            return winbase_h$constants$0._MEMORYSTATUS$dwAvailPageFile$VH();
        }
        public static  @C("SIZE_T") long dwAvailPageFile$get(@C("struct _MEMORYSTATUS") MemorySegment seg) {
            return (long)winbase_h$constants$0._MEMORYSTATUS$dwAvailPageFile$VH().get(seg);
        }
        public static  @C("SIZE_T") long dwAvailPageFile$get(@C("struct _MEMORYSTATUS") MemorySegment seg, long index) {
            return (long)winbase_h$constants$0._MEMORYSTATUS$dwAvailPageFile$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwAvailPageFile$set(@C("struct _MEMORYSTATUS") MemorySegment seg, @C("SIZE_T") long x) {
            winbase_h$constants$0._MEMORYSTATUS$dwAvailPageFile$VH().set(seg, x);
        }
        public static void dwAvailPageFile$set(@C("struct _MEMORYSTATUS") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winbase_h$constants$0._MEMORYSTATUS$dwAvailPageFile$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwTotalVirtual$VH() {
            return winbase_h$constants$0._MEMORYSTATUS$dwTotalVirtual$VH();
        }
        public static  @C("SIZE_T") long dwTotalVirtual$get(@C("struct _MEMORYSTATUS") MemorySegment seg) {
            return (long)winbase_h$constants$0._MEMORYSTATUS$dwTotalVirtual$VH().get(seg);
        }
        public static  @C("SIZE_T") long dwTotalVirtual$get(@C("struct _MEMORYSTATUS") MemorySegment seg, long index) {
            return (long)winbase_h$constants$0._MEMORYSTATUS$dwTotalVirtual$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwTotalVirtual$set(@C("struct _MEMORYSTATUS") MemorySegment seg, @C("SIZE_T") long x) {
            winbase_h$constants$0._MEMORYSTATUS$dwTotalVirtual$VH().set(seg, x);
        }
        public static void dwTotalVirtual$set(@C("struct _MEMORYSTATUS") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winbase_h$constants$0._MEMORYSTATUS$dwTotalVirtual$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwAvailVirtual$VH() {
            return winbase_h$constants$0._MEMORYSTATUS$dwAvailVirtual$VH();
        }
        public static  @C("SIZE_T") long dwAvailVirtual$get(@C("struct _MEMORYSTATUS") MemorySegment seg) {
            return (long)winbase_h$constants$0._MEMORYSTATUS$dwAvailVirtual$VH().get(seg);
        }
        public static  @C("SIZE_T") long dwAvailVirtual$get(@C("struct _MEMORYSTATUS") MemorySegment seg, long index) {
            return (long)winbase_h$constants$0._MEMORYSTATUS$dwAvailVirtual$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwAvailVirtual$set(@C("struct _MEMORYSTATUS") MemorySegment seg, @C("SIZE_T") long x) {
            winbase_h$constants$0._MEMORYSTATUS$dwAvailVirtual$VH().set(seg, x);
        }
        public static void dwAvailVirtual$set(@C("struct _MEMORYSTATUS") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winbase_h$constants$0._MEMORYSTATUS$dwAvailVirtual$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _MEMORYSTATUS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _MEMORYSTATUS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _MEMORYSTATUS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _MEMORYSTATUS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _MEMORYSTATUS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _MEMORYSTATUS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _MEMORYSTATUS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _MEMORYSTATUS")public static class MEMORYSTATUS extends _MEMORYSTATUS {

        /* package-private */ MEMORYSTATUS() {}
    }

    @C("struct _JIT_DEBUG_INFO")public static class _JIT_DEBUG_INFO {

        /* package-private */ _JIT_DEBUG_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$0._JIT_DEBUG_INFO$struct$LAYOUT();
        }
        public static VarHandle dwSize$VH() {
            return winbase_h$constants$0._JIT_DEBUG_INFO$dwSize$VH();
        }
        public static  @C("DWORD") int dwSize$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$0._JIT_DEBUG_INFO$dwSize$VH().get(seg);
        }
        public static  @C("DWORD") int dwSize$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._JIT_DEBUG_INFO$dwSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwSize$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$dwSize$VH().set(seg, x);
        }
        public static void dwSize$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$dwSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwProcessorArchitecture$VH() {
            return winbase_h$constants$0._JIT_DEBUG_INFO$dwProcessorArchitecture$VH();
        }
        public static  @C("DWORD") int dwProcessorArchitecture$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$0._JIT_DEBUG_INFO$dwProcessorArchitecture$VH().get(seg);
        }
        public static  @C("DWORD") int dwProcessorArchitecture$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._JIT_DEBUG_INFO$dwProcessorArchitecture$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwProcessorArchitecture$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$dwProcessorArchitecture$VH().set(seg, x);
        }
        public static void dwProcessorArchitecture$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$dwProcessorArchitecture$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwThreadID$VH() {
            return winbase_h$constants$0._JIT_DEBUG_INFO$dwThreadID$VH();
        }
        public static  @C("DWORD") int dwThreadID$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$0._JIT_DEBUG_INFO$dwThreadID$VH().get(seg);
        }
        public static  @C("DWORD") int dwThreadID$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._JIT_DEBUG_INFO$dwThreadID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwThreadID$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$dwThreadID$VH().set(seg, x);
        }
        public static void dwThreadID$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$dwThreadID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwReserved0$VH() {
            return winbase_h$constants$0._JIT_DEBUG_INFO$dwReserved0$VH();
        }
        public static  @C("DWORD") int dwReserved0$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$0._JIT_DEBUG_INFO$dwReserved0$VH().get(seg);
        }
        public static  @C("DWORD") int dwReserved0$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._JIT_DEBUG_INFO$dwReserved0$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwReserved0$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$dwReserved0$VH().set(seg, x);
        }
        public static void dwReserved0$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$dwReserved0$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpExceptionAddress$VH() {
            return winbase_h$constants$0._JIT_DEBUG_INFO$lpExceptionAddress$VH();
        }
        public static  @C("ULONG64") long lpExceptionAddress$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg) {
            return (long)winbase_h$constants$0._JIT_DEBUG_INFO$lpExceptionAddress$VH().get(seg);
        }
        public static  @C("ULONG64") long lpExceptionAddress$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index) {
            return (long)winbase_h$constants$0._JIT_DEBUG_INFO$lpExceptionAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpExceptionAddress$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, @C("ULONG64") long x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$lpExceptionAddress$VH().set(seg, x);
        }
        public static void lpExceptionAddress$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index, @C("ULONG64") long x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$lpExceptionAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpExceptionRecord$VH() {
            return winbase_h$constants$0._JIT_DEBUG_INFO$lpExceptionRecord$VH();
        }
        public static  @C("ULONG64") long lpExceptionRecord$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg) {
            return (long)winbase_h$constants$0._JIT_DEBUG_INFO$lpExceptionRecord$VH().get(seg);
        }
        public static  @C("ULONG64") long lpExceptionRecord$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index) {
            return (long)winbase_h$constants$0._JIT_DEBUG_INFO$lpExceptionRecord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpExceptionRecord$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, @C("ULONG64") long x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$lpExceptionRecord$VH().set(seg, x);
        }
        public static void lpExceptionRecord$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index, @C("ULONG64") long x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$lpExceptionRecord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpContextRecord$VH() {
            return winbase_h$constants$0._JIT_DEBUG_INFO$lpContextRecord$VH();
        }
        public static  @C("ULONG64") long lpContextRecord$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg) {
            return (long)winbase_h$constants$0._JIT_DEBUG_INFO$lpContextRecord$VH().get(seg);
        }
        public static  @C("ULONG64") long lpContextRecord$get(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index) {
            return (long)winbase_h$constants$0._JIT_DEBUG_INFO$lpContextRecord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpContextRecord$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, @C("ULONG64") long x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$lpContextRecord$VH().set(seg, x);
        }
        public static void lpContextRecord$set(@C("struct _JIT_DEBUG_INFO") MemorySegment seg, long index, @C("ULONG64") long x) {
            winbase_h$constants$0._JIT_DEBUG_INFO$lpContextRecord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JIT_DEBUG_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JIT_DEBUG_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JIT_DEBUG_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JIT_DEBUG_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JIT_DEBUG_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JIT_DEBUG_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JIT_DEBUG_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JIT_DEBUG_INFO")public static class JIT_DEBUG_INFO extends _JIT_DEBUG_INFO {

        /* package-private */ JIT_DEBUG_INFO() {}
    }

    @C("struct _JIT_DEBUG_INFO")public static class JIT_DEBUG_INFO32 extends _JIT_DEBUG_INFO {

        /* package-private */ JIT_DEBUG_INFO32() {}
    }

    @C("struct _JIT_DEBUG_INFO")public static class JIT_DEBUG_INFO64 extends _JIT_DEBUG_INFO {

        /* package-private */ JIT_DEBUG_INFO64() {}
    }

    @C("struct _OFSTRUCT")public static class _OFSTRUCT {

        /* package-private */ _OFSTRUCT() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$0._OFSTRUCT$struct$LAYOUT();
        }
        public static VarHandle cBytes$VH() {
            return winbase_h$constants$0._OFSTRUCT$cBytes$VH();
        }
        public static  @C("BYTE") byte cBytes$get(@C("struct _OFSTRUCT") MemorySegment seg) {
            return (byte)winbase_h$constants$0._OFSTRUCT$cBytes$VH().get(seg);
        }
        public static  @C("BYTE") byte cBytes$get(@C("struct _OFSTRUCT") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$0._OFSTRUCT$cBytes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cBytes$set(@C("struct _OFSTRUCT") MemorySegment seg, @C("BYTE") byte x) {
            winbase_h$constants$0._OFSTRUCT$cBytes$VH().set(seg, x);
        }
        public static void cBytes$set(@C("struct _OFSTRUCT") MemorySegment seg, long index, @C("BYTE") byte x) {
            winbase_h$constants$0._OFSTRUCT$cBytes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle fFixedDisk$VH() {
            return winbase_h$constants$0._OFSTRUCT$fFixedDisk$VH();
        }
        public static  @C("BYTE") byte fFixedDisk$get(@C("struct _OFSTRUCT") MemorySegment seg) {
            return (byte)winbase_h$constants$0._OFSTRUCT$fFixedDisk$VH().get(seg);
        }
        public static  @C("BYTE") byte fFixedDisk$get(@C("struct _OFSTRUCT") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$0._OFSTRUCT$fFixedDisk$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void fFixedDisk$set(@C("struct _OFSTRUCT") MemorySegment seg, @C("BYTE") byte x) {
            winbase_h$constants$0._OFSTRUCT$fFixedDisk$VH().set(seg, x);
        }
        public static void fFixedDisk$set(@C("struct _OFSTRUCT") MemorySegment seg, long index, @C("BYTE") byte x) {
            winbase_h$constants$0._OFSTRUCT$fFixedDisk$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle nErrCode$VH() {
            return winbase_h$constants$0._OFSTRUCT$nErrCode$VH();
        }
        public static  @C("WORD") short nErrCode$get(@C("struct _OFSTRUCT") MemorySegment seg) {
            return (short)winbase_h$constants$0._OFSTRUCT$nErrCode$VH().get(seg);
        }
        public static  @C("WORD") short nErrCode$get(@C("struct _OFSTRUCT") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._OFSTRUCT$nErrCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void nErrCode$set(@C("struct _OFSTRUCT") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._OFSTRUCT$nErrCode$VH().set(seg, x);
        }
        public static void nErrCode$set(@C("struct _OFSTRUCT") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._OFSTRUCT$nErrCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved1$VH() {
            return winbase_h$constants$0._OFSTRUCT$Reserved1$VH();
        }
        public static  @C("WORD") short Reserved1$get(@C("struct _OFSTRUCT") MemorySegment seg) {
            return (short)winbase_h$constants$0._OFSTRUCT$Reserved1$VH().get(seg);
        }
        public static  @C("WORD") short Reserved1$get(@C("struct _OFSTRUCT") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._OFSTRUCT$Reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved1$set(@C("struct _OFSTRUCT") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._OFSTRUCT$Reserved1$VH().set(seg, x);
        }
        public static void Reserved1$set(@C("struct _OFSTRUCT") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._OFSTRUCT$Reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved2$VH() {
            return winbase_h$constants$0._OFSTRUCT$Reserved2$VH();
        }
        public static  @C("WORD") short Reserved2$get(@C("struct _OFSTRUCT") MemorySegment seg) {
            return (short)winbase_h$constants$0._OFSTRUCT$Reserved2$VH().get(seg);
        }
        public static  @C("WORD") short Reserved2$get(@C("struct _OFSTRUCT") MemorySegment seg, long index) {
            return (short)winbase_h$constants$0._OFSTRUCT$Reserved2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved2$set(@C("struct _OFSTRUCT") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$0._OFSTRUCT$Reserved2$VH().set(seg, x);
        }
        public static void Reserved2$set(@C("struct _OFSTRUCT") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$0._OFSTRUCT$Reserved2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment szPathName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 128));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _OFSTRUCT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _OFSTRUCT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _OFSTRUCT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _OFSTRUCT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _OFSTRUCT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _OFSTRUCT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _OFSTRUCT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _OFSTRUCT")public static class OFSTRUCT extends _OFSTRUCT {

        /* package-private */ OFSTRUCT() {}
    }

    public static  MethodHandle WinMain$MH() {
        return winbase_h$constants$0.WinMain$MH();
    }
    public static @C("int") int WinMain (@C("HINSTANCE") Addressable hInstance, @C("HINSTANCE") Addressable hPrevInstance, @C("LPSTR") Addressable lpCmdLine, @C("int") int nShowCmd) {
        try {
            return (int)winbase_h$constants$0.WinMain$MH().invokeExact(hInstance.address(), hPrevInstance.address(), lpCmdLine.address(), nShowCmd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wWinMain$MH() {
        return winbase_h$constants$0.wWinMain$MH();
    }
    public static @C("int") int wWinMain (@C("HINSTANCE") Addressable hInstance, @C("HINSTANCE") Addressable hPrevInstance, @C("LPWSTR") Addressable lpCmdLine, @C("int") int nShowCmd) {
        try {
            return (int)winbase_h$constants$0.wWinMain$MH().invokeExact(hInstance.address(), hPrevInstance.address(), lpCmdLine.address(), nShowCmd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalAlloc$MH() {
        return winbase_h$constants$0.GlobalAlloc$MH();
    }
    public static @C("HGLOBAL") MemoryAddress GlobalAlloc (@C("UINT") int uFlags, @C("SIZE_T") long dwBytes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.GlobalAlloc$MH().invokeExact(uFlags, dwBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalReAlloc$MH() {
        return winbase_h$constants$0.GlobalReAlloc$MH();
    }
    public static @C("HGLOBAL") MemoryAddress GlobalReAlloc (@C("HGLOBAL") Addressable hMem, @C("SIZE_T") long dwBytes, @C("UINT") int uFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.GlobalReAlloc$MH().invokeExact(hMem.address(), dwBytes, uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalSize$MH() {
        return winbase_h$constants$0.GlobalSize$MH();
    }
    public static @C("SIZE_T") long GlobalSize (@C("HGLOBAL") Addressable hMem) {
        try {
            return (long)winbase_h$constants$0.GlobalSize$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalUnlock$MH() {
        return winbase_h$constants$0.GlobalUnlock$MH();
    }
    public static @C("BOOL") int GlobalUnlock (@C("HGLOBAL") Addressable hMem) {
        try {
            return (int)winbase_h$constants$0.GlobalUnlock$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalLock$MH() {
        return winbase_h$constants$0.GlobalLock$MH();
    }
    public static @C("LPVOID") MemoryAddress GlobalLock (@C("HGLOBAL") Addressable hMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.GlobalLock$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalFlags$MH() {
        return winbase_h$constants$0.GlobalFlags$MH();
    }
    public static @C("UINT") int GlobalFlags (@C("HGLOBAL") Addressable hMem) {
        try {
            return (int)winbase_h$constants$0.GlobalFlags$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalHandle$MH() {
        return winbase_h$constants$0.GlobalHandle$MH();
    }
    public static @C("HGLOBAL") MemoryAddress GlobalHandle (@C("LPCVOID") Addressable pMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.GlobalHandle$MH().invokeExact(pMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalFree$MH() {
        return winbase_h$constants$0.GlobalFree$MH();
    }
    public static @C("HGLOBAL") MemoryAddress GlobalFree (@C("HGLOBAL") Addressable hMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.GlobalFree$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalCompact$MH() {
        return winbase_h$constants$0.GlobalCompact$MH();
    }
    public static @C("SIZE_T") long GlobalCompact (@C("DWORD") int dwMinFree) {
        try {
            return (long)winbase_h$constants$0.GlobalCompact$MH().invokeExact(dwMinFree);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalFix$MH() {
        return winbase_h$constants$0.GlobalFix$MH();
    }
    public static void GlobalFix (@C("HGLOBAL") Addressable hMem) {
        try {
            winbase_h$constants$0.GlobalFix$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalUnfix$MH() {
        return winbase_h$constants$0.GlobalUnfix$MH();
    }
    public static void GlobalUnfix (@C("HGLOBAL") Addressable hMem) {
        try {
            winbase_h$constants$0.GlobalUnfix$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalWire$MH() {
        return winbase_h$constants$0.GlobalWire$MH();
    }
    public static @C("LPVOID") MemoryAddress GlobalWire (@C("HGLOBAL") Addressable hMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.GlobalWire$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalUnWire$MH() {
        return winbase_h$constants$0.GlobalUnWire$MH();
    }
    public static @C("BOOL") int GlobalUnWire (@C("HGLOBAL") Addressable hMem) {
        try {
            return (int)winbase_h$constants$0.GlobalUnWire$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalMemoryStatus$MH() {
        return winbase_h$constants$0.GlobalMemoryStatus$MH();
    }
    public static void GlobalMemoryStatus (@C("LPMEMORYSTATUS") Addressable lpBuffer) {
        try {
            winbase_h$constants$0.GlobalMemoryStatus$MH().invokeExact(lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalAlloc$MH() {
        return winbase_h$constants$0.LocalAlloc$MH();
    }
    public static @C("HLOCAL") MemoryAddress LocalAlloc (@C("UINT") int uFlags, @C("SIZE_T") long uBytes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.LocalAlloc$MH().invokeExact(uFlags, uBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalReAlloc$MH() {
        return winbase_h$constants$0.LocalReAlloc$MH();
    }
    public static @C("HLOCAL") MemoryAddress LocalReAlloc (@C("HLOCAL") Addressable hMem, @C("SIZE_T") long uBytes, @C("UINT") int uFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.LocalReAlloc$MH().invokeExact(hMem.address(), uBytes, uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalLock$MH() {
        return winbase_h$constants$0.LocalLock$MH();
    }
    public static @C("LPVOID") MemoryAddress LocalLock (@C("HLOCAL") Addressable hMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.LocalLock$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalHandle$MH() {
        return winbase_h$constants$0.LocalHandle$MH();
    }
    public static @C("HLOCAL") MemoryAddress LocalHandle (@C("LPCVOID") Addressable pMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.LocalHandle$MH().invokeExact(pMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalUnlock$MH() {
        return winbase_h$constants$0.LocalUnlock$MH();
    }
    public static @C("BOOL") int LocalUnlock (@C("HLOCAL") Addressable hMem) {
        try {
            return (int)winbase_h$constants$0.LocalUnlock$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalSize$MH() {
        return winbase_h$constants$0.LocalSize$MH();
    }
    public static @C("SIZE_T") long LocalSize (@C("HLOCAL") Addressable hMem) {
        try {
            return (long)winbase_h$constants$0.LocalSize$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalFlags$MH() {
        return winbase_h$constants$0.LocalFlags$MH();
    }
    public static @C("UINT") int LocalFlags (@C("HLOCAL") Addressable hMem) {
        try {
            return (int)winbase_h$constants$0.LocalFlags$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalFree$MH() {
        return winbase_h$constants$0.LocalFree$MH();
    }
    public static @C("HLOCAL") MemoryAddress LocalFree (@C("HLOCAL") Addressable hMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.LocalFree$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalShrink$MH() {
        return winbase_h$constants$0.LocalShrink$MH();
    }
    public static @C("SIZE_T") long LocalShrink (@C("HLOCAL") Addressable hMem, @C("UINT") int cbNewSize) {
        try {
            return (long)winbase_h$constants$0.LocalShrink$MH().invokeExact(hMem.address(), cbNewSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalCompact$MH() {
        return winbase_h$constants$0.LocalCompact$MH();
    }
    public static @C("SIZE_T") long LocalCompact (@C("UINT") int uMinFree) {
        try {
            return (long)winbase_h$constants$0.LocalCompact$MH().invokeExact(uMinFree);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetBinaryTypeA$MH() {
        return winbase_h$constants$0.GetBinaryTypeA$MH();
    }
    public static @C("BOOL") int GetBinaryTypeA (@C("LPCSTR") Addressable lpApplicationName, @C("LPDWORD") Addressable lpBinaryType) {
        try {
            return (int)winbase_h$constants$0.GetBinaryTypeA$MH().invokeExact(lpApplicationName.address(), lpBinaryType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetBinaryTypeW$MH() {
        return winbase_h$constants$0.GetBinaryTypeW$MH();
    }
    public static @C("BOOL") int GetBinaryTypeW (@C("LPCWSTR") Addressable lpApplicationName, @C("LPDWORD") Addressable lpBinaryType) {
        try {
            return (int)winbase_h$constants$0.GetBinaryTypeW$MH().invokeExact(lpApplicationName.address(), lpBinaryType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetShortPathNameA$MH() {
        return winbase_h$constants$0.GetShortPathNameA$MH();
    }
    public static @C("DWORD") int GetShortPathNameA (@C("LPCSTR") Addressable lpszLongPath, @C("LPSTR") Addressable lpszShortPath, @C("DWORD") int cchBuffer) {
        try {
            return (int)winbase_h$constants$0.GetShortPathNameA$MH().invokeExact(lpszLongPath.address(), lpszShortPath.address(), cchBuffer);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLongPathNameTransactedA$MH() {
        return winbase_h$constants$0.GetLongPathNameTransactedA$MH();
    }
    public static @C("DWORD") int GetLongPathNameTransactedA (@C("LPCSTR") Addressable lpszShortPath, @C("LPSTR") Addressable lpszLongPath, @C("DWORD") int cchBuffer, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$0.GetLongPathNameTransactedA$MH().invokeExact(lpszShortPath.address(), lpszLongPath.address(), cchBuffer, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLongPathNameTransactedW$MH() {
        return winbase_h$constants$0.GetLongPathNameTransactedW$MH();
    }
    public static @C("DWORD") int GetLongPathNameTransactedW (@C("LPCWSTR") Addressable lpszShortPath, @C("LPWSTR") Addressable lpszLongPath, @C("DWORD") int cchBuffer, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$0.GetLongPathNameTransactedW$MH().invokeExact(lpszShortPath.address(), lpszLongPath.address(), cchBuffer, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessAffinityMask$MH() {
        return winbase_h$constants$0.GetProcessAffinityMask$MH();
    }
    public static @C("BOOL") int GetProcessAffinityMask (@C("HANDLE") Addressable hProcess, @C("PDWORD_PTR") Addressable lpProcessAffinityMask, @C("PDWORD_PTR") Addressable lpSystemAffinityMask) {
        try {
            return (int)winbase_h$constants$0.GetProcessAffinityMask$MH().invokeExact(hProcess.address(), lpProcessAffinityMask.address(), lpSystemAffinityMask.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessAffinityMask$MH() {
        return winbase_h$constants$0.SetProcessAffinityMask$MH();
    }
    public static @C("BOOL") int SetProcessAffinityMask (@C("HANDLE") Addressable hProcess, @C("DWORD_PTR") long dwProcessAffinityMask) {
        try {
            return (int)winbase_h$constants$0.SetProcessAffinityMask$MH().invokeExact(hProcess.address(), dwProcessAffinityMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessIoCounters$MH() {
        return winbase_h$constants$0.GetProcessIoCounters$MH();
    }
    public static @C("BOOL") int GetProcessIoCounters (@C("HANDLE") Addressable hProcess, @C("PIO_COUNTERS") Addressable lpIoCounters) {
        try {
            return (int)winbase_h$constants$0.GetProcessIoCounters$MH().invokeExact(hProcess.address(), lpIoCounters.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessWorkingSetSize$MH() {
        return winbase_h$constants$0.GetProcessWorkingSetSize$MH();
    }
    public static @C("BOOL") int GetProcessWorkingSetSize (@C("HANDLE") Addressable hProcess, @C("PSIZE_T") Addressable lpMinimumWorkingSetSize, @C("PSIZE_T") Addressable lpMaximumWorkingSetSize) {
        try {
            return (int)winbase_h$constants$0.GetProcessWorkingSetSize$MH().invokeExact(hProcess.address(), lpMinimumWorkingSetSize.address(), lpMaximumWorkingSetSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessWorkingSetSize$MH() {
        return winbase_h$constants$0.SetProcessWorkingSetSize$MH();
    }
    public static @C("BOOL") int SetProcessWorkingSetSize (@C("HANDLE") Addressable hProcess, @C("SIZE_T") long dwMinimumWorkingSetSize, @C("SIZE_T") long dwMaximumWorkingSetSize) {
        try {
            return (int)winbase_h$constants$0.SetProcessWorkingSetSize$MH().invokeExact(hProcess.address(), dwMinimumWorkingSetSize, dwMaximumWorkingSetSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FatalExit$MH() {
        return winbase_h$constants$0.FatalExit$MH();
    }
    public static void FatalExit (@C("int") int ExitCode) {
        try {
            winbase_h$constants$0.FatalExit$MH().invokeExact(ExitCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetEnvironmentStringsA$MH() {
        return winbase_h$constants$0.SetEnvironmentStringsA$MH();
    }
    public static @C("BOOL") int SetEnvironmentStringsA (@C("LPCH") Addressable NewEnvironment) {
        try {
            return (int)winbase_h$constants$0.SetEnvironmentStringsA$MH().invokeExact(NewEnvironment.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SwitchToFiber$MH() {
        return winbase_h$constants$0.SwitchToFiber$MH();
    }
    public static void SwitchToFiber (@C("LPVOID") Addressable lpFiber) {
        try {
            winbase_h$constants$0.SwitchToFiber$MH().invokeExact(lpFiber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteFiber$MH() {
        return winbase_h$constants$0.DeleteFiber$MH();
    }
    public static void DeleteFiber (@C("LPVOID") Addressable lpFiber) {
        try {
            winbase_h$constants$0.DeleteFiber$MH().invokeExact(lpFiber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ConvertFiberToThread$MH() {
        return winbase_h$constants$0.ConvertFiberToThread$MH();
    }
    public static @C("BOOL") int ConvertFiberToThread () {
        try {
            return (int)winbase_h$constants$0.ConvertFiberToThread$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFiberEx$MH() {
        return winbase_h$constants$0.CreateFiberEx$MH();
    }
    public static @C("LPVOID") MemoryAddress CreateFiberEx (@C("SIZE_T") long dwStackCommitSize, @C("SIZE_T") long dwStackReserveSize, @C("DWORD") int dwFlags, @C("LPFIBER_START_ROUTINE") Addressable lpStartAddress, @C("LPVOID") Addressable lpParameter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.CreateFiberEx$MH().invokeExact(dwStackCommitSize, dwStackReserveSize, dwFlags, lpStartAddress.address(), lpParameter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface CreateFiberEx$lpStartAddress {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  @C("LPFIBER_START_ROUTINE") MemorySegment allocate(CreateFiberEx$lpStartAddress fi) {
            return RuntimeHelper.upcallStub(CreateFiberEx$lpStartAddress.class, fi, winbase_h$constants$0.CreateFiberEx$lpStartAddress$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  @C("LPFIBER_START_ROUTINE") MemorySegment allocate(CreateFiberEx$lpStartAddress fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle ConvertThreadToFiberEx$MH() {
        return winbase_h$constants$0.ConvertThreadToFiberEx$MH();
    }
    public static @C("LPVOID") MemoryAddress ConvertThreadToFiberEx (@C("LPVOID") Addressable lpParameter, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.ConvertThreadToFiberEx$MH().invokeExact(lpParameter.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFiber$MH() {
        return winbase_h$constants$0.CreateFiber$MH();
    }
    public static @C("LPVOID") MemoryAddress CreateFiber (@C("SIZE_T") long dwStackSize, @C("LPFIBER_START_ROUTINE") Addressable lpStartAddress, @C("LPVOID") Addressable lpParameter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.CreateFiber$MH().invokeExact(dwStackSize, lpStartAddress.address(), lpParameter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface CreateFiber$lpStartAddress {

        void apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  @C("LPFIBER_START_ROUTINE") MemorySegment allocate(CreateFiber$lpStartAddress fi) {
            return RuntimeHelper.upcallStub(CreateFiber$lpStartAddress.class, fi, winbase_h$constants$0.CreateFiber$lpStartAddress$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  @C("LPFIBER_START_ROUTINE") MemorySegment allocate(CreateFiber$lpStartAddress fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle ConvertThreadToFiber$MH() {
        return winbase_h$constants$0.ConvertThreadToFiber$MH();
    }
    public static @C("LPVOID") MemoryAddress ConvertThreadToFiber (@C("LPVOID") Addressable lpParameter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.ConvertThreadToFiber$MH().invokeExact(lpParameter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int UmsThreadInvalidInfoClass() {
        return winbase_h$constants$0.UmsThreadInvalidInfoClass();
    }
    public static @C("int") int UmsThreadUserContext() {
        return winbase_h$constants$0.UmsThreadUserContext();
    }
    public static @C("int") int UmsThreadPriority() {
        return winbase_h$constants$0.UmsThreadPriority();
    }
    public static @C("int") int UmsThreadAffinity() {
        return winbase_h$constants$0.UmsThreadAffinity();
    }
    public static @C("int") int UmsThreadTeb() {
        return winbase_h$constants$0.UmsThreadTeb();
    }
    public static @C("int") int UmsThreadIsSuspended() {
        return winbase_h$constants$0.UmsThreadIsSuspended();
    }
    public static @C("int") int UmsThreadIsTerminated() {
        return winbase_h$constants$0.UmsThreadIsTerminated();
    }
    public static @C("int") int UmsThreadMaxInfoClass() {
        return winbase_h$constants$0.UmsThreadMaxInfoClass();
    }
    public static @C("int") int UmsSchedulerStartup() {
        return winbase_h$constants$0.UmsSchedulerStartup();
    }
    public static @C("int") int UmsSchedulerThreadBlocked() {
        return winbase_h$constants$0.UmsSchedulerThreadBlocked();
    }
    public static @C("int") int UmsSchedulerThreadYield() {
        return winbase_h$constants$0.UmsSchedulerThreadYield();
    }
    @C("struct _UMS_SCHEDULER_STARTUP_INFO")public static class _UMS_SCHEDULER_STARTUP_INFO {

        /* package-private */ _UMS_SCHEDULER_STARTUP_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT();
        }
        public static VarHandle UmsVersion$VH() {
            return winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$UmsVersion$VH();
        }
        public static  @C("ULONG") int UmsVersion$get(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$UmsVersion$VH().get(seg);
        }
        public static  @C("ULONG") int UmsVersion$get(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$UmsVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UmsVersion$set(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$UmsVersion$VH().set(seg, x);
        }
        public static void UmsVersion$set(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$UmsVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CompletionList$VH() {
            return winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$CompletionList$VH();
        }
        public static  @C("PUMS_COMPLETION_LIST") MemoryAddress CompletionList$get(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$CompletionList$VH().get(seg);
        }
        public static  @C("PUMS_COMPLETION_LIST") MemoryAddress CompletionList$get(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$CompletionList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CompletionList$set(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg, @C("PUMS_COMPLETION_LIST") MemoryAddress x) {
            winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$CompletionList$VH().set(seg, x);
        }
        public static void CompletionList$set(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg, long index, @C("PUMS_COMPLETION_LIST") MemoryAddress x) {
            winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$CompletionList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SchedulerProc$VH() {
            return winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$VH();
        }
        public static  @C("PUMS_SCHEDULER_ENTRY_POINT") MemoryAddress SchedulerProc$get(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$VH().get(seg);
        }
        public static  @C("PUMS_SCHEDULER_ENTRY_POINT") MemoryAddress SchedulerProc$get(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SchedulerProc$set(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg, @C("PUMS_SCHEDULER_ENTRY_POINT") MemoryAddress x) {
            winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$VH().set(seg, x);
        }
        public static void SchedulerProc$set(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg, long index, @C("PUMS_SCHEDULER_ENTRY_POINT") MemoryAddress x) {
            winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SchedulerParam$VH() {
            return winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$VH();
        }
        public static  @C("PVOID") MemoryAddress SchedulerParam$get(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress SchedulerParam$get(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SchedulerParam$set(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$VH().set(seg, x);
        }
        public static void SchedulerParam$set(@C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$0._UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _UMS_SCHEDULER_STARTUP_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _UMS_SCHEDULER_STARTUP_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _UMS_SCHEDULER_STARTUP_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _UMS_SCHEDULER_STARTUP_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _UMS_SCHEDULER_STARTUP_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _UMS_SCHEDULER_STARTUP_INFO")public static class UMS_SCHEDULER_STARTUP_INFO extends _UMS_SCHEDULER_STARTUP_INFO {

        /* package-private */ UMS_SCHEDULER_STARTUP_INFO() {}
    }

    @C("struct _UMS_SYSTEM_THREAD_INFORMATION")public static class _UMS_SYSTEM_THREAD_INFORMATION {

        /* package-private */ _UMS_SYSTEM_THREAD_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$0._UMS_SYSTEM_THREAD_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle UmsVersion$VH() {
            return winbase_h$constants$0._UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$VH();
        }
        public static  @C("ULONG") int UmsVersion$get(@C("struct _UMS_SYSTEM_THREAD_INFORMATION") MemorySegment seg) {
            return (int)winbase_h$constants$0._UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$VH().get(seg);
        }
        public static  @C("ULONG") int UmsVersion$get(@C("struct _UMS_SYSTEM_THREAD_INFORMATION") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UmsVersion$set(@C("struct _UMS_SYSTEM_THREAD_INFORMATION") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$0._UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$VH().set(seg, x);
        }
        public static void UmsVersion$set(@C("struct _UMS_SYSTEM_THREAD_INFORMATION") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$0._UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ThreadUmsFlags$VH() {
            return winbase_h$constants$0._UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$VH();
        }
        public static  @C("ULONG") int ThreadUmsFlags$get(@C("struct _UMS_SYSTEM_THREAD_INFORMATION") MemorySegment seg) {
            return (int)winbase_h$constants$0._UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$VH().get(seg);
        }
        public static  @C("ULONG") int ThreadUmsFlags$get(@C("struct _UMS_SYSTEM_THREAD_INFORMATION") MemorySegment seg, long index) {
            return (int)winbase_h$constants$0._UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ThreadUmsFlags$set(@C("struct _UMS_SYSTEM_THREAD_INFORMATION") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$0._UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$VH().set(seg, x);
        }
        public static void ThreadUmsFlags$set(@C("struct _UMS_SYSTEM_THREAD_INFORMATION") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$0._UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _UMS_SYSTEM_THREAD_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _UMS_SYSTEM_THREAD_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _UMS_SYSTEM_THREAD_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _UMS_SYSTEM_THREAD_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _UMS_SYSTEM_THREAD_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _UMS_SYSTEM_THREAD_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _UMS_SYSTEM_THREAD_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _UMS_SYSTEM_THREAD_INFORMATION")public static class UMS_SYSTEM_THREAD_INFORMATION extends _UMS_SYSTEM_THREAD_INFORMATION {

        /* package-private */ UMS_SYSTEM_THREAD_INFORMATION() {}
    }

    public static  MethodHandle CreateUmsCompletionList$MH() {
        return winbase_h$constants$0.CreateUmsCompletionList$MH();
    }
    public static @C("BOOL") int CreateUmsCompletionList (@C("PUMS_COMPLETION_LIST*") Addressable UmsCompletionList) {
        try {
            return (int)winbase_h$constants$0.CreateUmsCompletionList$MH().invokeExact(UmsCompletionList.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DequeueUmsCompletionListItems$MH() {
        return winbase_h$constants$0.DequeueUmsCompletionListItems$MH();
    }
    public static @C("BOOL") int DequeueUmsCompletionListItems (@C("PUMS_COMPLETION_LIST") Addressable UmsCompletionList, @C("DWORD") int WaitTimeOut, @C("PUMS_CONTEXT*") Addressable UmsThreadList) {
        try {
            return (int)winbase_h$constants$0.DequeueUmsCompletionListItems$MH().invokeExact(UmsCompletionList.address(), WaitTimeOut, UmsThreadList.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUmsCompletionListEvent$MH() {
        return winbase_h$constants$0.GetUmsCompletionListEvent$MH();
    }
    public static @C("BOOL") int GetUmsCompletionListEvent (@C("PUMS_COMPLETION_LIST") Addressable UmsCompletionList, @C("PHANDLE") Addressable UmsCompletionEvent) {
        try {
            return (int)winbase_h$constants$0.GetUmsCompletionListEvent$MH().invokeExact(UmsCompletionList.address(), UmsCompletionEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExecuteUmsThread$MH() {
        return winbase_h$constants$0.ExecuteUmsThread$MH();
    }
    public static @C("BOOL") int ExecuteUmsThread (@C("PUMS_CONTEXT") Addressable UmsThread) {
        try {
            return (int)winbase_h$constants$0.ExecuteUmsThread$MH().invokeExact(UmsThread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UmsThreadYield$MH() {
        return winbase_h$constants$0.UmsThreadYield$MH();
    }
    public static @C("BOOL") int UmsThreadYield (@C("PVOID") Addressable SchedulerParam) {
        try {
            return (int)winbase_h$constants$0.UmsThreadYield$MH().invokeExact(SchedulerParam.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteUmsCompletionList$MH() {
        return winbase_h$constants$0.DeleteUmsCompletionList$MH();
    }
    public static @C("BOOL") int DeleteUmsCompletionList (@C("PUMS_COMPLETION_LIST") Addressable UmsCompletionList) {
        try {
            return (int)winbase_h$constants$0.DeleteUmsCompletionList$MH().invokeExact(UmsCompletionList.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentUmsThread$MH() {
        return winbase_h$constants$0.GetCurrentUmsThread$MH();
    }
    public static @C("PUMS_CONTEXT") MemoryAddress GetCurrentUmsThread () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.GetCurrentUmsThread$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNextUmsListItem$MH() {
        return winbase_h$constants$0.GetNextUmsListItem$MH();
    }
    public static @C("PUMS_CONTEXT") MemoryAddress GetNextUmsListItem (@C("PUMS_CONTEXT") Addressable UmsContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.GetNextUmsListItem$MH().invokeExact(UmsContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryUmsThreadInformation$MH() {
        return winbase_h$constants$0.QueryUmsThreadInformation$MH();
    }
    public static @C("BOOL") int QueryUmsThreadInformation (@C("PUMS_CONTEXT") Addressable UmsThread, @C("UMS_THREAD_INFO_CLASS") int UmsThreadInfoClass, @C("PVOID") Addressable UmsThreadInformation, @C("ULONG") int UmsThreadInformationLength, @C("PULONG") Addressable ReturnLength) {
        try {
            return (int)winbase_h$constants$0.QueryUmsThreadInformation$MH().invokeExact(UmsThread.address(), UmsThreadInfoClass, UmsThreadInformation.address(), UmsThreadInformationLength, ReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetUmsThreadInformation$MH() {
        return winbase_h$constants$0.SetUmsThreadInformation$MH();
    }
    public static @C("BOOL") int SetUmsThreadInformation (@C("PUMS_CONTEXT") Addressable UmsThread, @C("UMS_THREAD_INFO_CLASS") int UmsThreadInfoClass, @C("PVOID") Addressable UmsThreadInformation, @C("ULONG") int UmsThreadInformationLength) {
        try {
            return (int)winbase_h$constants$0.SetUmsThreadInformation$MH().invokeExact(UmsThread.address(), UmsThreadInfoClass, UmsThreadInformation.address(), UmsThreadInformationLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteUmsThreadContext$MH() {
        return winbase_h$constants$0.DeleteUmsThreadContext$MH();
    }
    public static @C("BOOL") int DeleteUmsThreadContext (@C("PUMS_CONTEXT") Addressable UmsThread) {
        try {
            return (int)winbase_h$constants$0.DeleteUmsThreadContext$MH().invokeExact(UmsThread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateUmsThreadContext$MH() {
        return winbase_h$constants$0.CreateUmsThreadContext$MH();
    }
    public static @C("BOOL") int CreateUmsThreadContext (@C("PUMS_CONTEXT*") Addressable lpUmsThread) {
        try {
            return (int)winbase_h$constants$0.CreateUmsThreadContext$MH().invokeExact(lpUmsThread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnterUmsSchedulingMode$MH() {
        return winbase_h$constants$0.EnterUmsSchedulingMode$MH();
    }
    public static @C("BOOL") int EnterUmsSchedulingMode (@C("PUMS_SCHEDULER_STARTUP_INFO") Addressable SchedulerStartupInfo) {
        try {
            return (int)winbase_h$constants$0.EnterUmsSchedulingMode$MH().invokeExact(SchedulerStartupInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUmsSystemThreadInformation$MH() {
        return winbase_h$constants$0.GetUmsSystemThreadInformation$MH();
    }
    public static @C("BOOL") int GetUmsSystemThreadInformation (@C("HANDLE") Addressable ThreadHandle, @C("PUMS_SYSTEM_THREAD_INFORMATION") Addressable SystemThreadInfo) {
        try {
            return (int)winbase_h$constants$0.GetUmsSystemThreadInformation$MH().invokeExact(ThreadHandle.address(), SystemThreadInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadAffinityMask$MH() {
        return winbase_h$constants$0.SetThreadAffinityMask$MH();
    }
    public static @C("DWORD_PTR") long SetThreadAffinityMask (@C("HANDLE") Addressable hThread, @C("DWORD_PTR") long dwThreadAffinityMask) {
        try {
            return (long)winbase_h$constants$0.SetThreadAffinityMask$MH().invokeExact(hThread.address(), dwThreadAffinityMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessDEPPolicy$MH() {
        return winbase_h$constants$0.SetProcessDEPPolicy$MH();
    }
    public static @C("BOOL") int SetProcessDEPPolicy (@C("DWORD") int dwFlags) {
        try {
            return (int)winbase_h$constants$0.SetProcessDEPPolicy$MH().invokeExact(dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessDEPPolicy$MH() {
        return winbase_h$constants$0.GetProcessDEPPolicy$MH();
    }
    public static @C("BOOL") int GetProcessDEPPolicy (@C("HANDLE") Addressable hProcess, @C("LPDWORD") Addressable lpFlags, @C("PBOOL") Addressable lpPermanent) {
        try {
            return (int)winbase_h$constants$0.GetProcessDEPPolicy$MH().invokeExact(hProcess.address(), lpFlags.address(), lpPermanent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RequestWakeupLatency$MH() {
        return winbase_h$constants$0.RequestWakeupLatency$MH();
    }
    public static @C("BOOL") int RequestWakeupLatency (@C("LATENCY_TIME") int latency) {
        try {
            return (int)winbase_h$constants$0.RequestWakeupLatency$MH().invokeExact(latency);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsSystemResumeAutomatic$MH() {
        return winbase_h$constants$0.IsSystemResumeAutomatic$MH();
    }
    public static @C("BOOL") int IsSystemResumeAutomatic () {
        try {
            return (int)winbase_h$constants$0.IsSystemResumeAutomatic$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadSelectorEntry$MH() {
        return winbase_h$constants$0.GetThreadSelectorEntry$MH();
    }
    public static @C("BOOL") int GetThreadSelectorEntry (@C("HANDLE") Addressable hThread, @C("DWORD") int dwSelector, @C("LPLDT_ENTRY") Addressable lpSelectorEntry) {
        try {
            return (int)winbase_h$constants$0.GetThreadSelectorEntry$MH().invokeExact(hThread.address(), dwSelector, lpSelectorEntry.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadExecutionState$MH() {
        return winbase_h$constants$0.SetThreadExecutionState$MH();
    }
    public static @C("EXECUTION_STATE") int SetThreadExecutionState (@C("EXECUTION_STATE") int esFlags) {
        try {
            return (int)winbase_h$constants$0.SetThreadExecutionState$MH().invokeExact(esFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PowerCreateRequest$MH() {
        return winbase_h$constants$0.PowerCreateRequest$MH();
    }
    public static @C("HANDLE") MemoryAddress PowerCreateRequest (@C("PREASON_CONTEXT") Addressable Context) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.PowerCreateRequest$MH().invokeExact(Context.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PowerSetRequest$MH() {
        return winbase_h$constants$0.PowerSetRequest$MH();
    }
    public static @C("BOOL") int PowerSetRequest (@C("HANDLE") Addressable PowerRequest, @C("POWER_REQUEST_TYPE") int RequestType) {
        try {
            return (int)winbase_h$constants$0.PowerSetRequest$MH().invokeExact(PowerRequest.address(), RequestType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PowerClearRequest$MH() {
        return winbase_h$constants$0.PowerClearRequest$MH();
    }
    public static @C("BOOL") int PowerClearRequest (@C("HANDLE") Addressable PowerRequest, @C("POWER_REQUEST_TYPE") int RequestType) {
        try {
            return (int)winbase_h$constants$0.PowerClearRequest$MH().invokeExact(PowerRequest.address(), RequestType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileCompletionNotificationModes$MH() {
        return winbase_h$constants$0.SetFileCompletionNotificationModes$MH();
    }
    public static @C("BOOL") int SetFileCompletionNotificationModes (@C("HANDLE") Addressable FileHandle, @C("UCHAR") byte Flags) {
        try {
            return (int)winbase_h$constants$0.SetFileCompletionNotificationModes$MH().invokeExact(FileHandle.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Wow64GetThreadSelectorEntry$MH() {
        return winbase_h$constants$0.Wow64GetThreadSelectorEntry$MH();
    }
    public static @C("BOOL") int Wow64GetThreadSelectorEntry (@C("HANDLE") Addressable hThread, @C("DWORD") int dwSelector, @C("PWOW64_LDT_ENTRY") Addressable lpSelectorEntry) {
        try {
            return (int)winbase_h$constants$0.Wow64GetThreadSelectorEntry$MH().invokeExact(hThread.address(), dwSelector, lpSelectorEntry.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DebugSetProcessKillOnExit$MH() {
        return winbase_h$constants$0.DebugSetProcessKillOnExit$MH();
    }
    public static @C("BOOL") int DebugSetProcessKillOnExit (@C("BOOL") int KillOnExit) {
        try {
            return (int)winbase_h$constants$0.DebugSetProcessKillOnExit$MH().invokeExact(KillOnExit);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DebugBreakProcess$MH() {
        return winbase_h$constants$0.DebugBreakProcess$MH();
    }
    public static @C("BOOL") int DebugBreakProcess (@C("HANDLE") Addressable Process) {
        try {
            return (int)winbase_h$constants$0.DebugBreakProcess$MH().invokeExact(Process.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PulseEvent$MH() {
        return winbase_h$constants$0.PulseEvent$MH();
    }
    public static @C("BOOL") int PulseEvent (@C("HANDLE") Addressable hEvent) {
        try {
            return (int)winbase_h$constants$0.PulseEvent$MH().invokeExact(hEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalDeleteAtom$MH() {
        return winbase_h$constants$0.GlobalDeleteAtom$MH();
    }
    public static @C("ATOM") short GlobalDeleteAtom (@C("ATOM") short nAtom) {
        try {
            return (short)winbase_h$constants$0.GlobalDeleteAtom$MH().invokeExact(nAtom);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitAtomTable$MH() {
        return winbase_h$constants$0.InitAtomTable$MH();
    }
    public static @C("BOOL") int InitAtomTable (@C("DWORD") int nSize) {
        try {
            return (int)winbase_h$constants$0.InitAtomTable$MH().invokeExact(nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteAtom$MH() {
        return winbase_h$constants$0.DeleteAtom$MH();
    }
    public static @C("ATOM") short DeleteAtom (@C("ATOM") short nAtom) {
        try {
            return (short)winbase_h$constants$0.DeleteAtom$MH().invokeExact(nAtom);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetHandleCount$MH() {
        return winbase_h$constants$0.SetHandleCount$MH();
    }
    public static @C("UINT") int SetHandleCount (@C("UINT") int uNumber) {
        try {
            return (int)winbase_h$constants$0.SetHandleCount$MH().invokeExact(uNumber);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RequestDeviceWakeup$MH() {
        return winbase_h$constants$0.RequestDeviceWakeup$MH();
    }
    public static @C("BOOL") int RequestDeviceWakeup (@C("HANDLE") Addressable hDevice) {
        try {
            return (int)winbase_h$constants$0.RequestDeviceWakeup$MH().invokeExact(hDevice.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CancelDeviceWakeupRequest$MH() {
        return winbase_h$constants$0.CancelDeviceWakeupRequest$MH();
    }
    public static @C("BOOL") int CancelDeviceWakeupRequest (@C("HANDLE") Addressable hDevice) {
        try {
            return (int)winbase_h$constants$0.CancelDeviceWakeupRequest$MH().invokeExact(hDevice.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDevicePowerState$MH() {
        return winbase_h$constants$0.GetDevicePowerState$MH();
    }
    public static @C("BOOL") int GetDevicePowerState (@C("HANDLE") Addressable hDevice, @C("BOOL*") Addressable pfOn) {
        try {
            return (int)winbase_h$constants$0.GetDevicePowerState$MH().invokeExact(hDevice.address(), pfOn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMessageWaitingIndicator$MH() {
        return winbase_h$constants$0.SetMessageWaitingIndicator$MH();
    }
    public static @C("BOOL") int SetMessageWaitingIndicator (@C("HANDLE") Addressable hMsgIndicator, @C("ULONG") int ulMsgCount) {
        try {
            return (int)winbase_h$constants$0.SetMessageWaitingIndicator$MH().invokeExact(hMsgIndicator.address(), ulMsgCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileShortNameA$MH() {
        return winbase_h$constants$0.SetFileShortNameA$MH();
    }
    public static @C("BOOL") int SetFileShortNameA (@C("HANDLE") Addressable hFile, @C("LPCSTR") Addressable lpShortName) {
        try {
            return (int)winbase_h$constants$0.SetFileShortNameA$MH().invokeExact(hFile.address(), lpShortName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileShortNameW$MH() {
        return winbase_h$constants$0.SetFileShortNameW$MH();
    }
    public static @C("BOOL") int SetFileShortNameW (@C("HANDLE") Addressable hFile, @C("LPCWSTR") Addressable lpShortName) {
        try {
            return (int)winbase_h$constants$0.SetFileShortNameW$MH().invokeExact(hFile.address(), lpShortName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadModule$MH() {
        return winbase_h$constants$0.LoadModule$MH();
    }
    public static @C("DWORD") int LoadModule (@C("LPCSTR") Addressable lpModuleName, @C("LPVOID") Addressable lpParameterBlock) {
        try {
            return (int)winbase_h$constants$0.LoadModule$MH().invokeExact(lpModuleName.address(), lpParameterBlock.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WinExec$MH() {
        return winbase_h$constants$0.WinExec$MH();
    }
    public static @C("UINT") int WinExec (@C("LPCSTR") Addressable lpCmdLine, @C("UINT") int uCmdShow) {
        try {
            return (int)winbase_h$constants$0.WinExec$MH().invokeExact(lpCmdLine.address(), uCmdShow);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ClearCommBreak$MH() {
        return winbase_h$constants$0.ClearCommBreak$MH();
    }
    public static @C("BOOL") int ClearCommBreak (@C("HANDLE") Addressable hFile) {
        try {
            return (int)winbase_h$constants$0.ClearCommBreak$MH().invokeExact(hFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ClearCommError$MH() {
        return winbase_h$constants$0.ClearCommError$MH();
    }
    public static @C("BOOL") int ClearCommError (@C("HANDLE") Addressable hFile, @C("LPDWORD") Addressable lpErrors, @C("LPCOMSTAT") Addressable lpStat) {
        try {
            return (int)winbase_h$constants$0.ClearCommError$MH().invokeExact(hFile.address(), lpErrors.address(), lpStat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetupComm$MH() {
        return winbase_h$constants$0.SetupComm$MH();
    }
    public static @C("BOOL") int SetupComm (@C("HANDLE") Addressable hFile, @C("DWORD") int dwInQueue, @C("DWORD") int dwOutQueue) {
        try {
            return (int)winbase_h$constants$0.SetupComm$MH().invokeExact(hFile.address(), dwInQueue, dwOutQueue);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EscapeCommFunction$MH() {
        return winbase_h$constants$0.EscapeCommFunction$MH();
    }
    public static @C("BOOL") int EscapeCommFunction (@C("HANDLE") Addressable hFile, @C("DWORD") int dwFunc) {
        try {
            return (int)winbase_h$constants$0.EscapeCommFunction$MH().invokeExact(hFile.address(), dwFunc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommConfig$MH() {
        return winbase_h$constants$0.GetCommConfig$MH();
    }
    public static @C("BOOL") int GetCommConfig (@C("HANDLE") Addressable hCommDev, @C("LPCOMMCONFIG") Addressable lpCC, @C("LPDWORD") Addressable lpdwSize) {
        try {
            return (int)winbase_h$constants$0.GetCommConfig$MH().invokeExact(hCommDev.address(), lpCC.address(), lpdwSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommMask$MH() {
        return winbase_h$constants$0.GetCommMask$MH();
    }
    public static @C("BOOL") int GetCommMask (@C("HANDLE") Addressable hFile, @C("LPDWORD") Addressable lpEvtMask) {
        try {
            return (int)winbase_h$constants$0.GetCommMask$MH().invokeExact(hFile.address(), lpEvtMask.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommProperties$MH() {
        return winbase_h$constants$0.GetCommProperties$MH();
    }
    public static @C("BOOL") int GetCommProperties (@C("HANDLE") Addressable hFile, @C("LPCOMMPROP") Addressable lpCommProp) {
        try {
            return (int)winbase_h$constants$0.GetCommProperties$MH().invokeExact(hFile.address(), lpCommProp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommModemStatus$MH() {
        return winbase_h$constants$0.GetCommModemStatus$MH();
    }
    public static @C("BOOL") int GetCommModemStatus (@C("HANDLE") Addressable hFile, @C("LPDWORD") Addressable lpModemStat) {
        try {
            return (int)winbase_h$constants$0.GetCommModemStatus$MH().invokeExact(hFile.address(), lpModemStat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommState$MH() {
        return winbase_h$constants$0.GetCommState$MH();
    }
    public static @C("BOOL") int GetCommState (@C("HANDLE") Addressable hFile, @C("LPDCB") Addressable lpDCB) {
        try {
            return (int)winbase_h$constants$0.GetCommState$MH().invokeExact(hFile.address(), lpDCB.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommTimeouts$MH() {
        return winbase_h$constants$0.GetCommTimeouts$MH();
    }
    public static @C("BOOL") int GetCommTimeouts (@C("HANDLE") Addressable hFile, @C("LPCOMMTIMEOUTS") Addressable lpCommTimeouts) {
        try {
            return (int)winbase_h$constants$0.GetCommTimeouts$MH().invokeExact(hFile.address(), lpCommTimeouts.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PurgeComm$MH() {
        return winbase_h$constants$0.PurgeComm$MH();
    }
    public static @C("BOOL") int PurgeComm (@C("HANDLE") Addressable hFile, @C("DWORD") int dwFlags) {
        try {
            return (int)winbase_h$constants$0.PurgeComm$MH().invokeExact(hFile.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCommBreak$MH() {
        return winbase_h$constants$0.SetCommBreak$MH();
    }
    public static @C("BOOL") int SetCommBreak (@C("HANDLE") Addressable hFile) {
        try {
            return (int)winbase_h$constants$0.SetCommBreak$MH().invokeExact(hFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCommConfig$MH() {
        return winbase_h$constants$0.SetCommConfig$MH();
    }
    public static @C("BOOL") int SetCommConfig (@C("HANDLE") Addressable hCommDev, @C("LPCOMMCONFIG") Addressable lpCC, @C("DWORD") int dwSize) {
        try {
            return (int)winbase_h$constants$0.SetCommConfig$MH().invokeExact(hCommDev.address(), lpCC.address(), dwSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCommMask$MH() {
        return winbase_h$constants$0.SetCommMask$MH();
    }
    public static @C("BOOL") int SetCommMask (@C("HANDLE") Addressable hFile, @C("DWORD") int dwEvtMask) {
        try {
            return (int)winbase_h$constants$0.SetCommMask$MH().invokeExact(hFile.address(), dwEvtMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCommState$MH() {
        return winbase_h$constants$0.SetCommState$MH();
    }
    public static @C("BOOL") int SetCommState (@C("HANDLE") Addressable hFile, @C("LPDCB") Addressable lpDCB) {
        try {
            return (int)winbase_h$constants$0.SetCommState$MH().invokeExact(hFile.address(), lpDCB.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCommTimeouts$MH() {
        return winbase_h$constants$0.SetCommTimeouts$MH();
    }
    public static @C("BOOL") int SetCommTimeouts (@C("HANDLE") Addressable hFile, @C("LPCOMMTIMEOUTS") Addressable lpCommTimeouts) {
        try {
            return (int)winbase_h$constants$0.SetCommTimeouts$MH().invokeExact(hFile.address(), lpCommTimeouts.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TransmitCommChar$MH() {
        return winbase_h$constants$0.TransmitCommChar$MH();
    }
    public static @C("BOOL") int TransmitCommChar (@C("HANDLE") Addressable hFile, @C("char") byte cChar) {
        try {
            return (int)winbase_h$constants$0.TransmitCommChar$MH().invokeExact(hFile.address(), cChar);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitCommEvent$MH() {
        return winbase_h$constants$0.WaitCommEvent$MH();
    }
    public static @C("BOOL") int WaitCommEvent (@C("HANDLE") Addressable hFile, @C("LPDWORD") Addressable lpEvtMask, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)winbase_h$constants$0.WaitCommEvent$MH().invokeExact(hFile.address(), lpEvtMask.address(), lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenCommPort$MH() {
        return winbase_h$constants$0.OpenCommPort$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenCommPort (@C("ULONG") int uPortNumber, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwFlagsAndAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$0.OpenCommPort$MH().invokeExact(uPortNumber, dwDesiredAccess, dwFlagsAndAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommPorts$MH() {
        return winbase_h$constants$0.GetCommPorts$MH();
    }
    public static @C("ULONG") int GetCommPorts (@C("PULONG") Addressable lpPortNumbers, @C("ULONG") int uPortNumbersCount, @C("PULONG") Addressable puPortNumbersFound) {
        try {
            return (int)winbase_h$constants$0.GetCommPorts$MH().invokeExact(lpPortNumbers.address(), uPortNumbersCount, puPortNumbersFound.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTapePosition$MH() {
        return winbase_h$constants$0.SetTapePosition$MH();
    }
    public static @C("DWORD") int SetTapePosition (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwPositionMethod, @C("DWORD") int dwPartition, @C("DWORD") int dwOffsetLow, @C("DWORD") int dwOffsetHigh, @C("BOOL") int bImmediate) {
        try {
            return (int)winbase_h$constants$0.SetTapePosition$MH().invokeExact(hDevice.address(), dwPositionMethod, dwPartition, dwOffsetLow, dwOffsetHigh, bImmediate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTapePosition$MH() {
        return winbase_h$constants$1.GetTapePosition$MH();
    }
    public static @C("DWORD") int GetTapePosition (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwPositionType, @C("LPDWORD") Addressable lpdwPartition, @C("LPDWORD") Addressable lpdwOffsetLow, @C("LPDWORD") Addressable lpdwOffsetHigh) {
        try {
            return (int)winbase_h$constants$1.GetTapePosition$MH().invokeExact(hDevice.address(), dwPositionType, lpdwPartition.address(), lpdwOffsetLow.address(), lpdwOffsetHigh.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PrepareTape$MH() {
        return winbase_h$constants$1.PrepareTape$MH();
    }
    public static @C("DWORD") int PrepareTape (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwOperation, @C("BOOL") int bImmediate) {
        try {
            return (int)winbase_h$constants$1.PrepareTape$MH().invokeExact(hDevice.address(), dwOperation, bImmediate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EraseTape$MH() {
        return winbase_h$constants$1.EraseTape$MH();
    }
    public static @C("DWORD") int EraseTape (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwEraseType, @C("BOOL") int bImmediate) {
        try {
            return (int)winbase_h$constants$1.EraseTape$MH().invokeExact(hDevice.address(), dwEraseType, bImmediate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateTapePartition$MH() {
        return winbase_h$constants$1.CreateTapePartition$MH();
    }
    public static @C("DWORD") int CreateTapePartition (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwPartitionMethod, @C("DWORD") int dwCount, @C("DWORD") int dwSize) {
        try {
            return (int)winbase_h$constants$1.CreateTapePartition$MH().invokeExact(hDevice.address(), dwPartitionMethod, dwCount, dwSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteTapemark$MH() {
        return winbase_h$constants$1.WriteTapemark$MH();
    }
    public static @C("DWORD") int WriteTapemark (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwTapemarkType, @C("DWORD") int dwTapemarkCount, @C("BOOL") int bImmediate) {
        try {
            return (int)winbase_h$constants$1.WriteTapemark$MH().invokeExact(hDevice.address(), dwTapemarkType, dwTapemarkCount, bImmediate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTapeStatus$MH() {
        return winbase_h$constants$1.GetTapeStatus$MH();
    }
    public static @C("DWORD") int GetTapeStatus (@C("HANDLE") Addressable hDevice) {
        try {
            return (int)winbase_h$constants$1.GetTapeStatus$MH().invokeExact(hDevice.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTapeParameters$MH() {
        return winbase_h$constants$1.GetTapeParameters$MH();
    }
    public static @C("DWORD") int GetTapeParameters (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwOperation, @C("LPDWORD") Addressable lpdwSize, @C("LPVOID") Addressable lpTapeInformation) {
        try {
            return (int)winbase_h$constants$1.GetTapeParameters$MH().invokeExact(hDevice.address(), dwOperation, lpdwSize.address(), lpTapeInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTapeParameters$MH() {
        return winbase_h$constants$1.SetTapeParameters$MH();
    }
    public static @C("DWORD") int SetTapeParameters (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwOperation, @C("LPVOID") Addressable lpTapeInformation) {
        try {
            return (int)winbase_h$constants$1.SetTapeParameters$MH().invokeExact(hDevice.address(), dwOperation, lpTapeInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MulDiv$MH() {
        return winbase_h$constants$1.MulDiv$MH();
    }
    public static @C("int") int MulDiv (@C("int") int nNumber, @C("int") int nNumerator, @C("int") int nDenominator) {
        try {
            return (int)winbase_h$constants$1.MulDiv$MH().invokeExact(nNumber, nNumerator, nDenominator);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int DEPPolicyAlwaysOff() {
        return winbase_h$constants$1.DEPPolicyAlwaysOff();
    }
    public static @C("int") int DEPPolicyAlwaysOn() {
        return winbase_h$constants$1.DEPPolicyAlwaysOn();
    }
    public static @C("int") int DEPPolicyOptIn() {
        return winbase_h$constants$1.DEPPolicyOptIn();
    }
    public static @C("int") int DEPPolicyOptOut() {
        return winbase_h$constants$1.DEPPolicyOptOut();
    }
    public static @C("int") int DEPTotalPolicyCount() {
        return winbase_h$constants$1.DEPTotalPolicyCount();
    }
    public static  MethodHandle GetSystemDEPPolicy$MH() {
        return winbase_h$constants$1.GetSystemDEPPolicy$MH();
    }
    public static @C("DEP_SYSTEM_POLICY_TYPE") int GetSystemDEPPolicy () {
        try {
            return (int)winbase_h$constants$1.GetSystemDEPPolicy$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemRegistryQuota$MH() {
        return winbase_h$constants$1.GetSystemRegistryQuota$MH();
    }
    public static @C("BOOL") int GetSystemRegistryQuota (@C("PDWORD") Addressable pdwQuotaAllowed, @C("PDWORD") Addressable pdwQuotaUsed) {
        try {
            return (int)winbase_h$constants$1.GetSystemRegistryQuota$MH().invokeExact(pdwQuotaAllowed.address(), pdwQuotaUsed.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FileTimeToDosDateTime$MH() {
        return winbase_h$constants$1.FileTimeToDosDateTime$MH();
    }
    public static @C("BOOL") int FileTimeToDosDateTime (@C("const FILETIME*") Addressable lpFileTime, @C("LPWORD") Addressable lpFatDate, @C("LPWORD") Addressable lpFatTime) {
        try {
            return (int)winbase_h$constants$1.FileTimeToDosDateTime$MH().invokeExact(lpFileTime.address(), lpFatDate.address(), lpFatTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DosDateTimeToFileTime$MH() {
        return winbase_h$constants$1.DosDateTimeToFileTime$MH();
    }
    public static @C("BOOL") int DosDateTimeToFileTime (@C("WORD") short wFatDate, @C("WORD") short wFatTime, @C("LPFILETIME") Addressable lpFileTime) {
        try {
            return (int)winbase_h$constants$1.DosDateTimeToFileTime$MH().invokeExact(wFatDate, wFatTime, lpFileTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FormatMessageA$MH() {
        return winbase_h$constants$1.FormatMessageA$MH();
    }
    public static @C("DWORD") int FormatMessageA (@C("DWORD") int dwFlags, @C("LPCVOID") Addressable lpSource, @C("DWORD") int dwMessageId, @C("DWORD") int dwLanguageId, @C("LPSTR") Addressable lpBuffer, @C("DWORD") int nSize, @C("va_list*") Addressable Arguments) {
        try {
            return (int)winbase_h$constants$1.FormatMessageA$MH().invokeExact(dwFlags, lpSource.address(), dwMessageId, dwLanguageId, lpBuffer.address(), nSize, Arguments.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FormatMessageW$MH() {
        return winbase_h$constants$1.FormatMessageW$MH();
    }
    public static @C("DWORD") int FormatMessageW (@C("DWORD") int dwFlags, @C("LPCVOID") Addressable lpSource, @C("DWORD") int dwMessageId, @C("DWORD") int dwLanguageId, @C("LPWSTR") Addressable lpBuffer, @C("DWORD") int nSize, @C("va_list*") Addressable Arguments) {
        try {
            return (int)winbase_h$constants$1.FormatMessageW$MH().invokeExact(dwFlags, lpSource.address(), dwMessageId, dwLanguageId, lpBuffer.address(), nSize, Arguments.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMailslotA$MH() {
        return winbase_h$constants$1.CreateMailslotA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateMailslotA (@C("LPCSTR") Addressable lpName, @C("DWORD") int nMaxMessageSize, @C("DWORD") int lReadTimeout, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateMailslotA$MH().invokeExact(lpName.address(), nMaxMessageSize, lReadTimeout, lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMailslotW$MH() {
        return winbase_h$constants$1.CreateMailslotW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateMailslotW (@C("LPCWSTR") Addressable lpName, @C("DWORD") int nMaxMessageSize, @C("DWORD") int lReadTimeout, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateMailslotW$MH().invokeExact(lpName.address(), nMaxMessageSize, lReadTimeout, lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMailslotInfo$MH() {
        return winbase_h$constants$1.GetMailslotInfo$MH();
    }
    public static @C("BOOL") int GetMailslotInfo (@C("HANDLE") Addressable hMailslot, @C("LPDWORD") Addressable lpMaxMessageSize, @C("LPDWORD") Addressable lpNextSize, @C("LPDWORD") Addressable lpMessageCount, @C("LPDWORD") Addressable lpReadTimeout) {
        try {
            return (int)winbase_h$constants$1.GetMailslotInfo$MH().invokeExact(hMailslot.address(), lpMaxMessageSize.address(), lpNextSize.address(), lpMessageCount.address(), lpReadTimeout.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMailslotInfo$MH() {
        return winbase_h$constants$1.SetMailslotInfo$MH();
    }
    public static @C("BOOL") int SetMailslotInfo (@C("HANDLE") Addressable hMailslot, @C("DWORD") int lReadTimeout) {
        try {
            return (int)winbase_h$constants$1.SetMailslotInfo$MH().invokeExact(hMailslot.address(), lReadTimeout);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EncryptFileA$MH() {
        return winbase_h$constants$1.EncryptFileA$MH();
    }
    public static @C("BOOL") int EncryptFileA (@C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.EncryptFileA$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EncryptFileW$MH() {
        return winbase_h$constants$1.EncryptFileW$MH();
    }
    public static @C("BOOL") int EncryptFileW (@C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.EncryptFileW$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DecryptFileA$MH() {
        return winbase_h$constants$1.DecryptFileA$MH();
    }
    public static @C("BOOL") int DecryptFileA (@C("LPCSTR") Addressable lpFileName, @C("DWORD") int dwReserved) {
        try {
            return (int)winbase_h$constants$1.DecryptFileA$MH().invokeExact(lpFileName.address(), dwReserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DecryptFileW$MH() {
        return winbase_h$constants$1.DecryptFileW$MH();
    }
    public static @C("BOOL") int DecryptFileW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwReserved) {
        try {
            return (int)winbase_h$constants$1.DecryptFileW$MH().invokeExact(lpFileName.address(), dwReserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FileEncryptionStatusA$MH() {
        return winbase_h$constants$1.FileEncryptionStatusA$MH();
    }
    public static @C("BOOL") int FileEncryptionStatusA (@C("LPCSTR") Addressable lpFileName, @C("LPDWORD") Addressable lpStatus) {
        try {
            return (int)winbase_h$constants$1.FileEncryptionStatusA$MH().invokeExact(lpFileName.address(), lpStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FileEncryptionStatusW$MH() {
        return winbase_h$constants$1.FileEncryptionStatusW$MH();
    }
    public static @C("BOOL") int FileEncryptionStatusW (@C("LPCWSTR") Addressable lpFileName, @C("LPDWORD") Addressable lpStatus) {
        try {
            return (int)winbase_h$constants$1.FileEncryptionStatusW$MH().invokeExact(lpFileName.address(), lpStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenEncryptedFileRawA$MH() {
        return winbase_h$constants$1.OpenEncryptedFileRawA$MH();
    }
    public static @C("DWORD") int OpenEncryptedFileRawA (@C("LPCSTR") Addressable lpFileName, @C("ULONG") int ulFlags, @C("PVOID*") Addressable pvContext) {
        try {
            return (int)winbase_h$constants$1.OpenEncryptedFileRawA$MH().invokeExact(lpFileName.address(), ulFlags, pvContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenEncryptedFileRawW$MH() {
        return winbase_h$constants$1.OpenEncryptedFileRawW$MH();
    }
    public static @C("DWORD") int OpenEncryptedFileRawW (@C("LPCWSTR") Addressable lpFileName, @C("ULONG") int ulFlags, @C("PVOID*") Addressable pvContext) {
        try {
            return (int)winbase_h$constants$1.OpenEncryptedFileRawW$MH().invokeExact(lpFileName.address(), ulFlags, pvContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadEncryptedFileRaw$MH() {
        return winbase_h$constants$1.ReadEncryptedFileRaw$MH();
    }
    public static @C("DWORD") int ReadEncryptedFileRaw (@C("PFE_EXPORT_FUNC") Addressable pfExportCallback, @C("PVOID") Addressable pvCallbackContext, @C("PVOID") Addressable pvContext) {
        try {
            return (int)winbase_h$constants$1.ReadEncryptedFileRaw$MH().invokeExact(pfExportCallback.address(), pvCallbackContext.address(), pvContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface ReadEncryptedFileRaw$pfExportCallback {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2);
        public static  @C("PFE_EXPORT_FUNC") MemorySegment allocate(ReadEncryptedFileRaw$pfExportCallback fi) {
            return RuntimeHelper.upcallStub(ReadEncryptedFileRaw$pfExportCallback.class, fi, winbase_h$constants$1.ReadEncryptedFileRaw$pfExportCallback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
        }
        public static  @C("PFE_EXPORT_FUNC") MemorySegment allocate(ReadEncryptedFileRaw$pfExportCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle WriteEncryptedFileRaw$MH() {
        return winbase_h$constants$1.WriteEncryptedFileRaw$MH();
    }
    public static @C("DWORD") int WriteEncryptedFileRaw (@C("PFE_IMPORT_FUNC") Addressable pfImportCallback, @C("PVOID") Addressable pvCallbackContext, @C("PVOID") Addressable pvContext) {
        try {
            return (int)winbase_h$constants$1.WriteEncryptedFileRaw$MH().invokeExact(pfImportCallback.address(), pvCallbackContext.address(), pvContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface WriteEncryptedFileRaw$pfImportCallback {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  @C("PFE_IMPORT_FUNC") MemorySegment allocate(WriteEncryptedFileRaw$pfImportCallback fi) {
            return RuntimeHelper.upcallStub(WriteEncryptedFileRaw$pfImportCallback.class, fi, winbase_h$constants$1.WriteEncryptedFileRaw$pfImportCallback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static  @C("PFE_IMPORT_FUNC") MemorySegment allocate(WriteEncryptedFileRaw$pfImportCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle CloseEncryptedFileRaw$MH() {
        return winbase_h$constants$1.CloseEncryptedFileRaw$MH();
    }
    public static void CloseEncryptedFileRaw (@C("PVOID") Addressable pvContext) {
        try {
            winbase_h$constants$1.CloseEncryptedFileRaw$MH().invokeExact(pvContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcmpA$MH() {
        return winbase_h$constants$1.lstrcmpA$MH();
    }
    public static @C("int") int lstrcmpA (@C("LPCSTR") Addressable lpString1, @C("LPCSTR") Addressable lpString2) {
        try {
            return (int)winbase_h$constants$1.lstrcmpA$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcmpW$MH() {
        return winbase_h$constants$1.lstrcmpW$MH();
    }
    public static @C("int") int lstrcmpW (@C("LPCWSTR") Addressable lpString1, @C("LPCWSTR") Addressable lpString2) {
        try {
            return (int)winbase_h$constants$1.lstrcmpW$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcmpiA$MH() {
        return winbase_h$constants$1.lstrcmpiA$MH();
    }
    public static @C("int") int lstrcmpiA (@C("LPCSTR") Addressable lpString1, @C("LPCSTR") Addressable lpString2) {
        try {
            return (int)winbase_h$constants$1.lstrcmpiA$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcmpiW$MH() {
        return winbase_h$constants$1.lstrcmpiW$MH();
    }
    public static @C("int") int lstrcmpiW (@C("LPCWSTR") Addressable lpString1, @C("LPCWSTR") Addressable lpString2) {
        try {
            return (int)winbase_h$constants$1.lstrcmpiW$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcpynA$MH() {
        return winbase_h$constants$1.lstrcpynA$MH();
    }
    public static @C("LPSTR") MemoryAddress lstrcpynA (@C("LPSTR") Addressable lpString1, @C("LPCSTR") Addressable lpString2, @C("int") int iMaxLength) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.lstrcpynA$MH().invokeExact(lpString1.address(), lpString2.address(), iMaxLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcpynW$MH() {
        return winbase_h$constants$1.lstrcpynW$MH();
    }
    public static @C("LPWSTR") MemoryAddress lstrcpynW (@C("LPWSTR") Addressable lpString1, @C("LPCWSTR") Addressable lpString2, @C("int") int iMaxLength) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.lstrcpynW$MH().invokeExact(lpString1.address(), lpString2.address(), iMaxLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcpyA$MH() {
        return winbase_h$constants$1.lstrcpyA$MH();
    }
    public static @C("LPSTR") MemoryAddress lstrcpyA (@C("LPSTR") Addressable lpString1, @C("LPCSTR") Addressable lpString2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.lstrcpyA$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcpyW$MH() {
        return winbase_h$constants$1.lstrcpyW$MH();
    }
    public static @C("LPWSTR") MemoryAddress lstrcpyW (@C("LPWSTR") Addressable lpString1, @C("LPCWSTR") Addressable lpString2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.lstrcpyW$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcatA$MH() {
        return winbase_h$constants$1.lstrcatA$MH();
    }
    public static @C("LPSTR") MemoryAddress lstrcatA (@C("LPSTR") Addressable lpString1, @C("LPCSTR") Addressable lpString2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.lstrcatA$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcatW$MH() {
        return winbase_h$constants$1.lstrcatW$MH();
    }
    public static @C("LPWSTR") MemoryAddress lstrcatW (@C("LPWSTR") Addressable lpString1, @C("LPCWSTR") Addressable lpString2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.lstrcatW$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrlenA$MH() {
        return winbase_h$constants$1.lstrlenA$MH();
    }
    public static @C("int") int lstrlenA (@C("LPCSTR") Addressable lpString) {
        try {
            return (int)winbase_h$constants$1.lstrlenA$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrlenW$MH() {
        return winbase_h$constants$1.lstrlenW$MH();
    }
    public static @C("int") int lstrlenW (@C("LPCWSTR") Addressable lpString) {
        try {
            return (int)winbase_h$constants$1.lstrlenW$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenFile$MH() {
        return winbase_h$constants$1.OpenFile$MH();
    }
    public static @C("HFILE") int OpenFile (@C("LPCSTR") Addressable lpFileName, @C("LPOFSTRUCT") Addressable lpReOpenBuff, @C("UINT") int uStyle) {
        try {
            return (int)winbase_h$constants$1.OpenFile$MH().invokeExact(lpFileName.address(), lpReOpenBuff.address(), uStyle);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _lopen$MH() {
        return winbase_h$constants$1._lopen$MH();
    }
    public static @C("HFILE") int _lopen (@C("LPCSTR") Addressable lpPathName, @C("int") int iReadWrite) {
        try {
            return (int)winbase_h$constants$1._lopen$MH().invokeExact(lpPathName.address(), iReadWrite);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _lcreat$MH() {
        return winbase_h$constants$1._lcreat$MH();
    }
    public static @C("HFILE") int _lcreat (@C("LPCSTR") Addressable lpPathName, @C("int") int iAttribute) {
        try {
            return (int)winbase_h$constants$1._lcreat$MH().invokeExact(lpPathName.address(), iAttribute);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _lread$MH() {
        return winbase_h$constants$1._lread$MH();
    }
    public static @C("UINT") int _lread (@C("HFILE") int hFile, @C("LPVOID") Addressable lpBuffer, @C("UINT") int uBytes) {
        try {
            return (int)winbase_h$constants$1._lread$MH().invokeExact(hFile, lpBuffer.address(), uBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _lwrite$MH() {
        return winbase_h$constants$1._lwrite$MH();
    }
    public static @C("UINT") int _lwrite (@C("HFILE") int hFile, @C("LPCCH") Addressable lpBuffer, @C("UINT") int uBytes) {
        try {
            return (int)winbase_h$constants$1._lwrite$MH().invokeExact(hFile, lpBuffer.address(), uBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _hread$MH() {
        return winbase_h$constants$1._hread$MH();
    }
    public static @C("long") int _hread (@C("HFILE") int hFile, @C("LPVOID") Addressable lpBuffer, @C("long") int lBytes) {
        try {
            return (int)winbase_h$constants$1._hread$MH().invokeExact(hFile, lpBuffer.address(), lBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _hwrite$MH() {
        return winbase_h$constants$1._hwrite$MH();
    }
    public static @C("long") int _hwrite (@C("HFILE") int hFile, @C("LPCCH") Addressable lpBuffer, @C("long") int lBytes) {
        try {
            return (int)winbase_h$constants$1._hwrite$MH().invokeExact(hFile, lpBuffer.address(), lBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _lclose$MH() {
        return winbase_h$constants$1._lclose$MH();
    }
    public static @C("HFILE") int _lclose (@C("HFILE") int hFile) {
        try {
            return (int)winbase_h$constants$1._lclose$MH().invokeExact(hFile);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _llseek$MH() {
        return winbase_h$constants$1._llseek$MH();
    }
    public static @C("LONG") int _llseek (@C("HFILE") int hFile, @C("LONG") int lOffset, @C("int") int iOrigin) {
        try {
            return (int)winbase_h$constants$1._llseek$MH().invokeExact(hFile, lOffset, iOrigin);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsTextUnicode$MH() {
        return winbase_h$constants$1.IsTextUnicode$MH();
    }
    public static @C("BOOL") int IsTextUnicode (@C("void*") Addressable lpv, @C("int") int iSize, @C("LPINT") Addressable lpiResult) {
        try {
            return (int)winbase_h$constants$1.IsTextUnicode$MH().invokeExact(lpv.address(), iSize, lpiResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SignalObjectAndWait$MH() {
        return winbase_h$constants$1.SignalObjectAndWait$MH();
    }
    public static @C("DWORD") int SignalObjectAndWait (@C("HANDLE") Addressable hObjectToSignal, @C("HANDLE") Addressable hObjectToWaitOn, @C("DWORD") int dwMilliseconds, @C("BOOL") int bAlertable) {
        try {
            return (int)winbase_h$constants$1.SignalObjectAndWait$MH().invokeExact(hObjectToSignal.address(), hObjectToWaitOn.address(), dwMilliseconds, bAlertable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BackupRead$MH() {
        return winbase_h$constants$1.BackupRead$MH();
    }
    public static @C("BOOL") int BackupRead (@C("HANDLE") Addressable hFile, @C("LPBYTE") Addressable lpBuffer, @C("DWORD") int nNumberOfBytesToRead, @C("LPDWORD") Addressable lpNumberOfBytesRead, @C("BOOL") int bAbort, @C("BOOL") int bProcessSecurity, @C("LPVOID*") Addressable lpContext) {
        try {
            return (int)winbase_h$constants$1.BackupRead$MH().invokeExact(hFile.address(), lpBuffer.address(), nNumberOfBytesToRead, lpNumberOfBytesRead.address(), bAbort, bProcessSecurity, lpContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BackupSeek$MH() {
        return winbase_h$constants$1.BackupSeek$MH();
    }
    public static @C("BOOL") int BackupSeek (@C("HANDLE") Addressable hFile, @C("DWORD") int dwLowBytesToSeek, @C("DWORD") int dwHighBytesToSeek, @C("LPDWORD") Addressable lpdwLowByteSeeked, @C("LPDWORD") Addressable lpdwHighByteSeeked, @C("LPVOID*") Addressable lpContext) {
        try {
            return (int)winbase_h$constants$1.BackupSeek$MH().invokeExact(hFile.address(), dwLowBytesToSeek, dwHighBytesToSeek, lpdwLowByteSeeked.address(), lpdwHighByteSeeked.address(), lpContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BackupWrite$MH() {
        return winbase_h$constants$1.BackupWrite$MH();
    }
    public static @C("BOOL") int BackupWrite (@C("HANDLE") Addressable hFile, @C("LPBYTE") Addressable lpBuffer, @C("DWORD") int nNumberOfBytesToWrite, @C("LPDWORD") Addressable lpNumberOfBytesWritten, @C("BOOL") int bAbort, @C("BOOL") int bProcessSecurity, @C("LPVOID*") Addressable lpContext) {
        try {
            return (int)winbase_h$constants$1.BackupWrite$MH().invokeExact(hFile.address(), lpBuffer.address(), nNumberOfBytesToWrite, lpNumberOfBytesWritten.address(), bAbort, bProcessSecurity, lpContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    @C("struct _WIN32_STREAM_ID")public static class _WIN32_STREAM_ID {

        /* package-private */ _WIN32_STREAM_ID() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$1._WIN32_STREAM_ID$struct$LAYOUT();
        }
        public static VarHandle dwStreamId$VH() {
            return winbase_h$constants$1._WIN32_STREAM_ID$dwStreamId$VH();
        }
        public static  @C("DWORD") int dwStreamId$get(@C("struct _WIN32_STREAM_ID") MemorySegment seg) {
            return (int)winbase_h$constants$1._WIN32_STREAM_ID$dwStreamId$VH().get(seg);
        }
        public static  @C("DWORD") int dwStreamId$get(@C("struct _WIN32_STREAM_ID") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1._WIN32_STREAM_ID$dwStreamId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwStreamId$set(@C("struct _WIN32_STREAM_ID") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$1._WIN32_STREAM_ID$dwStreamId$VH().set(seg, x);
        }
        public static void dwStreamId$set(@C("struct _WIN32_STREAM_ID") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$1._WIN32_STREAM_ID$dwStreamId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwStreamAttributes$VH() {
            return winbase_h$constants$1._WIN32_STREAM_ID$dwStreamAttributes$VH();
        }
        public static  @C("DWORD") int dwStreamAttributes$get(@C("struct _WIN32_STREAM_ID") MemorySegment seg) {
            return (int)winbase_h$constants$1._WIN32_STREAM_ID$dwStreamAttributes$VH().get(seg);
        }
        public static  @C("DWORD") int dwStreamAttributes$get(@C("struct _WIN32_STREAM_ID") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1._WIN32_STREAM_ID$dwStreamAttributes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwStreamAttributes$set(@C("struct _WIN32_STREAM_ID") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$1._WIN32_STREAM_ID$dwStreamAttributes$VH().set(seg, x);
        }
        public static void dwStreamAttributes$set(@C("struct _WIN32_STREAM_ID") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$1._WIN32_STREAM_ID$dwStreamAttributes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Size$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static VarHandle dwStreamNameSize$VH() {
            return winbase_h$constants$1._WIN32_STREAM_ID$dwStreamNameSize$VH();
        }
        public static  @C("DWORD") int dwStreamNameSize$get(@C("struct _WIN32_STREAM_ID") MemorySegment seg) {
            return (int)winbase_h$constants$1._WIN32_STREAM_ID$dwStreamNameSize$VH().get(seg);
        }
        public static  @C("DWORD") int dwStreamNameSize$get(@C("struct _WIN32_STREAM_ID") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1._WIN32_STREAM_ID$dwStreamNameSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwStreamNameSize$set(@C("struct _WIN32_STREAM_ID") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$1._WIN32_STREAM_ID$dwStreamNameSize$VH().set(seg, x);
        }
        public static void dwStreamNameSize$set(@C("struct _WIN32_STREAM_ID") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$1._WIN32_STREAM_ID$dwStreamNameSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment cStreamName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _WIN32_STREAM_ID") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _WIN32_STREAM_ID") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _WIN32_STREAM_ID[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _WIN32_STREAM_ID[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _WIN32_STREAM_ID*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _WIN32_STREAM_ID*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _WIN32_STREAM_ID") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _WIN32_STREAM_ID")public static class WIN32_STREAM_ID extends _WIN32_STREAM_ID {

        /* package-private */ WIN32_STREAM_ID() {}
    }

    @C("struct _STARTUPINFOEXA")public static class _STARTUPINFOEXA {

        /* package-private */ _STARTUPINFOEXA() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$1._STARTUPINFOEXA$struct$LAYOUT();
        }
        public static MemorySegment StartupInfo$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 104));
        }
        public static VarHandle lpAttributeList$VH() {
            return winbase_h$constants$1._STARTUPINFOEXA$lpAttributeList$VH();
        }
        public static  @C("LPPROC_THREAD_ATTRIBUTE_LIST") MemoryAddress lpAttributeList$get(@C("struct _STARTUPINFOEXA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1._STARTUPINFOEXA$lpAttributeList$VH().get(seg);
        }
        public static  @C("LPPROC_THREAD_ATTRIBUTE_LIST") MemoryAddress lpAttributeList$get(@C("struct _STARTUPINFOEXA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1._STARTUPINFOEXA$lpAttributeList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpAttributeList$set(@C("struct _STARTUPINFOEXA") MemorySegment seg, @C("LPPROC_THREAD_ATTRIBUTE_LIST") MemoryAddress x) {
            winbase_h$constants$1._STARTUPINFOEXA$lpAttributeList$VH().set(seg, x);
        }
        public static void lpAttributeList$set(@C("struct _STARTUPINFOEXA") MemorySegment seg, long index, @C("LPPROC_THREAD_ATTRIBUTE_LIST") MemoryAddress x) {
            winbase_h$constants$1._STARTUPINFOEXA$lpAttributeList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _STARTUPINFOEXA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _STARTUPINFOEXA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _STARTUPINFOEXA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _STARTUPINFOEXA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _STARTUPINFOEXA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _STARTUPINFOEXA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _STARTUPINFOEXA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _STARTUPINFOEXA")public static class STARTUPINFOEXA extends _STARTUPINFOEXA {

        /* package-private */ STARTUPINFOEXA() {}
    }

    @C("struct _STARTUPINFOEXW")public static class _STARTUPINFOEXW {

        /* package-private */ _STARTUPINFOEXW() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$1._STARTUPINFOEXW$struct$LAYOUT();
        }
        public static MemorySegment StartupInfo$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 104));
        }
        public static VarHandle lpAttributeList$VH() {
            return winbase_h$constants$1._STARTUPINFOEXW$lpAttributeList$VH();
        }
        public static  @C("LPPROC_THREAD_ATTRIBUTE_LIST") MemoryAddress lpAttributeList$get(@C("struct _STARTUPINFOEXW") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1._STARTUPINFOEXW$lpAttributeList$VH().get(seg);
        }
        public static  @C("LPPROC_THREAD_ATTRIBUTE_LIST") MemoryAddress lpAttributeList$get(@C("struct _STARTUPINFOEXW") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1._STARTUPINFOEXW$lpAttributeList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpAttributeList$set(@C("struct _STARTUPINFOEXW") MemorySegment seg, @C("LPPROC_THREAD_ATTRIBUTE_LIST") MemoryAddress x) {
            winbase_h$constants$1._STARTUPINFOEXW$lpAttributeList$VH().set(seg, x);
        }
        public static void lpAttributeList$set(@C("struct _STARTUPINFOEXW") MemorySegment seg, long index, @C("LPPROC_THREAD_ATTRIBUTE_LIST") MemoryAddress x) {
            winbase_h$constants$1._STARTUPINFOEXW$lpAttributeList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _STARTUPINFOEXW") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _STARTUPINFOEXW") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _STARTUPINFOEXW[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _STARTUPINFOEXW[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _STARTUPINFOEXW*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _STARTUPINFOEXW*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _STARTUPINFOEXW") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _STARTUPINFOEXW")public static class STARTUPINFOEXW extends _STARTUPINFOEXW {

        /* package-private */ STARTUPINFOEXW() {}
    }

    @C("struct _STARTUPINFOEXA")public static class STARTUPINFOEX extends _STARTUPINFOEXA {

        /* package-private */ STARTUPINFOEX() {}
    }

    public static  MethodHandle OpenMutexA$MH() {
        return winbase_h$constants$1.OpenMutexA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenMutexA (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.OpenMutexA$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSemaphoreA$MH() {
        return winbase_h$constants$1.CreateSemaphoreA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateSemaphoreA (@C("LPSECURITY_ATTRIBUTES") Addressable lpSemaphoreAttributes, @C("LONG") int lInitialCount, @C("LONG") int lMaximumCount, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateSemaphoreA$MH().invokeExact(lpSemaphoreAttributes.address(), lInitialCount, lMaximumCount, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenSemaphoreA$MH() {
        return winbase_h$constants$1.OpenSemaphoreA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenSemaphoreA (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.OpenSemaphoreA$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateWaitableTimerA$MH() {
        return winbase_h$constants$1.CreateWaitableTimerA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateWaitableTimerA (@C("LPSECURITY_ATTRIBUTES") Addressable lpTimerAttributes, @C("BOOL") int bManualReset, @C("LPCSTR") Addressable lpTimerName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateWaitableTimerA$MH().invokeExact(lpTimerAttributes.address(), bManualReset, lpTimerName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenWaitableTimerA$MH() {
        return winbase_h$constants$1.OpenWaitableTimerA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenWaitableTimerA (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCSTR") Addressable lpTimerName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.OpenWaitableTimerA$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpTimerName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSemaphoreExA$MH() {
        return winbase_h$constants$1.CreateSemaphoreExA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateSemaphoreExA (@C("LPSECURITY_ATTRIBUTES") Addressable lpSemaphoreAttributes, @C("LONG") int lInitialCount, @C("LONG") int lMaximumCount, @C("LPCSTR") Addressable lpName, @C("DWORD") int dwFlags, @C("DWORD") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateSemaphoreExA$MH().invokeExact(lpSemaphoreAttributes.address(), lInitialCount, lMaximumCount, lpName.address(), dwFlags, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateWaitableTimerExA$MH() {
        return winbase_h$constants$1.CreateWaitableTimerExA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateWaitableTimerExA (@C("LPSECURITY_ATTRIBUTES") Addressable lpTimerAttributes, @C("LPCSTR") Addressable lpTimerName, @C("DWORD") int dwFlags, @C("DWORD") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateWaitableTimerExA$MH().invokeExact(lpTimerAttributes.address(), lpTimerName.address(), dwFlags, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileMappingA$MH() {
        return winbase_h$constants$1.CreateFileMappingA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileMappingA (@C("HANDLE") Addressable hFile, @C("LPSECURITY_ATTRIBUTES") Addressable lpFileMappingAttributes, @C("DWORD") int flProtect, @C("DWORD") int dwMaximumSizeHigh, @C("DWORD") int dwMaximumSizeLow, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateFileMappingA$MH().invokeExact(hFile.address(), lpFileMappingAttributes.address(), flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileMappingNumaA$MH() {
        return winbase_h$constants$1.CreateFileMappingNumaA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileMappingNumaA (@C("HANDLE") Addressable hFile, @C("LPSECURITY_ATTRIBUTES") Addressable lpFileMappingAttributes, @C("DWORD") int flProtect, @C("DWORD") int dwMaximumSizeHigh, @C("DWORD") int dwMaximumSizeLow, @C("LPCSTR") Addressable lpName, @C("DWORD") int nndPreferred) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateFileMappingNumaA$MH().invokeExact(hFile.address(), lpFileMappingAttributes.address(), flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName.address(), nndPreferred);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenFileMappingA$MH() {
        return winbase_h$constants$1.OpenFileMappingA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenFileMappingA (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.OpenFileMappingA$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLogicalDriveStringsA$MH() {
        return winbase_h$constants$1.GetLogicalDriveStringsA$MH();
    }
    public static @C("DWORD") int GetLogicalDriveStringsA (@C("DWORD") int nBufferLength, @C("LPSTR") Addressable lpBuffer) {
        try {
            return (int)winbase_h$constants$1.GetLogicalDriveStringsA$MH().invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadPackagedLibrary$MH() {
        return winbase_h$constants$1.LoadPackagedLibrary$MH();
    }
    public static @C("HMODULE") MemoryAddress LoadPackagedLibrary (@C("LPCWSTR") Addressable lpwLibFileName, @C("DWORD") int Reserved) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.LoadPackagedLibrary$MH().invokeExact(lpwLibFileName.address(), Reserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryFullProcessImageNameA$MH() {
        return winbase_h$constants$1.QueryFullProcessImageNameA$MH();
    }
    public static @C("BOOL") int QueryFullProcessImageNameA (@C("HANDLE") Addressable hProcess, @C("DWORD") int dwFlags, @C("LPSTR") Addressable lpExeName, @C("PDWORD") Addressable lpdwSize) {
        try {
            return (int)winbase_h$constants$1.QueryFullProcessImageNameA$MH().invokeExact(hProcess.address(), dwFlags, lpExeName.address(), lpdwSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryFullProcessImageNameW$MH() {
        return winbase_h$constants$1.QueryFullProcessImageNameW$MH();
    }
    public static @C("BOOL") int QueryFullProcessImageNameW (@C("HANDLE") Addressable hProcess, @C("DWORD") int dwFlags, @C("LPWSTR") Addressable lpExeName, @C("PDWORD") Addressable lpdwSize) {
        try {
            return (int)winbase_h$constants$1.QueryFullProcessImageNameW$MH().invokeExact(hProcess.address(), dwFlags, lpExeName.address(), lpdwSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int ProcThreadAttributeParentProcess() {
        return winbase_h$constants$1.ProcThreadAttributeParentProcess();
    }
    public static @C("int") int ProcThreadAttributeHandleList() {
        return winbase_h$constants$1.ProcThreadAttributeHandleList();
    }
    public static @C("int") int ProcThreadAttributeGroupAffinity() {
        return winbase_h$constants$1.ProcThreadAttributeGroupAffinity();
    }
    public static @C("int") int ProcThreadAttributePreferredNode() {
        return winbase_h$constants$1.ProcThreadAttributePreferredNode();
    }
    public static @C("int") int ProcThreadAttributeIdealProcessor() {
        return winbase_h$constants$1.ProcThreadAttributeIdealProcessor();
    }
    public static @C("int") int ProcThreadAttributeUmsThread() {
        return winbase_h$constants$1.ProcThreadAttributeUmsThread();
    }
    public static @C("int") int ProcThreadAttributeMitigationPolicy() {
        return winbase_h$constants$1.ProcThreadAttributeMitigationPolicy();
    }
    public static @C("int") int ProcThreadAttributeSecurityCapabilities() {
        return winbase_h$constants$1.ProcThreadAttributeSecurityCapabilities();
    }
    public static @C("int") int ProcThreadAttributeProtectionLevel() {
        return winbase_h$constants$1.ProcThreadAttributeProtectionLevel();
    }
    public static @C("int") int ProcThreadAttributeJobList() {
        return winbase_h$constants$1.ProcThreadAttributeJobList();
    }
    public static @C("int") int ProcThreadAttributeChildProcessPolicy() {
        return winbase_h$constants$1.ProcThreadAttributeChildProcessPolicy();
    }
    public static @C("int") int ProcThreadAttributeAllApplicationPackagesPolicy() {
        return winbase_h$constants$1.ProcThreadAttributeAllApplicationPackagesPolicy();
    }
    public static @C("int") int ProcThreadAttributeWin32kFilter() {
        return winbase_h$constants$1.ProcThreadAttributeWin32kFilter();
    }
    public static @C("int") int ProcThreadAttributeSafeOpenPromptOriginClaim() {
        return winbase_h$constants$1.ProcThreadAttributeSafeOpenPromptOriginClaim();
    }
    public static @C("int") int ProcThreadAttributeDesktopAppPolicy() {
        return winbase_h$constants$1.ProcThreadAttributeDesktopAppPolicy();
    }
    public static @C("int") int ProcThreadAttributePseudoConsole() {
        return winbase_h$constants$1.ProcThreadAttributePseudoConsole();
    }
    public static  MethodHandle GetStartupInfoA$MH() {
        return winbase_h$constants$1.GetStartupInfoA$MH();
    }
    public static void GetStartupInfoA (@C("LPSTARTUPINFOA") Addressable lpStartupInfo) {
        try {
            winbase_h$constants$1.GetStartupInfoA$MH().invokeExact(lpStartupInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFirmwareEnvironmentVariableA$MH() {
        return winbase_h$constants$1.GetFirmwareEnvironmentVariableA$MH();
    }
    public static @C("DWORD") int GetFirmwareEnvironmentVariableA (@C("LPCSTR") Addressable lpName, @C("LPCSTR") Addressable lpGuid, @C("PVOID") Addressable pBuffer, @C("DWORD") int nSize) {
        try {
            return (int)winbase_h$constants$1.GetFirmwareEnvironmentVariableA$MH().invokeExact(lpName.address(), lpGuid.address(), pBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFirmwareEnvironmentVariableW$MH() {
        return winbase_h$constants$1.GetFirmwareEnvironmentVariableW$MH();
    }
    public static @C("DWORD") int GetFirmwareEnvironmentVariableW (@C("LPCWSTR") Addressable lpName, @C("LPCWSTR") Addressable lpGuid, @C("PVOID") Addressable pBuffer, @C("DWORD") int nSize) {
        try {
            return (int)winbase_h$constants$1.GetFirmwareEnvironmentVariableW$MH().invokeExact(lpName.address(), lpGuid.address(), pBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFirmwareEnvironmentVariableExA$MH() {
        return winbase_h$constants$1.GetFirmwareEnvironmentVariableExA$MH();
    }
    public static @C("DWORD") int GetFirmwareEnvironmentVariableExA (@C("LPCSTR") Addressable lpName, @C("LPCSTR") Addressable lpGuid, @C("PVOID") Addressable pBuffer, @C("DWORD") int nSize, @C("PDWORD") Addressable pdwAttribubutes) {
        try {
            return (int)winbase_h$constants$1.GetFirmwareEnvironmentVariableExA$MH().invokeExact(lpName.address(), lpGuid.address(), pBuffer.address(), nSize, pdwAttribubutes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFirmwareEnvironmentVariableExW$MH() {
        return winbase_h$constants$1.GetFirmwareEnvironmentVariableExW$MH();
    }
    public static @C("DWORD") int GetFirmwareEnvironmentVariableExW (@C("LPCWSTR") Addressable lpName, @C("LPCWSTR") Addressable lpGuid, @C("PVOID") Addressable pBuffer, @C("DWORD") int nSize, @C("PDWORD") Addressable pdwAttribubutes) {
        try {
            return (int)winbase_h$constants$1.GetFirmwareEnvironmentVariableExW$MH().invokeExact(lpName.address(), lpGuid.address(), pBuffer.address(), nSize, pdwAttribubutes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFirmwareEnvironmentVariableA$MH() {
        return winbase_h$constants$1.SetFirmwareEnvironmentVariableA$MH();
    }
    public static @C("BOOL") int SetFirmwareEnvironmentVariableA (@C("LPCSTR") Addressable lpName, @C("LPCSTR") Addressable lpGuid, @C("PVOID") Addressable pValue, @C("DWORD") int nSize) {
        try {
            return (int)winbase_h$constants$1.SetFirmwareEnvironmentVariableA$MH().invokeExact(lpName.address(), lpGuid.address(), pValue.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFirmwareEnvironmentVariableW$MH() {
        return winbase_h$constants$1.SetFirmwareEnvironmentVariableW$MH();
    }
    public static @C("BOOL") int SetFirmwareEnvironmentVariableW (@C("LPCWSTR") Addressable lpName, @C("LPCWSTR") Addressable lpGuid, @C("PVOID") Addressable pValue, @C("DWORD") int nSize) {
        try {
            return (int)winbase_h$constants$1.SetFirmwareEnvironmentVariableW$MH().invokeExact(lpName.address(), lpGuid.address(), pValue.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFirmwareEnvironmentVariableExA$MH() {
        return winbase_h$constants$1.SetFirmwareEnvironmentVariableExA$MH();
    }
    public static @C("BOOL") int SetFirmwareEnvironmentVariableExA (@C("LPCSTR") Addressable lpName, @C("LPCSTR") Addressable lpGuid, @C("PVOID") Addressable pValue, @C("DWORD") int nSize, @C("DWORD") int dwAttributes) {
        try {
            return (int)winbase_h$constants$1.SetFirmwareEnvironmentVariableExA$MH().invokeExact(lpName.address(), lpGuid.address(), pValue.address(), nSize, dwAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFirmwareEnvironmentVariableExW$MH() {
        return winbase_h$constants$1.SetFirmwareEnvironmentVariableExW$MH();
    }
    public static @C("BOOL") int SetFirmwareEnvironmentVariableExW (@C("LPCWSTR") Addressable lpName, @C("LPCWSTR") Addressable lpGuid, @C("PVOID") Addressable pValue, @C("DWORD") int nSize, @C("DWORD") int dwAttributes) {
        try {
            return (int)winbase_h$constants$1.SetFirmwareEnvironmentVariableExW$MH().invokeExact(lpName.address(), lpGuid.address(), pValue.address(), nSize, dwAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFirmwareType$MH() {
        return winbase_h$constants$1.GetFirmwareType$MH();
    }
    public static @C("BOOL") int GetFirmwareType (@C("PFIRMWARE_TYPE") Addressable FirmwareType) {
        try {
            return (int)winbase_h$constants$1.GetFirmwareType$MH().invokeExact(FirmwareType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsNativeVhdBoot$MH() {
        return winbase_h$constants$1.IsNativeVhdBoot$MH();
    }
    public static @C("BOOL") int IsNativeVhdBoot (@C("PBOOL") Addressable NativeVhdBoot) {
        try {
            return (int)winbase_h$constants$1.IsNativeVhdBoot$MH().invokeExact(NativeVhdBoot.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindResourceA$MH() {
        return winbase_h$constants$1.FindResourceA$MH();
    }
    public static @C("HRSRC") MemoryAddress FindResourceA (@C("HMODULE") Addressable hModule, @C("LPCSTR") Addressable lpName, @C("LPCSTR") Addressable lpType) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.FindResourceA$MH().invokeExact(hModule.address(), lpName.address(), lpType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindResourceExA$MH() {
        return winbase_h$constants$1.FindResourceExA$MH();
    }
    public static @C("HRSRC") MemoryAddress FindResourceExA (@C("HMODULE") Addressable hModule, @C("LPCSTR") Addressable lpType, @C("LPCSTR") Addressable lpName, @C("WORD") short wLanguage) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.FindResourceExA$MH().invokeExact(hModule.address(), lpType.address(), lpName.address(), wLanguage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceTypesA$MH() {
        return winbase_h$constants$1.EnumResourceTypesA$MH();
    }
    public static @C("BOOL") int EnumResourceTypesA (@C("HMODULE") Addressable hModule, @C("ENUMRESTYPEPROCA") Addressable lpEnumFunc, @C("LONG_PTR") long lParam) {
        try {
            return (int)winbase_h$constants$1.EnumResourceTypesA$MH().invokeExact(hModule.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface EnumResourceTypesA$lpEnumFunc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
        public static  @C("ENUMRESTYPEPROCA") MemorySegment allocate(EnumResourceTypesA$lpEnumFunc fi) {
            return RuntimeHelper.upcallStub(EnumResourceTypesA$lpEnumFunc.class, fi, winbase_h$constants$1.EnumResourceTypesA$lpEnumFunc$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
        }
        public static  @C("ENUMRESTYPEPROCA") MemorySegment allocate(EnumResourceTypesA$lpEnumFunc fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle EnumResourceTypesW$MH() {
        return winbase_h$constants$1.EnumResourceTypesW$MH();
    }
    public static @C("BOOL") int EnumResourceTypesW (@C("HMODULE") Addressable hModule, @C("ENUMRESTYPEPROCW") Addressable lpEnumFunc, @C("LONG_PTR") long lParam) {
        try {
            return (int)winbase_h$constants$1.EnumResourceTypesW$MH().invokeExact(hModule.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface EnumResourceTypesW$lpEnumFunc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, long x2);
        public static  @C("ENUMRESTYPEPROCW") MemorySegment allocate(EnumResourceTypesW$lpEnumFunc fi) {
            return RuntimeHelper.upcallStub(EnumResourceTypesW$lpEnumFunc.class, fi, winbase_h$constants$1.EnumResourceTypesW$lpEnumFunc$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
        }
        public static  @C("ENUMRESTYPEPROCW") MemorySegment allocate(EnumResourceTypesW$lpEnumFunc fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle EnumResourceNamesA$MH() {
        return winbase_h$constants$1.EnumResourceNamesA$MH();
    }
    public static @C("BOOL") int EnumResourceNamesA (@C("HMODULE") Addressable hModule, @C("LPCSTR") Addressable lpType, @C("ENUMRESNAMEPROCA") Addressable lpEnumFunc, @C("LONG_PTR") long lParam) {
        try {
            return (int)winbase_h$constants$1.EnumResourceNamesA$MH().invokeExact(hModule.address(), lpType.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface EnumResourceNamesA$lpEnumFunc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, long x3);
        public static  @C("ENUMRESNAMEPROCA") MemorySegment allocate(EnumResourceNamesA$lpEnumFunc fi) {
            return RuntimeHelper.upcallStub(EnumResourceNamesA$lpEnumFunc.class, fi, winbase_h$constants$1.EnumResourceNamesA$lpEnumFunc$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I");
        }
        public static  @C("ENUMRESNAMEPROCA") MemorySegment allocate(EnumResourceNamesA$lpEnumFunc fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle EnumResourceLanguagesA$MH() {
        return winbase_h$constants$1.EnumResourceLanguagesA$MH();
    }
    public static @C("BOOL") int EnumResourceLanguagesA (@C("HMODULE") Addressable hModule, @C("LPCSTR") Addressable lpType, @C("LPCSTR") Addressable lpName, @C("ENUMRESLANGPROCA") Addressable lpEnumFunc, @C("LONG_PTR") long lParam) {
        try {
            return (int)winbase_h$constants$1.EnumResourceLanguagesA$MH().invokeExact(hModule.address(), lpType.address(), lpName.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface EnumResourceLanguagesA$lpEnumFunc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, short x3, long x4);
        public static  @C("ENUMRESLANGPROCA") MemorySegment allocate(EnumResourceLanguagesA$lpEnumFunc fi) {
            return RuntimeHelper.upcallStub(EnumResourceLanguagesA$lpEnumFunc.class, fi, winbase_h$constants$1.EnumResourceLanguagesA$lpEnumFunc$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;SJ)I");
        }
        public static  @C("ENUMRESLANGPROCA") MemorySegment allocate(EnumResourceLanguagesA$lpEnumFunc fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle EnumResourceLanguagesW$MH() {
        return winbase_h$constants$1.EnumResourceLanguagesW$MH();
    }
    public static @C("BOOL") int EnumResourceLanguagesW (@C("HMODULE") Addressable hModule, @C("LPCWSTR") Addressable lpType, @C("LPCWSTR") Addressable lpName, @C("ENUMRESLANGPROCW") Addressable lpEnumFunc, @C("LONG_PTR") long lParam) {
        try {
            return (int)winbase_h$constants$1.EnumResourceLanguagesW$MH().invokeExact(hModule.address(), lpType.address(), lpName.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface EnumResourceLanguagesW$lpEnumFunc {

        int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, short x3, long x4);
        public static  @C("ENUMRESLANGPROCW") MemorySegment allocate(EnumResourceLanguagesW$lpEnumFunc fi) {
            return RuntimeHelper.upcallStub(EnumResourceLanguagesW$lpEnumFunc.class, fi, winbase_h$constants$1.EnumResourceLanguagesW$lpEnumFunc$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;SJ)I");
        }
        public static  @C("ENUMRESLANGPROCW") MemorySegment allocate(EnumResourceLanguagesW$lpEnumFunc fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle BeginUpdateResourceA$MH() {
        return winbase_h$constants$1.BeginUpdateResourceA$MH();
    }
    public static @C("HANDLE") MemoryAddress BeginUpdateResourceA (@C("LPCSTR") Addressable pFileName, @C("BOOL") int bDeleteExistingResources) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.BeginUpdateResourceA$MH().invokeExact(pFileName.address(), bDeleteExistingResources);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BeginUpdateResourceW$MH() {
        return winbase_h$constants$1.BeginUpdateResourceW$MH();
    }
    public static @C("HANDLE") MemoryAddress BeginUpdateResourceW (@C("LPCWSTR") Addressable pFileName, @C("BOOL") int bDeleteExistingResources) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.BeginUpdateResourceW$MH().invokeExact(pFileName.address(), bDeleteExistingResources);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UpdateResourceA$MH() {
        return winbase_h$constants$1.UpdateResourceA$MH();
    }
    public static @C("BOOL") int UpdateResourceA (@C("HANDLE") Addressable hUpdate, @C("LPCSTR") Addressable lpType, @C("LPCSTR") Addressable lpName, @C("WORD") short wLanguage, @C("LPVOID") Addressable lpData, @C("DWORD") int cb) {
        try {
            return (int)winbase_h$constants$1.UpdateResourceA$MH().invokeExact(hUpdate.address(), lpType.address(), lpName.address(), wLanguage, lpData.address(), cb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UpdateResourceW$MH() {
        return winbase_h$constants$1.UpdateResourceW$MH();
    }
    public static @C("BOOL") int UpdateResourceW (@C("HANDLE") Addressable hUpdate, @C("LPCWSTR") Addressable lpType, @C("LPCWSTR") Addressable lpName, @C("WORD") short wLanguage, @C("LPVOID") Addressable lpData, @C("DWORD") int cb) {
        try {
            return (int)winbase_h$constants$1.UpdateResourceW$MH().invokeExact(hUpdate.address(), lpType.address(), lpName.address(), wLanguage, lpData.address(), cb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EndUpdateResourceA$MH() {
        return winbase_h$constants$1.EndUpdateResourceA$MH();
    }
    public static @C("BOOL") int EndUpdateResourceA (@C("HANDLE") Addressable hUpdate, @C("BOOL") int fDiscard) {
        try {
            return (int)winbase_h$constants$1.EndUpdateResourceA$MH().invokeExact(hUpdate.address(), fDiscard);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EndUpdateResourceW$MH() {
        return winbase_h$constants$1.EndUpdateResourceW$MH();
    }
    public static @C("BOOL") int EndUpdateResourceW (@C("HANDLE") Addressable hUpdate, @C("BOOL") int fDiscard) {
        try {
            return (int)winbase_h$constants$1.EndUpdateResourceW$MH().invokeExact(hUpdate.address(), fDiscard);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalAddAtomA$MH() {
        return winbase_h$constants$1.GlobalAddAtomA$MH();
    }
    public static @C("ATOM") short GlobalAddAtomA (@C("LPCSTR") Addressable lpString) {
        try {
            return (short)winbase_h$constants$1.GlobalAddAtomA$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalAddAtomW$MH() {
        return winbase_h$constants$1.GlobalAddAtomW$MH();
    }
    public static @C("ATOM") short GlobalAddAtomW (@C("LPCWSTR") Addressable lpString) {
        try {
            return (short)winbase_h$constants$1.GlobalAddAtomW$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalAddAtomExA$MH() {
        return winbase_h$constants$1.GlobalAddAtomExA$MH();
    }
    public static @C("ATOM") short GlobalAddAtomExA (@C("LPCSTR") Addressable lpString, @C("DWORD") int Flags) {
        try {
            return (short)winbase_h$constants$1.GlobalAddAtomExA$MH().invokeExact(lpString.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalAddAtomExW$MH() {
        return winbase_h$constants$1.GlobalAddAtomExW$MH();
    }
    public static @C("ATOM") short GlobalAddAtomExW (@C("LPCWSTR") Addressable lpString, @C("DWORD") int Flags) {
        try {
            return (short)winbase_h$constants$1.GlobalAddAtomExW$MH().invokeExact(lpString.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalFindAtomA$MH() {
        return winbase_h$constants$1.GlobalFindAtomA$MH();
    }
    public static @C("ATOM") short GlobalFindAtomA (@C("LPCSTR") Addressable lpString) {
        try {
            return (short)winbase_h$constants$1.GlobalFindAtomA$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalFindAtomW$MH() {
        return winbase_h$constants$1.GlobalFindAtomW$MH();
    }
    public static @C("ATOM") short GlobalFindAtomW (@C("LPCWSTR") Addressable lpString) {
        try {
            return (short)winbase_h$constants$1.GlobalFindAtomW$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalGetAtomNameA$MH() {
        return winbase_h$constants$1.GlobalGetAtomNameA$MH();
    }
    public static @C("UINT") int GlobalGetAtomNameA (@C("ATOM") short nAtom, @C("LPSTR") Addressable lpBuffer, @C("int") int nSize) {
        try {
            return (int)winbase_h$constants$1.GlobalGetAtomNameA$MH().invokeExact(nAtom, lpBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalGetAtomNameW$MH() {
        return winbase_h$constants$1.GlobalGetAtomNameW$MH();
    }
    public static @C("UINT") int GlobalGetAtomNameW (@C("ATOM") short nAtom, @C("LPWSTR") Addressable lpBuffer, @C("int") int nSize) {
        try {
            return (int)winbase_h$constants$1.GlobalGetAtomNameW$MH().invokeExact(nAtom, lpBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAtomA$MH() {
        return winbase_h$constants$1.AddAtomA$MH();
    }
    public static @C("ATOM") short AddAtomA (@C("LPCSTR") Addressable lpString) {
        try {
            return (short)winbase_h$constants$1.AddAtomA$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAtomW$MH() {
        return winbase_h$constants$1.AddAtomW$MH();
    }
    public static @C("ATOM") short AddAtomW (@C("LPCWSTR") Addressable lpString) {
        try {
            return (short)winbase_h$constants$1.AddAtomW$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindAtomA$MH() {
        return winbase_h$constants$1.FindAtomA$MH();
    }
    public static @C("ATOM") short FindAtomA (@C("LPCSTR") Addressable lpString) {
        try {
            return (short)winbase_h$constants$1.FindAtomA$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindAtomW$MH() {
        return winbase_h$constants$1.FindAtomW$MH();
    }
    public static @C("ATOM") short FindAtomW (@C("LPCWSTR") Addressable lpString) {
        try {
            return (short)winbase_h$constants$1.FindAtomW$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAtomNameA$MH() {
        return winbase_h$constants$1.GetAtomNameA$MH();
    }
    public static @C("UINT") int GetAtomNameA (@C("ATOM") short nAtom, @C("LPSTR") Addressable lpBuffer, @C("int") int nSize) {
        try {
            return (int)winbase_h$constants$1.GetAtomNameA$MH().invokeExact(nAtom, lpBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAtomNameW$MH() {
        return winbase_h$constants$1.GetAtomNameW$MH();
    }
    public static @C("UINT") int GetAtomNameW (@C("ATOM") short nAtom, @C("LPWSTR") Addressable lpBuffer, @C("int") int nSize) {
        try {
            return (int)winbase_h$constants$1.GetAtomNameW$MH().invokeExact(nAtom, lpBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProfileIntA$MH() {
        return winbase_h$constants$1.GetProfileIntA$MH();
    }
    public static @C("UINT") int GetProfileIntA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpKeyName, @C("INT") int nDefault) {
        try {
            return (int)winbase_h$constants$1.GetProfileIntA$MH().invokeExact(lpAppName.address(), lpKeyName.address(), nDefault);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProfileIntW$MH() {
        return winbase_h$constants$1.GetProfileIntW$MH();
    }
    public static @C("UINT") int GetProfileIntW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpKeyName, @C("INT") int nDefault) {
        try {
            return (int)winbase_h$constants$1.GetProfileIntW$MH().invokeExact(lpAppName.address(), lpKeyName.address(), nDefault);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProfileStringA$MH() {
        return winbase_h$constants$1.GetProfileStringA$MH();
    }
    public static @C("DWORD") int GetProfileStringA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpKeyName, @C("LPCSTR") Addressable lpDefault, @C("LPSTR") Addressable lpReturnedString, @C("DWORD") int nSize) {
        try {
            return (int)winbase_h$constants$1.GetProfileStringA$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpDefault.address(), lpReturnedString.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProfileStringW$MH() {
        return winbase_h$constants$1.GetProfileStringW$MH();
    }
    public static @C("DWORD") int GetProfileStringW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpKeyName, @C("LPCWSTR") Addressable lpDefault, @C("LPWSTR") Addressable lpReturnedString, @C("DWORD") int nSize) {
        try {
            return (int)winbase_h$constants$1.GetProfileStringW$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpDefault.address(), lpReturnedString.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteProfileStringA$MH() {
        return winbase_h$constants$1.WriteProfileStringA$MH();
    }
    public static @C("BOOL") int WriteProfileStringA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpKeyName, @C("LPCSTR") Addressable lpString) {
        try {
            return (int)winbase_h$constants$1.WriteProfileStringA$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteProfileStringW$MH() {
        return winbase_h$constants$1.WriteProfileStringW$MH();
    }
    public static @C("BOOL") int WriteProfileStringW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpKeyName, @C("LPCWSTR") Addressable lpString) {
        try {
            return (int)winbase_h$constants$1.WriteProfileStringW$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProfileSectionA$MH() {
        return winbase_h$constants$1.GetProfileSectionA$MH();
    }
    public static @C("DWORD") int GetProfileSectionA (@C("LPCSTR") Addressable lpAppName, @C("LPSTR") Addressable lpReturnedString, @C("DWORD") int nSize) {
        try {
            return (int)winbase_h$constants$1.GetProfileSectionA$MH().invokeExact(lpAppName.address(), lpReturnedString.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProfileSectionW$MH() {
        return winbase_h$constants$1.GetProfileSectionW$MH();
    }
    public static @C("DWORD") int GetProfileSectionW (@C("LPCWSTR") Addressable lpAppName, @C("LPWSTR") Addressable lpReturnedString, @C("DWORD") int nSize) {
        try {
            return (int)winbase_h$constants$1.GetProfileSectionW$MH().invokeExact(lpAppName.address(), lpReturnedString.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteProfileSectionA$MH() {
        return winbase_h$constants$1.WriteProfileSectionA$MH();
    }
    public static @C("BOOL") int WriteProfileSectionA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpString) {
        try {
            return (int)winbase_h$constants$1.WriteProfileSectionA$MH().invokeExact(lpAppName.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteProfileSectionW$MH() {
        return winbase_h$constants$1.WriteProfileSectionW$MH();
    }
    public static @C("BOOL") int WriteProfileSectionW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpString) {
        try {
            return (int)winbase_h$constants$1.WriteProfileSectionW$MH().invokeExact(lpAppName.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileIntA$MH() {
        return winbase_h$constants$1.GetPrivateProfileIntA$MH();
    }
    public static @C("UINT") int GetPrivateProfileIntA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpKeyName, @C("INT") int nDefault, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.GetPrivateProfileIntA$MH().invokeExact(lpAppName.address(), lpKeyName.address(), nDefault, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileIntW$MH() {
        return winbase_h$constants$1.GetPrivateProfileIntW$MH();
    }
    public static @C("UINT") int GetPrivateProfileIntW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpKeyName, @C("INT") int nDefault, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.GetPrivateProfileIntW$MH().invokeExact(lpAppName.address(), lpKeyName.address(), nDefault, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileStringA$MH() {
        return winbase_h$constants$1.GetPrivateProfileStringA$MH();
    }
    public static @C("DWORD") int GetPrivateProfileStringA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpKeyName, @C("LPCSTR") Addressable lpDefault, @C("LPSTR") Addressable lpReturnedString, @C("DWORD") int nSize, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.GetPrivateProfileStringA$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpDefault.address(), lpReturnedString.address(), nSize, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileStringW$MH() {
        return winbase_h$constants$1.GetPrivateProfileStringW$MH();
    }
    public static @C("DWORD") int GetPrivateProfileStringW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpKeyName, @C("LPCWSTR") Addressable lpDefault, @C("LPWSTR") Addressable lpReturnedString, @C("DWORD") int nSize, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.GetPrivateProfileStringW$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpDefault.address(), lpReturnedString.address(), nSize, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePrivateProfileStringA$MH() {
        return winbase_h$constants$1.WritePrivateProfileStringA$MH();
    }
    public static @C("BOOL") int WritePrivateProfileStringA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpKeyName, @C("LPCSTR") Addressable lpString, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.WritePrivateProfileStringA$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpString.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePrivateProfileStringW$MH() {
        return winbase_h$constants$1.WritePrivateProfileStringW$MH();
    }
    public static @C("BOOL") int WritePrivateProfileStringW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpKeyName, @C("LPCWSTR") Addressable lpString, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.WritePrivateProfileStringW$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpString.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileSectionA$MH() {
        return winbase_h$constants$1.GetPrivateProfileSectionA$MH();
    }
    public static @C("DWORD") int GetPrivateProfileSectionA (@C("LPCSTR") Addressable lpAppName, @C("LPSTR") Addressable lpReturnedString, @C("DWORD") int nSize, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.GetPrivateProfileSectionA$MH().invokeExact(lpAppName.address(), lpReturnedString.address(), nSize, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileSectionW$MH() {
        return winbase_h$constants$1.GetPrivateProfileSectionW$MH();
    }
    public static @C("DWORD") int GetPrivateProfileSectionW (@C("LPCWSTR") Addressable lpAppName, @C("LPWSTR") Addressable lpReturnedString, @C("DWORD") int nSize, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.GetPrivateProfileSectionW$MH().invokeExact(lpAppName.address(), lpReturnedString.address(), nSize, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePrivateProfileSectionA$MH() {
        return winbase_h$constants$1.WritePrivateProfileSectionA$MH();
    }
    public static @C("BOOL") int WritePrivateProfileSectionA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpString, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.WritePrivateProfileSectionA$MH().invokeExact(lpAppName.address(), lpString.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePrivateProfileSectionW$MH() {
        return winbase_h$constants$1.WritePrivateProfileSectionW$MH();
    }
    public static @C("BOOL") int WritePrivateProfileSectionW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpString, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.WritePrivateProfileSectionW$MH().invokeExact(lpAppName.address(), lpString.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileSectionNamesA$MH() {
        return winbase_h$constants$1.GetPrivateProfileSectionNamesA$MH();
    }
    public static @C("DWORD") int GetPrivateProfileSectionNamesA (@C("LPSTR") Addressable lpszReturnBuffer, @C("DWORD") int nSize, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.GetPrivateProfileSectionNamesA$MH().invokeExact(lpszReturnBuffer.address(), nSize, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileSectionNamesW$MH() {
        return winbase_h$constants$1.GetPrivateProfileSectionNamesW$MH();
    }
    public static @C("DWORD") int GetPrivateProfileSectionNamesW (@C("LPWSTR") Addressable lpszReturnBuffer, @C("DWORD") int nSize, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)winbase_h$constants$1.GetPrivateProfileSectionNamesW$MH().invokeExact(lpszReturnBuffer.address(), nSize, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileStructA$MH() {
        return winbase_h$constants$1.GetPrivateProfileStructA$MH();
    }
    public static @C("BOOL") int GetPrivateProfileStructA (@C("LPCSTR") Addressable lpszSection, @C("LPCSTR") Addressable lpszKey, @C("LPVOID") Addressable lpStruct, @C("UINT") int uSizeStruct, @C("LPCSTR") Addressable szFile) {
        try {
            return (int)winbase_h$constants$1.GetPrivateProfileStructA$MH().invokeExact(lpszSection.address(), lpszKey.address(), lpStruct.address(), uSizeStruct, szFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileStructW$MH() {
        return winbase_h$constants$1.GetPrivateProfileStructW$MH();
    }
    public static @C("BOOL") int GetPrivateProfileStructW (@C("LPCWSTR") Addressable lpszSection, @C("LPCWSTR") Addressable lpszKey, @C("LPVOID") Addressable lpStruct, @C("UINT") int uSizeStruct, @C("LPCWSTR") Addressable szFile) {
        try {
            return (int)winbase_h$constants$1.GetPrivateProfileStructW$MH().invokeExact(lpszSection.address(), lpszKey.address(), lpStruct.address(), uSizeStruct, szFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePrivateProfileStructA$MH() {
        return winbase_h$constants$1.WritePrivateProfileStructA$MH();
    }
    public static @C("BOOL") int WritePrivateProfileStructA (@C("LPCSTR") Addressable lpszSection, @C("LPCSTR") Addressable lpszKey, @C("LPVOID") Addressable lpStruct, @C("UINT") int uSizeStruct, @C("LPCSTR") Addressable szFile) {
        try {
            return (int)winbase_h$constants$1.WritePrivateProfileStructA$MH().invokeExact(lpszSection.address(), lpszKey.address(), lpStruct.address(), uSizeStruct, szFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePrivateProfileStructW$MH() {
        return winbase_h$constants$1.WritePrivateProfileStructW$MH();
    }
    public static @C("BOOL") int WritePrivateProfileStructW (@C("LPCWSTR") Addressable lpszSection, @C("LPCWSTR") Addressable lpszKey, @C("LPVOID") Addressable lpStruct, @C("UINT") int uSizeStruct, @C("LPCWSTR") Addressable szFile) {
        try {
            return (int)winbase_h$constants$1.WritePrivateProfileStructW$MH().invokeExact(lpszSection.address(), lpszKey.address(), lpStruct.address(), uSizeStruct, szFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Wow64EnableWow64FsRedirection$MH() {
        return winbase_h$constants$1.Wow64EnableWow64FsRedirection$MH();
    }
    public static @C("BOOLEAN") byte Wow64EnableWow64FsRedirection (@C("BOOLEAN") byte Wow64FsEnableRedirection) {
        try {
            return (byte)winbase_h$constants$1.Wow64EnableWow64FsRedirection$MH().invokeExact(Wow64FsEnableRedirection);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDllDirectoryA$MH() {
        return winbase_h$constants$1.SetDllDirectoryA$MH();
    }
    public static @C("BOOL") int SetDllDirectoryA (@C("LPCSTR") Addressable lpPathName) {
        try {
            return (int)winbase_h$constants$1.SetDllDirectoryA$MH().invokeExact(lpPathName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDllDirectoryW$MH() {
        return winbase_h$constants$1.SetDllDirectoryW$MH();
    }
    public static @C("BOOL") int SetDllDirectoryW (@C("LPCWSTR") Addressable lpPathName) {
        try {
            return (int)winbase_h$constants$1.SetDllDirectoryW$MH().invokeExact(lpPathName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDllDirectoryA$MH() {
        return winbase_h$constants$1.GetDllDirectoryA$MH();
    }
    public static @C("DWORD") int GetDllDirectoryA (@C("DWORD") int nBufferLength, @C("LPSTR") Addressable lpBuffer) {
        try {
            return (int)winbase_h$constants$1.GetDllDirectoryA$MH().invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDllDirectoryW$MH() {
        return winbase_h$constants$1.GetDllDirectoryW$MH();
    }
    public static @C("DWORD") int GetDllDirectoryW (@C("DWORD") int nBufferLength, @C("LPWSTR") Addressable lpBuffer) {
        try {
            return (int)winbase_h$constants$1.GetDllDirectoryW$MH().invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSearchPathMode$MH() {
        return winbase_h$constants$1.SetSearchPathMode$MH();
    }
    public static @C("BOOL") int SetSearchPathMode (@C("DWORD") int Flags) {
        try {
            return (int)winbase_h$constants$1.SetSearchPathMode$MH().invokeExact(Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDirectoryExA$MH() {
        return winbase_h$constants$1.CreateDirectoryExA$MH();
    }
    public static @C("BOOL") int CreateDirectoryExA (@C("LPCSTR") Addressable lpTemplateDirectory, @C("LPCSTR") Addressable lpNewDirectory, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)winbase_h$constants$1.CreateDirectoryExA$MH().invokeExact(lpTemplateDirectory.address(), lpNewDirectory.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDirectoryExW$MH() {
        return winbase_h$constants$1.CreateDirectoryExW$MH();
    }
    public static @C("BOOL") int CreateDirectoryExW (@C("LPCWSTR") Addressable lpTemplateDirectory, @C("LPCWSTR") Addressable lpNewDirectory, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)winbase_h$constants$1.CreateDirectoryExW$MH().invokeExact(lpTemplateDirectory.address(), lpNewDirectory.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDirectoryTransactedA$MH() {
        return winbase_h$constants$1.CreateDirectoryTransactedA$MH();
    }
    public static @C("BOOL") int CreateDirectoryTransactedA (@C("LPCSTR") Addressable lpTemplateDirectory, @C("LPCSTR") Addressable lpNewDirectory, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.CreateDirectoryTransactedA$MH().invokeExact(lpTemplateDirectory.address(), lpNewDirectory.address(), lpSecurityAttributes.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDirectoryTransactedW$MH() {
        return winbase_h$constants$1.CreateDirectoryTransactedW$MH();
    }
    public static @C("BOOL") int CreateDirectoryTransactedW (@C("LPCWSTR") Addressable lpTemplateDirectory, @C("LPCWSTR") Addressable lpNewDirectory, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.CreateDirectoryTransactedW$MH().invokeExact(lpTemplateDirectory.address(), lpNewDirectory.address(), lpSecurityAttributes.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveDirectoryTransactedA$MH() {
        return winbase_h$constants$1.RemoveDirectoryTransactedA$MH();
    }
    public static @C("BOOL") int RemoveDirectoryTransactedA (@C("LPCSTR") Addressable lpPathName, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.RemoveDirectoryTransactedA$MH().invokeExact(lpPathName.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveDirectoryTransactedW$MH() {
        return winbase_h$constants$1.RemoveDirectoryTransactedW$MH();
    }
    public static @C("BOOL") int RemoveDirectoryTransactedW (@C("LPCWSTR") Addressable lpPathName, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.RemoveDirectoryTransactedW$MH().invokeExact(lpPathName.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFullPathNameTransactedA$MH() {
        return winbase_h$constants$1.GetFullPathNameTransactedA$MH();
    }
    public static @C("DWORD") int GetFullPathNameTransactedA (@C("LPCSTR") Addressable lpFileName, @C("DWORD") int nBufferLength, @C("LPSTR") Addressable lpBuffer, @C("LPSTR*") Addressable lpFilePart, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.GetFullPathNameTransactedA$MH().invokeExact(lpFileName.address(), nBufferLength, lpBuffer.address(), lpFilePart.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFullPathNameTransactedW$MH() {
        return winbase_h$constants$1.GetFullPathNameTransactedW$MH();
    }
    public static @C("DWORD") int GetFullPathNameTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int nBufferLength, @C("LPWSTR") Addressable lpBuffer, @C("LPWSTR*") Addressable lpFilePart, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.GetFullPathNameTransactedW$MH().invokeExact(lpFileName.address(), nBufferLength, lpBuffer.address(), lpFilePart.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefineDosDeviceA$MH() {
        return winbase_h$constants$1.DefineDosDeviceA$MH();
    }
    public static @C("BOOL") int DefineDosDeviceA (@C("DWORD") int dwFlags, @C("LPCSTR") Addressable lpDeviceName, @C("LPCSTR") Addressable lpTargetPath) {
        try {
            return (int)winbase_h$constants$1.DefineDosDeviceA$MH().invokeExact(dwFlags, lpDeviceName.address(), lpTargetPath.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryDosDeviceA$MH() {
        return winbase_h$constants$1.QueryDosDeviceA$MH();
    }
    public static @C("DWORD") int QueryDosDeviceA (@C("LPCSTR") Addressable lpDeviceName, @C("LPSTR") Addressable lpTargetPath, @C("DWORD") int ucchMax) {
        try {
            return (int)winbase_h$constants$1.QueryDosDeviceA$MH().invokeExact(lpDeviceName.address(), lpTargetPath.address(), ucchMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileTransactedA$MH() {
        return winbase_h$constants$1.CreateFileTransactedA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileTransactedA (@C("LPCSTR") Addressable lpFileName, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("DWORD") int dwCreationDisposition, @C("DWORD") int dwFlagsAndAttributes, @C("HANDLE") Addressable hTemplateFile, @C("HANDLE") Addressable hTransaction, @C("PUSHORT") Addressable pusMiniVersion, @C("PVOID") Addressable lpExtendedParameter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateFileTransactedA$MH().invokeExact(lpFileName.address(), dwDesiredAccess, dwShareMode, lpSecurityAttributes.address(), dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile.address(), hTransaction.address(), pusMiniVersion.address(), lpExtendedParameter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileTransactedW$MH() {
        return winbase_h$constants$1.CreateFileTransactedW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("DWORD") int dwCreationDisposition, @C("DWORD") int dwFlagsAndAttributes, @C("HANDLE") Addressable hTemplateFile, @C("HANDLE") Addressable hTransaction, @C("PUSHORT") Addressable pusMiniVersion, @C("PVOID") Addressable lpExtendedParameter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateFileTransactedW$MH().invokeExact(lpFileName.address(), dwDesiredAccess, dwShareMode, lpSecurityAttributes.address(), dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile.address(), hTransaction.address(), pusMiniVersion.address(), lpExtendedParameter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReOpenFile$MH() {
        return winbase_h$constants$1.ReOpenFile$MH();
    }
    public static @C("HANDLE") MemoryAddress ReOpenFile (@C("HANDLE") Addressable hOriginalFile, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("DWORD") int dwFlagsAndAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.ReOpenFile$MH().invokeExact(hOriginalFile.address(), dwDesiredAccess, dwShareMode, dwFlagsAndAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileAttributesTransactedA$MH() {
        return winbase_h$constants$1.SetFileAttributesTransactedA$MH();
    }
    public static @C("BOOL") int SetFileAttributesTransactedA (@C("LPCSTR") Addressable lpFileName, @C("DWORD") int dwFileAttributes, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.SetFileAttributesTransactedA$MH().invokeExact(lpFileName.address(), dwFileAttributes, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileAttributesTransactedW$MH() {
        return winbase_h$constants$1.SetFileAttributesTransactedW$MH();
    }
    public static @C("BOOL") int SetFileAttributesTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwFileAttributes, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.SetFileAttributesTransactedW$MH().invokeExact(lpFileName.address(), dwFileAttributes, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileAttributesTransactedA$MH() {
        return winbase_h$constants$1.GetFileAttributesTransactedA$MH();
    }
    public static @C("BOOL") int GetFileAttributesTransactedA (@C("LPCSTR") Addressable lpFileName, @C("GET_FILEEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFileInformation, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.GetFileAttributesTransactedA$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFileInformation.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileAttributesTransactedW$MH() {
        return winbase_h$constants$1.GetFileAttributesTransactedW$MH();
    }
    public static @C("BOOL") int GetFileAttributesTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("GET_FILEEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFileInformation, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.GetFileAttributesTransactedW$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFileInformation.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCompressedFileSizeTransactedA$MH() {
        return winbase_h$constants$1.GetCompressedFileSizeTransactedA$MH();
    }
    public static @C("DWORD") int GetCompressedFileSizeTransactedA (@C("LPCSTR") Addressable lpFileName, @C("LPDWORD") Addressable lpFileSizeHigh, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.GetCompressedFileSizeTransactedA$MH().invokeExact(lpFileName.address(), lpFileSizeHigh.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCompressedFileSizeTransactedW$MH() {
        return winbase_h$constants$1.GetCompressedFileSizeTransactedW$MH();
    }
    public static @C("DWORD") int GetCompressedFileSizeTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("LPDWORD") Addressable lpFileSizeHigh, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.GetCompressedFileSizeTransactedW$MH().invokeExact(lpFileName.address(), lpFileSizeHigh.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteFileTransactedA$MH() {
        return winbase_h$constants$1.DeleteFileTransactedA$MH();
    }
    public static @C("BOOL") int DeleteFileTransactedA (@C("LPCSTR") Addressable lpFileName, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.DeleteFileTransactedA$MH().invokeExact(lpFileName.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteFileTransactedW$MH() {
        return winbase_h$constants$1.DeleteFileTransactedW$MH();
    }
    public static @C("BOOL") int DeleteFileTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.DeleteFileTransactedW$MH().invokeExact(lpFileName.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckNameLegalDOS8Dot3A$MH() {
        return winbase_h$constants$1.CheckNameLegalDOS8Dot3A$MH();
    }
    public static @C("BOOL") int CheckNameLegalDOS8Dot3A (@C("LPCSTR") Addressable lpName, @C("LPSTR") Addressable lpOemName, @C("DWORD") int OemNameSize, @C("PBOOL") Addressable pbNameContainsSpaces, @C("PBOOL") Addressable pbNameLegal) {
        try {
            return (int)winbase_h$constants$1.CheckNameLegalDOS8Dot3A$MH().invokeExact(lpName.address(), lpOemName.address(), OemNameSize, pbNameContainsSpaces.address(), pbNameLegal.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckNameLegalDOS8Dot3W$MH() {
        return winbase_h$constants$1.CheckNameLegalDOS8Dot3W$MH();
    }
    public static @C("BOOL") int CheckNameLegalDOS8Dot3W (@C("LPCWSTR") Addressable lpName, @C("LPSTR") Addressable lpOemName, @C("DWORD") int OemNameSize, @C("PBOOL") Addressable pbNameContainsSpaces, @C("PBOOL") Addressable pbNameLegal) {
        try {
            return (int)winbase_h$constants$1.CheckNameLegalDOS8Dot3W$MH().invokeExact(lpName.address(), lpOemName.address(), OemNameSize, pbNameContainsSpaces.address(), pbNameLegal.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFileTransactedA$MH() {
        return winbase_h$constants$1.FindFirstFileTransactedA$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstFileTransactedA (@C("LPCSTR") Addressable lpFileName, @C("FINDEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFindFileData, @C("FINDEX_SEARCH_OPS") int fSearchOp, @C("LPVOID") Addressable lpSearchFilter, @C("DWORD") int dwAdditionalFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.FindFirstFileTransactedA$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFindFileData.address(), fSearchOp, lpSearchFilter.address(), dwAdditionalFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFileTransactedW$MH() {
        return winbase_h$constants$1.FindFirstFileTransactedW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstFileTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("FINDEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFindFileData, @C("FINDEX_SEARCH_OPS") int fSearchOp, @C("LPVOID") Addressable lpSearchFilter, @C("DWORD") int dwAdditionalFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.FindFirstFileTransactedW$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFindFileData.address(), fSearchOp, lpSearchFilter.address(), dwAdditionalFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyFileA$MH() {
        return winbase_h$constants$1.CopyFileA$MH();
    }
    public static @C("BOOL") int CopyFileA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName, @C("BOOL") int bFailIfExists) {
        try {
            return (int)winbase_h$constants$1.CopyFileA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), bFailIfExists);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyFileW$MH() {
        return winbase_h$constants$1.CopyFileW$MH();
    }
    public static @C("BOOL") int CopyFileW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("BOOL") int bFailIfExists) {
        try {
            return (int)winbase_h$constants$1.CopyFileW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), bFailIfExists);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyFileExA$MH() {
        return winbase_h$constants$1.CopyFileExA$MH();
    }
    public static @C("BOOL") int CopyFileExA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("LPBOOL") Addressable pbCancel, @C("DWORD") int dwCopyFlags) {
        try {
            return (int)winbase_h$constants$1.CopyFileExA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), pbCancel.address(), dwCopyFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface CopyFileExA$lpProgressRoutine {

        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemorySegment x3, int x4, int x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(CopyFileExA$lpProgressRoutine fi) {
            return RuntimeHelper.upcallStub(CopyFileExA$lpProgressRoutine.class, fi, winbase_h$constants$1.CopyFileExA$lpProgressRoutine$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(CopyFileExA$lpProgressRoutine fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle CopyFileExW$MH() {
        return winbase_h$constants$1.CopyFileExW$MH();
    }
    public static @C("BOOL") int CopyFileExW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("LPBOOL") Addressable pbCancel, @C("DWORD") int dwCopyFlags) {
        try {
            return (int)winbase_h$constants$1.CopyFileExW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), pbCancel.address(), dwCopyFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface CopyFileExW$lpProgressRoutine {

        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemorySegment x3, int x4, int x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(CopyFileExW$lpProgressRoutine fi) {
            return RuntimeHelper.upcallStub(CopyFileExW$lpProgressRoutine.class, fi, winbase_h$constants$1.CopyFileExW$lpProgressRoutine$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(CopyFileExW$lpProgressRoutine fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle CopyFileTransactedA$MH() {
        return winbase_h$constants$1.CopyFileTransactedA$MH();
    }
    public static @C("BOOL") int CopyFileTransactedA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("LPBOOL") Addressable pbCancel, @C("DWORD") int dwCopyFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.CopyFileTransactedA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), pbCancel.address(), dwCopyFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface CopyFileTransactedA$lpProgressRoutine {

        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemorySegment x3, int x4, int x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(CopyFileTransactedA$lpProgressRoutine fi) {
            return RuntimeHelper.upcallStub(CopyFileTransactedA$lpProgressRoutine.class, fi, winbase_h$constants$1.CopyFileTransactedA$lpProgressRoutine$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(CopyFileTransactedA$lpProgressRoutine fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static  MethodHandle CopyFileTransactedW$MH() {
        return winbase_h$constants$1.CopyFileTransactedW$MH();
    }
    public static interface CopyFileTransactedW$lpProgressRoutine {

        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemorySegment x3, int x4, int x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(CopyFileTransactedW$lpProgressRoutine fi) {
            return RuntimeHelper.upcallStub(CopyFileTransactedW$lpProgressRoutine.class, fi, winbase_h$constants$1.CopyFileTransactedW$lpProgressRoutine$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(CopyFileTransactedW$lpProgressRoutine fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    @C("struct COPYFILE2_MESSAGE")public static class COPYFILE2_MESSAGE {

        /* package-private */ COPYFILE2_MESSAGE() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$1.COPYFILE2_MESSAGE$struct$LAYOUT();
        }
        public static VarHandle Type$VH() {
            return winbase_h$constants$1.COPYFILE2_MESSAGE$Type$VH();
        }
        public static  @C("COPYFILE2_MESSAGE_TYPE") int Type$get(@C("struct COPYFILE2_MESSAGE") MemorySegment seg) {
            return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Type$VH().get(seg);
        }
        public static  @C("COPYFILE2_MESSAGE_TYPE") int Type$get(@C("struct COPYFILE2_MESSAGE") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct COPYFILE2_MESSAGE") MemorySegment seg, @C("COPYFILE2_MESSAGE_TYPE") int x) {
            winbase_h$constants$1.COPYFILE2_MESSAGE$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct COPYFILE2_MESSAGE") MemorySegment seg, long index, @C("COPYFILE2_MESSAGE_TYPE") int x) {
            winbase_h$constants$1.COPYFILE2_MESSAGE$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwPadding$VH() {
            return winbase_h$constants$1.COPYFILE2_MESSAGE$dwPadding$VH();
        }
        public static  @C("DWORD") int dwPadding$get(@C("struct COPYFILE2_MESSAGE") MemorySegment seg) {
            return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$dwPadding$VH().get(seg);
        }
        public static  @C("DWORD") int dwPadding$get(@C("struct COPYFILE2_MESSAGE") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$dwPadding$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwPadding$set(@C("struct COPYFILE2_MESSAGE") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$1.COPYFILE2_MESSAGE$dwPadding$VH().set(seg, x);
        }
        public static void dwPadding$set(@C("struct COPYFILE2_MESSAGE") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$1.COPYFILE2_MESSAGE$dwPadding$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("union ")public static class Info {

            /* package-private */ Info() {}
            public static MemoryLayout $LAYOUT() {
                return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$union$LAYOUT();
            }
            @C("struct ")public static class ChunkStarted {

                /* package-private */ ChunkStarted() {}
                public static MemoryLayout $LAYOUT() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$struct$LAYOUT();
                }
                public static VarHandle dwStreamNumber$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$dwStreamNumber$VH();
                }
                public static  @C("DWORD") int dwStreamNumber$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$dwStreamNumber$VH().get(seg);
                }
                public static  @C("DWORD") int dwStreamNumber$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$dwStreamNumber$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void dwStreamNumber$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$dwStreamNumber$VH().set(seg, x);
                }
                public static void dwStreamNumber$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$dwStreamNumber$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle dwReserved$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$dwReserved$VH();
                }
                public static  @C("DWORD") int dwReserved$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$dwReserved$VH().get(seg);
                }
                public static  @C("DWORD") int dwReserved$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$dwReserved$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void dwReserved$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$dwReserved$VH().set(seg, x);
                }
                public static void dwReserved$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$dwReserved$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle hSourceFile$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$hSourceFile$VH();
                }
                public static  @C("HANDLE") MemoryAddress hSourceFile$get(@C("struct ") MemorySegment seg) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$hSourceFile$VH().get(seg);
                }
                public static  @C("HANDLE") MemoryAddress hSourceFile$get(@C("struct ") MemorySegment seg, long index) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$hSourceFile$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void hSourceFile$set(@C("struct ") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$hSourceFile$VH().set(seg, x);
                }
                public static void hSourceFile$set(@C("struct ") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$hSourceFile$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle hDestinationFile$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$hDestinationFile$VH();
                }
                public static  @C("HANDLE") MemoryAddress hDestinationFile$get(@C("struct ") MemorySegment seg) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$hDestinationFile$VH().get(seg);
                }
                public static  @C("HANDLE") MemoryAddress hDestinationFile$get(@C("struct ") MemorySegment seg, long index) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$hDestinationFile$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void hDestinationFile$set(@C("struct ") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$hDestinationFile$VH().set(seg, x);
                }
                public static void hDestinationFile$set(@C("struct ") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkStarted$hDestinationFile$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static MemorySegment uliChunkNumber$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
                }
                public static MemorySegment uliChunkSize$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
                }
                public static MemorySegment uliStreamSize$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
                }
                public static MemorySegment uliTotalFileSize$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment ChunkStarted$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 56));
            }
            @C("struct ")public static class ChunkFinished {

                /* package-private */ ChunkFinished() {}
                public static MemoryLayout $LAYOUT() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$struct$LAYOUT();
                }
                public static VarHandle dwStreamNumber$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$dwStreamNumber$VH();
                }
                public static  @C("DWORD") int dwStreamNumber$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$dwStreamNumber$VH().get(seg);
                }
                public static  @C("DWORD") int dwStreamNumber$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$dwStreamNumber$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void dwStreamNumber$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$dwStreamNumber$VH().set(seg, x);
                }
                public static void dwStreamNumber$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$dwStreamNumber$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle dwFlags$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$dwFlags$VH();
                }
                public static  @C("DWORD") int dwFlags$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$dwFlags$VH().get(seg);
                }
                public static  @C("DWORD") int dwFlags$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$dwFlags$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void dwFlags$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$dwFlags$VH().set(seg, x);
                }
                public static void dwFlags$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$dwFlags$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle hSourceFile$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$hSourceFile$VH();
                }
                public static  @C("HANDLE") MemoryAddress hSourceFile$get(@C("struct ") MemorySegment seg) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$hSourceFile$VH().get(seg);
                }
                public static  @C("HANDLE") MemoryAddress hSourceFile$get(@C("struct ") MemorySegment seg, long index) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$hSourceFile$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void hSourceFile$set(@C("struct ") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$hSourceFile$VH().set(seg, x);
                }
                public static void hSourceFile$set(@C("struct ") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$hSourceFile$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle hDestinationFile$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$hDestinationFile$VH();
                }
                public static  @C("HANDLE") MemoryAddress hDestinationFile$get(@C("struct ") MemorySegment seg) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$hDestinationFile$VH().get(seg);
                }
                public static  @C("HANDLE") MemoryAddress hDestinationFile$get(@C("struct ") MemorySegment seg, long index) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$hDestinationFile$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void hDestinationFile$set(@C("struct ") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$hDestinationFile$VH().set(seg, x);
                }
                public static void hDestinationFile$set(@C("struct ") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$ChunkFinished$hDestinationFile$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static MemorySegment uliChunkNumber$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
                }
                public static MemorySegment uliChunkSize$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
                }
                public static MemorySegment uliStreamSize$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
                }
                public static MemorySegment uliStreamBytesTransferred$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
                }
                public static MemorySegment uliTotalFileSize$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 8));
                }
                public static MemorySegment uliTotalBytesTransferred$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 8));
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment ChunkFinished$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 72));
            }
            @C("struct ")public static class StreamStarted {

                /* package-private */ StreamStarted() {}
                public static MemoryLayout $LAYOUT() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$struct$LAYOUT();
                }
                public static VarHandle dwStreamNumber$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$dwStreamNumber$VH();
                }
                public static  @C("DWORD") int dwStreamNumber$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$dwStreamNumber$VH().get(seg);
                }
                public static  @C("DWORD") int dwStreamNumber$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$dwStreamNumber$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void dwStreamNumber$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$dwStreamNumber$VH().set(seg, x);
                }
                public static void dwStreamNumber$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$dwStreamNumber$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle dwReserved$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$dwReserved$VH();
                }
                public static  @C("DWORD") int dwReserved$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$dwReserved$VH().get(seg);
                }
                public static  @C("DWORD") int dwReserved$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$dwReserved$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void dwReserved$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$dwReserved$VH().set(seg, x);
                }
                public static void dwReserved$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$dwReserved$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle hSourceFile$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$hSourceFile$VH();
                }
                public static  @C("HANDLE") MemoryAddress hSourceFile$get(@C("struct ") MemorySegment seg) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$hSourceFile$VH().get(seg);
                }
                public static  @C("HANDLE") MemoryAddress hSourceFile$get(@C("struct ") MemorySegment seg, long index) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$hSourceFile$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void hSourceFile$set(@C("struct ") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$hSourceFile$VH().set(seg, x);
                }
                public static void hSourceFile$set(@C("struct ") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$hSourceFile$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle hDestinationFile$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$hDestinationFile$VH();
                }
                public static  @C("HANDLE") MemoryAddress hDestinationFile$get(@C("struct ") MemorySegment seg) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$hDestinationFile$VH().get(seg);
                }
                public static  @C("HANDLE") MemoryAddress hDestinationFile$get(@C("struct ") MemorySegment seg, long index) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$hDestinationFile$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void hDestinationFile$set(@C("struct ") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$hDestinationFile$VH().set(seg, x);
                }
                public static void hDestinationFile$set(@C("struct ") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamStarted$hDestinationFile$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static MemorySegment uliStreamSize$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
                }
                public static MemorySegment uliTotalFileSize$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment StreamStarted$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 40));
            }
            @C("struct ")public static class StreamFinished {

                /* package-private */ StreamFinished() {}
                public static MemoryLayout $LAYOUT() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$struct$LAYOUT();
                }
                public static VarHandle dwStreamNumber$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$dwStreamNumber$VH();
                }
                public static  @C("DWORD") int dwStreamNumber$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$dwStreamNumber$VH().get(seg);
                }
                public static  @C("DWORD") int dwStreamNumber$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$dwStreamNumber$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void dwStreamNumber$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$dwStreamNumber$VH().set(seg, x);
                }
                public static void dwStreamNumber$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$dwStreamNumber$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle dwReserved$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$dwReserved$VH();
                }
                public static  @C("DWORD") int dwReserved$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$dwReserved$VH().get(seg);
                }
                public static  @C("DWORD") int dwReserved$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$dwReserved$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void dwReserved$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$dwReserved$VH().set(seg, x);
                }
                public static void dwReserved$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$dwReserved$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle hSourceFile$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$hSourceFile$VH();
                }
                public static  @C("HANDLE") MemoryAddress hSourceFile$get(@C("struct ") MemorySegment seg) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$hSourceFile$VH().get(seg);
                }
                public static  @C("HANDLE") MemoryAddress hSourceFile$get(@C("struct ") MemorySegment seg, long index) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$hSourceFile$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void hSourceFile$set(@C("struct ") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$hSourceFile$VH().set(seg, x);
                }
                public static void hSourceFile$set(@C("struct ") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$hSourceFile$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle hDestinationFile$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$hDestinationFile$VH();
                }
                public static  @C("HANDLE") MemoryAddress hDestinationFile$get(@C("struct ") MemorySegment seg) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$hDestinationFile$VH().get(seg);
                }
                public static  @C("HANDLE") MemoryAddress hDestinationFile$get(@C("struct ") MemorySegment seg, long index) {
                    return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$hDestinationFile$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void hDestinationFile$set(@C("struct ") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$hDestinationFile$VH().set(seg, x);
                }
                public static void hDestinationFile$set(@C("struct ") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$StreamFinished$hDestinationFile$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static MemorySegment uliStreamSize$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
                }
                public static MemorySegment uliStreamBytesTransferred$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
                }
                public static MemorySegment uliTotalFileSize$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
                }
                public static MemorySegment uliTotalBytesTransferred$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment StreamFinished$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 56));
            }
            @C("struct ")public static class PollContinue {

                /* package-private */ PollContinue() {}
                public static MemoryLayout $LAYOUT() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$PollContinue$struct$LAYOUT();
                }
                public static VarHandle dwReserved$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$PollContinue$dwReserved$VH();
                }
                public static  @C("DWORD") int dwReserved$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$PollContinue$dwReserved$VH().get(seg);
                }
                public static  @C("DWORD") int dwReserved$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$PollContinue$dwReserved$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void dwReserved$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$PollContinue$dwReserved$VH().set(seg, x);
                }
                public static void dwReserved$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$PollContinue$dwReserved$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment PollContinue$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            @C("struct ")public static class Error {

                /* package-private */ Error() {}
                public static MemoryLayout $LAYOUT() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$struct$LAYOUT();
                }
                public static VarHandle CopyPhase$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$CopyPhase$VH();
                }
                public static  @C("COPYFILE2_COPY_PHASE") int CopyPhase$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$CopyPhase$VH().get(seg);
                }
                public static  @C("COPYFILE2_COPY_PHASE") int CopyPhase$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$CopyPhase$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void CopyPhase$set(@C("struct ") MemorySegment seg, @C("COPYFILE2_COPY_PHASE") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$CopyPhase$VH().set(seg, x);
                }
                public static void CopyPhase$set(@C("struct ") MemorySegment seg, long index, @C("COPYFILE2_COPY_PHASE") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$CopyPhase$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle dwStreamNumber$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$dwStreamNumber$VH();
                }
                public static  @C("DWORD") int dwStreamNumber$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$dwStreamNumber$VH().get(seg);
                }
                public static  @C("DWORD") int dwStreamNumber$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$dwStreamNumber$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void dwStreamNumber$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$dwStreamNumber$VH().set(seg, x);
                }
                public static void dwStreamNumber$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$dwStreamNumber$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle hrFailure$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$hrFailure$VH();
                }
                public static  @C("HRESULT") int hrFailure$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$hrFailure$VH().get(seg);
                }
                public static  @C("HRESULT") int hrFailure$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$hrFailure$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void hrFailure$set(@C("struct ") MemorySegment seg, @C("HRESULT") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$hrFailure$VH().set(seg, x);
                }
                public static void hrFailure$set(@C("struct ") MemorySegment seg, long index, @C("HRESULT") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$hrFailure$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle dwReserved$VH() {
                    return winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$dwReserved$VH();
                }
                public static  @C("DWORD") int dwReserved$get(@C("struct ") MemorySegment seg) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$dwReserved$VH().get(seg);
                }
                public static  @C("DWORD") int dwReserved$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$dwReserved$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void dwReserved$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$dwReserved$VH().set(seg, x);
                }
                public static void dwReserved$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winbase_h$constants$1.COPYFILE2_MESSAGE$Info$Error$dwReserved$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static MemorySegment uliChunkNumber$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
                }
                public static MemorySegment uliStreamSize$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
                }
                public static MemorySegment uliStreamBytesTransferred$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
                }
                public static MemorySegment uliTotalFileSize$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
                }
                public static MemorySegment uliTotalBytesTransferred$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment Error$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 56));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Info$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 72));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct COPYFILE2_MESSAGE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct COPYFILE2_MESSAGE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct COPYFILE2_MESSAGE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct COPYFILE2_MESSAGE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct COPYFILE2_MESSAGE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct COPYFILE2_MESSAGE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct COPYFILE2_MESSAGE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct COPYFILE2_EXTENDED_PARAMETERS")public static class COPYFILE2_EXTENDED_PARAMETERS {

        /* package-private */ COPYFILE2_EXTENDED_PARAMETERS() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$struct$LAYOUT();
        }
        public static VarHandle dwSize$VH() {
            return winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$dwSize$VH();
        }
        public static  @C("DWORD") int dwSize$get(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg) {
            return (int)winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$dwSize$VH().get(seg);
        }
        public static  @C("DWORD") int dwSize$get(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$dwSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwSize$set(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$dwSize$VH().set(seg, x);
        }
        public static void dwSize$set(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$dwSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwCopyFlags$VH() {
            return winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$dwCopyFlags$VH();
        }
        public static  @C("DWORD") int dwCopyFlags$get(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg) {
            return (int)winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$dwCopyFlags$VH().get(seg);
        }
        public static  @C("DWORD") int dwCopyFlags$get(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$dwCopyFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwCopyFlags$set(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$dwCopyFlags$VH().set(seg, x);
        }
        public static void dwCopyFlags$set(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$dwCopyFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pfCancel$VH() {
            return winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pfCancel$VH();
        }
        public static  @C("BOOL*") MemoryAddress pfCancel$get(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pfCancel$VH().get(seg);
        }
        public static  @C("BOOL*") MemoryAddress pfCancel$get(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pfCancel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pfCancel$set(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, @C("BOOL*") MemoryAddress x) {
            winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pfCancel$VH().set(seg, x);
        }
        public static void pfCancel$set(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, long index, @C("BOOL*") MemoryAddress x) {
            winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pfCancel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pProgressRoutine$VH() {
            return winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pProgressRoutine$VH();
        }
        public static  @C("PCOPYFILE2_PROGRESS_ROUTINE") MemoryAddress pProgressRoutine$get(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pProgressRoutine$VH().get(seg);
        }
        public static  @C("PCOPYFILE2_PROGRESS_ROUTINE") MemoryAddress pProgressRoutine$get(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pProgressRoutine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pProgressRoutine$set(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, @C("PCOPYFILE2_PROGRESS_ROUTINE") MemoryAddress x) {
            winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pProgressRoutine$VH().set(seg, x);
        }
        public static void pProgressRoutine$set(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, long index, @C("PCOPYFILE2_PROGRESS_ROUTINE") MemoryAddress x) {
            winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pProgressRoutine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle pvCallbackContext$VH() {
            return winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pvCallbackContext$VH();
        }
        public static  @C("PVOID") MemoryAddress pvCallbackContext$get(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pvCallbackContext$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress pvCallbackContext$get(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pvCallbackContext$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pvCallbackContext$set(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pvCallbackContext$VH().set(seg, x);
        }
        public static void pvCallbackContext$set(@C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$1.COPYFILE2_EXTENDED_PARAMETERS$pvCallbackContext$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct COPYFILE2_EXTENDED_PARAMETERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct COPYFILE2_EXTENDED_PARAMETERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct COPYFILE2_EXTENDED_PARAMETERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct COPYFILE2_EXTENDED_PARAMETERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct COPYFILE2_EXTENDED_PARAMETERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static interface MoveFileWithProgressA$lpProgressRoutine {

        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemorySegment x3, int x4, int x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(MoveFileWithProgressA$lpProgressRoutine fi) {
            return RuntimeHelper.upcallStub(MoveFileWithProgressA$lpProgressRoutine.class, fi, winbase_h$constants$1.MoveFileWithProgressA$lpProgressRoutine$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(MoveFileWithProgressA$lpProgressRoutine fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface MoveFileWithProgressW$lpProgressRoutine {

        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemorySegment x3, int x4, int x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(MoveFileWithProgressW$lpProgressRoutine fi) {
            return RuntimeHelper.upcallStub(MoveFileWithProgressW$lpProgressRoutine.class, fi, winbase_h$constants$1.MoveFileWithProgressW$lpProgressRoutine$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(MoveFileWithProgressW$lpProgressRoutine fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface MoveFileTransactedA$lpProgressRoutine {

        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemorySegment x3, int x4, int x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(MoveFileTransactedA$lpProgressRoutine fi) {
            return RuntimeHelper.upcallStub(MoveFileTransactedA$lpProgressRoutine.class, fi, winbase_h$constants$1.MoveFileTransactedA$lpProgressRoutine$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(MoveFileTransactedA$lpProgressRoutine fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface MoveFileTransactedW$lpProgressRoutine {

        int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemorySegment x3, int x4, int x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(MoveFileTransactedW$lpProgressRoutine fi) {
            return RuntimeHelper.upcallStub(MoveFileTransactedW$lpProgressRoutine.class, fi, winbase_h$constants$1.MoveFileTransactedW$lpProgressRoutine$FUNC(), "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static  @C("LPPROGRESS_ROUTINE") MemorySegment allocate(MoveFileTransactedW$lpProgressRoutine fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    @C("struct _EVENTLOG_FULL_INFORMATION")public static class _EVENTLOG_FULL_INFORMATION {

        /* package-private */ _EVENTLOG_FULL_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$1._EVENTLOG_FULL_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle dwFull$VH() {
            return winbase_h$constants$1._EVENTLOG_FULL_INFORMATION$dwFull$VH();
        }
        public static  @C("DWORD") int dwFull$get(@C("struct _EVENTLOG_FULL_INFORMATION") MemorySegment seg) {
            return (int)winbase_h$constants$1._EVENTLOG_FULL_INFORMATION$dwFull$VH().get(seg);
        }
        public static  @C("DWORD") int dwFull$get(@C("struct _EVENTLOG_FULL_INFORMATION") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1._EVENTLOG_FULL_INFORMATION$dwFull$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwFull$set(@C("struct _EVENTLOG_FULL_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$1._EVENTLOG_FULL_INFORMATION$dwFull$VH().set(seg, x);
        }
        public static void dwFull$set(@C("struct _EVENTLOG_FULL_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$1._EVENTLOG_FULL_INFORMATION$dwFull$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _EVENTLOG_FULL_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _EVENTLOG_FULL_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _EVENTLOG_FULL_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _EVENTLOG_FULL_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _EVENTLOG_FULL_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _EVENTLOG_FULL_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _EVENTLOG_FULL_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _EVENTLOG_FULL_INFORMATION")public static class EVENTLOG_FULL_INFORMATION extends _EVENTLOG_FULL_INFORMATION {

        /* package-private */ EVENTLOG_FULL_INFORMATION() {}
    }

    @C("struct _OPERATION_START_PARAMETERS")public static class _OPERATION_START_PARAMETERS {

        /* package-private */ _OPERATION_START_PARAMETERS() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$1._OPERATION_START_PARAMETERS$struct$LAYOUT();
        }
        public static VarHandle Version$VH() {
            return winbase_h$constants$1._OPERATION_START_PARAMETERS$Version$VH();
        }
        public static  @C("ULONG") int Version$get(@C("struct _OPERATION_START_PARAMETERS") MemorySegment seg) {
            return (int)winbase_h$constants$1._OPERATION_START_PARAMETERS$Version$VH().get(seg);
        }
        public static  @C("ULONG") int Version$get(@C("struct _OPERATION_START_PARAMETERS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1._OPERATION_START_PARAMETERS$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _OPERATION_START_PARAMETERS") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$1._OPERATION_START_PARAMETERS$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _OPERATION_START_PARAMETERS") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$1._OPERATION_START_PARAMETERS$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OperationId$VH() {
            return winbase_h$constants$1._OPERATION_START_PARAMETERS$OperationId$VH();
        }
        public static  @C("OPERATION_ID") int OperationId$get(@C("struct _OPERATION_START_PARAMETERS") MemorySegment seg) {
            return (int)winbase_h$constants$1._OPERATION_START_PARAMETERS$OperationId$VH().get(seg);
        }
        public static  @C("OPERATION_ID") int OperationId$get(@C("struct _OPERATION_START_PARAMETERS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1._OPERATION_START_PARAMETERS$OperationId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OperationId$set(@C("struct _OPERATION_START_PARAMETERS") MemorySegment seg, @C("OPERATION_ID") int x) {
            winbase_h$constants$1._OPERATION_START_PARAMETERS$OperationId$VH().set(seg, x);
        }
        public static void OperationId$set(@C("struct _OPERATION_START_PARAMETERS") MemorySegment seg, long index, @C("OPERATION_ID") int x) {
            winbase_h$constants$1._OPERATION_START_PARAMETERS$OperationId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winbase_h$constants$1._OPERATION_START_PARAMETERS$Flags$VH();
        }
        public static  @C("ULONG") int Flags$get(@C("struct _OPERATION_START_PARAMETERS") MemorySegment seg) {
            return (int)winbase_h$constants$1._OPERATION_START_PARAMETERS$Flags$VH().get(seg);
        }
        public static  @C("ULONG") int Flags$get(@C("struct _OPERATION_START_PARAMETERS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1._OPERATION_START_PARAMETERS$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _OPERATION_START_PARAMETERS") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$1._OPERATION_START_PARAMETERS$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _OPERATION_START_PARAMETERS") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$1._OPERATION_START_PARAMETERS$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _OPERATION_START_PARAMETERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _OPERATION_START_PARAMETERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _OPERATION_START_PARAMETERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _OPERATION_START_PARAMETERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _OPERATION_START_PARAMETERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _OPERATION_START_PARAMETERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _OPERATION_START_PARAMETERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _OPERATION_START_PARAMETERS")public static class OPERATION_START_PARAMETERS extends _OPERATION_START_PARAMETERS {

        /* package-private */ OPERATION_START_PARAMETERS() {}
    }

    @C("struct _OPERATION_END_PARAMETERS")public static class _OPERATION_END_PARAMETERS {

        /* package-private */ _OPERATION_END_PARAMETERS() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$1._OPERATION_END_PARAMETERS$struct$LAYOUT();
        }
        public static VarHandle Version$VH() {
            return winbase_h$constants$1._OPERATION_END_PARAMETERS$Version$VH();
        }
        public static  @C("ULONG") int Version$get(@C("struct _OPERATION_END_PARAMETERS") MemorySegment seg) {
            return (int)winbase_h$constants$1._OPERATION_END_PARAMETERS$Version$VH().get(seg);
        }
        public static  @C("ULONG") int Version$get(@C("struct _OPERATION_END_PARAMETERS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1._OPERATION_END_PARAMETERS$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _OPERATION_END_PARAMETERS") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$1._OPERATION_END_PARAMETERS$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _OPERATION_END_PARAMETERS") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$1._OPERATION_END_PARAMETERS$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OperationId$VH() {
            return winbase_h$constants$1._OPERATION_END_PARAMETERS$OperationId$VH();
        }
        public static  @C("OPERATION_ID") int OperationId$get(@C("struct _OPERATION_END_PARAMETERS") MemorySegment seg) {
            return (int)winbase_h$constants$1._OPERATION_END_PARAMETERS$OperationId$VH().get(seg);
        }
        public static  @C("OPERATION_ID") int OperationId$get(@C("struct _OPERATION_END_PARAMETERS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1._OPERATION_END_PARAMETERS$OperationId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OperationId$set(@C("struct _OPERATION_END_PARAMETERS") MemorySegment seg, @C("OPERATION_ID") int x) {
            winbase_h$constants$1._OPERATION_END_PARAMETERS$OperationId$VH().set(seg, x);
        }
        public static void OperationId$set(@C("struct _OPERATION_END_PARAMETERS") MemorySegment seg, long index, @C("OPERATION_ID") int x) {
            winbase_h$constants$1._OPERATION_END_PARAMETERS$OperationId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winbase_h$constants$1._OPERATION_END_PARAMETERS$Flags$VH();
        }
        public static  @C("ULONG") int Flags$get(@C("struct _OPERATION_END_PARAMETERS") MemorySegment seg) {
            return (int)winbase_h$constants$1._OPERATION_END_PARAMETERS$Flags$VH().get(seg);
        }
        public static  @C("ULONG") int Flags$get(@C("struct _OPERATION_END_PARAMETERS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1._OPERATION_END_PARAMETERS$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _OPERATION_END_PARAMETERS") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$1._OPERATION_END_PARAMETERS$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _OPERATION_END_PARAMETERS") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$1._OPERATION_END_PARAMETERS$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _OPERATION_END_PARAMETERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _OPERATION_END_PARAMETERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _OPERATION_END_PARAMETERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _OPERATION_END_PARAMETERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _OPERATION_END_PARAMETERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _OPERATION_END_PARAMETERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _OPERATION_END_PARAMETERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _OPERATION_END_PARAMETERS")public static class OPERATION_END_PARAMETERS extends _OPERATION_END_PARAMETERS {

        /* package-private */ OPERATION_END_PARAMETERS() {}
    }

    public static interface ReadDirectoryChangesW$lpCompletionRoutine {

        void apply(int x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  @C("LPOVERLAPPED_COMPLETION_ROUTINE") MemorySegment allocate(ReadDirectoryChangesW$lpCompletionRoutine fi) {
            return RuntimeHelper.upcallStub(ReadDirectoryChangesW$lpCompletionRoutine.class, fi, winbase_h$constants$1.ReadDirectoryChangesW$lpCompletionRoutine$FUNC(), "(IILjdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  @C("LPOVERLAPPED_COMPLETION_ROUTINE") MemorySegment allocate(ReadDirectoryChangesW$lpCompletionRoutine fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface ReadDirectoryChangesExW$lpCompletionRoutine {

        void apply(int x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  @C("LPOVERLAPPED_COMPLETION_ROUTINE") MemorySegment allocate(ReadDirectoryChangesExW$lpCompletionRoutine fi) {
            return RuntimeHelper.upcallStub(ReadDirectoryChangesExW$lpCompletionRoutine.class, fi, winbase_h$constants$1.ReadDirectoryChangesExW$lpCompletionRoutine$FUNC(), "(IILjdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  @C("LPOVERLAPPED_COMPLETION_ROUTINE") MemorySegment allocate(ReadDirectoryChangesExW$lpCompletionRoutine fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface IsBadCodePtr$lpfn {

        long apply();
        public static  @C("FARPROC") MemorySegment allocate(IsBadCodePtr$lpfn fi) {
            return RuntimeHelper.upcallStub(IsBadCodePtr$lpfn.class, fi, winbase_h$constants$1.IsBadCodePtr$lpfn$FUNC(), "()J");
        }
        public static  @C("FARPROC") MemorySegment allocate(IsBadCodePtr$lpfn fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface RegisterWaitForSingleObject$Callback {

        void apply(jdk.incubator.foreign.MemoryAddress x0, byte x1);
        public static  @C("WAITORTIMERCALLBACK") MemorySegment allocate(RegisterWaitForSingleObject$Callback fi) {
            return RuntimeHelper.upcallStub(RegisterWaitForSingleObject$Callback.class, fi, winbase_h$constants$1.RegisterWaitForSingleObject$Callback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;B)V");
        }
        public static  @C("WAITORTIMERCALLBACK") MemorySegment allocate(RegisterWaitForSingleObject$Callback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface BindIoCompletionCallback$Function {

        void apply(int x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        public static  @C("LPOVERLAPPED_COMPLETION_ROUTINE") MemorySegment allocate(BindIoCompletionCallback$Function fi) {
            return RuntimeHelper.upcallStub(BindIoCompletionCallback$Function.class, fi, winbase_h$constants$1.BindIoCompletionCallback$Function$FUNC(), "(IILjdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  @C("LPOVERLAPPED_COMPLETION_ROUTINE") MemorySegment allocate(BindIoCompletionCallback$Function fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface SetTimerQueueTimer$Callback {

        void apply(jdk.incubator.foreign.MemoryAddress x0, byte x1);
        public static  @C("WAITORTIMERCALLBACK") MemorySegment allocate(SetTimerQueueTimer$Callback fi) {
            return RuntimeHelper.upcallStub(SetTimerQueueTimer$Callback.class, fi, winbase_h$constants$1.SetTimerQueueTimer$Callback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;B)V");
        }
        public static  @C("WAITORTIMERCALLBACK") MemorySegment allocate(SetTimerQueueTimer$Callback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface SetThreadpoolCallbackCleanupGroup$pfng {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  @C("PTP_CLEANUP_GROUP_CANCEL_CALLBACK") MemorySegment allocate(SetThreadpoolCallbackCleanupGroup$pfng fi) {
            return RuntimeHelper.upcallStub(SetThreadpoolCallbackCleanupGroup$pfng.class, fi, winbase_h$constants$1.SetThreadpoolCallbackCleanupGroup$pfng$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  @C("PTP_CLEANUP_GROUP_CANCEL_CALLBACK") MemorySegment allocate(SetThreadpoolCallbackCleanupGroup$pfng fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    @C("struct tagHW_PROFILE_INFOA")public static class tagHW_PROFILE_INFOA {

        /* package-private */ tagHW_PROFILE_INFOA() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$1.tagHW_PROFILE_INFOA$struct$LAYOUT();
        }
        public static VarHandle dwDockInfo$VH() {
            return winbase_h$constants$1.tagHW_PROFILE_INFOA$dwDockInfo$VH();
        }
        public static  @C("DWORD") int dwDockInfo$get(@C("struct tagHW_PROFILE_INFOA") MemorySegment seg) {
            return (int)winbase_h$constants$1.tagHW_PROFILE_INFOA$dwDockInfo$VH().get(seg);
        }
        public static  @C("DWORD") int dwDockInfo$get(@C("struct tagHW_PROFILE_INFOA") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1.tagHW_PROFILE_INFOA$dwDockInfo$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwDockInfo$set(@C("struct tagHW_PROFILE_INFOA") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$1.tagHW_PROFILE_INFOA$dwDockInfo$VH().set(seg, x);
        }
        public static void dwDockInfo$set(@C("struct tagHW_PROFILE_INFOA") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$1.tagHW_PROFILE_INFOA$dwDockInfo$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment szHwProfileGuid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 39));
        }
        public static MemorySegment szHwProfileName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(43, 80));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct tagHW_PROFILE_INFOA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct tagHW_PROFILE_INFOA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct tagHW_PROFILE_INFOA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct tagHW_PROFILE_INFOA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct tagHW_PROFILE_INFOA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct tagHW_PROFILE_INFOA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct tagHW_PROFILE_INFOA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct tagHW_PROFILE_INFOA")public static class HW_PROFILE_INFOA extends tagHW_PROFILE_INFOA {

        /* package-private */ HW_PROFILE_INFOA() {}
    }

    @C("struct tagHW_PROFILE_INFOW")public static class tagHW_PROFILE_INFOW {

        /* package-private */ tagHW_PROFILE_INFOW() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$1.tagHW_PROFILE_INFOW$struct$LAYOUT();
        }
        public static VarHandle dwDockInfo$VH() {
            return winbase_h$constants$1.tagHW_PROFILE_INFOW$dwDockInfo$VH();
        }
        public static  @C("DWORD") int dwDockInfo$get(@C("struct tagHW_PROFILE_INFOW") MemorySegment seg) {
            return (int)winbase_h$constants$1.tagHW_PROFILE_INFOW$dwDockInfo$VH().get(seg);
        }
        public static  @C("DWORD") int dwDockInfo$get(@C("struct tagHW_PROFILE_INFOW") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1.tagHW_PROFILE_INFOW$dwDockInfo$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwDockInfo$set(@C("struct tagHW_PROFILE_INFOW") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$1.tagHW_PROFILE_INFOW$dwDockInfo$VH().set(seg, x);
        }
        public static void dwDockInfo$set(@C("struct tagHW_PROFILE_INFOW") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$1.tagHW_PROFILE_INFOW$dwDockInfo$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment szHwProfileGuid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 78));
        }
        public static MemorySegment szHwProfileName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(82, 160));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct tagHW_PROFILE_INFOW") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct tagHW_PROFILE_INFOW") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct tagHW_PROFILE_INFOW[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct tagHW_PROFILE_INFOW[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct tagHW_PROFILE_INFOW*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct tagHW_PROFILE_INFOW*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct tagHW_PROFILE_INFOW") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct tagHW_PROFILE_INFOW")public static class HW_PROFILE_INFOW extends tagHW_PROFILE_INFOW {

        /* package-private */ HW_PROFILE_INFOW() {}
    }

    @C("struct tagHW_PROFILE_INFOA")public static class HW_PROFILE_INFO extends tagHW_PROFILE_INFOA {

        /* package-private */ HW_PROFILE_INFO() {}
    }

    @C("struct _SYSTEM_POWER_STATUS")public static class _SYSTEM_POWER_STATUS {

        /* package-private */ _SYSTEM_POWER_STATUS() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$1._SYSTEM_POWER_STATUS$struct$LAYOUT();
        }
        public static VarHandle ACLineStatus$VH() {
            return winbase_h$constants$1._SYSTEM_POWER_STATUS$ACLineStatus$VH();
        }
        public static  @C("BYTE") byte ACLineStatus$get(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg) {
            return (byte)winbase_h$constants$1._SYSTEM_POWER_STATUS$ACLineStatus$VH().get(seg);
        }
        public static  @C("BYTE") byte ACLineStatus$get(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$1._SYSTEM_POWER_STATUS$ACLineStatus$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ACLineStatus$set(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, @C("BYTE") byte x) {
            winbase_h$constants$1._SYSTEM_POWER_STATUS$ACLineStatus$VH().set(seg, x);
        }
        public static void ACLineStatus$set(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, long index, @C("BYTE") byte x) {
            winbase_h$constants$1._SYSTEM_POWER_STATUS$ACLineStatus$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BatteryFlag$VH() {
            return winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryFlag$VH();
        }
        public static  @C("BYTE") byte BatteryFlag$get(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg) {
            return (byte)winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryFlag$VH().get(seg);
        }
        public static  @C("BYTE") byte BatteryFlag$get(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryFlag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BatteryFlag$set(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, @C("BYTE") byte x) {
            winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryFlag$VH().set(seg, x);
        }
        public static void BatteryFlag$set(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, long index, @C("BYTE") byte x) {
            winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryFlag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BatteryLifePercent$VH() {
            return winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryLifePercent$VH();
        }
        public static  @C("BYTE") byte BatteryLifePercent$get(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg) {
            return (byte)winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryLifePercent$VH().get(seg);
        }
        public static  @C("BYTE") byte BatteryLifePercent$get(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryLifePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BatteryLifePercent$set(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, @C("BYTE") byte x) {
            winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryLifePercent$VH().set(seg, x);
        }
        public static void BatteryLifePercent$set(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, long index, @C("BYTE") byte x) {
            winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryLifePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SystemStatusFlag$VH() {
            return winbase_h$constants$1._SYSTEM_POWER_STATUS$SystemStatusFlag$VH();
        }
        public static  @C("BYTE") byte SystemStatusFlag$get(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg) {
            return (byte)winbase_h$constants$1._SYSTEM_POWER_STATUS$SystemStatusFlag$VH().get(seg);
        }
        public static  @C("BYTE") byte SystemStatusFlag$get(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$1._SYSTEM_POWER_STATUS$SystemStatusFlag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SystemStatusFlag$set(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, @C("BYTE") byte x) {
            winbase_h$constants$1._SYSTEM_POWER_STATUS$SystemStatusFlag$VH().set(seg, x);
        }
        public static void SystemStatusFlag$set(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, long index, @C("BYTE") byte x) {
            winbase_h$constants$1._SYSTEM_POWER_STATUS$SystemStatusFlag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BatteryLifeTime$VH() {
            return winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryLifeTime$VH();
        }
        public static  @C("DWORD") int BatteryLifeTime$get(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg) {
            return (int)winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryLifeTime$VH().get(seg);
        }
        public static  @C("DWORD") int BatteryLifeTime$get(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryLifeTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BatteryLifeTime$set(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryLifeTime$VH().set(seg, x);
        }
        public static void BatteryLifeTime$set(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryLifeTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BatteryFullLifeTime$VH() {
            return winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryFullLifeTime$VH();
        }
        public static  @C("DWORD") int BatteryFullLifeTime$get(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg) {
            return (int)winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryFullLifeTime$VH().get(seg);
        }
        public static  @C("DWORD") int BatteryFullLifeTime$get(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryFullLifeTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BatteryFullLifeTime$set(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryFullLifeTime$VH().set(seg, x);
        }
        public static void BatteryFullLifeTime$set(@C("struct _SYSTEM_POWER_STATUS") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$1._SYSTEM_POWER_STATUS$BatteryFullLifeTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_POWER_STATUS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_POWER_STATUS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_POWER_STATUS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_POWER_STATUS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_POWER_STATUS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_POWER_STATUS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_POWER_STATUS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_POWER_STATUS")public static class SYSTEM_POWER_STATUS extends _SYSTEM_POWER_STATUS {

        /* package-private */ SYSTEM_POWER_STATUS() {}
    }

    @C("struct tagACTCTXA")public static class tagACTCTXA {

        /* package-private */ tagACTCTXA() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$1.tagACTCTXA$struct$LAYOUT();
        }
        public static VarHandle cbSize$VH() {
            return winbase_h$constants$1.tagACTCTXA$cbSize$VH();
        }
        public static  @C("ULONG") int cbSize$get(@C("struct tagACTCTXA") MemorySegment seg) {
            return (int)winbase_h$constants$1.tagACTCTXA$cbSize$VH().get(seg);
        }
        public static  @C("ULONG") int cbSize$get(@C("struct tagACTCTXA") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1.tagACTCTXA$cbSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cbSize$set(@C("struct tagACTCTXA") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$1.tagACTCTXA$cbSize$VH().set(seg, x);
        }
        public static void cbSize$set(@C("struct tagACTCTXA") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$1.tagACTCTXA$cbSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwFlags$VH() {
            return winbase_h$constants$1.tagACTCTXA$dwFlags$VH();
        }
        public static  @C("DWORD") int dwFlags$get(@C("struct tagACTCTXA") MemorySegment seg) {
            return (int)winbase_h$constants$1.tagACTCTXA$dwFlags$VH().get(seg);
        }
        public static  @C("DWORD") int dwFlags$get(@C("struct tagACTCTXA") MemorySegment seg, long index) {
            return (int)winbase_h$constants$1.tagACTCTXA$dwFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwFlags$set(@C("struct tagACTCTXA") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$1.tagACTCTXA$dwFlags$VH().set(seg, x);
        }
        public static void dwFlags$set(@C("struct tagACTCTXA") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$1.tagACTCTXA$dwFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpSource$VH() {
            return winbase_h$constants$1.tagACTCTXA$lpSource$VH();
        }
        public static  @C("LPCSTR") MemoryAddress lpSource$get(@C("struct tagACTCTXA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.tagACTCTXA$lpSource$VH().get(seg);
        }
        public static  @C("LPCSTR") MemoryAddress lpSource$get(@C("struct tagACTCTXA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.tagACTCTXA$lpSource$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpSource$set(@C("struct tagACTCTXA") MemorySegment seg, @C("LPCSTR") MemoryAddress x) {
            winbase_h$constants$1.tagACTCTXA$lpSource$VH().set(seg, x);
        }
        public static void lpSource$set(@C("struct tagACTCTXA") MemorySegment seg, long index, @C("LPCSTR") MemoryAddress x) {
            winbase_h$constants$1.tagACTCTXA$lpSource$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wProcessorArchitecture$VH() {
            return winbase_h$constants$1.tagACTCTXA$wProcessorArchitecture$VH();
        }
        public static  @C("USHORT") short wProcessorArchitecture$get(@C("struct tagACTCTXA") MemorySegment seg) {
            return (short)winbase_h$constants$1.tagACTCTXA$wProcessorArchitecture$VH().get(seg);
        }
        public static  @C("USHORT") short wProcessorArchitecture$get(@C("struct tagACTCTXA") MemorySegment seg, long index) {
            return (short)winbase_h$constants$1.tagACTCTXA$wProcessorArchitecture$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wProcessorArchitecture$set(@C("struct tagACTCTXA") MemorySegment seg, @C("USHORT") short x) {
            winbase_h$constants$1.tagACTCTXA$wProcessorArchitecture$VH().set(seg, x);
        }
        public static void wProcessorArchitecture$set(@C("struct tagACTCTXA") MemorySegment seg, long index, @C("USHORT") short x) {
            winbase_h$constants$1.tagACTCTXA$wProcessorArchitecture$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wLangId$VH() {
            return winbase_h$constants$1.tagACTCTXA$wLangId$VH();
        }
        public static  @C("LANGID") short wLangId$get(@C("struct tagACTCTXA") MemorySegment seg) {
            return (short)winbase_h$constants$1.tagACTCTXA$wLangId$VH().get(seg);
        }
        public static  @C("LANGID") short wLangId$get(@C("struct tagACTCTXA") MemorySegment seg, long index) {
            return (short)winbase_h$constants$1.tagACTCTXA$wLangId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wLangId$set(@C("struct tagACTCTXA") MemorySegment seg, @C("LANGID") short x) {
            winbase_h$constants$1.tagACTCTXA$wLangId$VH().set(seg, x);
        }
        public static void wLangId$set(@C("struct tagACTCTXA") MemorySegment seg, long index, @C("LANGID") short x) {
            winbase_h$constants$1.tagACTCTXA$wLangId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpAssemblyDirectory$VH() {
            return winbase_h$constants$1.tagACTCTXA$lpAssemblyDirectory$VH();
        }
        public static  @C("LPCSTR") MemoryAddress lpAssemblyDirectory$get(@C("struct tagACTCTXA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.tagACTCTXA$lpAssemblyDirectory$VH().get(seg);
        }
        public static  @C("LPCSTR") MemoryAddress lpAssemblyDirectory$get(@C("struct tagACTCTXA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.tagACTCTXA$lpAssemblyDirectory$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpAssemblyDirectory$set(@C("struct tagACTCTXA") MemorySegment seg, @C("LPCSTR") MemoryAddress x) {
            winbase_h$constants$1.tagACTCTXA$lpAssemblyDirectory$VH().set(seg, x);
        }
        public static void lpAssemblyDirectory$set(@C("struct tagACTCTXA") MemorySegment seg, long index, @C("LPCSTR") MemoryAddress x) {
            winbase_h$constants$1.tagACTCTXA$lpAssemblyDirectory$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpResourceName$VH() {
            return winbase_h$constants$1.tagACTCTXA$lpResourceName$VH();
        }
        public static  @C("LPCSTR") MemoryAddress lpResourceName$get(@C("struct tagACTCTXA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.tagACTCTXA$lpResourceName$VH().get(seg);
        }
        public static  @C("LPCSTR") MemoryAddress lpResourceName$get(@C("struct tagACTCTXA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.tagACTCTXA$lpResourceName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpResourceName$set(@C("struct tagACTCTXA") MemorySegment seg, @C("LPCSTR") MemoryAddress x) {
            winbase_h$constants$1.tagACTCTXA$lpResourceName$VH().set(seg, x);
        }
        public static void lpResourceName$set(@C("struct tagACTCTXA") MemorySegment seg, long index, @C("LPCSTR") MemoryAddress x) {
            winbase_h$constants$1.tagACTCTXA$lpResourceName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpApplicationName$VH() {
            return winbase_h$constants$2.tagACTCTXA$lpApplicationName$VH();
        }
        public static  @C("LPCSTR") MemoryAddress lpApplicationName$get(@C("struct tagACTCTXA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXA$lpApplicationName$VH().get(seg);
        }
        public static  @C("LPCSTR") MemoryAddress lpApplicationName$get(@C("struct tagACTCTXA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXA$lpApplicationName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpApplicationName$set(@C("struct tagACTCTXA") MemorySegment seg, @C("LPCSTR") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXA$lpApplicationName$VH().set(seg, x);
        }
        public static void lpApplicationName$set(@C("struct tagACTCTXA") MemorySegment seg, long index, @C("LPCSTR") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXA$lpApplicationName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle hModule$VH() {
            return winbase_h$constants$2.tagACTCTXA$hModule$VH();
        }
        public static  @C("HMODULE") MemoryAddress hModule$get(@C("struct tagACTCTXA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXA$hModule$VH().get(seg);
        }
        public static  @C("HMODULE") MemoryAddress hModule$get(@C("struct tagACTCTXA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXA$hModule$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void hModule$set(@C("struct tagACTCTXA") MemorySegment seg, @C("HMODULE") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXA$hModule$VH().set(seg, x);
        }
        public static void hModule$set(@C("struct tagACTCTXA") MemorySegment seg, long index, @C("HMODULE") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXA$hModule$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct tagACTCTXA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct tagACTCTXA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct tagACTCTXA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct tagACTCTXA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct tagACTCTXA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct tagACTCTXA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct tagACTCTXA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct tagACTCTXA")public static class ACTCTXA extends tagACTCTXA {

        /* package-private */ ACTCTXA() {}
    }

    @C("struct tagACTCTXW")public static class tagACTCTXW {

        /* package-private */ tagACTCTXW() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2.tagACTCTXW$struct$LAYOUT();
        }
        public static VarHandle cbSize$VH() {
            return winbase_h$constants$2.tagACTCTXW$cbSize$VH();
        }
        public static  @C("ULONG") int cbSize$get(@C("struct tagACTCTXW") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTXW$cbSize$VH().get(seg);
        }
        public static  @C("ULONG") int cbSize$get(@C("struct tagACTCTXW") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTXW$cbSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cbSize$set(@C("struct tagACTCTXW") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTXW$cbSize$VH().set(seg, x);
        }
        public static void cbSize$set(@C("struct tagACTCTXW") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTXW$cbSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwFlags$VH() {
            return winbase_h$constants$2.tagACTCTXW$dwFlags$VH();
        }
        public static  @C("DWORD") int dwFlags$get(@C("struct tagACTCTXW") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTXW$dwFlags$VH().get(seg);
        }
        public static  @C("DWORD") int dwFlags$get(@C("struct tagACTCTXW") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTXW$dwFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwFlags$set(@C("struct tagACTCTXW") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2.tagACTCTXW$dwFlags$VH().set(seg, x);
        }
        public static void dwFlags$set(@C("struct tagACTCTXW") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2.tagACTCTXW$dwFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpSource$VH() {
            return winbase_h$constants$2.tagACTCTXW$lpSource$VH();
        }
        public static  @C("LPCWSTR") MemoryAddress lpSource$get(@C("struct tagACTCTXW") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXW$lpSource$VH().get(seg);
        }
        public static  @C("LPCWSTR") MemoryAddress lpSource$get(@C("struct tagACTCTXW") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXW$lpSource$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpSource$set(@C("struct tagACTCTXW") MemorySegment seg, @C("LPCWSTR") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXW$lpSource$VH().set(seg, x);
        }
        public static void lpSource$set(@C("struct tagACTCTXW") MemorySegment seg, long index, @C("LPCWSTR") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXW$lpSource$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wProcessorArchitecture$VH() {
            return winbase_h$constants$2.tagACTCTXW$wProcessorArchitecture$VH();
        }
        public static  @C("USHORT") short wProcessorArchitecture$get(@C("struct tagACTCTXW") MemorySegment seg) {
            return (short)winbase_h$constants$2.tagACTCTXW$wProcessorArchitecture$VH().get(seg);
        }
        public static  @C("USHORT") short wProcessorArchitecture$get(@C("struct tagACTCTXW") MemorySegment seg, long index) {
            return (short)winbase_h$constants$2.tagACTCTXW$wProcessorArchitecture$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wProcessorArchitecture$set(@C("struct tagACTCTXW") MemorySegment seg, @C("USHORT") short x) {
            winbase_h$constants$2.tagACTCTXW$wProcessorArchitecture$VH().set(seg, x);
        }
        public static void wProcessorArchitecture$set(@C("struct tagACTCTXW") MemorySegment seg, long index, @C("USHORT") short x) {
            winbase_h$constants$2.tagACTCTXW$wProcessorArchitecture$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wLangId$VH() {
            return winbase_h$constants$2.tagACTCTXW$wLangId$VH();
        }
        public static  @C("LANGID") short wLangId$get(@C("struct tagACTCTXW") MemorySegment seg) {
            return (short)winbase_h$constants$2.tagACTCTXW$wLangId$VH().get(seg);
        }
        public static  @C("LANGID") short wLangId$get(@C("struct tagACTCTXW") MemorySegment seg, long index) {
            return (short)winbase_h$constants$2.tagACTCTXW$wLangId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wLangId$set(@C("struct tagACTCTXW") MemorySegment seg, @C("LANGID") short x) {
            winbase_h$constants$2.tagACTCTXW$wLangId$VH().set(seg, x);
        }
        public static void wLangId$set(@C("struct tagACTCTXW") MemorySegment seg, long index, @C("LANGID") short x) {
            winbase_h$constants$2.tagACTCTXW$wLangId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpAssemblyDirectory$VH() {
            return winbase_h$constants$2.tagACTCTXW$lpAssemblyDirectory$VH();
        }
        public static  @C("LPCWSTR") MemoryAddress lpAssemblyDirectory$get(@C("struct tagACTCTXW") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXW$lpAssemblyDirectory$VH().get(seg);
        }
        public static  @C("LPCWSTR") MemoryAddress lpAssemblyDirectory$get(@C("struct tagACTCTXW") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXW$lpAssemblyDirectory$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpAssemblyDirectory$set(@C("struct tagACTCTXW") MemorySegment seg, @C("LPCWSTR") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXW$lpAssemblyDirectory$VH().set(seg, x);
        }
        public static void lpAssemblyDirectory$set(@C("struct tagACTCTXW") MemorySegment seg, long index, @C("LPCWSTR") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXW$lpAssemblyDirectory$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpResourceName$VH() {
            return winbase_h$constants$2.tagACTCTXW$lpResourceName$VH();
        }
        public static  @C("LPCWSTR") MemoryAddress lpResourceName$get(@C("struct tagACTCTXW") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXW$lpResourceName$VH().get(seg);
        }
        public static  @C("LPCWSTR") MemoryAddress lpResourceName$get(@C("struct tagACTCTXW") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXW$lpResourceName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpResourceName$set(@C("struct tagACTCTXW") MemorySegment seg, @C("LPCWSTR") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXW$lpResourceName$VH().set(seg, x);
        }
        public static void lpResourceName$set(@C("struct tagACTCTXW") MemorySegment seg, long index, @C("LPCWSTR") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXW$lpResourceName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpApplicationName$VH() {
            return winbase_h$constants$2.tagACTCTXW$lpApplicationName$VH();
        }
        public static  @C("LPCWSTR") MemoryAddress lpApplicationName$get(@C("struct tagACTCTXW") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXW$lpApplicationName$VH().get(seg);
        }
        public static  @C("LPCWSTR") MemoryAddress lpApplicationName$get(@C("struct tagACTCTXW") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXW$lpApplicationName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpApplicationName$set(@C("struct tagACTCTXW") MemorySegment seg, @C("LPCWSTR") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXW$lpApplicationName$VH().set(seg, x);
        }
        public static void lpApplicationName$set(@C("struct tagACTCTXW") MemorySegment seg, long index, @C("LPCWSTR") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXW$lpApplicationName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle hModule$VH() {
            return winbase_h$constants$2.tagACTCTXW$hModule$VH();
        }
        public static  @C("HMODULE") MemoryAddress hModule$get(@C("struct tagACTCTXW") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXW$hModule$VH().get(seg);
        }
        public static  @C("HMODULE") MemoryAddress hModule$get(@C("struct tagACTCTXW") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTXW$hModule$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void hModule$set(@C("struct tagACTCTXW") MemorySegment seg, @C("HMODULE") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXW$hModule$VH().set(seg, x);
        }
        public static void hModule$set(@C("struct tagACTCTXW") MemorySegment seg, long index, @C("HMODULE") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTXW$hModule$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct tagACTCTXW") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct tagACTCTXW") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct tagACTCTXW[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct tagACTCTXW[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct tagACTCTXW*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct tagACTCTXW*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct tagACTCTXW") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct tagACTCTXW")public static class ACTCTXW extends tagACTCTXW {

        /* package-private */ ACTCTXW() {}
    }

    @C("struct tagACTCTXA")public static class ACTCTX extends tagACTCTXA {

        /* package-private */ ACTCTX() {}
    }

    @C("struct tagACTCTX_SECTION_KEYED_DATA_2600")public static class tagACTCTX_SECTION_KEYED_DATA_2600 {

        /* package-private */ tagACTCTX_SECTION_KEYED_DATA_2600() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$struct$LAYOUT();
        }
        public static VarHandle cbSize$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$cbSize$VH();
        }
        public static  @C("ULONG") int cbSize$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$cbSize$VH().get(seg);
        }
        public static  @C("ULONG") int cbSize$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$cbSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cbSize$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$cbSize$VH().set(seg, x);
        }
        public static void cbSize$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$cbSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulDataFormatVersion$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulDataFormatVersion$VH();
        }
        public static  @C("ULONG") int ulDataFormatVersion$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulDataFormatVersion$VH().get(seg);
        }
        public static  @C("ULONG") int ulDataFormatVersion$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulDataFormatVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulDataFormatVersion$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulDataFormatVersion$VH().set(seg, x);
        }
        public static void ulDataFormatVersion$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulDataFormatVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpData$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpData$VH();
        }
        public static  @C("PVOID") MemoryAddress lpData$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpData$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress lpData$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpData$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpData$VH().set(seg, x);
        }
        public static void lpData$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulLength$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulLength$VH();
        }
        public static  @C("ULONG") int ulLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulLength$VH().get(seg);
        }
        public static  @C("ULONG") int ulLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulLength$VH().set(seg, x);
        }
        public static void ulLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpSectionGlobalData$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionGlobalData$VH();
        }
        public static  @C("PVOID") MemoryAddress lpSectionGlobalData$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionGlobalData$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress lpSectionGlobalData$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionGlobalData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpSectionGlobalData$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionGlobalData$VH().set(seg, x);
        }
        public static void lpSectionGlobalData$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionGlobalData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulSectionGlobalDataLength$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionGlobalDataLength$VH();
        }
        public static  @C("ULONG") int ulSectionGlobalDataLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionGlobalDataLength$VH().get(seg);
        }
        public static  @C("ULONG") int ulSectionGlobalDataLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionGlobalDataLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulSectionGlobalDataLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionGlobalDataLength$VH().set(seg, x);
        }
        public static void ulSectionGlobalDataLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionGlobalDataLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpSectionBase$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionBase$VH();
        }
        public static  @C("PVOID") MemoryAddress lpSectionBase$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionBase$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress lpSectionBase$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpSectionBase$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionBase$VH().set(seg, x);
        }
        public static void lpSectionBase$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$lpSectionBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulSectionTotalLength$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionTotalLength$VH();
        }
        public static  @C("ULONG") int ulSectionTotalLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionTotalLength$VH().get(seg);
        }
        public static  @C("ULONG") int ulSectionTotalLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionTotalLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulSectionTotalLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionTotalLength$VH().set(seg, x);
        }
        public static void ulSectionTotalLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulSectionTotalLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle hActCtx$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$hActCtx$VH();
        }
        public static  @C("HANDLE") MemoryAddress hActCtx$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$hActCtx$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress hActCtx$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$hActCtx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void hActCtx$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$hActCtx$VH().set(seg, x);
        }
        public static void hActCtx$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$hActCtx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulAssemblyRosterIndex$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulAssemblyRosterIndex$VH();
        }
        public static  @C("ULONG") int ulAssemblyRosterIndex$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulAssemblyRosterIndex$VH().get(seg);
        }
        public static  @C("ULONG") int ulAssemblyRosterIndex$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulAssemblyRosterIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulAssemblyRosterIndex$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulAssemblyRosterIndex$VH().set(seg, x);
        }
        public static void ulAssemblyRosterIndex$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_2600$ulAssemblyRosterIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_2600[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_2600[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_2600*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_2600*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_2600") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct tagACTCTX_SECTION_KEYED_DATA_2600")public static class ACTCTX_SECTION_KEYED_DATA_2600 extends tagACTCTX_SECTION_KEYED_DATA_2600 {

        /* package-private */ ACTCTX_SECTION_KEYED_DATA_2600() {}
    }

    @C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA")public static class tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {

        /* package-private */ tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$struct$LAYOUT();
        }
        public static VarHandle lpInformation$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpInformation$VH();
        }
        public static  @C("PVOID") MemoryAddress lpInformation$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpInformation$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress lpInformation$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpInformation$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpInformation$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpInformation$VH().set(seg, x);
        }
        public static void lpInformation$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpInformation$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpSectionBase$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionBase$VH();
        }
        public static  @C("PVOID") MemoryAddress lpSectionBase$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionBase$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress lpSectionBase$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpSectionBase$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionBase$VH().set(seg, x);
        }
        public static void lpSectionBase$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulSectionLength$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionLength$VH();
        }
        public static  @C("ULONG") int ulSectionLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionLength$VH().get(seg);
        }
        public static  @C("ULONG") int ulSectionLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulSectionLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionLength$VH().set(seg, x);
        }
        public static void ulSectionLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpSectionGlobalDataBase$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionGlobalDataBase$VH();
        }
        public static  @C("PVOID") MemoryAddress lpSectionGlobalDataBase$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionGlobalDataBase$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress lpSectionGlobalDataBase$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionGlobalDataBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpSectionGlobalDataBase$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionGlobalDataBase$VH().set(seg, x);
        }
        public static void lpSectionGlobalDataBase$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$lpSectionGlobalDataBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulSectionGlobalDataLength$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionGlobalDataLength$VH();
        }
        public static  @C("ULONG") int ulSectionGlobalDataLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionGlobalDataLength$VH().get(seg);
        }
        public static  @C("ULONG") int ulSectionGlobalDataLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionGlobalDataLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulSectionGlobalDataLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionGlobalDataLength$VH().set(seg, x);
        }
        public static void ulSectionGlobalDataLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA$ulSectionGlobalDataLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA")public static class ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA extends tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {

        /* package-private */ ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA() {}
    }

    @C("struct tagACTCTX_SECTION_KEYED_DATA")public static class tagACTCTX_SECTION_KEYED_DATA {

        /* package-private */ tagACTCTX_SECTION_KEYED_DATA() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$struct$LAYOUT();
        }
        public static VarHandle cbSize$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$cbSize$VH();
        }
        public static  @C("ULONG") int cbSize$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$cbSize$VH().get(seg);
        }
        public static  @C("ULONG") int cbSize$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$cbSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cbSize$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$cbSize$VH().set(seg, x);
        }
        public static void cbSize$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$cbSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulDataFormatVersion$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulDataFormatVersion$VH();
        }
        public static  @C("ULONG") int ulDataFormatVersion$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulDataFormatVersion$VH().get(seg);
        }
        public static  @C("ULONG") int ulDataFormatVersion$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulDataFormatVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulDataFormatVersion$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulDataFormatVersion$VH().set(seg, x);
        }
        public static void ulDataFormatVersion$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulDataFormatVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpData$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpData$VH();
        }
        public static  @C("PVOID") MemoryAddress lpData$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpData$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress lpData$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpData$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpData$VH().set(seg, x);
        }
        public static void lpData$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulLength$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulLength$VH();
        }
        public static  @C("ULONG") int ulLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulLength$VH().get(seg);
        }
        public static  @C("ULONG") int ulLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulLength$VH().set(seg, x);
        }
        public static void ulLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpSectionGlobalData$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpSectionGlobalData$VH();
        }
        public static  @C("PVOID") MemoryAddress lpSectionGlobalData$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpSectionGlobalData$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress lpSectionGlobalData$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpSectionGlobalData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpSectionGlobalData$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpSectionGlobalData$VH().set(seg, x);
        }
        public static void lpSectionGlobalData$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpSectionGlobalData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulSectionGlobalDataLength$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulSectionGlobalDataLength$VH();
        }
        public static  @C("ULONG") int ulSectionGlobalDataLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulSectionGlobalDataLength$VH().get(seg);
        }
        public static  @C("ULONG") int ulSectionGlobalDataLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulSectionGlobalDataLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulSectionGlobalDataLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulSectionGlobalDataLength$VH().set(seg, x);
        }
        public static void ulSectionGlobalDataLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulSectionGlobalDataLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpSectionBase$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpSectionBase$VH();
        }
        public static  @C("PVOID") MemoryAddress lpSectionBase$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpSectionBase$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress lpSectionBase$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpSectionBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpSectionBase$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpSectionBase$VH().set(seg, x);
        }
        public static void lpSectionBase$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$lpSectionBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulSectionTotalLength$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulSectionTotalLength$VH();
        }
        public static  @C("ULONG") int ulSectionTotalLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulSectionTotalLength$VH().get(seg);
        }
        public static  @C("ULONG") int ulSectionTotalLength$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulSectionTotalLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulSectionTotalLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulSectionTotalLength$VH().set(seg, x);
        }
        public static void ulSectionTotalLength$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulSectionTotalLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle hActCtx$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$hActCtx$VH();
        }
        public static  @C("HANDLE") MemoryAddress hActCtx$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$hActCtx$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress hActCtx$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$hActCtx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void hActCtx$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$hActCtx$VH().set(seg, x);
        }
        public static void hActCtx$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$hActCtx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulAssemblyRosterIndex$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulAssemblyRosterIndex$VH();
        }
        public static  @C("ULONG") int ulAssemblyRosterIndex$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulAssemblyRosterIndex$VH().get(seg);
        }
        public static  @C("ULONG") int ulAssemblyRosterIndex$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulAssemblyRosterIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulAssemblyRosterIndex$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulAssemblyRosterIndex$VH().set(seg, x);
        }
        public static void ulAssemblyRosterIndex$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulAssemblyRosterIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulFlags$VH() {
            return winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulFlags$VH();
        }
        public static  @C("ULONG") int ulFlags$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulFlags$VH().get(seg);
        }
        public static  @C("ULONG") int ulFlags$get(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulFlags$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulFlags$VH().set(seg, x);
        }
        public static void ulFlags$set(@C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2.tagACTCTX_SECTION_KEYED_DATA$ulFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment AssemblyMetadata$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 40));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct tagACTCTX_SECTION_KEYED_DATA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct tagACTCTX_SECTION_KEYED_DATA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct tagACTCTX_SECTION_KEYED_DATA")public static class ACTCTX_SECTION_KEYED_DATA extends tagACTCTX_SECTION_KEYED_DATA {

        /* package-private */ ACTCTX_SECTION_KEYED_DATA() {}
    }

    @C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION")public static class _ACTIVATION_CONTEXT_BASIC_INFORMATION {

        /* package-private */ _ACTIVATION_CONTEXT_BASIC_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._ACTIVATION_CONTEXT_BASIC_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle hActCtx$VH() {
            return winbase_h$constants$2._ACTIVATION_CONTEXT_BASIC_INFORMATION$hActCtx$VH();
        }
        public static  @C("HANDLE") MemoryAddress hActCtx$get(@C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2._ACTIVATION_CONTEXT_BASIC_INFORMATION$hActCtx$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress hActCtx$get(@C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2._ACTIVATION_CONTEXT_BASIC_INFORMATION$hActCtx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void hActCtx$set(@C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winbase_h$constants$2._ACTIVATION_CONTEXT_BASIC_INFORMATION$hActCtx$VH().set(seg, x);
        }
        public static void hActCtx$set(@C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winbase_h$constants$2._ACTIVATION_CONTEXT_BASIC_INFORMATION$hActCtx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwFlags$VH() {
            return winbase_h$constants$2._ACTIVATION_CONTEXT_BASIC_INFORMATION$dwFlags$VH();
        }
        public static  @C("DWORD") int dwFlags$get(@C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winbase_h$constants$2._ACTIVATION_CONTEXT_BASIC_INFORMATION$dwFlags$VH().get(seg);
        }
        public static  @C("DWORD") int dwFlags$get(@C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._ACTIVATION_CONTEXT_BASIC_INFORMATION$dwFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwFlags$set(@C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._ACTIVATION_CONTEXT_BASIC_INFORMATION$dwFlags$VH().set(seg, x);
        }
        public static void dwFlags$set(@C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._ACTIVATION_CONTEXT_BASIC_INFORMATION$dwFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACTIVATION_CONTEXT_BASIC_INFORMATION")public static class ACTIVATION_CONTEXT_BASIC_INFORMATION extends _ACTIVATION_CONTEXT_BASIC_INFORMATION {

        /* package-private */ ACTIVATION_CONTEXT_BASIC_INFORMATION() {}
    }

    public static interface RegisterApplicationRecoveryCallback$pRecoveyCallback {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        public static  @C("APPLICATION_RECOVERY_CALLBACK") MemorySegment allocate(RegisterApplicationRecoveryCallback$pRecoveyCallback fi) {
            return RuntimeHelper.upcallStub(RegisterApplicationRecoveryCallback$pRecoveyCallback.class, fi, winbase_h$constants$2.RegisterApplicationRecoveryCallback$pRecoveyCallback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        public static  @C("APPLICATION_RECOVERY_CALLBACK") MemorySegment allocate(RegisterApplicationRecoveryCallback$pRecoveyCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    @C("struct _FILE_BASIC_INFO")public static class _FILE_BASIC_INFO {

        /* package-private */ _FILE_BASIC_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_BASIC_INFO$struct$LAYOUT();
        }
        public static MemorySegment CreationTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment LastAccessTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment LastWriteTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static MemorySegment ChangeTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
        }
        public static VarHandle FileAttributes$VH() {
            return winbase_h$constants$2._FILE_BASIC_INFO$FileAttributes$VH();
        }
        public static  @C("DWORD") int FileAttributes$get(@C("struct _FILE_BASIC_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_BASIC_INFO$FileAttributes$VH().get(seg);
        }
        public static  @C("DWORD") int FileAttributes$get(@C("struct _FILE_BASIC_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_BASIC_INFO$FileAttributes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileAttributes$set(@C("struct _FILE_BASIC_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_BASIC_INFO$FileAttributes$VH().set(seg, x);
        }
        public static void FileAttributes$set(@C("struct _FILE_BASIC_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_BASIC_INFO$FileAttributes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_BASIC_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_BASIC_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_BASIC_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_BASIC_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_BASIC_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_BASIC_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_BASIC_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_BASIC_INFO")public static class FILE_BASIC_INFO extends _FILE_BASIC_INFO {

        /* package-private */ FILE_BASIC_INFO() {}
    }

    @C("struct _FILE_STANDARD_INFO")public static class _FILE_STANDARD_INFO {

        /* package-private */ _FILE_STANDARD_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_STANDARD_INFO$struct$LAYOUT();
        }
        public static MemorySegment AllocationSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment EndOfFile$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static VarHandle NumberOfLinks$VH() {
            return winbase_h$constants$2._FILE_STANDARD_INFO$NumberOfLinks$VH();
        }
        public static  @C("DWORD") int NumberOfLinks$get(@C("struct _FILE_STANDARD_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_STANDARD_INFO$NumberOfLinks$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfLinks$get(@C("struct _FILE_STANDARD_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_STANDARD_INFO$NumberOfLinks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfLinks$set(@C("struct _FILE_STANDARD_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_STANDARD_INFO$NumberOfLinks$VH().set(seg, x);
        }
        public static void NumberOfLinks$set(@C("struct _FILE_STANDARD_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_STANDARD_INFO$NumberOfLinks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DeletePending$VH() {
            return winbase_h$constants$2._FILE_STANDARD_INFO$DeletePending$VH();
        }
        public static  @C("BOOLEAN") byte DeletePending$get(@C("struct _FILE_STANDARD_INFO") MemorySegment seg) {
            return (byte)winbase_h$constants$2._FILE_STANDARD_INFO$DeletePending$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte DeletePending$get(@C("struct _FILE_STANDARD_INFO") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$2._FILE_STANDARD_INFO$DeletePending$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DeletePending$set(@C("struct _FILE_STANDARD_INFO") MemorySegment seg, @C("BOOLEAN") byte x) {
            winbase_h$constants$2._FILE_STANDARD_INFO$DeletePending$VH().set(seg, x);
        }
        public static void DeletePending$set(@C("struct _FILE_STANDARD_INFO") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winbase_h$constants$2._FILE_STANDARD_INFO$DeletePending$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Directory$VH() {
            return winbase_h$constants$2._FILE_STANDARD_INFO$Directory$VH();
        }
        public static  @C("BOOLEAN") byte Directory$get(@C("struct _FILE_STANDARD_INFO") MemorySegment seg) {
            return (byte)winbase_h$constants$2._FILE_STANDARD_INFO$Directory$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Directory$get(@C("struct _FILE_STANDARD_INFO") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$2._FILE_STANDARD_INFO$Directory$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Directory$set(@C("struct _FILE_STANDARD_INFO") MemorySegment seg, @C("BOOLEAN") byte x) {
            winbase_h$constants$2._FILE_STANDARD_INFO$Directory$VH().set(seg, x);
        }
        public static void Directory$set(@C("struct _FILE_STANDARD_INFO") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winbase_h$constants$2._FILE_STANDARD_INFO$Directory$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_STANDARD_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_STANDARD_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_STANDARD_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_STANDARD_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_STANDARD_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_STANDARD_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_STANDARD_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_STANDARD_INFO")public static class FILE_STANDARD_INFO extends _FILE_STANDARD_INFO {

        /* package-private */ FILE_STANDARD_INFO() {}
    }

    @C("struct _FILE_NAME_INFO")public static class _FILE_NAME_INFO {

        /* package-private */ _FILE_NAME_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_NAME_INFO$struct$LAYOUT();
        }
        public static VarHandle FileNameLength$VH() {
            return winbase_h$constants$2._FILE_NAME_INFO$FileNameLength$VH();
        }
        public static  @C("DWORD") int FileNameLength$get(@C("struct _FILE_NAME_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_NAME_INFO$FileNameLength$VH().get(seg);
        }
        public static  @C("DWORD") int FileNameLength$get(@C("struct _FILE_NAME_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_NAME_INFO$FileNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileNameLength$set(@C("struct _FILE_NAME_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_NAME_INFO$FileNameLength$VH().set(seg, x);
        }
        public static void FileNameLength$set(@C("struct _FILE_NAME_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_NAME_INFO$FileNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_NAME_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_NAME_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_NAME_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_NAME_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_NAME_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_NAME_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_NAME_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_NAME_INFO")public static class FILE_NAME_INFO extends _FILE_NAME_INFO {

        /* package-private */ FILE_NAME_INFO() {}
    }

    @C("struct _FILE_CASE_SENSITIVE_INFO")public static class _FILE_CASE_SENSITIVE_INFO {

        /* package-private */ _FILE_CASE_SENSITIVE_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_CASE_SENSITIVE_INFO$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winbase_h$constants$2._FILE_CASE_SENSITIVE_INFO$Flags$VH();
        }
        public static  @C("ULONG") int Flags$get(@C("struct _FILE_CASE_SENSITIVE_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_CASE_SENSITIVE_INFO$Flags$VH().get(seg);
        }
        public static  @C("ULONG") int Flags$get(@C("struct _FILE_CASE_SENSITIVE_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_CASE_SENSITIVE_INFO$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _FILE_CASE_SENSITIVE_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_CASE_SENSITIVE_INFO$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _FILE_CASE_SENSITIVE_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_CASE_SENSITIVE_INFO$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_CASE_SENSITIVE_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_CASE_SENSITIVE_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_CASE_SENSITIVE_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_CASE_SENSITIVE_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_CASE_SENSITIVE_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_CASE_SENSITIVE_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_CASE_SENSITIVE_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_CASE_SENSITIVE_INFO")public static class FILE_CASE_SENSITIVE_INFO extends _FILE_CASE_SENSITIVE_INFO {

        /* package-private */ FILE_CASE_SENSITIVE_INFO() {}
    }

    @C("struct _FILE_RENAME_INFO")public static class _FILE_RENAME_INFO {

        /* package-private */ _FILE_RENAME_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_RENAME_INFO$struct$LAYOUT();
        }
        public static VarHandle ReplaceIfExists$VH() {
            return winbase_h$constants$2._FILE_RENAME_INFO$ReplaceIfExists$VH();
        }
        public static  @C("BOOLEAN") byte ReplaceIfExists$get(@C("struct _FILE_RENAME_INFO") MemorySegment seg) {
            return (byte)winbase_h$constants$2._FILE_RENAME_INFO$ReplaceIfExists$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte ReplaceIfExists$get(@C("struct _FILE_RENAME_INFO") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$2._FILE_RENAME_INFO$ReplaceIfExists$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReplaceIfExists$set(@C("struct _FILE_RENAME_INFO") MemorySegment seg, @C("BOOLEAN") byte x) {
            winbase_h$constants$2._FILE_RENAME_INFO$ReplaceIfExists$VH().set(seg, x);
        }
        public static void ReplaceIfExists$set(@C("struct _FILE_RENAME_INFO") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winbase_h$constants$2._FILE_RENAME_INFO$ReplaceIfExists$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winbase_h$constants$2._FILE_RENAME_INFO$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _FILE_RENAME_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_RENAME_INFO$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _FILE_RENAME_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_RENAME_INFO$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _FILE_RENAME_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_RENAME_INFO$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _FILE_RENAME_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_RENAME_INFO$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RootDirectory$VH() {
            return winbase_h$constants$2._FILE_RENAME_INFO$RootDirectory$VH();
        }
        public static  @C("HANDLE") MemoryAddress RootDirectory$get(@C("struct _FILE_RENAME_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2._FILE_RENAME_INFO$RootDirectory$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress RootDirectory$get(@C("struct _FILE_RENAME_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2._FILE_RENAME_INFO$RootDirectory$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RootDirectory$set(@C("struct _FILE_RENAME_INFO") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winbase_h$constants$2._FILE_RENAME_INFO$RootDirectory$VH().set(seg, x);
        }
        public static void RootDirectory$set(@C("struct _FILE_RENAME_INFO") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winbase_h$constants$2._FILE_RENAME_INFO$RootDirectory$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileNameLength$VH() {
            return winbase_h$constants$2._FILE_RENAME_INFO$FileNameLength$VH();
        }
        public static  @C("DWORD") int FileNameLength$get(@C("struct _FILE_RENAME_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_RENAME_INFO$FileNameLength$VH().get(seg);
        }
        public static  @C("DWORD") int FileNameLength$get(@C("struct _FILE_RENAME_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_RENAME_INFO$FileNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileNameLength$set(@C("struct _FILE_RENAME_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_RENAME_INFO$FileNameLength$VH().set(seg, x);
        }
        public static void FileNameLength$set(@C("struct _FILE_RENAME_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_RENAME_INFO$FileNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(21, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_RENAME_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_RENAME_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_RENAME_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_RENAME_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_RENAME_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_RENAME_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_RENAME_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_RENAME_INFO")public static class FILE_RENAME_INFO extends _FILE_RENAME_INFO {

        /* package-private */ FILE_RENAME_INFO() {}
    }

    @C("struct _FILE_ALLOCATION_INFO")public static class _FILE_ALLOCATION_INFO {

        /* package-private */ _FILE_ALLOCATION_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_ALLOCATION_INFO$struct$LAYOUT();
        }
        public static MemorySegment AllocationSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_ALLOCATION_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_ALLOCATION_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_ALLOCATION_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_ALLOCATION_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_ALLOCATION_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_ALLOCATION_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_ALLOCATION_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_ALLOCATION_INFO")public static class FILE_ALLOCATION_INFO extends _FILE_ALLOCATION_INFO {

        /* package-private */ FILE_ALLOCATION_INFO() {}
    }

    @C("struct _FILE_END_OF_FILE_INFO")public static class _FILE_END_OF_FILE_INFO {

        /* package-private */ _FILE_END_OF_FILE_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_END_OF_FILE_INFO$struct$LAYOUT();
        }
        public static MemorySegment EndOfFile$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_END_OF_FILE_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_END_OF_FILE_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_END_OF_FILE_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_END_OF_FILE_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_END_OF_FILE_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_END_OF_FILE_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_END_OF_FILE_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_END_OF_FILE_INFO")public static class FILE_END_OF_FILE_INFO extends _FILE_END_OF_FILE_INFO {

        /* package-private */ FILE_END_OF_FILE_INFO() {}
    }

    @C("struct _FILE_STREAM_INFO")public static class _FILE_STREAM_INFO {

        /* package-private */ _FILE_STREAM_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_STREAM_INFO$struct$LAYOUT();
        }
        public static VarHandle NextEntryOffset$VH() {
            return winbase_h$constants$2._FILE_STREAM_INFO$NextEntryOffset$VH();
        }
        public static  @C("DWORD") int NextEntryOffset$get(@C("struct _FILE_STREAM_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_STREAM_INFO$NextEntryOffset$VH().get(seg);
        }
        public static  @C("DWORD") int NextEntryOffset$get(@C("struct _FILE_STREAM_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_STREAM_INFO$NextEntryOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NextEntryOffset$set(@C("struct _FILE_STREAM_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_STREAM_INFO$NextEntryOffset$VH().set(seg, x);
        }
        public static void NextEntryOffset$set(@C("struct _FILE_STREAM_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_STREAM_INFO$NextEntryOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StreamNameLength$VH() {
            return winbase_h$constants$2._FILE_STREAM_INFO$StreamNameLength$VH();
        }
        public static  @C("DWORD") int StreamNameLength$get(@C("struct _FILE_STREAM_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_STREAM_INFO$StreamNameLength$VH().get(seg);
        }
        public static  @C("DWORD") int StreamNameLength$get(@C("struct _FILE_STREAM_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_STREAM_INFO$StreamNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StreamNameLength$set(@C("struct _FILE_STREAM_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_STREAM_INFO$StreamNameLength$VH().set(seg, x);
        }
        public static void StreamNameLength$set(@C("struct _FILE_STREAM_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_STREAM_INFO$StreamNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment StreamSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment StreamAllocationSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static MemorySegment StreamName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_STREAM_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_STREAM_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_STREAM_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_STREAM_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_STREAM_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_STREAM_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_STREAM_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_STREAM_INFO")public static class FILE_STREAM_INFO extends _FILE_STREAM_INFO {

        /* package-private */ FILE_STREAM_INFO() {}
    }

    @C("struct _FILE_COMPRESSION_INFO")public static class _FILE_COMPRESSION_INFO {

        /* package-private */ _FILE_COMPRESSION_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_COMPRESSION_INFO$struct$LAYOUT();
        }
        public static MemorySegment CompressedFileSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static VarHandle CompressionFormat$VH() {
            return winbase_h$constants$2._FILE_COMPRESSION_INFO$CompressionFormat$VH();
        }
        public static  @C("WORD") short CompressionFormat$get(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg) {
            return (short)winbase_h$constants$2._FILE_COMPRESSION_INFO$CompressionFormat$VH().get(seg);
        }
        public static  @C("WORD") short CompressionFormat$get(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg, long index) {
            return (short)winbase_h$constants$2._FILE_COMPRESSION_INFO$CompressionFormat$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CompressionFormat$set(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg, @C("WORD") short x) {
            winbase_h$constants$2._FILE_COMPRESSION_INFO$CompressionFormat$VH().set(seg, x);
        }
        public static void CompressionFormat$set(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg, long index, @C("WORD") short x) {
            winbase_h$constants$2._FILE_COMPRESSION_INFO$CompressionFormat$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CompressionUnitShift$VH() {
            return winbase_h$constants$2._FILE_COMPRESSION_INFO$CompressionUnitShift$VH();
        }
        public static  @C("UCHAR") byte CompressionUnitShift$get(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg) {
            return (byte)winbase_h$constants$2._FILE_COMPRESSION_INFO$CompressionUnitShift$VH().get(seg);
        }
        public static  @C("UCHAR") byte CompressionUnitShift$get(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$2._FILE_COMPRESSION_INFO$CompressionUnitShift$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CompressionUnitShift$set(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg, @C("UCHAR") byte x) {
            winbase_h$constants$2._FILE_COMPRESSION_INFO$CompressionUnitShift$VH().set(seg, x);
        }
        public static void CompressionUnitShift$set(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg, long index, @C("UCHAR") byte x) {
            winbase_h$constants$2._FILE_COMPRESSION_INFO$CompressionUnitShift$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ChunkShift$VH() {
            return winbase_h$constants$2._FILE_COMPRESSION_INFO$ChunkShift$VH();
        }
        public static  @C("UCHAR") byte ChunkShift$get(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg) {
            return (byte)winbase_h$constants$2._FILE_COMPRESSION_INFO$ChunkShift$VH().get(seg);
        }
        public static  @C("UCHAR") byte ChunkShift$get(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$2._FILE_COMPRESSION_INFO$ChunkShift$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ChunkShift$set(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg, @C("UCHAR") byte x) {
            winbase_h$constants$2._FILE_COMPRESSION_INFO$ChunkShift$VH().set(seg, x);
        }
        public static void ChunkShift$set(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg, long index, @C("UCHAR") byte x) {
            winbase_h$constants$2._FILE_COMPRESSION_INFO$ChunkShift$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ClusterShift$VH() {
            return winbase_h$constants$2._FILE_COMPRESSION_INFO$ClusterShift$VH();
        }
        public static  @C("UCHAR") byte ClusterShift$get(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg) {
            return (byte)winbase_h$constants$2._FILE_COMPRESSION_INFO$ClusterShift$VH().get(seg);
        }
        public static  @C("UCHAR") byte ClusterShift$get(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$2._FILE_COMPRESSION_INFO$ClusterShift$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ClusterShift$set(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg, @C("UCHAR") byte x) {
            winbase_h$constants$2._FILE_COMPRESSION_INFO$ClusterShift$VH().set(seg, x);
        }
        public static void ClusterShift$set(@C("struct _FILE_COMPRESSION_INFO") MemorySegment seg, long index, @C("UCHAR") byte x) {
            winbase_h$constants$2._FILE_COMPRESSION_INFO$ClusterShift$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(13, 3));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_COMPRESSION_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_COMPRESSION_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_COMPRESSION_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_COMPRESSION_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_COMPRESSION_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_COMPRESSION_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_COMPRESSION_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_COMPRESSION_INFO")public static class FILE_COMPRESSION_INFO extends _FILE_COMPRESSION_INFO {

        /* package-private */ FILE_COMPRESSION_INFO() {}
    }

    @C("struct _FILE_ATTRIBUTE_TAG_INFO")public static class _FILE_ATTRIBUTE_TAG_INFO {

        /* package-private */ _FILE_ATTRIBUTE_TAG_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_ATTRIBUTE_TAG_INFO$struct$LAYOUT();
        }
        public static VarHandle FileAttributes$VH() {
            return winbase_h$constants$2._FILE_ATTRIBUTE_TAG_INFO$FileAttributes$VH();
        }
        public static  @C("DWORD") int FileAttributes$get(@C("struct _FILE_ATTRIBUTE_TAG_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ATTRIBUTE_TAG_INFO$FileAttributes$VH().get(seg);
        }
        public static  @C("DWORD") int FileAttributes$get(@C("struct _FILE_ATTRIBUTE_TAG_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ATTRIBUTE_TAG_INFO$FileAttributes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileAttributes$set(@C("struct _FILE_ATTRIBUTE_TAG_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ATTRIBUTE_TAG_INFO$FileAttributes$VH().set(seg, x);
        }
        public static void FileAttributes$set(@C("struct _FILE_ATTRIBUTE_TAG_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ATTRIBUTE_TAG_INFO$FileAttributes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReparseTag$VH() {
            return winbase_h$constants$2._FILE_ATTRIBUTE_TAG_INFO$ReparseTag$VH();
        }
        public static  @C("DWORD") int ReparseTag$get(@C("struct _FILE_ATTRIBUTE_TAG_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ATTRIBUTE_TAG_INFO$ReparseTag$VH().get(seg);
        }
        public static  @C("DWORD") int ReparseTag$get(@C("struct _FILE_ATTRIBUTE_TAG_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ATTRIBUTE_TAG_INFO$ReparseTag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReparseTag$set(@C("struct _FILE_ATTRIBUTE_TAG_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ATTRIBUTE_TAG_INFO$ReparseTag$VH().set(seg, x);
        }
        public static void ReparseTag$set(@C("struct _FILE_ATTRIBUTE_TAG_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ATTRIBUTE_TAG_INFO$ReparseTag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_ATTRIBUTE_TAG_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_ATTRIBUTE_TAG_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_ATTRIBUTE_TAG_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_ATTRIBUTE_TAG_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_ATTRIBUTE_TAG_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_ATTRIBUTE_TAG_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_ATTRIBUTE_TAG_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_ATTRIBUTE_TAG_INFO")public static class FILE_ATTRIBUTE_TAG_INFO extends _FILE_ATTRIBUTE_TAG_INFO {

        /* package-private */ FILE_ATTRIBUTE_TAG_INFO() {}
    }

    @C("struct _FILE_DISPOSITION_INFO")public static class _FILE_DISPOSITION_INFO {

        /* package-private */ _FILE_DISPOSITION_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_DISPOSITION_INFO$struct$LAYOUT();
        }
        public static VarHandle DeleteFileA$VH() {
            return winbase_h$constants$2._FILE_DISPOSITION_INFO$DeleteFileA$VH();
        }
        public static  @C("BOOLEAN") byte DeleteFileA$get(@C("struct _FILE_DISPOSITION_INFO") MemorySegment seg) {
            return (byte)winbase_h$constants$2._FILE_DISPOSITION_INFO$DeleteFileA$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte DeleteFileA$get(@C("struct _FILE_DISPOSITION_INFO") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$2._FILE_DISPOSITION_INFO$DeleteFileA$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DeleteFileA$set(@C("struct _FILE_DISPOSITION_INFO") MemorySegment seg, @C("BOOLEAN") byte x) {
            winbase_h$constants$2._FILE_DISPOSITION_INFO$DeleteFileA$VH().set(seg, x);
        }
        public static void DeleteFileA$set(@C("struct _FILE_DISPOSITION_INFO") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winbase_h$constants$2._FILE_DISPOSITION_INFO$DeleteFileA$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_DISPOSITION_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_DISPOSITION_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_DISPOSITION_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_DISPOSITION_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_DISPOSITION_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_DISPOSITION_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_DISPOSITION_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_DISPOSITION_INFO")public static class FILE_DISPOSITION_INFO extends _FILE_DISPOSITION_INFO {

        /* package-private */ FILE_DISPOSITION_INFO() {}
    }

    @C("struct _FILE_DISPOSITION_INFO_EX")public static class _FILE_DISPOSITION_INFO_EX {

        /* package-private */ _FILE_DISPOSITION_INFO_EX() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_DISPOSITION_INFO_EX$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winbase_h$constants$2._FILE_DISPOSITION_INFO_EX$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _FILE_DISPOSITION_INFO_EX") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_DISPOSITION_INFO_EX$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _FILE_DISPOSITION_INFO_EX") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_DISPOSITION_INFO_EX$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _FILE_DISPOSITION_INFO_EX") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_DISPOSITION_INFO_EX$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _FILE_DISPOSITION_INFO_EX") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_DISPOSITION_INFO_EX$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_DISPOSITION_INFO_EX") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_DISPOSITION_INFO_EX") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_DISPOSITION_INFO_EX[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_DISPOSITION_INFO_EX[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_DISPOSITION_INFO_EX*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_DISPOSITION_INFO_EX*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_DISPOSITION_INFO_EX") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_DISPOSITION_INFO_EX")public static class FILE_DISPOSITION_INFO_EX extends _FILE_DISPOSITION_INFO_EX {

        /* package-private */ FILE_DISPOSITION_INFO_EX() {}
    }

    @C("struct _FILE_ID_BOTH_DIR_INFO")public static class _FILE_ID_BOTH_DIR_INFO {

        /* package-private */ _FILE_ID_BOTH_DIR_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$struct$LAYOUT();
        }
        public static VarHandle NextEntryOffset$VH() {
            return winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$NextEntryOffset$VH();
        }
        public static  @C("DWORD") int NextEntryOffset$get(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$NextEntryOffset$VH().get(seg);
        }
        public static  @C("DWORD") int NextEntryOffset$get(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$NextEntryOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NextEntryOffset$set(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$NextEntryOffset$VH().set(seg, x);
        }
        public static void NextEntryOffset$set(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$NextEntryOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileIndex$VH() {
            return winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileIndex$VH();
        }
        public static  @C("DWORD") int FileIndex$get(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileIndex$VH().get(seg);
        }
        public static  @C("DWORD") int FileIndex$get(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileIndex$set(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileIndex$VH().set(seg, x);
        }
        public static void FileIndex$set(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment CreationTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment LastAccessTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static MemorySegment LastWriteTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
        }
        public static MemorySegment ChangeTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
        }
        public static MemorySegment EndOfFile$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static MemorySegment AllocationSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
        }
        public static VarHandle FileAttributes$VH() {
            return winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileAttributes$VH();
        }
        public static  @C("DWORD") int FileAttributes$get(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileAttributes$VH().get(seg);
        }
        public static  @C("DWORD") int FileAttributes$get(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileAttributes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileAttributes$set(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileAttributes$VH().set(seg, x);
        }
        public static void FileAttributes$set(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileAttributes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileNameLength$VH() {
            return winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileNameLength$VH();
        }
        public static  @C("DWORD") int FileNameLength$get(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileNameLength$VH().get(seg);
        }
        public static  @C("DWORD") int FileNameLength$get(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileNameLength$set(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileNameLength$VH().set(seg, x);
        }
        public static void FileNameLength$set(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$FileNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EaSize$VH() {
            return winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$EaSize$VH();
        }
        public static  @C("DWORD") int EaSize$get(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$EaSize$VH().get(seg);
        }
        public static  @C("DWORD") int EaSize$get(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$EaSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EaSize$set(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$EaSize$VH().set(seg, x);
        }
        public static void EaSize$set(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$EaSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ShortNameLength$VH() {
            return winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$ShortNameLength$VH();
        }
        public static  @C("CCHAR") byte ShortNameLength$get(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg) {
            return (byte)winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$ShortNameLength$VH().get(seg);
        }
        public static  @C("CCHAR") byte ShortNameLength$get(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, long index) {
            return (byte)winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$ShortNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ShortNameLength$set(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, @C("CCHAR") byte x) {
            winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$ShortNameLength$VH().set(seg, x);
        }
        public static void ShortNameLength$set(@C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment seg, long index, @C("CCHAR") byte x) {
            winbase_h$constants$2._FILE_ID_BOTH_DIR_INFO$ShortNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ShortName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(70, 24));
        }
        public static MemorySegment FileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(96, 8));
        }
        public static MemorySegment FileName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(104, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_ID_BOTH_DIR_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_ID_BOTH_DIR_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_ID_BOTH_DIR_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_ID_BOTH_DIR_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_ID_BOTH_DIR_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_ID_BOTH_DIR_INFO")public static class FILE_ID_BOTH_DIR_INFO extends _FILE_ID_BOTH_DIR_INFO {

        /* package-private */ FILE_ID_BOTH_DIR_INFO() {}
    }

    @C("struct _FILE_FULL_DIR_INFO")public static class _FILE_FULL_DIR_INFO {

        /* package-private */ _FILE_FULL_DIR_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_FULL_DIR_INFO$struct$LAYOUT();
        }
        public static VarHandle NextEntryOffset$VH() {
            return winbase_h$constants$2._FILE_FULL_DIR_INFO$NextEntryOffset$VH();
        }
        public static  @C("ULONG") int NextEntryOffset$get(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_FULL_DIR_INFO$NextEntryOffset$VH().get(seg);
        }
        public static  @C("ULONG") int NextEntryOffset$get(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_FULL_DIR_INFO$NextEntryOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NextEntryOffset$set(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_FULL_DIR_INFO$NextEntryOffset$VH().set(seg, x);
        }
        public static void NextEntryOffset$set(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_FULL_DIR_INFO$NextEntryOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileIndex$VH() {
            return winbase_h$constants$2._FILE_FULL_DIR_INFO$FileIndex$VH();
        }
        public static  @C("ULONG") int FileIndex$get(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_FULL_DIR_INFO$FileIndex$VH().get(seg);
        }
        public static  @C("ULONG") int FileIndex$get(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_FULL_DIR_INFO$FileIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileIndex$set(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_FULL_DIR_INFO$FileIndex$VH().set(seg, x);
        }
        public static void FileIndex$set(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_FULL_DIR_INFO$FileIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment CreationTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment LastAccessTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static MemorySegment LastWriteTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
        }
        public static MemorySegment ChangeTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
        }
        public static MemorySegment EndOfFile$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static MemorySegment AllocationSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
        }
        public static VarHandle FileAttributes$VH() {
            return winbase_h$constants$2._FILE_FULL_DIR_INFO$FileAttributes$VH();
        }
        public static  @C("ULONG") int FileAttributes$get(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_FULL_DIR_INFO$FileAttributes$VH().get(seg);
        }
        public static  @C("ULONG") int FileAttributes$get(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_FULL_DIR_INFO$FileAttributes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileAttributes$set(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_FULL_DIR_INFO$FileAttributes$VH().set(seg, x);
        }
        public static void FileAttributes$set(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_FULL_DIR_INFO$FileAttributes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileNameLength$VH() {
            return winbase_h$constants$2._FILE_FULL_DIR_INFO$FileNameLength$VH();
        }
        public static  @C("ULONG") int FileNameLength$get(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_FULL_DIR_INFO$FileNameLength$VH().get(seg);
        }
        public static  @C("ULONG") int FileNameLength$get(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_FULL_DIR_INFO$FileNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileNameLength$set(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_FULL_DIR_INFO$FileNameLength$VH().set(seg, x);
        }
        public static void FileNameLength$set(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_FULL_DIR_INFO$FileNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EaSize$VH() {
            return winbase_h$constants$2._FILE_FULL_DIR_INFO$EaSize$VH();
        }
        public static  @C("ULONG") int EaSize$get(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_FULL_DIR_INFO$EaSize$VH().get(seg);
        }
        public static  @C("ULONG") int EaSize$get(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_FULL_DIR_INFO$EaSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EaSize$set(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_FULL_DIR_INFO$EaSize$VH().set(seg, x);
        }
        public static void EaSize$set(@C("struct _FILE_FULL_DIR_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_FULL_DIR_INFO$EaSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(68, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_FULL_DIR_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_FULL_DIR_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_FULL_DIR_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_FULL_DIR_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_FULL_DIR_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_FULL_DIR_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_FULL_DIR_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_FULL_DIR_INFO")public static class FILE_FULL_DIR_INFO extends _FILE_FULL_DIR_INFO {

        /* package-private */ FILE_FULL_DIR_INFO() {}
    }

    @C("struct _FILE_IO_PRIORITY_HINT_INFO")public static class _FILE_IO_PRIORITY_HINT_INFO {

        /* package-private */ _FILE_IO_PRIORITY_HINT_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_IO_PRIORITY_HINT_INFO$struct$LAYOUT();
        }
        public static VarHandle PriorityHint$VH() {
            return winbase_h$constants$2._FILE_IO_PRIORITY_HINT_INFO$PriorityHint$VH();
        }
        public static  @C("PRIORITY_HINT") int PriorityHint$get(@C("struct _FILE_IO_PRIORITY_HINT_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_IO_PRIORITY_HINT_INFO$PriorityHint$VH().get(seg);
        }
        public static  @C("PRIORITY_HINT") int PriorityHint$get(@C("struct _FILE_IO_PRIORITY_HINT_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_IO_PRIORITY_HINT_INFO$PriorityHint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PriorityHint$set(@C("struct _FILE_IO_PRIORITY_HINT_INFO") MemorySegment seg, @C("PRIORITY_HINT") int x) {
            winbase_h$constants$2._FILE_IO_PRIORITY_HINT_INFO$PriorityHint$VH().set(seg, x);
        }
        public static void PriorityHint$set(@C("struct _FILE_IO_PRIORITY_HINT_INFO") MemorySegment seg, long index, @C("PRIORITY_HINT") int x) {
            winbase_h$constants$2._FILE_IO_PRIORITY_HINT_INFO$PriorityHint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_IO_PRIORITY_HINT_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_IO_PRIORITY_HINT_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_IO_PRIORITY_HINT_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_IO_PRIORITY_HINT_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_IO_PRIORITY_HINT_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_IO_PRIORITY_HINT_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_IO_PRIORITY_HINT_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_IO_PRIORITY_HINT_INFO")public static class FILE_IO_PRIORITY_HINT_INFO extends _FILE_IO_PRIORITY_HINT_INFO {

        /* package-private */ FILE_IO_PRIORITY_HINT_INFO() {}
    }

    @C("struct _FILE_ALIGNMENT_INFO")public static class _FILE_ALIGNMENT_INFO {

        /* package-private */ _FILE_ALIGNMENT_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_ALIGNMENT_INFO$struct$LAYOUT();
        }
        public static VarHandle AlignmentRequirement$VH() {
            return winbase_h$constants$2._FILE_ALIGNMENT_INFO$AlignmentRequirement$VH();
        }
        public static  @C("ULONG") int AlignmentRequirement$get(@C("struct _FILE_ALIGNMENT_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ALIGNMENT_INFO$AlignmentRequirement$VH().get(seg);
        }
        public static  @C("ULONG") int AlignmentRequirement$get(@C("struct _FILE_ALIGNMENT_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ALIGNMENT_INFO$AlignmentRequirement$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AlignmentRequirement$set(@C("struct _FILE_ALIGNMENT_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ALIGNMENT_INFO$AlignmentRequirement$VH().set(seg, x);
        }
        public static void AlignmentRequirement$set(@C("struct _FILE_ALIGNMENT_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ALIGNMENT_INFO$AlignmentRequirement$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_ALIGNMENT_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_ALIGNMENT_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_ALIGNMENT_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_ALIGNMENT_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_ALIGNMENT_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_ALIGNMENT_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_ALIGNMENT_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_ALIGNMENT_INFO")public static class FILE_ALIGNMENT_INFO extends _FILE_ALIGNMENT_INFO {

        /* package-private */ FILE_ALIGNMENT_INFO() {}
    }

    @C("struct _FILE_STORAGE_INFO")public static class _FILE_STORAGE_INFO {

        /* package-private */ _FILE_STORAGE_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_STORAGE_INFO$struct$LAYOUT();
        }
        public static VarHandle LogicalBytesPerSector$VH() {
            return winbase_h$constants$2._FILE_STORAGE_INFO$LogicalBytesPerSector$VH();
        }
        public static  @C("ULONG") int LogicalBytesPerSector$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$LogicalBytesPerSector$VH().get(seg);
        }
        public static  @C("ULONG") int LogicalBytesPerSector$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$LogicalBytesPerSector$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LogicalBytesPerSector$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$LogicalBytesPerSector$VH().set(seg, x);
        }
        public static void LogicalBytesPerSector$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$LogicalBytesPerSector$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PhysicalBytesPerSectorForAtomicity$VH() {
            return winbase_h$constants$2._FILE_STORAGE_INFO$PhysicalBytesPerSectorForAtomicity$VH();
        }
        public static  @C("ULONG") int PhysicalBytesPerSectorForAtomicity$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$PhysicalBytesPerSectorForAtomicity$VH().get(seg);
        }
        public static  @C("ULONG") int PhysicalBytesPerSectorForAtomicity$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$PhysicalBytesPerSectorForAtomicity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PhysicalBytesPerSectorForAtomicity$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$PhysicalBytesPerSectorForAtomicity$VH().set(seg, x);
        }
        public static void PhysicalBytesPerSectorForAtomicity$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$PhysicalBytesPerSectorForAtomicity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PhysicalBytesPerSectorForPerformance$VH() {
            return winbase_h$constants$2._FILE_STORAGE_INFO$PhysicalBytesPerSectorForPerformance$VH();
        }
        public static  @C("ULONG") int PhysicalBytesPerSectorForPerformance$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$PhysicalBytesPerSectorForPerformance$VH().get(seg);
        }
        public static  @C("ULONG") int PhysicalBytesPerSectorForPerformance$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$PhysicalBytesPerSectorForPerformance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PhysicalBytesPerSectorForPerformance$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$PhysicalBytesPerSectorForPerformance$VH().set(seg, x);
        }
        public static void PhysicalBytesPerSectorForPerformance$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$PhysicalBytesPerSectorForPerformance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH() {
            return winbase_h$constants$2._FILE_STORAGE_INFO$FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH();
        }
        public static  @C("ULONG") int FileSystemEffectivePhysicalBytesPerSectorForAtomicity$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH().get(seg);
        }
        public static  @C("ULONG") int FileSystemEffectivePhysicalBytesPerSectorForAtomicity$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileSystemEffectivePhysicalBytesPerSectorForAtomicity$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH().set(seg, x);
        }
        public static void FileSystemEffectivePhysicalBytesPerSectorForAtomicity$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winbase_h$constants$2._FILE_STORAGE_INFO$Flags$VH();
        }
        public static  @C("ULONG") int Flags$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$Flags$VH().get(seg);
        }
        public static  @C("ULONG") int Flags$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ByteOffsetForSectorAlignment$VH() {
            return winbase_h$constants$2._FILE_STORAGE_INFO$ByteOffsetForSectorAlignment$VH();
        }
        public static  @C("ULONG") int ByteOffsetForSectorAlignment$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$ByteOffsetForSectorAlignment$VH().get(seg);
        }
        public static  @C("ULONG") int ByteOffsetForSectorAlignment$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$ByteOffsetForSectorAlignment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ByteOffsetForSectorAlignment$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$ByteOffsetForSectorAlignment$VH().set(seg, x);
        }
        public static void ByteOffsetForSectorAlignment$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$ByteOffsetForSectorAlignment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ByteOffsetForPartitionAlignment$VH() {
            return winbase_h$constants$2._FILE_STORAGE_INFO$ByteOffsetForPartitionAlignment$VH();
        }
        public static  @C("ULONG") int ByteOffsetForPartitionAlignment$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$ByteOffsetForPartitionAlignment$VH().get(seg);
        }
        public static  @C("ULONG") int ByteOffsetForPartitionAlignment$get(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_STORAGE_INFO$ByteOffsetForPartitionAlignment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ByteOffsetForPartitionAlignment$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$ByteOffsetForPartitionAlignment$VH().set(seg, x);
        }
        public static void ByteOffsetForPartitionAlignment$set(@C("struct _FILE_STORAGE_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_STORAGE_INFO$ByteOffsetForPartitionAlignment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_STORAGE_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_STORAGE_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_STORAGE_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_STORAGE_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_STORAGE_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_STORAGE_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_STORAGE_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_STORAGE_INFO")public static class FILE_STORAGE_INFO extends _FILE_STORAGE_INFO {

        /* package-private */ FILE_STORAGE_INFO() {}
    }

    @C("struct _FILE_ID_INFO")public static class _FILE_ID_INFO {

        /* package-private */ _FILE_ID_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_ID_INFO$struct$LAYOUT();
        }
        public static VarHandle VolumeSerialNumber$VH() {
            return winbase_h$constants$2._FILE_ID_INFO$VolumeSerialNumber$VH();
        }
        public static  @C("ULONGLONG") long VolumeSerialNumber$get(@C("struct _FILE_ID_INFO") MemorySegment seg) {
            return (long)winbase_h$constants$2._FILE_ID_INFO$VolumeSerialNumber$VH().get(seg);
        }
        public static  @C("ULONGLONG") long VolumeSerialNumber$get(@C("struct _FILE_ID_INFO") MemorySegment seg, long index) {
            return (long)winbase_h$constants$2._FILE_ID_INFO$VolumeSerialNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VolumeSerialNumber$set(@C("struct _FILE_ID_INFO") MemorySegment seg, @C("ULONGLONG") long x) {
            winbase_h$constants$2._FILE_ID_INFO$VolumeSerialNumber$VH().set(seg, x);
        }
        public static void VolumeSerialNumber$set(@C("struct _FILE_ID_INFO") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winbase_h$constants$2._FILE_ID_INFO$VolumeSerialNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_ID_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_ID_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_ID_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_ID_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_ID_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_ID_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_ID_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_ID_INFO")public static class FILE_ID_INFO extends _FILE_ID_INFO {

        /* package-private */ FILE_ID_INFO() {}
    }

    @C("struct _FILE_ID_EXTD_DIR_INFO")public static class _FILE_ID_EXTD_DIR_INFO {

        /* package-private */ _FILE_ID_EXTD_DIR_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$struct$LAYOUT();
        }
        public static VarHandle NextEntryOffset$VH() {
            return winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$NextEntryOffset$VH();
        }
        public static  @C("ULONG") int NextEntryOffset$get(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$NextEntryOffset$VH().get(seg);
        }
        public static  @C("ULONG") int NextEntryOffset$get(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$NextEntryOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NextEntryOffset$set(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$NextEntryOffset$VH().set(seg, x);
        }
        public static void NextEntryOffset$set(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$NextEntryOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileIndex$VH() {
            return winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileIndex$VH();
        }
        public static  @C("ULONG") int FileIndex$get(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileIndex$VH().get(seg);
        }
        public static  @C("ULONG") int FileIndex$get(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileIndex$set(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileIndex$VH().set(seg, x);
        }
        public static void FileIndex$set(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment CreationTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment LastAccessTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static MemorySegment LastWriteTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
        }
        public static MemorySegment ChangeTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
        }
        public static MemorySegment EndOfFile$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static MemorySegment AllocationSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
        }
        public static VarHandle FileAttributes$VH() {
            return winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileAttributes$VH();
        }
        public static  @C("ULONG") int FileAttributes$get(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileAttributes$VH().get(seg);
        }
        public static  @C("ULONG") int FileAttributes$get(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileAttributes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileAttributes$set(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileAttributes$VH().set(seg, x);
        }
        public static void FileAttributes$set(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileAttributes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileNameLength$VH() {
            return winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileNameLength$VH();
        }
        public static  @C("ULONG") int FileNameLength$get(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileNameLength$VH().get(seg);
        }
        public static  @C("ULONG") int FileNameLength$get(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileNameLength$set(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileNameLength$VH().set(seg, x);
        }
        public static void FileNameLength$set(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$FileNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EaSize$VH() {
            return winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$EaSize$VH();
        }
        public static  @C("ULONG") int EaSize$get(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$EaSize$VH().get(seg);
        }
        public static  @C("ULONG") int EaSize$get(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$EaSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EaSize$set(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$EaSize$VH().set(seg, x);
        }
        public static void EaSize$set(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$EaSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReparsePointTag$VH() {
            return winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$ReparsePointTag$VH();
        }
        public static  @C("ULONG") int ReparsePointTag$get(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$ReparsePointTag$VH().get(seg);
        }
        public static  @C("ULONG") int ReparsePointTag$get(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$ReparsePointTag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReparsePointTag$set(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$ReparsePointTag$VH().set(seg, x);
        }
        public static void ReparsePointTag$set(@C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_ID_EXTD_DIR_INFO$ReparsePointTag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 16));
        }
        public static MemorySegment FileName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_ID_EXTD_DIR_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_ID_EXTD_DIR_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_ID_EXTD_DIR_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_ID_EXTD_DIR_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_ID_EXTD_DIR_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_ID_EXTD_DIR_INFO")public static class FILE_ID_EXTD_DIR_INFO extends _FILE_ID_EXTD_DIR_INFO {

        /* package-private */ FILE_ID_EXTD_DIR_INFO() {}
    }

    @C("struct _FILE_REMOTE_PROTOCOL_INFO")public static class _FILE_REMOTE_PROTOCOL_INFO {

        /* package-private */ _FILE_REMOTE_PROTOCOL_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$struct$LAYOUT();
        }
        public static VarHandle StructureVersion$VH() {
            return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$StructureVersion$VH();
        }
        public static  @C("USHORT") short StructureVersion$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg) {
            return (short)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$StructureVersion$VH().get(seg);
        }
        public static  @C("USHORT") short StructureVersion$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index) {
            return (short)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$StructureVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StructureVersion$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, @C("USHORT") short x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$StructureVersion$VH().set(seg, x);
        }
        public static void StructureVersion$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index, @C("USHORT") short x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$StructureVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StructureSize$VH() {
            return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$StructureSize$VH();
        }
        public static  @C("USHORT") short StructureSize$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg) {
            return (short)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$StructureSize$VH().get(seg);
        }
        public static  @C("USHORT") short StructureSize$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index) {
            return (short)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$StructureSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StructureSize$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, @C("USHORT") short x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$StructureSize$VH().set(seg, x);
        }
        public static void StructureSize$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index, @C("USHORT") short x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$StructureSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Protocol$VH() {
            return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Protocol$VH();
        }
        public static  @C("ULONG") int Protocol$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Protocol$VH().get(seg);
        }
        public static  @C("ULONG") int Protocol$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Protocol$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Protocol$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Protocol$VH().set(seg, x);
        }
        public static void Protocol$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Protocol$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProtocolMajorVersion$VH() {
            return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolMajorVersion$VH();
        }
        public static  @C("USHORT") short ProtocolMajorVersion$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg) {
            return (short)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolMajorVersion$VH().get(seg);
        }
        public static  @C("USHORT") short ProtocolMajorVersion$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index) {
            return (short)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolMajorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProtocolMajorVersion$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, @C("USHORT") short x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolMajorVersion$VH().set(seg, x);
        }
        public static void ProtocolMajorVersion$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index, @C("USHORT") short x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolMajorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProtocolMinorVersion$VH() {
            return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolMinorVersion$VH();
        }
        public static  @C("USHORT") short ProtocolMinorVersion$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg) {
            return (short)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolMinorVersion$VH().get(seg);
        }
        public static  @C("USHORT") short ProtocolMinorVersion$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index) {
            return (short)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolMinorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProtocolMinorVersion$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, @C("USHORT") short x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolMinorVersion$VH().set(seg, x);
        }
        public static void ProtocolMinorVersion$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index, @C("USHORT") short x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolMinorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProtocolRevision$VH() {
            return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolRevision$VH();
        }
        public static  @C("USHORT") short ProtocolRevision$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg) {
            return (short)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolRevision$VH().get(seg);
        }
        public static  @C("USHORT") short ProtocolRevision$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index) {
            return (short)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolRevision$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProtocolRevision$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, @C("USHORT") short x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolRevision$VH().set(seg, x);
        }
        public static void ProtocolRevision$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index, @C("USHORT") short x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolRevision$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Reserved$VH();
        }
        public static  @C("USHORT") short Reserved$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg) {
            return (short)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Reserved$VH().get(seg);
        }
        public static  @C("USHORT") short Reserved$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index) {
            return (short)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, @C("USHORT") short x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index, @C("USHORT") short x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Flags$VH();
        }
        public static  @C("ULONG") int Flags$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg) {
            return (int)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Flags$VH().get(seg);
        }
        public static  @C("ULONG") int Flags$get(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("struct ")public static class GenericReserved {

            /* package-private */ GenericReserved() {}
            public static MemoryLayout $LAYOUT() {
                return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$GenericReserved$struct$LAYOUT();
            }
            public static MemorySegment Reserved$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 32));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment GenericReserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 32));
        }
        @C("union ")public static class ProtocolSpecific {

            /* package-private */ ProtocolSpecific() {}
            public static MemoryLayout $LAYOUT() {
                return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$union$LAYOUT();
            }
            @C("struct ")public static class Smb2 {

                /* package-private */ Smb2() {}
                public static MemoryLayout $LAYOUT() {
                    return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$struct$LAYOUT();
                }
                @C("struct ")public static class Server {

                    /* package-private */ Server() {}
                    public static MemoryLayout $LAYOUT() {
                        return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Server$struct$LAYOUT();
                    }
                    public static VarHandle Capabilities$VH() {
                        return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Server$Capabilities$VH();
                    }
                    public static  @C("ULONG") int Capabilities$get(@C("struct ") MemorySegment seg) {
                        return (int)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Server$Capabilities$VH().get(seg);
                    }
                    public static  @C("ULONG") int Capabilities$get(@C("struct ") MemorySegment seg, long index) {
                        return (int)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Server$Capabilities$VH().get(seg.asSlice(index*sizeof()));
                    }
                    public static void Capabilities$set(@C("struct ") MemorySegment seg, @C("ULONG") int x) {
                        winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Server$Capabilities$VH().set(seg, x);
                    }
                    public static void Capabilities$set(@C("struct ") MemorySegment seg, long index, @C("ULONG") int x) {
                        winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Server$Capabilities$VH().set(seg.asSlice(index*sizeof()), x);
                    }
                    public static long sizeof() { return $LAYOUT().byteSize(); }
                    public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                    public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                    public static @C("struct []") MemorySegment allocateArray(int len) {
                        return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                    }                    public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                        return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                    }
                    public static @C("struct *") MemorySegment allocatePointer() {
                        return MemorySegment.allocateNative(C_POINTER);
                    }
                    public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                        return scope.allocate(C_POINTER);
                    }
                    public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
                }

                public static MemorySegment Server$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
                }
                @C("struct ")public static class Share {

                    /* package-private */ Share() {}
                    public static MemoryLayout $LAYOUT() {
                        return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Share$struct$LAYOUT();
                    }
                    public static VarHandle Capabilities$VH() {
                        return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Share$Capabilities$VH();
                    }
                    public static  @C("ULONG") int Capabilities$get(@C("struct ") MemorySegment seg) {
                        return (int)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Share$Capabilities$VH().get(seg);
                    }
                    public static  @C("ULONG") int Capabilities$get(@C("struct ") MemorySegment seg, long index) {
                        return (int)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Share$Capabilities$VH().get(seg.asSlice(index*sizeof()));
                    }
                    public static void Capabilities$set(@C("struct ") MemorySegment seg, @C("ULONG") int x) {
                        winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Share$Capabilities$VH().set(seg, x);
                    }
                    public static void Capabilities$set(@C("struct ") MemorySegment seg, long index, @C("ULONG") int x) {
                        winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Share$Capabilities$VH().set(seg.asSlice(index*sizeof()), x);
                    }
                    public static VarHandle CachingFlags$VH() {
                        return winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Share$CachingFlags$VH();
                    }
                    public static  @C("ULONG") int CachingFlags$get(@C("struct ") MemorySegment seg) {
                        return (int)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Share$CachingFlags$VH().get(seg);
                    }
                    public static  @C("ULONG") int CachingFlags$get(@C("struct ") MemorySegment seg, long index) {
                        return (int)winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Share$CachingFlags$VH().get(seg.asSlice(index*sizeof()));
                    }
                    public static void CachingFlags$set(@C("struct ") MemorySegment seg, @C("ULONG") int x) {
                        winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Share$CachingFlags$VH().set(seg, x);
                    }
                    public static void CachingFlags$set(@C("struct ") MemorySegment seg, long index, @C("ULONG") int x) {
                        winbase_h$constants$2._FILE_REMOTE_PROTOCOL_INFO$ProtocolSpecific$Smb2$Share$CachingFlags$VH().set(seg.asSlice(index*sizeof()), x);
                    }
                    public static long sizeof() { return $LAYOUT().byteSize(); }
                    public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                    public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                    public static @C("struct []") MemorySegment allocateArray(int len) {
                        return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                    }                    public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                        return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                    }
                    public static @C("struct *") MemorySegment allocatePointer() {
                        return MemorySegment.allocateNative(C_POINTER);
                    }
                    public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                        return scope.allocate(C_POINTER);
                    }
                    public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
                }

                public static MemorySegment Share$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 8));
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment Smb2$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 12));
            }
            public static MemorySegment Reserved$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 64));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment ProtocolSpecific$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(52, 64));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_REMOTE_PROTOCOL_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_REMOTE_PROTOCOL_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_REMOTE_PROTOCOL_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_REMOTE_PROTOCOL_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_REMOTE_PROTOCOL_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_REMOTE_PROTOCOL_INFO")public static class FILE_REMOTE_PROTOCOL_INFO extends _FILE_REMOTE_PROTOCOL_INFO {

        /* package-private */ FILE_REMOTE_PROTOCOL_INFO() {}
    }

    @C("struct FILE_ID_DESCRIPTOR")public static class FILE_ID_DESCRIPTOR {

        /* package-private */ FILE_ID_DESCRIPTOR() {}
        public static MemoryLayout $LAYOUT() {
            return winbase_h$constants$2.FILE_ID_DESCRIPTOR$struct$LAYOUT();
        }
        public static VarHandle dwSize$VH() {
            return winbase_h$constants$2.FILE_ID_DESCRIPTOR$dwSize$VH();
        }
        public static  @C("DWORD") int dwSize$get(@C("struct FILE_ID_DESCRIPTOR") MemorySegment seg) {
            return (int)winbase_h$constants$2.FILE_ID_DESCRIPTOR$dwSize$VH().get(seg);
        }
        public static  @C("DWORD") int dwSize$get(@C("struct FILE_ID_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.FILE_ID_DESCRIPTOR$dwSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwSize$set(@C("struct FILE_ID_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winbase_h$constants$2.FILE_ID_DESCRIPTOR$dwSize$VH().set(seg, x);
        }
        public static void dwSize$set(@C("struct FILE_ID_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winbase_h$constants$2.FILE_ID_DESCRIPTOR$dwSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winbase_h$constants$2.FILE_ID_DESCRIPTOR$Type$VH();
        }
        public static  @C("FILE_ID_TYPE") int Type$get(@C("struct FILE_ID_DESCRIPTOR") MemorySegment seg) {
            return (int)winbase_h$constants$2.FILE_ID_DESCRIPTOR$Type$VH().get(seg);
        }
        public static  @C("FILE_ID_TYPE") int Type$get(@C("struct FILE_ID_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winbase_h$constants$2.FILE_ID_DESCRIPTOR$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct FILE_ID_DESCRIPTOR") MemorySegment seg, @C("FILE_ID_TYPE") int x) {
            winbase_h$constants$2.FILE_ID_DESCRIPTOR$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct FILE_ID_DESCRIPTOR") MemorySegment seg, long index, @C("FILE_ID_TYPE") int x) {
            winbase_h$constants$2.FILE_ID_DESCRIPTOR$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment ObjectId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 16));
        }
        public static MemorySegment ExtendedFileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct FILE_ID_DESCRIPTOR") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct FILE_ID_DESCRIPTOR") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct FILE_ID_DESCRIPTOR[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct FILE_ID_DESCRIPTOR[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct FILE_ID_DESCRIPTOR*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct FILE_ID_DESCRIPTOR*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct FILE_ID_DESCRIPTOR") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static interface AddSecureMemoryCacheCallback$pfnCallBack {

        byte apply(jdk.incubator.foreign.MemoryAddress x0, long x1);
        public static  @C("PSECURE_MEMORY_CACHE_CALLBACK") MemorySegment allocate(AddSecureMemoryCacheCallback$pfnCallBack fi) {
            return RuntimeHelper.upcallStub(AddSecureMemoryCacheCallback$pfnCallBack.class, fi, winbase_h$constants$2.AddSecureMemoryCacheCallback$pfnCallBack$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;J)B");
        }
        public static  @C("PSECURE_MEMORY_CACHE_CALLBACK") MemorySegment allocate(AddSecureMemoryCacheCallback$pfnCallBack fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface RemoveSecureMemoryCacheCallback$pfnCallBack {

        byte apply(jdk.incubator.foreign.MemoryAddress x0, long x1);
        public static  @C("PSECURE_MEMORY_CACHE_CALLBACK") MemorySegment allocate(RemoveSecureMemoryCacheCallback$pfnCallBack fi) {
            return RuntimeHelper.upcallStub(RemoveSecureMemoryCacheCallback$pfnCallBack.class, fi, winbase_h$constants$2.RemoveSecureMemoryCacheCallback$pfnCallBack$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;J)B");
        }
        public static  @C("PSECURE_MEMORY_CACHE_CALLBACK") MemorySegment allocate(RemoveSecureMemoryCacheCallback$pfnCallBack fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    @C("struct _REASON_CONTEXT")public static class POWER_REQUEST_CONTEXT {

        /* package-private */ POWER_REQUEST_CONTEXT() {}
        public static @C("struct _REASON_CONTEXT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _REASON_CONTEXT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
    }

}


