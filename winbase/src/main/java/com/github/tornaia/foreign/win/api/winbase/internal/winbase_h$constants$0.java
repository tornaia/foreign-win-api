// Generated by jextract

package com.github.tornaia.foreign.win.api.winbase.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class winbase_h$constants$0 {

    /* package-private */ winbase_h$constants$0() {}
    static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {
    });

    static final int FILE_BEGIN() { return (int)0L; }

    static final int FILE_CURRENT() { return (int)1L; }

    static final int FILE_END() { return (int)2L; }

    static final int FILE_FLAG_OVERLAPPED() { return (int)1073741824L; }

    static final int FILE_FLAG_NO_BUFFERING() { return (int)536870912L; }

    static final int FILE_FLAG_RANDOM_ACCESS() { return (int)268435456L; }

    static final int FILE_FLAG_SEQUENTIAL_SCAN() { return (int)134217728L; }

    static final int FILE_FLAG_DELETE_ON_CLOSE() { return (int)67108864L; }

    static final int FILE_FLAG_BACKUP_SEMANTICS() { return (int)33554432L; }

    static final int FILE_FLAG_POSIX_SEMANTICS() { return (int)16777216L; }

    static final int FILE_FLAG_SESSION_AWARE() { return (int)8388608L; }

    static final int FILE_FLAG_OPEN_REPARSE_POINT() { return (int)2097152L; }

    static final int FILE_FLAG_OPEN_NO_RECALL() { return (int)1048576L; }

    static final int FILE_FLAG_FIRST_PIPE_INSTANCE() { return (int)524288L; }

    static final int FILE_FLAG_OPEN_REQUIRING_OPLOCK() { return (int)262144L; }

    static final int PROGRESS_CONTINUE() { return (int)0L; }

    static final int PROGRESS_CANCEL() { return (int)1L; }

    static final int PROGRESS_STOP() { return (int)2L; }

    static final int PROGRESS_QUIET() { return (int)3L; }

    static final int CALLBACK_CHUNK_FINISHED() { return (int)0L; }

    static final int CALLBACK_STREAM_SWITCH() { return (int)1L; }

    static final int COPY_FILE_FAIL_IF_EXISTS() { return (int)1L; }

    static final int COPY_FILE_RESTARTABLE() { return (int)2L; }

    static final int COPY_FILE_OPEN_SOURCE_FOR_WRITE() { return (int)4L; }

    static final int COPY_FILE_ALLOW_DECRYPTED_DESTINATION() { return (int)8L; }

    static final int COPY_FILE_COPY_SYMLINK() { return (int)2048L; }

    static final int COPY_FILE_NO_BUFFERING() { return (int)4096L; }

    static final int COPY_FILE_REQUEST_SECURITY_PRIVILEGES() { return (int)8192L; }

    static final int COPY_FILE_RESUME_FROM_PAUSE() { return (int)16384L; }

    static final int COPY_FILE_NO_OFFLOAD() { return (int)262144L; }

    static final int COPY_FILE_IGNORE_EDP_BLOCK() { return (int)4194304L; }

    static final int COPY_FILE_IGNORE_SOURCE_ENCRYPTION() { return (int)8388608L; }

    static final int COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC() { return (int)33554432L; }

    static final int COPY_FILE_REQUEST_COMPRESSED_TRAFFIC() { return (int)268435456L; }

    static final int COPY_FILE_OPEN_AND_COPY_REPARSE_POINT() { return (int)2097152L; }

    static final int COPY_FILE_DIRECTORY() { return (int)128L; }

    static final int COPY_FILE_SKIP_ALTERNATE_STREAMS() { return (int)32768L; }

    static final int COPY_FILE_DISABLE_PRE_ALLOCATION() { return (int)67108864L; }

    static final int COPY_FILE_ENABLE_LOW_FREE_SPACE_MODE() { return (int)134217728L; }

    static final int REPLACEFILE_WRITE_THROUGH() { return (int)1L; }

    static final int REPLACEFILE_IGNORE_MERGE_ERRORS() { return (int)2L; }

    static final int REPLACEFILE_IGNORE_ACL_ERRORS() { return (int)4L; }

    static final int PIPE_ACCESS_INBOUND() { return (int)1L; }

    static final int PIPE_ACCESS_OUTBOUND() { return (int)2L; }

    static final int PIPE_ACCESS_DUPLEX() { return (int)3L; }

    static final int PIPE_CLIENT_END() { return (int)0L; }

    static final int PIPE_SERVER_END() { return (int)1L; }

    static final int PIPE_WAIT() { return (int)0L; }

    static final int PIPE_NOWAIT() { return (int)1L; }

    static final int PIPE_READMODE_BYTE() { return (int)0L; }

    static final int PIPE_READMODE_MESSAGE() { return (int)2L; }

    static final int PIPE_TYPE_BYTE() { return (int)0L; }

    static final int PIPE_TYPE_MESSAGE() { return (int)4L; }

    static final int PIPE_ACCEPT_REMOTE_CLIENTS() { return (int)0L; }

    static final int PIPE_REJECT_REMOTE_CLIENTS() { return (int)8L; }

    static final int PIPE_UNLIMITED_INSTANCES() { return (int)255L; }

    static final int SECURITY_CONTEXT_TRACKING() { return (int)262144L; }

    static final int SECURITY_EFFECTIVE_ONLY() { return (int)524288L; }

    static final int SECURITY_SQOS_PRESENT() { return (int)1048576L; }

    static final int SECURITY_VALID_SQOS_FLAGS() { return (int)2031616L; }

    static final int FAIL_FAST_GENERATE_EXCEPTION_ADDRESS() { return (int)1L; }

    static final int FAIL_FAST_NO_HARD_ERROR_DLG() { return (int)2L; }

    static final int DTR_CONTROL_DISABLE() { return (int)0L; }

    static final int DTR_CONTROL_ENABLE() { return (int)1L; }

    static final int DTR_CONTROL_HANDSHAKE() { return (int)2L; }

    static final int RTS_CONTROL_DISABLE() { return (int)0L; }

    static final int RTS_CONTROL_ENABLE() { return (int)1L; }

    static final int RTS_CONTROL_HANDSHAKE() { return (int)2L; }

    static final int RTS_CONTROL_TOGGLE() { return (int)3L; }

    static final int GMEM_FIXED() { return (int)0L; }

    static final int GMEM_MOVEABLE() { return (int)2L; }

    static final int GMEM_NOCOMPACT() { return (int)16L; }

    static final int GMEM_NODISCARD() { return (int)32L; }

    static final int GMEM_ZEROINIT() { return (int)64L; }

    static final int GMEM_MODIFY() { return (int)128L; }

    static final int GMEM_DISCARDABLE() { return (int)256L; }

    static final int GMEM_NOT_BANKED() { return (int)4096L; }

    static final int GMEM_SHARE() { return (int)8192L; }

    static final int GMEM_DDESHARE() { return (int)8192L; }

    static final int GMEM_NOTIFY() { return (int)16384L; }

    static final int GMEM_VALID_FLAGS() { return (int)32626L; }

    static final int GMEM_INVALID_HANDLE() { return (int)32768L; }

    static final int GMEM_DISCARDED() { return (int)16384L; }

    static final int GMEM_LOCKCOUNT() { return (int)255L; }

    static final int DEBUG_PROCESS() { return (int)1L; }

    static final int DEBUG_ONLY_THIS_PROCESS() { return (int)2L; }

    static final int CREATE_SUSPENDED() { return (int)4L; }

    static final int DETACHED_PROCESS() { return (int)8L; }

    static final int CREATE_NEW_CONSOLE() { return (int)16L; }

    static final int NORMAL_PRIORITY_CLASS() { return (int)32L; }

    static final int IDLE_PRIORITY_CLASS() { return (int)64L; }

    static final int HIGH_PRIORITY_CLASS() { return (int)128L; }

    static final int REALTIME_PRIORITY_CLASS() { return (int)256L; }

    static final int CREATE_NEW_PROCESS_GROUP() { return (int)512L; }

    static final int CREATE_UNICODE_ENVIRONMENT() { return (int)1024L; }

    static final int CREATE_SEPARATE_WOW_VDM() { return (int)2048L; }

    static final int CREATE_SHARED_WOW_VDM() { return (int)4096L; }

    static final int CREATE_FORCEDOS() { return (int)8192L; }

    static final int BELOW_NORMAL_PRIORITY_CLASS() { return (int)16384L; }

    static final int ABOVE_NORMAL_PRIORITY_CLASS() { return (int)32768L; }

    static final int INHERIT_PARENT_AFFINITY() { return (int)65536L; }

    static final int INHERIT_CALLER_PRIORITY() { return (int)131072L; }

    static final int CREATE_PROTECTED_PROCESS() { return (int)262144L; }

    static final int EXTENDED_STARTUPINFO_PRESENT() { return (int)524288L; }

    static final int PROCESS_MODE_BACKGROUND_BEGIN() { return (int)1048576L; }

    static final int PROCESS_MODE_BACKGROUND_END() { return (int)2097152L; }

    static final int CREATE_SECURE_PROCESS() { return (int)4194304L; }

    static final int CREATE_BREAKAWAY_FROM_JOB() { return (int)16777216L; }

    static final int CREATE_PRESERVE_CODE_AUTHZ_LEVEL() { return (int)33554432L; }

    static final int CREATE_DEFAULT_ERROR_MODE() { return (int)67108864L; }

    static final int CREATE_NO_WINDOW() { return (int)134217728L; }

    static final int PROFILE_USER() { return (int)268435456L; }

    static final int PROFILE_KERNEL() { return (int)536870912L; }

    static final int PROFILE_SERVER() { return (int)1073741824L; }

    static final int STACK_SIZE_PARAM_IS_A_RESERVATION() { return (int)65536L; }

    static final int THREAD_PRIORITY_NORMAL() { return (int)0L; }

    static final int THREAD_MODE_BACKGROUND_BEGIN() { return (int)65536L; }

    static final int THREAD_MODE_BACKGROUND_END() { return (int)131072L; }

    static final int VOLUME_NAME_DOS() { return (int)0L; }

    static final int VOLUME_NAME_GUID() { return (int)1L; }

    static final int VOLUME_NAME_NT() { return (int)2L; }

    static final int VOLUME_NAME_NONE() { return (int)4L; }

    static final int FILE_NAME_NORMALIZED() { return (int)0L; }

    static final int FILE_NAME_OPENED() { return (int)8L; }

    static final int DRIVE_UNKNOWN() { return (int)0L; }

    static final int DRIVE_NO_ROOT_DIR() { return (int)1L; }

    static final int DRIVE_REMOVABLE() { return (int)2L; }

    static final int DRIVE_FIXED() { return (int)3L; }

    static final int DRIVE_REMOTE() { return (int)4L; }

    static final int DRIVE_CDROM() { return (int)5L; }

    static final int DRIVE_RAMDISK() { return (int)6L; }

    static final int FILE_TYPE_UNKNOWN() { return (int)0L; }

    static final int FILE_TYPE_DISK() { return (int)1L; }

    static final int FILE_TYPE_CHAR() { return (int)2L; }

    static final int FILE_TYPE_PIPE() { return (int)3L; }

    static final int FILE_TYPE_REMOTE() { return (int)32768L; }

    static final int NOPARITY() { return (int)0L; }

    static final int ODDPARITY() { return (int)1L; }

    static final int EVENPARITY() { return (int)2L; }

    static final int MARKPARITY() { return (int)3L; }

    static final int SPACEPARITY() { return (int)4L; }

    static final int ONESTOPBIT() { return (int)0L; }

    static final int ONE5STOPBITS() { return (int)1L; }

    static final int TWOSTOPBITS() { return (int)2L; }

    static final int IGNORE() { return (int)0L; }

    static final int CBR_110() { return (int)110L; }

    static final int CBR_300() { return (int)300L; }

    static final int CBR_600() { return (int)600L; }

    static final int CBR_1200() { return (int)1200L; }

    static final int CBR_2400() { return (int)2400L; }

    static final int CBR_4800() { return (int)4800L; }

    static final int CBR_9600() { return (int)9600L; }

    static final int CBR_14400() { return (int)14400L; }

    static final int CBR_19200() { return (int)19200L; }

    static final int CBR_38400() { return (int)38400L; }

    static final int CBR_56000() { return (int)56000L; }

    static final int CBR_57600() { return (int)57600L; }

    static final int CBR_115200() { return (int)115200L; }

    static final int CBR_128000() { return (int)128000L; }

    static final int CBR_256000() { return (int)256000L; }

    static final int CE_RXOVER() { return (int)1L; }

    static final int CE_OVERRUN() { return (int)2L; }

    static final int CE_RXPARITY() { return (int)4L; }

    static final int CE_FRAME() { return (int)8L; }

    static final int CE_BREAK() { return (int)16L; }

    static final int CE_TXFULL() { return (int)256L; }

    static final int CE_PTO() { return (int)512L; }

    static final int CE_IOE() { return (int)1024L; }

    static final int CE_DNS() { return (int)2048L; }

    static final int CE_OOP() { return (int)4096L; }

    static final int CE_MODE() { return (int)32768L; }

    static final int EV_RXCHAR() { return (int)1L; }

    static final int EV_RXFLAG() { return (int)2L; }

    static final int EV_TXEMPTY() { return (int)4L; }

    static final int EV_CTS() { return (int)8L; }

    static final int EV_DSR() { return (int)16L; }

    static final int EV_RLSD() { return (int)32L; }

    static final int EV_BREAK() { return (int)64L; }

    static final int EV_ERR() { return (int)128L; }

    static final int EV_RING() { return (int)256L; }

    static final int EV_PERR() { return (int)512L; }

    static final int EV_RX80FULL() { return (int)1024L; }

    static final int EV_EVENT1() { return (int)2048L; }

    static final int EV_EVENT2() { return (int)4096L; }

    static final int SETXOFF() { return (int)1L; }

    static final int SETXON() { return (int)2L; }

    static final int SETRTS() { return (int)3L; }

    static final int CLRRTS() { return (int)4L; }

    static final int SETDTR() { return (int)5L; }

    static final int CLRDTR() { return (int)6L; }

    static final int RESETDEV() { return (int)7L; }

    static final int SETBREAK() { return (int)8L; }

    static final int CLRBREAK() { return (int)9L; }

    static final int PURGE_TXABORT() { return (int)1L; }

    static final int PURGE_RXABORT() { return (int)2L; }

    static final int PURGE_TXCLEAR() { return (int)4L; }

    static final int PURGE_RXCLEAR() { return (int)8L; }

    static final int LPTx() { return (int)128L; }

    static final int S_QUEUEEMPTY() { return (int)0L; }

    static final int S_THRESHOLD() { return (int)1L; }

    static final int S_ALLTHRESHOLD() { return (int)2L; }

    static final int S_NORMAL() { return (int)0L; }

    static final int S_LEGATO() { return (int)1L; }

    static final int S_STACCATO() { return (int)2L; }

    static final int S_PERIOD512() { return (int)0L; }

    static final int S_PERIOD1024() { return (int)1L; }

    static final int S_PERIOD2048() { return (int)2L; }

    static final int S_PERIODVOICE() { return (int)3L; }

    static final int S_WHITE512() { return (int)4L; }

    static final int S_WHITE1024() { return (int)5L; }

    static final int S_WHITE2048() { return (int)6L; }

    static final int S_WHITEVOICE() { return (int)7L; }

    static final int NMPWAIT_NOWAIT() { return (int)1L; }

    static final int NMPWAIT_USE_DEFAULT_WAIT() { return (int)0L; }

    static final int OF_READ() { return (int)0L; }

    static final int OF_WRITE() { return (int)1L; }

    static final int OF_READWRITE() { return (int)2L; }

    static final int OF_SHARE_COMPAT() { return (int)0L; }

    static final int OF_SHARE_EXCLUSIVE() { return (int)16L; }

    static final int OF_SHARE_DENY_WRITE() { return (int)32L; }

    static final int OF_SHARE_DENY_READ() { return (int)48L; }

    static final int OF_SHARE_DENY_NONE() { return (int)64L; }

    static final int OF_PARSE() { return (int)256L; }

    static final int OF_DELETE() { return (int)512L; }

    static final int OF_VERIFY() { return (int)1024L; }

    static final int OF_CANCEL() { return (int)2048L; }

    static final int OF_CREATE() { return (int)4096L; }

    static final int OF_PROMPT() { return (int)8192L; }

    static final int OF_EXIST() { return (int)16384L; }

    static final int OF_REOPEN() { return (int)32768L; }

    static final int OFS_MAXPATHNAME() { return (int)128L; }

    static final int MAXINTATOM() { return (int)49152L; }

    static final int SCS_32BIT_BINARY() { return (int)0L; }

    static final int SCS_DOS_BINARY() { return (int)1L; }

    static final int SCS_WOW_BINARY() { return (int)2L; }

    static final int SCS_PIF_BINARY() { return (int)3L; }

    static final int SCS_POSIX_BINARY() { return (int)4L; }

    static final int SCS_OS216_BINARY() { return (int)5L; }

    static final int SCS_64BIT_BINARY() { return (int)6L; }

    static final int FIBER_FLAG_FLOAT_SWITCH() { return (int)1L; }

    static final int PROCESS_DEP_ENABLE() { return (int)1L; }

    static final int PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION() { return (int)2L; }

    static final int FILE_SKIP_COMPLETION_PORT_ON_SUCCESS() { return (int)1L; }

    static final int FILE_SKIP_SET_EVENT_ON_HANDLE() { return (int)2L; }

    static final int SEM_FAILCRITICALERRORS() { return (int)1L; }

    static final int SEM_NOGPFAULTERRORBOX() { return (int)2L; }

    static final int SEM_NOALIGNMENTFAULTEXCEPT() { return (int)4L; }

    static final int SEM_NOOPENFILEERRORBOX() { return (int)32768L; }

    static final int HANDLE_FLAG_INHERIT() { return (int)1L; }

    static final int HANDLE_FLAG_PROTECT_FROM_CLOSE() { return (int)2L; }

    static final int HINSTANCE_ERROR() { return (int)32L; }

    static final int GET_TAPE_MEDIA_INFORMATION() { return (int)0L; }

    static final int GET_TAPE_DRIVE_INFORMATION() { return (int)1L; }

    static final int SET_TAPE_MEDIA_INFORMATION() { return (int)0L; }

    static final int SET_TAPE_DRIVE_INFORMATION() { return (int)1L; }

    static final int FORMAT_MESSAGE_ALLOCATE_BUFFER() { return (int)256L; }

    static final int FORMAT_MESSAGE_IGNORE_INSERTS() { return (int)512L; }

    static final int FORMAT_MESSAGE_FROM_STRING() { return (int)1024L; }

    static final int FORMAT_MESSAGE_FROM_HMODULE() { return (int)2048L; }

    static final int FORMAT_MESSAGE_FROM_SYSTEM() { return (int)4096L; }

    static final int FORMAT_MESSAGE_ARGUMENT_ARRAY() { return (int)8192L; }

    static final int FORMAT_MESSAGE_MAX_WIDTH_MASK() { return (int)255L; }

    static final int FILE_ENCRYPTABLE() { return (int)0L; }

    static final int FILE_IS_ENCRYPTED() { return (int)1L; }

    static final int FILE_SYSTEM_ATTR() { return (int)2L; }

    static final int FILE_ROOT_DIR() { return (int)3L; }

    static final int FILE_SYSTEM_DIR() { return (int)4L; }

    static final int FILE_UNKNOWN() { return (int)5L; }

    static final int FILE_SYSTEM_NOT_SUPPORT() { return (int)6L; }

    static final int FILE_USER_DISALLOWED() { return (int)7L; }

    static final int FILE_READ_ONLY() { return (int)8L; }

    static final int FILE_DIR_DISALLOWED() { return (int)9L; }

    static final int BACKUP_INVALID() { return (int)0L; }

    static final int BACKUP_DATA() { return (int)1L; }

    static final int BACKUP_EA_DATA() { return (int)2L; }

    static final int BACKUP_SECURITY_DATA() { return (int)3L; }

    static final int BACKUP_ALTERNATE_DATA() { return (int)4L; }

    static final int BACKUP_LINK() { return (int)5L; }

    static final int BACKUP_PROPERTY_DATA() { return (int)6L; }

    static final int BACKUP_OBJECT_ID() { return (int)7L; }

    static final int BACKUP_REPARSE_DATA() { return (int)8L; }

    static final int BACKUP_SPARSE_BLOCK() { return (int)9L; }

    static final int BACKUP_TXFS_DATA() { return (int)10L; }

    static final int BACKUP_GHOSTED_FILE_EXTENTS() { return (int)11L; }

    static final int STREAM_NORMAL_ATTRIBUTE() { return (int)0L; }

    static final int STREAM_MODIFIED_WHEN_READ() { return (int)1L; }

    static final int STREAM_CONTAINS_SECURITY() { return (int)2L; }

    static final int STREAM_CONTAINS_PROPERTIES() { return (int)4L; }

    static final int STREAM_SPARSE_ATTRIBUTE() { return (int)8L; }

    static final int STREAM_CONTAINS_GHOSTED_FILE_EXTENTS() { return (int)16L; }

    static final int STARTF_USESHOWWINDOW() { return (int)1L; }

    static final int STARTF_USESIZE() { return (int)2L; }

    static final int STARTF_USEPOSITION() { return (int)4L; }

    static final int STARTF_USECOUNTCHARS() { return (int)8L; }

    static final int STARTF_USEFILLATTRIBUTE() { return (int)16L; }

    static final int STARTF_RUNFULLSCREEN() { return (int)32L; }

    static final int STARTF_FORCEONFEEDBACK() { return (int)64L; }

    static final int STARTF_FORCEOFFFEEDBACK() { return (int)128L; }

    static final int STARTF_USESTDHANDLES() { return (int)256L; }

    static final int STARTF_USEHOTKEY() { return (int)512L; }

    static final int STARTF_TITLEISLINKNAME() { return (int)2048L; }

    static final int STARTF_TITLEISAPPID() { return (int)4096L; }

    static final int STARTF_PREVENTPINNING() { return (int)8192L; }

    static final int STARTF_UNTRUSTEDSOURCE() { return (int)32768L; }

    static final int SHUTDOWN_NORETRY() { return (int)1L; }

    static final int PROTECTION_LEVEL_WINTCB_LIGHT() { return (int)0L; }

    static final int PROTECTION_LEVEL_WINDOWS() { return (int)1L; }

    static final int PROTECTION_LEVEL_WINDOWS_LIGHT() { return (int)2L; }

    static final int PROTECTION_LEVEL_ANTIMALWARE_LIGHT() { return (int)3L; }

    static final int PROTECTION_LEVEL_LSA_LIGHT() { return (int)4L; }

    static final int PROTECTION_LEVEL_WINTCB() { return (int)5L; }

    static final int PROTECTION_LEVEL_CODEGEN_LIGHT() { return (int)6L; }

    static final int PROTECTION_LEVEL_AUTHENTICODE() { return (int)7L; }

    static final int PROTECTION_LEVEL_PPL_APP() { return (int)8L; }

    static final int PROCESS_NAME_NATIVE() { return (int)1L; }

    static final int PROC_THREAD_ATTRIBUTE_NUMBER() { return (int)65535L; }

    static final int PROC_THREAD_ATTRIBUTE_THREAD() { return (int)65536L; }

    static final int PROC_THREAD_ATTRIBUTE_INPUT() { return (int)131072L; }

    static final int PROC_THREAD_ATTRIBUTE_ADDITIVE() { return (int)262144L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE() { return (int)1L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE() { return (int)2L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE() { return (int)4L; }

    static final int PROCESS_CREATION_CHILD_PROCESS_RESTRICTED() { return (int)1L; }

    static final int PROCESS_CREATION_CHILD_PROCESS_OVERRIDE() { return (int)2L; }

    static final int PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE() { return (int)4L; }

    static final int PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT() { return (int)1L; }

    static final int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE() { return (int)1L; }

    static final int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE() { return (int)2L; }

    static final int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE() { return (int)4L; }

    static final int ATOM_FLAG_GLOBAL() { return (int)2L; }

    static final int BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE() { return (int)1L; }

    static final int BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE() { return (int)65536L; }

    static final int BASE_SEARCH_PATH_PERMANENT() { return (int)32768L; }

    static final int DDD_RAW_TARGET_PATH() { return (int)1L; }

    static final int DDD_REMOVE_DEFINITION() { return (int)2L; }

    static final int DDD_EXACT_MATCH_ON_REMOVE() { return (int)4L; }

    static final int DDD_NO_BROADCAST_SYSTEM() { return (int)8L; }

    static final int DDD_LUID_BROADCAST_DRIVE() { return (int)16L; }

    static final int MOVEFILE_REPLACE_EXISTING() { return (int)1L; }

    static final int MOVEFILE_COPY_ALLOWED() { return (int)2L; }

    static final int MOVEFILE_DELAY_UNTIL_REBOOT() { return (int)4L; }

    static final int MOVEFILE_WRITE_THROUGH() { return (int)8L; }

    static final int MOVEFILE_CREATE_HARDLINK() { return (int)16L; }

    static final int MOVEFILE_FAIL_IF_NOT_TRACKABLE() { return (int)32L; }

    static final int EVENTLOG_FULL_INFO() { return (int)0L; }

    static final int OPERATION_API_VERSION() { return (int)1L; }

    static final int OPERATION_START_TRACE_CURRENT_THREAD() { return (int)1L; }

    static final int OPERATION_END_DISCARD() { return (int)1L; }

    static final int MAX_COMPUTERNAME_LENGTH() { return (int)15L; }

    static final int LOGON32_LOGON_INTERACTIVE() { return (int)2L; }

    static final int LOGON32_LOGON_NETWORK() { return (int)3L; }

    static final int LOGON32_LOGON_BATCH() { return (int)4L; }

    static final int LOGON32_LOGON_SERVICE() { return (int)5L; }

    static final int LOGON32_LOGON_UNLOCK() { return (int)7L; }

    static final int LOGON32_LOGON_NETWORK_CLEARTEXT() { return (int)8L; }

    static final int LOGON32_LOGON_NEW_CREDENTIALS() { return (int)9L; }

    static final int LOGON32_PROVIDER_DEFAULT() { return (int)0L; }

    static final int LOGON32_PROVIDER_WINNT35() { return (int)1L; }

    static final int LOGON32_PROVIDER_WINNT40() { return (int)2L; }

    static final int LOGON32_PROVIDER_WINNT50() { return (int)3L; }

    static final int LOGON32_PROVIDER_VIRTUAL() { return (int)4L; }

    static final int LOGON_WITH_PROFILE() { return (int)1L; }

    static final int LOGON_NETCREDENTIALS_ONLY() { return (int)2L; }

    static final int HW_PROFILE_GUIDLEN() { return (int)39L; }

    static final int MAX_PROFILE_LEN() { return (int)80L; }

    static final int TC_NORMAL() { return (int)0L; }

    static final int TC_HARDERR() { return (int)1L; }

    static final int TC_GP_TRAP() { return (int)2L; }

    static final int TC_SIGNAL() { return (int)3L; }

    static final int AC_LINE_OFFLINE() { return (int)0L; }

    static final int AC_LINE_ONLINE() { return (int)1L; }

    static final int AC_LINE_BACKUP_POWER() { return (int)2L; }

    static final int AC_LINE_UNKNOWN() { return (int)255L; }

    static final int BATTERY_FLAG_HIGH() { return (int)1L; }

    static final int BATTERY_FLAG_LOW() { return (int)2L; }

    static final int BATTERY_FLAG_CRITICAL() { return (int)4L; }

    static final int BATTERY_FLAG_CHARGING() { return (int)8L; }

    static final int BATTERY_FLAG_NO_BATTERY() { return (int)128L; }

    static final int BATTERY_FLAG_UNKNOWN() { return (int)255L; }

    static final int BATTERY_PERCENTAGE_UNKNOWN() { return (int)255L; }

    static final int SYSTEM_STATUS_FLAG_POWER_SAVING_ON() { return (int)1L; }

    static final int ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED() { return (int)1L; }

    static final int RESTART_MAX_CMD_LINE() { return (int)1024L; }

    static final int RESTART_NO_CRASH() { return (int)1L; }

    static final int RESTART_NO_HANG() { return (int)2L; }

    static final int RESTART_NO_PATCH() { return (int)4L; }

    static final int RESTART_NO_REBOOT() { return (int)8L; }

    static final int RECOVERY_DEFAULT_PING_INTERVAL() { return (int)5000L; }

    static final int FILE_RENAME_FLAG_REPLACE_IF_EXISTS() { return (int)1L; }

    static final int FILE_RENAME_FLAG_POSIX_SEMANTICS() { return (int)2L; }

    static final int FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE() { return (int)4L; }

    static final int FILE_DISPOSITION_FLAG_DO_NOT_DELETE() { return (int)0L; }

    static final int FILE_DISPOSITION_FLAG_DELETE() { return (int)1L; }

    static final int FILE_DISPOSITION_FLAG_POSIX_SEMANTICS() { return (int)2L; }

    static final int FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK() { return (int)4L; }

    static final int FILE_DISPOSITION_FLAG_ON_CLOSE() { return (int)8L; }

    static final int FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE() { return (int)16L; }

    static final int STORAGE_INFO_FLAGS_ALIGNED_DEVICE() { return (int)1L; }

    static final int STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE() { return (int)2L; }

    static final int REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK() { return (int)1L; }

    static final int REMOTE_PROTOCOL_INFO_FLAG_OFFLINE() { return (int)2L; }

    static final int REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE() { return (int)4L; }

    static final int RPI_FLAG_SMB2_SHARECAP_TIMEWARP() { return (int)2L; }

    static final int RPI_FLAG_SMB2_SHARECAP_DFS() { return (int)8L; }

    static final int RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY() { return (int)16L; }

    static final int RPI_FLAG_SMB2_SHARECAP_SCALEOUT() { return (int)32L; }

    static final int RPI_FLAG_SMB2_SHARECAP_CLUSTER() { return (int)64L; }

    static final int RPI_SMB2_FLAG_SERVERCAP_DFS() { return (int)1L; }

    static final int RPI_SMB2_FLAG_SERVERCAP_LEASING() { return (int)2L; }

    static final int RPI_SMB2_FLAG_SERVERCAP_LARGEMTU() { return (int)4L; }

    static final int RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL() { return (int)8L; }

    static final int RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES() { return (int)16L; }

    static final int RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING() { return (int)32L; }

    static final int MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS() { return (int)0L; }

    static final MemoryLayout _COMMPROP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("wPacketLength"),
        C_SHORT.withName("wPacketVersion"),
        C_LONG.withName("dwServiceMask"),
        C_LONG.withName("dwReserved1"),
        C_LONG.withName("dwMaxTxQueue"),
        C_LONG.withName("dwMaxRxQueue"),
        C_LONG.withName("dwMaxBaud"),
        C_LONG.withName("dwProvSubType"),
        C_LONG.withName("dwProvCapabilities"),
        C_LONG.withName("dwSettableParams"),
        C_LONG.withName("dwSettableBaud"),
        C_SHORT.withName("wSettableData"),
        C_SHORT.withName("wSettableStopParity"),
        C_LONG.withName("dwCurrentTxQueue"),
        C_LONG.withName("dwCurrentRxQueue"),
        C_LONG.withName("dwProvSpec1"),
        C_LONG.withName("dwProvSpec2"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("wcProvChar"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_COMMPROP");
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$struct$LAYOUT() { return _COMMPROP$struct$LAYOUT_; }

    static final MemoryLayout _COMMPROP$wPacketLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$wPacketLength$LAYOUT() { return _COMMPROP$wPacketLength$LAYOUT_; }

    static final VarHandle _COMMPROP$wPacketLength$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wPacketLength"));
    static final java.lang.invoke.VarHandle _COMMPROP$wPacketLength$VH() { return _COMMPROP$wPacketLength$VH_; }

    static final MemoryLayout _COMMPROP$wPacketVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$wPacketVersion$LAYOUT() { return _COMMPROP$wPacketVersion$LAYOUT_; }

    static final VarHandle _COMMPROP$wPacketVersion$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wPacketVersion"));
    static final java.lang.invoke.VarHandle _COMMPROP$wPacketVersion$VH() { return _COMMPROP$wPacketVersion$VH_; }

    static final MemoryLayout _COMMPROP$dwServiceMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwServiceMask$LAYOUT() { return _COMMPROP$dwServiceMask$LAYOUT_; }

    static final VarHandle _COMMPROP$dwServiceMask$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwServiceMask"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwServiceMask$VH() { return _COMMPROP$dwServiceMask$VH_; }

    static final MemoryLayout _COMMPROP$dwReserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwReserved1$LAYOUT() { return _COMMPROP$dwReserved1$LAYOUT_; }

    static final VarHandle _COMMPROP$dwReserved1$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved1"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwReserved1$VH() { return _COMMPROP$dwReserved1$VH_; }

    static final MemoryLayout _COMMPROP$dwMaxTxQueue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwMaxTxQueue$LAYOUT() { return _COMMPROP$dwMaxTxQueue$LAYOUT_; }

    static final VarHandle _COMMPROP$dwMaxTxQueue$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMaxTxQueue"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwMaxTxQueue$VH() { return _COMMPROP$dwMaxTxQueue$VH_; }

    static final MemoryLayout _COMMPROP$dwMaxRxQueue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwMaxRxQueue$LAYOUT() { return _COMMPROP$dwMaxRxQueue$LAYOUT_; }

    static final VarHandle _COMMPROP$dwMaxRxQueue$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMaxRxQueue"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwMaxRxQueue$VH() { return _COMMPROP$dwMaxRxQueue$VH_; }

    static final MemoryLayout _COMMPROP$dwMaxBaud$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwMaxBaud$LAYOUT() { return _COMMPROP$dwMaxBaud$LAYOUT_; }

    static final VarHandle _COMMPROP$dwMaxBaud$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMaxBaud"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwMaxBaud$VH() { return _COMMPROP$dwMaxBaud$VH_; }

    static final MemoryLayout _COMMPROP$dwProvSubType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwProvSubType$LAYOUT() { return _COMMPROP$dwProvSubType$LAYOUT_; }

    static final VarHandle _COMMPROP$dwProvSubType$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProvSubType"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwProvSubType$VH() { return _COMMPROP$dwProvSubType$VH_; }

    static final MemoryLayout _COMMPROP$dwProvCapabilities$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwProvCapabilities$LAYOUT() { return _COMMPROP$dwProvCapabilities$LAYOUT_; }

    static final VarHandle _COMMPROP$dwProvCapabilities$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProvCapabilities"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwProvCapabilities$VH() { return _COMMPROP$dwProvCapabilities$VH_; }

    static final MemoryLayout _COMMPROP$dwSettableParams$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwSettableParams$LAYOUT() { return _COMMPROP$dwSettableParams$LAYOUT_; }

    static final VarHandle _COMMPROP$dwSettableParams$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSettableParams"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwSettableParams$VH() { return _COMMPROP$dwSettableParams$VH_; }

    static final MemoryLayout _COMMPROP$dwSettableBaud$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwSettableBaud$LAYOUT() { return _COMMPROP$dwSettableBaud$LAYOUT_; }

    static final VarHandle _COMMPROP$dwSettableBaud$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSettableBaud"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwSettableBaud$VH() { return _COMMPROP$dwSettableBaud$VH_; }

    static final MemoryLayout _COMMPROP$wSettableData$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$wSettableData$LAYOUT() { return _COMMPROP$wSettableData$LAYOUT_; }

    static final VarHandle _COMMPROP$wSettableData$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wSettableData"));
    static final java.lang.invoke.VarHandle _COMMPROP$wSettableData$VH() { return _COMMPROP$wSettableData$VH_; }

    static final MemoryLayout _COMMPROP$wSettableStopParity$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$wSettableStopParity$LAYOUT() { return _COMMPROP$wSettableStopParity$LAYOUT_; }

    static final VarHandle _COMMPROP$wSettableStopParity$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wSettableStopParity"));
    static final java.lang.invoke.VarHandle _COMMPROP$wSettableStopParity$VH() { return _COMMPROP$wSettableStopParity$VH_; }

    static final MemoryLayout _COMMPROP$dwCurrentTxQueue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwCurrentTxQueue$LAYOUT() { return _COMMPROP$dwCurrentTxQueue$LAYOUT_; }

    static final VarHandle _COMMPROP$dwCurrentTxQueue$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCurrentTxQueue"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwCurrentTxQueue$VH() { return _COMMPROP$dwCurrentTxQueue$VH_; }

    static final MemoryLayout _COMMPROP$dwCurrentRxQueue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwCurrentRxQueue$LAYOUT() { return _COMMPROP$dwCurrentRxQueue$LAYOUT_; }

    static final VarHandle _COMMPROP$dwCurrentRxQueue$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCurrentRxQueue"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwCurrentRxQueue$VH() { return _COMMPROP$dwCurrentRxQueue$VH_; }

    static final MemoryLayout _COMMPROP$dwProvSpec1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwProvSpec1$LAYOUT() { return _COMMPROP$dwProvSpec1$LAYOUT_; }

    static final VarHandle _COMMPROP$dwProvSpec1$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProvSpec1"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwProvSpec1$VH() { return _COMMPROP$dwProvSpec1$VH_; }

    static final MemoryLayout _COMMPROP$dwProvSpec2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMPROP$dwProvSpec2$LAYOUT() { return _COMMPROP$dwProvSpec2$LAYOUT_; }

    static final VarHandle _COMMPROP$dwProvSpec2$VH_ = _COMMPROP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProvSpec2"));
    static final java.lang.invoke.VarHandle _COMMPROP$dwProvSpec2$VH() { return _COMMPROP$dwProvSpec2$VH_; }

    static final MemoryLayout _COMSTAT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT,
        C_LONG.withName("cbInQue"),
        C_LONG.withName("cbOutQue")
    ).withName("_COMSTAT");
    static final jdk.incubator.foreign.MemoryLayout _COMSTAT$struct$LAYOUT() { return _COMSTAT$struct$LAYOUT_; }

    static final MemoryLayout _COMSTAT$cbInQue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMSTAT$cbInQue$LAYOUT() { return _COMSTAT$cbInQue$LAYOUT_; }

    static final VarHandle _COMSTAT$cbInQue$VH_ = _COMSTAT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbInQue"));
    static final java.lang.invoke.VarHandle _COMSTAT$cbInQue$VH() { return _COMSTAT$cbInQue$VH_; }

    static final MemoryLayout _COMSTAT$cbOutQue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMSTAT$cbOutQue$LAYOUT() { return _COMSTAT$cbOutQue$LAYOUT_; }

    static final VarHandle _COMSTAT$cbOutQue$VH_ = _COMSTAT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbOutQue"));
    static final java.lang.invoke.VarHandle _COMSTAT$cbOutQue$VH() { return _COMSTAT$cbOutQue$VH_; }

    static final MemoryLayout _DCB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("DCBlength"),
        C_LONG.withName("BaudRate"),
        C_INT,
        C_SHORT.withName("wReserved"),
        C_SHORT.withName("XonLim"),
        C_SHORT.withName("XoffLim"),
        C_CHAR.withName("ByteSize"),
        C_CHAR.withName("Parity"),
        C_CHAR.withName("StopBits"),
        C_CHAR.withName("XonChar"),
        C_CHAR.withName("XoffChar"),
        C_CHAR.withName("ErrorChar"),
        C_CHAR.withName("EofChar"),
        C_CHAR.withName("EvtChar"),
        C_SHORT.withName("wReserved1")
    ).withName("_DCB");
    static final jdk.incubator.foreign.MemoryLayout _DCB$struct$LAYOUT() { return _DCB$struct$LAYOUT_; }

    static final MemoryLayout _DCB$DCBlength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DCB$DCBlength$LAYOUT() { return _DCB$DCBlength$LAYOUT_; }

    static final VarHandle _DCB$DCBlength$VH_ = _DCB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DCBlength"));
    static final java.lang.invoke.VarHandle _DCB$DCBlength$VH() { return _DCB$DCBlength$VH_; }

    static final MemoryLayout _DCB$BaudRate$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DCB$BaudRate$LAYOUT() { return _DCB$BaudRate$LAYOUT_; }

    static final VarHandle _DCB$BaudRate$VH_ = _DCB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaudRate"));
    static final java.lang.invoke.VarHandle _DCB$BaudRate$VH() { return _DCB$BaudRate$VH_; }

    static final MemoryLayout _DCB$wReserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DCB$wReserved$LAYOUT() { return _DCB$wReserved$LAYOUT_; }

    static final VarHandle _DCB$wReserved$VH_ = _DCB$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wReserved"));
    static final java.lang.invoke.VarHandle _DCB$wReserved$VH() { return _DCB$wReserved$VH_; }

    static final MemoryLayout _DCB$XonLim$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DCB$XonLim$LAYOUT() { return _DCB$XonLim$LAYOUT_; }

    static final VarHandle _DCB$XonLim$VH_ = _DCB$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("XonLim"));
    static final java.lang.invoke.VarHandle _DCB$XonLim$VH() { return _DCB$XonLim$VH_; }

    static final MemoryLayout _DCB$XoffLim$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DCB$XoffLim$LAYOUT() { return _DCB$XoffLim$LAYOUT_; }

    static final VarHandle _DCB$XoffLim$VH_ = _DCB$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("XoffLim"));
    static final java.lang.invoke.VarHandle _DCB$XoffLim$VH() { return _DCB$XoffLim$VH_; }

    static final MemoryLayout _DCB$ByteSize$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DCB$ByteSize$LAYOUT() { return _DCB$ByteSize$LAYOUT_; }

    static final VarHandle _DCB$ByteSize$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ByteSize"));
    static final java.lang.invoke.VarHandle _DCB$ByteSize$VH() { return _DCB$ByteSize$VH_; }

    static final MemoryLayout _DCB$Parity$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DCB$Parity$LAYOUT() { return _DCB$Parity$LAYOUT_; }

    static final VarHandle _DCB$Parity$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Parity"));
    static final java.lang.invoke.VarHandle _DCB$Parity$VH() { return _DCB$Parity$VH_; }

    static final MemoryLayout _DCB$StopBits$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DCB$StopBits$LAYOUT() { return _DCB$StopBits$LAYOUT_; }

    static final VarHandle _DCB$StopBits$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("StopBits"));
    static final java.lang.invoke.VarHandle _DCB$StopBits$VH() { return _DCB$StopBits$VH_; }

    static final MemoryLayout _DCB$XonChar$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DCB$XonChar$LAYOUT() { return _DCB$XonChar$LAYOUT_; }

    static final VarHandle _DCB$XonChar$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("XonChar"));
    static final java.lang.invoke.VarHandle _DCB$XonChar$VH() { return _DCB$XonChar$VH_; }

    static final MemoryLayout _DCB$XoffChar$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DCB$XoffChar$LAYOUT() { return _DCB$XoffChar$LAYOUT_; }

    static final VarHandle _DCB$XoffChar$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("XoffChar"));
    static final java.lang.invoke.VarHandle _DCB$XoffChar$VH() { return _DCB$XoffChar$VH_; }

    static final MemoryLayout _DCB$ErrorChar$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DCB$ErrorChar$LAYOUT() { return _DCB$ErrorChar$LAYOUT_; }

    static final VarHandle _DCB$ErrorChar$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ErrorChar"));
    static final java.lang.invoke.VarHandle _DCB$ErrorChar$VH() { return _DCB$ErrorChar$VH_; }

    static final MemoryLayout _DCB$EofChar$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DCB$EofChar$LAYOUT() { return _DCB$EofChar$LAYOUT_; }

    static final VarHandle _DCB$EofChar$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EofChar"));
    static final java.lang.invoke.VarHandle _DCB$EofChar$VH() { return _DCB$EofChar$VH_; }

    static final MemoryLayout _DCB$EvtChar$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DCB$EvtChar$LAYOUT() { return _DCB$EvtChar$LAYOUT_; }

    static final VarHandle _DCB$EvtChar$VH_ = _DCB$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EvtChar"));
    static final java.lang.invoke.VarHandle _DCB$EvtChar$VH() { return _DCB$EvtChar$VH_; }

    static final MemoryLayout _DCB$wReserved1$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DCB$wReserved1$LAYOUT() { return _DCB$wReserved1$LAYOUT_; }

    static final VarHandle _DCB$wReserved1$VH_ = _DCB$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wReserved1"));
    static final java.lang.invoke.VarHandle _DCB$wReserved1$VH() { return _DCB$wReserved1$VH_; }

    static final MemoryLayout _COMMTIMEOUTS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ReadIntervalTimeout"),
        C_LONG.withName("ReadTotalTimeoutMultiplier"),
        C_LONG.withName("ReadTotalTimeoutConstant"),
        C_LONG.withName("WriteTotalTimeoutMultiplier"),
        C_LONG.withName("WriteTotalTimeoutConstant")
    ).withName("_COMMTIMEOUTS");
    static final jdk.incubator.foreign.MemoryLayout _COMMTIMEOUTS$struct$LAYOUT() { return _COMMTIMEOUTS$struct$LAYOUT_; }

    static final MemoryLayout _COMMTIMEOUTS$ReadIntervalTimeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMTIMEOUTS$ReadIntervalTimeout$LAYOUT() { return _COMMTIMEOUTS$ReadIntervalTimeout$LAYOUT_; }

    static final VarHandle _COMMTIMEOUTS$ReadIntervalTimeout$VH_ = _COMMTIMEOUTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReadIntervalTimeout"));
    static final java.lang.invoke.VarHandle _COMMTIMEOUTS$ReadIntervalTimeout$VH() { return _COMMTIMEOUTS$ReadIntervalTimeout$VH_; }

    static final MemoryLayout _COMMTIMEOUTS$ReadTotalTimeoutMultiplier$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMTIMEOUTS$ReadTotalTimeoutMultiplier$LAYOUT() { return _COMMTIMEOUTS$ReadTotalTimeoutMultiplier$LAYOUT_; }

    static final VarHandle _COMMTIMEOUTS$ReadTotalTimeoutMultiplier$VH_ = _COMMTIMEOUTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReadTotalTimeoutMultiplier"));
    static final java.lang.invoke.VarHandle _COMMTIMEOUTS$ReadTotalTimeoutMultiplier$VH() { return _COMMTIMEOUTS$ReadTotalTimeoutMultiplier$VH_; }

    static final MemoryLayout _COMMTIMEOUTS$ReadTotalTimeoutConstant$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMTIMEOUTS$ReadTotalTimeoutConstant$LAYOUT() { return _COMMTIMEOUTS$ReadTotalTimeoutConstant$LAYOUT_; }

    static final VarHandle _COMMTIMEOUTS$ReadTotalTimeoutConstant$VH_ = _COMMTIMEOUTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReadTotalTimeoutConstant"));
    static final java.lang.invoke.VarHandle _COMMTIMEOUTS$ReadTotalTimeoutConstant$VH() { return _COMMTIMEOUTS$ReadTotalTimeoutConstant$VH_; }

    static final MemoryLayout _COMMTIMEOUTS$WriteTotalTimeoutMultiplier$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMTIMEOUTS$WriteTotalTimeoutMultiplier$LAYOUT() { return _COMMTIMEOUTS$WriteTotalTimeoutMultiplier$LAYOUT_; }

    static final VarHandle _COMMTIMEOUTS$WriteTotalTimeoutMultiplier$VH_ = _COMMTIMEOUTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WriteTotalTimeoutMultiplier"));
    static final java.lang.invoke.VarHandle _COMMTIMEOUTS$WriteTotalTimeoutMultiplier$VH() { return _COMMTIMEOUTS$WriteTotalTimeoutMultiplier$VH_; }

    static final MemoryLayout _COMMTIMEOUTS$WriteTotalTimeoutConstant$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMTIMEOUTS$WriteTotalTimeoutConstant$LAYOUT() { return _COMMTIMEOUTS$WriteTotalTimeoutConstant$LAYOUT_; }

    static final VarHandle _COMMTIMEOUTS$WriteTotalTimeoutConstant$VH_ = _COMMTIMEOUTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WriteTotalTimeoutConstant"));
    static final java.lang.invoke.VarHandle _COMMTIMEOUTS$WriteTotalTimeoutConstant$VH() { return _COMMTIMEOUTS$WriteTotalTimeoutConstant$VH_; }

    static final MemoryLayout _COMMCONFIG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwSize"),
        C_SHORT.withName("wVersion"),
        C_SHORT.withName("wReserved"),
        MemoryLayout.ofStruct(
            C_LONG.withName("DCBlength"),
            C_LONG.withName("BaudRate"),
            C_INT,
            C_SHORT.withName("wReserved"),
            C_SHORT.withName("XonLim"),
            C_SHORT.withName("XoffLim"),
            C_CHAR.withName("ByteSize"),
            C_CHAR.withName("Parity"),
            C_CHAR.withName("StopBits"),
            C_CHAR.withName("XonChar"),
            C_CHAR.withName("XoffChar"),
            C_CHAR.withName("ErrorChar"),
            C_CHAR.withName("EofChar"),
            C_CHAR.withName("EvtChar"),
            C_SHORT.withName("wReserved1")
        ).withName("dcb"),
        C_LONG.withName("dwProviderSubType"),
        C_LONG.withName("dwProviderOffset"),
        C_LONG.withName("dwProviderSize"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("wcProviderData"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_COMMCONFIG");
    static final jdk.incubator.foreign.MemoryLayout _COMMCONFIG$struct$LAYOUT() { return _COMMCONFIG$struct$LAYOUT_; }

    static final MemoryLayout _COMMCONFIG$dwSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMCONFIG$dwSize$LAYOUT() { return _COMMCONFIG$dwSize$LAYOUT_; }

    static final VarHandle _COMMCONFIG$dwSize$VH_ = _COMMCONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    static final java.lang.invoke.VarHandle _COMMCONFIG$dwSize$VH() { return _COMMCONFIG$dwSize$VH_; }

    static final MemoryLayout _COMMCONFIG$wVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _COMMCONFIG$wVersion$LAYOUT() { return _COMMCONFIG$wVersion$LAYOUT_; }

    static final VarHandle _COMMCONFIG$wVersion$VH_ = _COMMCONFIG$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wVersion"));
    static final java.lang.invoke.VarHandle _COMMCONFIG$wVersion$VH() { return _COMMCONFIG$wVersion$VH_; }

    static final MemoryLayout _COMMCONFIG$wReserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _COMMCONFIG$wReserved$LAYOUT() { return _COMMCONFIG$wReserved$LAYOUT_; }

    static final VarHandle _COMMCONFIG$wReserved$VH_ = _COMMCONFIG$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wReserved"));
    static final java.lang.invoke.VarHandle _COMMCONFIG$wReserved$VH() { return _COMMCONFIG$wReserved$VH_; }

    static final MemoryLayout _COMMCONFIG$dwProviderSubType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMCONFIG$dwProviderSubType$LAYOUT() { return _COMMCONFIG$dwProviderSubType$LAYOUT_; }

    static final VarHandle _COMMCONFIG$dwProviderSubType$VH_ = _COMMCONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProviderSubType"));
    static final java.lang.invoke.VarHandle _COMMCONFIG$dwProviderSubType$VH() { return _COMMCONFIG$dwProviderSubType$VH_; }

    static final MemoryLayout _COMMCONFIG$dwProviderOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMCONFIG$dwProviderOffset$LAYOUT() { return _COMMCONFIG$dwProviderOffset$LAYOUT_; }

    static final VarHandle _COMMCONFIG$dwProviderOffset$VH_ = _COMMCONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProviderOffset"));
    static final java.lang.invoke.VarHandle _COMMCONFIG$dwProviderOffset$VH() { return _COMMCONFIG$dwProviderOffset$VH_; }

    static final MemoryLayout _COMMCONFIG$dwProviderSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COMMCONFIG$dwProviderSize$LAYOUT() { return _COMMCONFIG$dwProviderSize$LAYOUT_; }

    static final VarHandle _COMMCONFIG$dwProviderSize$VH_ = _COMMCONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProviderSize"));
    static final java.lang.invoke.VarHandle _COMMCONFIG$dwProviderSize$VH() { return _COMMCONFIG$dwProviderSize$VH_; }

    static final MemoryLayout _MEMORYSTATUS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwLength"),
        C_LONG.withName("dwMemoryLoad"),
        C_LONGLONG.withName("dwTotalPhys"),
        C_LONGLONG.withName("dwAvailPhys"),
        C_LONGLONG.withName("dwTotalPageFile"),
        C_LONGLONG.withName("dwAvailPageFile"),
        C_LONGLONG.withName("dwTotalVirtual"),
        C_LONGLONG.withName("dwAvailVirtual")
    ).withName("_MEMORYSTATUS");
    static final jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$struct$LAYOUT() { return _MEMORYSTATUS$struct$LAYOUT_; }

    static final MemoryLayout _MEMORYSTATUS$dwLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwLength$LAYOUT() { return _MEMORYSTATUS$dwLength$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwLength$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwLength"));
    static final java.lang.invoke.VarHandle _MEMORYSTATUS$dwLength$VH() { return _MEMORYSTATUS$dwLength$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwMemoryLoad$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwMemoryLoad$LAYOUT() { return _MEMORYSTATUS$dwMemoryLoad$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwMemoryLoad$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMemoryLoad"));
    static final java.lang.invoke.VarHandle _MEMORYSTATUS$dwMemoryLoad$VH() { return _MEMORYSTATUS$dwMemoryLoad$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwTotalPhys$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwTotalPhys$LAYOUT() { return _MEMORYSTATUS$dwTotalPhys$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwTotalPhys$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwTotalPhys"));
    static final java.lang.invoke.VarHandle _MEMORYSTATUS$dwTotalPhys$VH() { return _MEMORYSTATUS$dwTotalPhys$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwAvailPhys$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwAvailPhys$LAYOUT() { return _MEMORYSTATUS$dwAvailPhys$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwAvailPhys$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwAvailPhys"));
    static final java.lang.invoke.VarHandle _MEMORYSTATUS$dwAvailPhys$VH() { return _MEMORYSTATUS$dwAvailPhys$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwTotalPageFile$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwTotalPageFile$LAYOUT() { return _MEMORYSTATUS$dwTotalPageFile$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwTotalPageFile$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwTotalPageFile"));
    static final java.lang.invoke.VarHandle _MEMORYSTATUS$dwTotalPageFile$VH() { return _MEMORYSTATUS$dwTotalPageFile$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwAvailPageFile$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwAvailPageFile$LAYOUT() { return _MEMORYSTATUS$dwAvailPageFile$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwAvailPageFile$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwAvailPageFile"));
    static final java.lang.invoke.VarHandle _MEMORYSTATUS$dwAvailPageFile$VH() { return _MEMORYSTATUS$dwAvailPageFile$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwTotalVirtual$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwTotalVirtual$LAYOUT() { return _MEMORYSTATUS$dwTotalVirtual$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwTotalVirtual$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwTotalVirtual"));
    static final java.lang.invoke.VarHandle _MEMORYSTATUS$dwTotalVirtual$VH() { return _MEMORYSTATUS$dwTotalVirtual$VH_; }

    static final MemoryLayout _MEMORYSTATUS$dwAvailVirtual$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORYSTATUS$dwAvailVirtual$LAYOUT() { return _MEMORYSTATUS$dwAvailVirtual$LAYOUT_; }

    static final VarHandle _MEMORYSTATUS$dwAvailVirtual$VH_ = _MEMORYSTATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwAvailVirtual"));
    static final java.lang.invoke.VarHandle _MEMORYSTATUS$dwAvailVirtual$VH() { return _MEMORYSTATUS$dwAvailVirtual$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwSize"),
        C_LONG.withName("dwProcessorArchitecture"),
        C_LONG.withName("dwThreadID"),
        C_LONG.withName("dwReserved0"),
        C_LONGLONG.withName("lpExceptionAddress"),
        C_LONGLONG.withName("lpExceptionRecord"),
        C_LONGLONG.withName("lpContextRecord")
    ).withName("_JIT_DEBUG_INFO");
    static final jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$struct$LAYOUT() { return _JIT_DEBUG_INFO$struct$LAYOUT_; }

    static final MemoryLayout _JIT_DEBUG_INFO$dwSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$dwSize$LAYOUT() { return _JIT_DEBUG_INFO$dwSize$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$dwSize$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    static final java.lang.invoke.VarHandle _JIT_DEBUG_INFO$dwSize$VH() { return _JIT_DEBUG_INFO$dwSize$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$dwProcessorArchitecture$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$dwProcessorArchitecture$LAYOUT() { return _JIT_DEBUG_INFO$dwProcessorArchitecture$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$dwProcessorArchitecture$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProcessorArchitecture"));
    static final java.lang.invoke.VarHandle _JIT_DEBUG_INFO$dwProcessorArchitecture$VH() { return _JIT_DEBUG_INFO$dwProcessorArchitecture$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$dwThreadID$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$dwThreadID$LAYOUT() { return _JIT_DEBUG_INFO$dwThreadID$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$dwThreadID$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwThreadID"));
    static final java.lang.invoke.VarHandle _JIT_DEBUG_INFO$dwThreadID$VH() { return _JIT_DEBUG_INFO$dwThreadID$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$dwReserved0$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$dwReserved0$LAYOUT() { return _JIT_DEBUG_INFO$dwReserved0$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$dwReserved0$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved0"));
    static final java.lang.invoke.VarHandle _JIT_DEBUG_INFO$dwReserved0$VH() { return _JIT_DEBUG_INFO$dwReserved0$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$lpExceptionAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$lpExceptionAddress$LAYOUT() { return _JIT_DEBUG_INFO$lpExceptionAddress$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$lpExceptionAddress$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpExceptionAddress"));
    static final java.lang.invoke.VarHandle _JIT_DEBUG_INFO$lpExceptionAddress$VH() { return _JIT_DEBUG_INFO$lpExceptionAddress$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$lpExceptionRecord$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$lpExceptionRecord$LAYOUT() { return _JIT_DEBUG_INFO$lpExceptionRecord$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$lpExceptionRecord$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpExceptionRecord"));
    static final java.lang.invoke.VarHandle _JIT_DEBUG_INFO$lpExceptionRecord$VH() { return _JIT_DEBUG_INFO$lpExceptionRecord$VH_; }

    static final MemoryLayout _JIT_DEBUG_INFO$lpContextRecord$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JIT_DEBUG_INFO$lpContextRecord$LAYOUT() { return _JIT_DEBUG_INFO$lpContextRecord$LAYOUT_; }

    static final VarHandle _JIT_DEBUG_INFO$lpContextRecord$VH_ = _JIT_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpContextRecord"));
    static final java.lang.invoke.VarHandle _JIT_DEBUG_INFO$lpContextRecord$VH() { return _JIT_DEBUG_INFO$lpContextRecord$VH_; }

    static final MemoryLayout _OFSTRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("cBytes"),
        C_CHAR.withName("fFixedDisk"),
        C_SHORT.withName("nErrCode"),
        C_SHORT.withName("Reserved1"),
        C_SHORT.withName("Reserved2"),
        MemoryLayout.ofSequence(128, C_CHAR).withName("szPathName")
    ).withName("_OFSTRUCT");
    static final jdk.incubator.foreign.MemoryLayout _OFSTRUCT$struct$LAYOUT() { return _OFSTRUCT$struct$LAYOUT_; }

    static final MemoryLayout _OFSTRUCT$cBytes$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _OFSTRUCT$cBytes$LAYOUT() { return _OFSTRUCT$cBytes$LAYOUT_; }

    static final VarHandle _OFSTRUCT$cBytes$VH_ = _OFSTRUCT$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("cBytes"));
    static final java.lang.invoke.VarHandle _OFSTRUCT$cBytes$VH() { return _OFSTRUCT$cBytes$VH_; }

    static final MemoryLayout _OFSTRUCT$fFixedDisk$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _OFSTRUCT$fFixedDisk$LAYOUT() { return _OFSTRUCT$fFixedDisk$LAYOUT_; }

    static final VarHandle _OFSTRUCT$fFixedDisk$VH_ = _OFSTRUCT$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("fFixedDisk"));
    static final java.lang.invoke.VarHandle _OFSTRUCT$fFixedDisk$VH() { return _OFSTRUCT$fFixedDisk$VH_; }

    static final MemoryLayout _OFSTRUCT$nErrCode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OFSTRUCT$nErrCode$LAYOUT() { return _OFSTRUCT$nErrCode$LAYOUT_; }

    static final VarHandle _OFSTRUCT$nErrCode$VH_ = _OFSTRUCT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nErrCode"));
    static final java.lang.invoke.VarHandle _OFSTRUCT$nErrCode$VH() { return _OFSTRUCT$nErrCode$VH_; }

    static final MemoryLayout _OFSTRUCT$Reserved1$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OFSTRUCT$Reserved1$LAYOUT() { return _OFSTRUCT$Reserved1$LAYOUT_; }

    static final VarHandle _OFSTRUCT$Reserved1$VH_ = _OFSTRUCT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle _OFSTRUCT$Reserved1$VH() { return _OFSTRUCT$Reserved1$VH_; }

    static final MemoryLayout _OFSTRUCT$Reserved2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OFSTRUCT$Reserved2$LAYOUT() { return _OFSTRUCT$Reserved2$LAYOUT_; }

    static final VarHandle _OFSTRUCT$Reserved2$VH_ = _OFSTRUCT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle _OFSTRUCT$Reserved2$VH() { return _OFSTRUCT$Reserved2$VH_; }

    static final FunctionDescriptor WinMain$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WinMain$FUNC() { return WinMain$FUNC_; }

    static final MethodHandle WinMain$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WinMain",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        WinMain$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WinMain$MH() { return WinMain$MH_; }

    static final FunctionDescriptor wWinMain$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wWinMain$FUNC() { return wWinMain$FUNC_; }

    static final MethodHandle wWinMain$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wWinMain",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        wWinMain$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wWinMain$MH() { return wWinMain$MH_; }

    static final FunctionDescriptor GlobalAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalAlloc$FUNC() { return GlobalAlloc$FUNC_; }

    static final MethodHandle GlobalAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalAlloc",
        "(IJ)Ljdk/incubator/foreign/MemoryAddress;",
        GlobalAlloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalAlloc$MH() { return GlobalAlloc$MH_; }

    static final FunctionDescriptor GlobalReAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalReAlloc$FUNC() { return GlobalReAlloc$FUNC_; }

    static final MethodHandle GlobalReAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalReAlloc",
        "(Ljdk/incubator/foreign/MemoryAddress;JI)Ljdk/incubator/foreign/MemoryAddress;",
        GlobalReAlloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalReAlloc$MH() { return GlobalReAlloc$MH_; }

    static final FunctionDescriptor GlobalSize$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalSize$FUNC() { return GlobalSize$FUNC_; }

    static final MethodHandle GlobalSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalSize",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        GlobalSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalSize$MH() { return GlobalSize$MH_; }

    static final FunctionDescriptor GlobalUnlock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalUnlock$FUNC() { return GlobalUnlock$FUNC_; }

    static final MethodHandle GlobalUnlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalUnlock",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GlobalUnlock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalUnlock$MH() { return GlobalUnlock$MH_; }

    static final FunctionDescriptor GlobalLock$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalLock$FUNC() { return GlobalLock$FUNC_; }

    static final MethodHandle GlobalLock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalLock",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GlobalLock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalLock$MH() { return GlobalLock$MH_; }

    static final FunctionDescriptor GlobalFlags$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalFlags$FUNC() { return GlobalFlags$FUNC_; }

    static final MethodHandle GlobalFlags$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalFlags",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GlobalFlags$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalFlags$MH() { return GlobalFlags$MH_; }

    static final FunctionDescriptor GlobalHandle$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalHandle$FUNC() { return GlobalHandle$FUNC_; }

    static final MethodHandle GlobalHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GlobalHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalHandle$MH() { return GlobalHandle$MH_; }

    static final FunctionDescriptor GlobalFree$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalFree$FUNC() { return GlobalFree$FUNC_; }

    static final MethodHandle GlobalFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GlobalFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalFree$MH() { return GlobalFree$MH_; }

    static final FunctionDescriptor GlobalCompact$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalCompact$FUNC() { return GlobalCompact$FUNC_; }

    static final MethodHandle GlobalCompact$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalCompact",
        "(I)J",
        GlobalCompact$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalCompact$MH() { return GlobalCompact$MH_; }

    static final FunctionDescriptor GlobalFix$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalFix$FUNC() { return GlobalFix$FUNC_; }

    static final MethodHandle GlobalFix$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalFix",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GlobalFix$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalFix$MH() { return GlobalFix$MH_; }

    static final FunctionDescriptor GlobalUnfix$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalUnfix$FUNC() { return GlobalUnfix$FUNC_; }

    static final MethodHandle GlobalUnfix$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalUnfix",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GlobalUnfix$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalUnfix$MH() { return GlobalUnfix$MH_; }

    static final FunctionDescriptor GlobalWire$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalWire$FUNC() { return GlobalWire$FUNC_; }

    static final MethodHandle GlobalWire$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalWire",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GlobalWire$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalWire$MH() { return GlobalWire$MH_; }

    static final FunctionDescriptor GlobalUnWire$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalUnWire$FUNC() { return GlobalUnWire$FUNC_; }

    static final MethodHandle GlobalUnWire$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalUnWire",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GlobalUnWire$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalUnWire$MH() { return GlobalUnWire$MH_; }

    static final FunctionDescriptor GlobalMemoryStatus$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalMemoryStatus$FUNC() { return GlobalMemoryStatus$FUNC_; }

    static final MethodHandle GlobalMemoryStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalMemoryStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        GlobalMemoryStatus$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalMemoryStatus$MH() { return GlobalMemoryStatus$MH_; }

    static final FunctionDescriptor LocalAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor LocalAlloc$FUNC() { return LocalAlloc$FUNC_; }

    static final MethodHandle LocalAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalAlloc",
        "(IJ)Ljdk/incubator/foreign/MemoryAddress;",
        LocalAlloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LocalAlloc$MH() { return LocalAlloc$MH_; }

    static final FunctionDescriptor LocalReAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor LocalReAlloc$FUNC() { return LocalReAlloc$FUNC_; }

    static final MethodHandle LocalReAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalReAlloc",
        "(Ljdk/incubator/foreign/MemoryAddress;JI)Ljdk/incubator/foreign/MemoryAddress;",
        LocalReAlloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LocalReAlloc$MH() { return LocalReAlloc$MH_; }

    static final FunctionDescriptor LocalLock$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LocalLock$FUNC() { return LocalLock$FUNC_; }

    static final MethodHandle LocalLock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalLock",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LocalLock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LocalLock$MH() { return LocalLock$MH_; }

    static final FunctionDescriptor LocalHandle$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LocalHandle$FUNC() { return LocalHandle$FUNC_; }

    static final MethodHandle LocalHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LocalHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LocalHandle$MH() { return LocalHandle$MH_; }

    static final FunctionDescriptor LocalUnlock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LocalUnlock$FUNC() { return LocalUnlock$FUNC_; }

    static final MethodHandle LocalUnlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalUnlock",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        LocalUnlock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LocalUnlock$MH() { return LocalUnlock$MH_; }

    static final FunctionDescriptor LocalSize$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LocalSize$FUNC() { return LocalSize$FUNC_; }

    static final MethodHandle LocalSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalSize",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        LocalSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LocalSize$MH() { return LocalSize$MH_; }

    static final FunctionDescriptor LocalFlags$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LocalFlags$FUNC() { return LocalFlags$FUNC_; }

    static final MethodHandle LocalFlags$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalFlags",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        LocalFlags$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LocalFlags$MH() { return LocalFlags$MH_; }

    static final FunctionDescriptor LocalFree$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LocalFree$FUNC() { return LocalFree$FUNC_; }

    static final MethodHandle LocalFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LocalFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LocalFree$MH() { return LocalFree$MH_; }

    static final FunctionDescriptor LocalShrink$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor LocalShrink$FUNC() { return LocalShrink$FUNC_; }

    static final MethodHandle LocalShrink$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalShrink",
        "(Ljdk/incubator/foreign/MemoryAddress;I)J",
        LocalShrink$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LocalShrink$MH() { return LocalShrink$MH_; }

    static final FunctionDescriptor LocalCompact$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor LocalCompact$FUNC() { return LocalCompact$FUNC_; }

    static final MethodHandle LocalCompact$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LocalCompact",
        "(I)J",
        LocalCompact$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LocalCompact$MH() { return LocalCompact$MH_; }

    static final FunctionDescriptor GetBinaryTypeA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetBinaryTypeA$FUNC() { return GetBinaryTypeA$FUNC_; }

    static final MethodHandle GetBinaryTypeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetBinaryTypeA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetBinaryTypeA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetBinaryTypeA$MH() { return GetBinaryTypeA$MH_; }

    static final FunctionDescriptor GetBinaryTypeW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetBinaryTypeW$FUNC() { return GetBinaryTypeW$FUNC_; }

    static final MethodHandle GetBinaryTypeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetBinaryTypeW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetBinaryTypeW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetBinaryTypeW$MH() { return GetBinaryTypeW$MH_; }

    static final FunctionDescriptor GetShortPathNameA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetShortPathNameA$FUNC() { return GetShortPathNameA$FUNC_; }

    static final MethodHandle GetShortPathNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetShortPathNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetShortPathNameA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetShortPathNameA$MH() { return GetShortPathNameA$MH_; }

    static final FunctionDescriptor GetLongPathNameTransactedA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetLongPathNameTransactedA$FUNC() { return GetLongPathNameTransactedA$FUNC_; }

    static final MethodHandle GetLongPathNameTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLongPathNameTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetLongPathNameTransactedA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetLongPathNameTransactedA$MH() { return GetLongPathNameTransactedA$MH_; }

    static final FunctionDescriptor GetLongPathNameTransactedW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetLongPathNameTransactedW$FUNC() { return GetLongPathNameTransactedW$FUNC_; }

    static final MethodHandle GetLongPathNameTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLongPathNameTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetLongPathNameTransactedW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetLongPathNameTransactedW$MH() { return GetLongPathNameTransactedW$MH_; }

    static final FunctionDescriptor GetProcessAffinityMask$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetProcessAffinityMask$FUNC() { return GetProcessAffinityMask$FUNC_; }

    static final MethodHandle GetProcessAffinityMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessAffinityMask",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessAffinityMask$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetProcessAffinityMask$MH() { return GetProcessAffinityMask$MH_; }

    static final FunctionDescriptor SetProcessAffinityMask$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetProcessAffinityMask$FUNC() { return SetProcessAffinityMask$FUNC_; }

    static final MethodHandle SetProcessAffinityMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessAffinityMask",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        SetProcessAffinityMask$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetProcessAffinityMask$MH() { return SetProcessAffinityMask$MH_; }

    static final FunctionDescriptor GetProcessIoCounters$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetProcessIoCounters$FUNC() { return GetProcessIoCounters$FUNC_; }

    static final MethodHandle GetProcessIoCounters$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessIoCounters",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessIoCounters$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetProcessIoCounters$MH() { return GetProcessIoCounters$MH_; }

    static final FunctionDescriptor GetProcessWorkingSetSize$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetProcessWorkingSetSize$FUNC() { return GetProcessWorkingSetSize$FUNC_; }

    static final MethodHandle GetProcessWorkingSetSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessWorkingSetSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessWorkingSetSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetProcessWorkingSetSize$MH() { return GetProcessWorkingSetSize$MH_; }

    static final FunctionDescriptor SetProcessWorkingSetSize$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetProcessWorkingSetSize$FUNC() { return SetProcessWorkingSetSize$FUNC_; }

    static final MethodHandle SetProcessWorkingSetSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessWorkingSetSize",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)I",
        SetProcessWorkingSetSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetProcessWorkingSetSize$MH() { return SetProcessWorkingSetSize$MH_; }

    static final FunctionDescriptor FatalExit$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor FatalExit$FUNC() { return FatalExit$FUNC_; }

    static final MethodHandle FatalExit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FatalExit",
        "(I)V",
        FatalExit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FatalExit$MH() { return FatalExit$MH_; }

    static final FunctionDescriptor SetEnvironmentStringsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetEnvironmentStringsA$FUNC() { return SetEnvironmentStringsA$FUNC_; }

    static final MethodHandle SetEnvironmentStringsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetEnvironmentStringsA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetEnvironmentStringsA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetEnvironmentStringsA$MH() { return SetEnvironmentStringsA$MH_; }

    static final FunctionDescriptor SwitchToFiber$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SwitchToFiber$FUNC() { return SwitchToFiber$FUNC_; }

    static final MethodHandle SwitchToFiber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SwitchToFiber",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        SwitchToFiber$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SwitchToFiber$MH() { return SwitchToFiber$MH_; }

    static final FunctionDescriptor DeleteFiber$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DeleteFiber$FUNC() { return DeleteFiber$FUNC_; }

    static final MethodHandle DeleteFiber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteFiber",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        DeleteFiber$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DeleteFiber$MH() { return DeleteFiber$MH_; }

    static final FunctionDescriptor ConvertFiberToThread$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor ConvertFiberToThread$FUNC() { return ConvertFiberToThread$FUNC_; }

    static final MethodHandle ConvertFiberToThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ConvertFiberToThread",
        "()I",
        ConvertFiberToThread$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ConvertFiberToThread$MH() { return ConvertFiberToThread$MH_; }

    static final FunctionDescriptor CreateFiberEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateFiberEx$FUNC() { return CreateFiberEx$FUNC_; }

    static final MethodHandle CreateFiberEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFiberEx",
        "(JJILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFiberEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateFiberEx$MH() { return CreateFiberEx$MH_; }

    static final FunctionDescriptor CreateFiberEx$lpStartAddress$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateFiberEx$lpStartAddress$FUNC() { return CreateFiberEx$lpStartAddress$FUNC_; }

    static final FunctionDescriptor ConvertThreadToFiberEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor ConvertThreadToFiberEx$FUNC() { return ConvertThreadToFiberEx$FUNC_; }

    static final MethodHandle ConvertThreadToFiberEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ConvertThreadToFiberEx",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        ConvertThreadToFiberEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ConvertThreadToFiberEx$MH() { return ConvertThreadToFiberEx$MH_; }

    static final FunctionDescriptor CreateFiber$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateFiber$FUNC() { return CreateFiber$FUNC_; }

    static final MethodHandle CreateFiber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFiber",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFiber$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateFiber$MH() { return CreateFiber$MH_; }

    static final FunctionDescriptor CreateFiber$lpStartAddress$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateFiber$lpStartAddress$FUNC() { return CreateFiber$lpStartAddress$FUNC_; }

    static final FunctionDescriptor ConvertThreadToFiber$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ConvertThreadToFiber$FUNC() { return ConvertThreadToFiber$FUNC_; }

    static final MethodHandle ConvertThreadToFiber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ConvertThreadToFiber",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ConvertThreadToFiber$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ConvertThreadToFiber$MH() { return ConvertThreadToFiber$MH_; }

    static final int UmsThreadInvalidInfoClass() { return (int)0L; }

    static final int UmsThreadUserContext() { return (int)1L; }

    static final int UmsThreadPriority() { return (int)2L; }

    static final int UmsThreadAffinity() { return (int)3L; }

    static final int UmsThreadTeb() { return (int)4L; }

    static final int UmsThreadIsSuspended() { return (int)5L; }

    static final int UmsThreadIsTerminated() { return (int)6L; }

    static final int UmsThreadMaxInfoClass() { return (int)7L; }

    static final int UmsSchedulerStartup() { return (int)0L; }

    static final int UmsSchedulerThreadBlocked() { return (int)1L; }

    static final int UmsSchedulerThreadYield() { return (int)2L; }

    static final MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("UmsVersion"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("CompletionList"),
        C_POINTER.withName("SchedulerProc"),
        C_POINTER.withName("SchedulerParam")
    ).withName("_UMS_SCHEDULER_STARTUP_INFO");
    static final jdk.incubator.foreign.MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT() { return _UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT_; }

    static final MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$UmsVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$UmsVersion$LAYOUT() { return _UMS_SCHEDULER_STARTUP_INFO$UmsVersion$LAYOUT_; }

    static final VarHandle _UMS_SCHEDULER_STARTUP_INFO$UmsVersion$VH_ = _UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UmsVersion"));
    static final java.lang.invoke.VarHandle _UMS_SCHEDULER_STARTUP_INFO$UmsVersion$VH() { return _UMS_SCHEDULER_STARTUP_INFO$UmsVersion$VH_; }

    static final MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$CompletionList$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$CompletionList$LAYOUT() { return _UMS_SCHEDULER_STARTUP_INFO$CompletionList$LAYOUT_; }

    static final VarHandle _UMS_SCHEDULER_STARTUP_INFO$CompletionList$VH_ = MemoryHandles.asAddressVarHandle(_UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompletionList")));
    static final java.lang.invoke.VarHandle _UMS_SCHEDULER_STARTUP_INFO$CompletionList$VH() { return _UMS_SCHEDULER_STARTUP_INFO$CompletionList$VH_; }

    static final MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$LAYOUT() { return _UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$LAYOUT_; }

    static final VarHandle _UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$VH_ = MemoryHandles.asAddressVarHandle(_UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SchedulerProc")));
    static final java.lang.invoke.VarHandle _UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$VH() { return _UMS_SCHEDULER_STARTUP_INFO$SchedulerProc$VH_; }

    static final MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$LAYOUT() { return _UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$LAYOUT_; }

    static final VarHandle _UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$VH_ = MemoryHandles.asAddressVarHandle(_UMS_SCHEDULER_STARTUP_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SchedulerParam")));
    static final java.lang.invoke.VarHandle _UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$VH() { return _UMS_SCHEDULER_STARTUP_INFO$SchedulerParam$VH_; }

    static final MemoryLayout _UMS_SYSTEM_THREAD_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("UmsVersion"),
        C_INT,
        C_LONG.withName("ThreadUmsFlags")
    ).withName("_UMS_SYSTEM_THREAD_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _UMS_SYSTEM_THREAD_INFORMATION$struct$LAYOUT() { return _UMS_SYSTEM_THREAD_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$LAYOUT() { return _UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$LAYOUT_; }

    static final VarHandle _UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$VH_ = _UMS_SYSTEM_THREAD_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UmsVersion"));
    static final java.lang.invoke.VarHandle _UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$VH() { return _UMS_SYSTEM_THREAD_INFORMATION$UmsVersion$VH_; }

    static final MemoryLayout _UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$LAYOUT() { return _UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$LAYOUT_; }

    static final VarHandle _UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$VH_ = _UMS_SYSTEM_THREAD_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ThreadUmsFlags"));
    static final java.lang.invoke.VarHandle _UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$VH() { return _UMS_SYSTEM_THREAD_INFORMATION$ThreadUmsFlags$VH_; }

    static final FunctionDescriptor CreateUmsCompletionList$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateUmsCompletionList$FUNC() { return CreateUmsCompletionList$FUNC_; }

    static final MethodHandle CreateUmsCompletionList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateUmsCompletionList",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateUmsCompletionList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateUmsCompletionList$MH() { return CreateUmsCompletionList$MH_; }

    static final FunctionDescriptor DequeueUmsCompletionListItems$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DequeueUmsCompletionListItems$FUNC() { return DequeueUmsCompletionListItems$FUNC_; }

    static final MethodHandle DequeueUmsCompletionListItems$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DequeueUmsCompletionListItems",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        DequeueUmsCompletionListItems$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DequeueUmsCompletionListItems$MH() { return DequeueUmsCompletionListItems$MH_; }

    static final FunctionDescriptor GetUmsCompletionListEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetUmsCompletionListEvent$FUNC() { return GetUmsCompletionListEvent$FUNC_; }

    static final MethodHandle GetUmsCompletionListEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUmsCompletionListEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetUmsCompletionListEvent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetUmsCompletionListEvent$MH() { return GetUmsCompletionListEvent$MH_; }

    static final FunctionDescriptor ExecuteUmsThread$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ExecuteUmsThread$FUNC() { return ExecuteUmsThread$FUNC_; }

    static final MethodHandle ExecuteUmsThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExecuteUmsThread",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ExecuteUmsThread$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ExecuteUmsThread$MH() { return ExecuteUmsThread$MH_; }

    static final FunctionDescriptor UmsThreadYield$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor UmsThreadYield$FUNC() { return UmsThreadYield$FUNC_; }

    static final MethodHandle UmsThreadYield$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UmsThreadYield",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UmsThreadYield$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UmsThreadYield$MH() { return UmsThreadYield$MH_; }

    static final FunctionDescriptor DeleteUmsCompletionList$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DeleteUmsCompletionList$FUNC() { return DeleteUmsCompletionList$FUNC_; }

    static final MethodHandle DeleteUmsCompletionList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteUmsCompletionList",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteUmsCompletionList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DeleteUmsCompletionList$MH() { return DeleteUmsCompletionList$MH_; }

    static final FunctionDescriptor GetCurrentUmsThread$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor GetCurrentUmsThread$FUNC() { return GetCurrentUmsThread$FUNC_; }

    static final MethodHandle GetCurrentUmsThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentUmsThread",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetCurrentUmsThread$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCurrentUmsThread$MH() { return GetCurrentUmsThread$MH_; }

    static final FunctionDescriptor GetNextUmsListItem$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetNextUmsListItem$FUNC() { return GetNextUmsListItem$FUNC_; }

    static final MethodHandle GetNextUmsListItem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNextUmsListItem",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetNextUmsListItem$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetNextUmsListItem$MH() { return GetNextUmsListItem$MH_; }

    static final FunctionDescriptor QueryUmsThreadInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor QueryUmsThreadInformation$FUNC() { return QueryUmsThreadInformation$FUNC_; }

    static final MethodHandle QueryUmsThreadInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryUmsThreadInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        QueryUmsThreadInformation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle QueryUmsThreadInformation$MH() { return QueryUmsThreadInformation$MH_; }

    static final FunctionDescriptor SetUmsThreadInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetUmsThreadInformation$FUNC() { return SetUmsThreadInformation$FUNC_; }

    static final MethodHandle SetUmsThreadInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetUmsThreadInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        SetUmsThreadInformation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetUmsThreadInformation$MH() { return SetUmsThreadInformation$MH_; }

    static final FunctionDescriptor DeleteUmsThreadContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DeleteUmsThreadContext$FUNC() { return DeleteUmsThreadContext$FUNC_; }

    static final MethodHandle DeleteUmsThreadContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteUmsThreadContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteUmsThreadContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DeleteUmsThreadContext$MH() { return DeleteUmsThreadContext$MH_; }

    static final FunctionDescriptor CreateUmsThreadContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateUmsThreadContext$FUNC() { return CreateUmsThreadContext$FUNC_; }

    static final MethodHandle CreateUmsThreadContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateUmsThreadContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateUmsThreadContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateUmsThreadContext$MH() { return CreateUmsThreadContext$MH_; }

    static final FunctionDescriptor EnterUmsSchedulingMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnterUmsSchedulingMode$FUNC() { return EnterUmsSchedulingMode$FUNC_; }

    static final MethodHandle EnterUmsSchedulingMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnterUmsSchedulingMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        EnterUmsSchedulingMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnterUmsSchedulingMode$MH() { return EnterUmsSchedulingMode$MH_; }

    static final FunctionDescriptor GetUmsSystemThreadInformation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetUmsSystemThreadInformation$FUNC() { return GetUmsSystemThreadInformation$FUNC_; }

    static final MethodHandle GetUmsSystemThreadInformation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUmsSystemThreadInformation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetUmsSystemThreadInformation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetUmsSystemThreadInformation$MH() { return GetUmsSystemThreadInformation$MH_; }

    static final FunctionDescriptor SetThreadAffinityMask$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetThreadAffinityMask$FUNC() { return SetThreadAffinityMask$FUNC_; }

    static final MethodHandle SetThreadAffinityMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadAffinityMask",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        SetThreadAffinityMask$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetThreadAffinityMask$MH() { return SetThreadAffinityMask$MH_; }

    static final FunctionDescriptor SetProcessDEPPolicy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetProcessDEPPolicy$FUNC() { return SetProcessDEPPolicy$FUNC_; }

    static final MethodHandle SetProcessDEPPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessDEPPolicy",
        "(I)I",
        SetProcessDEPPolicy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetProcessDEPPolicy$MH() { return SetProcessDEPPolicy$MH_; }

    static final FunctionDescriptor GetProcessDEPPolicy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetProcessDEPPolicy$FUNC() { return GetProcessDEPPolicy$FUNC_; }

    static final MethodHandle GetProcessDEPPolicy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetProcessDEPPolicy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetProcessDEPPolicy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetProcessDEPPolicy$MH() { return GetProcessDEPPolicy$MH_; }

    static final FunctionDescriptor RequestWakeupLatency$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor RequestWakeupLatency$FUNC() { return RequestWakeupLatency$FUNC_; }

    static final MethodHandle RequestWakeupLatency$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RequestWakeupLatency",
        "(I)I",
        RequestWakeupLatency$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RequestWakeupLatency$MH() { return RequestWakeupLatency$MH_; }

    static final FunctionDescriptor IsSystemResumeAutomatic$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor IsSystemResumeAutomatic$FUNC() { return IsSystemResumeAutomatic$FUNC_; }

    static final MethodHandle IsSystemResumeAutomatic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsSystemResumeAutomatic",
        "()I",
        IsSystemResumeAutomatic$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IsSystemResumeAutomatic$MH() { return IsSystemResumeAutomatic$MH_; }

    static final FunctionDescriptor GetThreadSelectorEntry$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetThreadSelectorEntry$FUNC() { return GetThreadSelectorEntry$FUNC_; }

    static final MethodHandle GetThreadSelectorEntry$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadSelectorEntry",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetThreadSelectorEntry$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetThreadSelectorEntry$MH() { return GetThreadSelectorEntry$MH_; }

    static final FunctionDescriptor SetThreadExecutionState$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetThreadExecutionState$FUNC() { return SetThreadExecutionState$FUNC_; }

    static final MethodHandle SetThreadExecutionState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadExecutionState",
        "(I)I",
        SetThreadExecutionState$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetThreadExecutionState$MH() { return SetThreadExecutionState$MH_; }

    static final FunctionDescriptor PowerCreateRequest$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PowerCreateRequest$FUNC() { return PowerCreateRequest$FUNC_; }

    static final MethodHandle PowerCreateRequest$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PowerCreateRequest",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        PowerCreateRequest$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PowerCreateRequest$MH() { return PowerCreateRequest$MH_; }

    static final FunctionDescriptor PowerSetRequest$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor PowerSetRequest$FUNC() { return PowerSetRequest$FUNC_; }

    static final MethodHandle PowerSetRequest$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PowerSetRequest",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        PowerSetRequest$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PowerSetRequest$MH() { return PowerSetRequest$MH_; }

    static final FunctionDescriptor PowerClearRequest$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor PowerClearRequest$FUNC() { return PowerClearRequest$FUNC_; }

    static final MethodHandle PowerClearRequest$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PowerClearRequest",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        PowerClearRequest$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PowerClearRequest$MH() { return PowerClearRequest$MH_; }

    static final FunctionDescriptor SetFileCompletionNotificationModes$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetFileCompletionNotificationModes$FUNC() { return SetFileCompletionNotificationModes$FUNC_; }

    static final MethodHandle SetFileCompletionNotificationModes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileCompletionNotificationModes",
        "(Ljdk/incubator/foreign/MemoryAddress;B)I",
        SetFileCompletionNotificationModes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetFileCompletionNotificationModes$MH() { return SetFileCompletionNotificationModes$MH_; }

    static final FunctionDescriptor Wow64GetThreadSelectorEntry$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor Wow64GetThreadSelectorEntry$FUNC() { return Wow64GetThreadSelectorEntry$FUNC_; }

    static final MethodHandle Wow64GetThreadSelectorEntry$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Wow64GetThreadSelectorEntry",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        Wow64GetThreadSelectorEntry$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle Wow64GetThreadSelectorEntry$MH() { return Wow64GetThreadSelectorEntry$MH_; }

    static final FunctionDescriptor DebugSetProcessKillOnExit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor DebugSetProcessKillOnExit$FUNC() { return DebugSetProcessKillOnExit$FUNC_; }

    static final MethodHandle DebugSetProcessKillOnExit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DebugSetProcessKillOnExit",
        "(I)I",
        DebugSetProcessKillOnExit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DebugSetProcessKillOnExit$MH() { return DebugSetProcessKillOnExit$MH_; }

    static final FunctionDescriptor DebugBreakProcess$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DebugBreakProcess$FUNC() { return DebugBreakProcess$FUNC_; }

    static final MethodHandle DebugBreakProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DebugBreakProcess",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DebugBreakProcess$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DebugBreakProcess$MH() { return DebugBreakProcess$MH_; }

    static final FunctionDescriptor PulseEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PulseEvent$FUNC() { return PulseEvent$FUNC_; }

    static final MethodHandle PulseEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PulseEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        PulseEvent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PulseEvent$MH() { return PulseEvent$MH_; }

    static final FunctionDescriptor GlobalDeleteAtom$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GlobalDeleteAtom$FUNC() { return GlobalDeleteAtom$FUNC_; }

    static final MethodHandle GlobalDeleteAtom$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GlobalDeleteAtom",
        "(S)S",
        GlobalDeleteAtom$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GlobalDeleteAtom$MH() { return GlobalDeleteAtom$MH_; }

    static final FunctionDescriptor InitAtomTable$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor InitAtomTable$FUNC() { return InitAtomTable$FUNC_; }

    static final MethodHandle InitAtomTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitAtomTable",
        "(I)I",
        InitAtomTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InitAtomTable$MH() { return InitAtomTable$MH_; }

    static final FunctionDescriptor DeleteAtom$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor DeleteAtom$FUNC() { return DeleteAtom$FUNC_; }

    static final MethodHandle DeleteAtom$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteAtom",
        "(S)S",
        DeleteAtom$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DeleteAtom$MH() { return DeleteAtom$MH_; }

    static final FunctionDescriptor SetHandleCount$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetHandleCount$FUNC() { return SetHandleCount$FUNC_; }

    static final MethodHandle SetHandleCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetHandleCount",
        "(I)I",
        SetHandleCount$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetHandleCount$MH() { return SetHandleCount$MH_; }

    static final FunctionDescriptor RequestDeviceWakeup$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RequestDeviceWakeup$FUNC() { return RequestDeviceWakeup$FUNC_; }

    static final MethodHandle RequestDeviceWakeup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RequestDeviceWakeup",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RequestDeviceWakeup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RequestDeviceWakeup$MH() { return RequestDeviceWakeup$MH_; }

    static final FunctionDescriptor CancelDeviceWakeupRequest$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CancelDeviceWakeupRequest$FUNC() { return CancelDeviceWakeupRequest$FUNC_; }

    static final MethodHandle CancelDeviceWakeupRequest$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CancelDeviceWakeupRequest",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CancelDeviceWakeupRequest$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CancelDeviceWakeupRequest$MH() { return CancelDeviceWakeupRequest$MH_; }

    static final FunctionDescriptor GetDevicePowerState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetDevicePowerState$FUNC() { return GetDevicePowerState$FUNC_; }

    static final MethodHandle GetDevicePowerState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDevicePowerState",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDevicePowerState$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDevicePowerState$MH() { return GetDevicePowerState$MH_; }

    static final FunctionDescriptor SetMessageWaitingIndicator$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetMessageWaitingIndicator$FUNC() { return SetMessageWaitingIndicator$FUNC_; }

    static final MethodHandle SetMessageWaitingIndicator$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMessageWaitingIndicator",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetMessageWaitingIndicator$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetMessageWaitingIndicator$MH() { return SetMessageWaitingIndicator$MH_; }

    static final FunctionDescriptor SetFileShortNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetFileShortNameA$FUNC() { return SetFileShortNameA$FUNC_; }

    static final MethodHandle SetFileShortNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileShortNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetFileShortNameA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetFileShortNameA$MH() { return SetFileShortNameA$MH_; }

    static final FunctionDescriptor SetFileShortNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetFileShortNameW$FUNC() { return SetFileShortNameW$FUNC_; }

    static final MethodHandle SetFileShortNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetFileShortNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetFileShortNameW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetFileShortNameW$MH() { return SetFileShortNameW$MH_; }

    static final FunctionDescriptor LoadModule$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LoadModule$FUNC() { return LoadModule$FUNC_; }

    static final MethodHandle LoadModule$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadModule",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LoadModule$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LoadModule$MH() { return LoadModule$MH_; }

    static final FunctionDescriptor WinExec$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WinExec$FUNC() { return WinExec$FUNC_; }

    static final MethodHandle WinExec$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WinExec",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        WinExec$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WinExec$MH() { return WinExec$MH_; }

    static final FunctionDescriptor ClearCommBreak$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ClearCommBreak$FUNC() { return ClearCommBreak$FUNC_; }

    static final MethodHandle ClearCommBreak$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ClearCommBreak",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ClearCommBreak$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ClearCommBreak$MH() { return ClearCommBreak$MH_; }

    static final FunctionDescriptor ClearCommError$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ClearCommError$FUNC() { return ClearCommError$FUNC_; }

    static final MethodHandle ClearCommError$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ClearCommError",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ClearCommError$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ClearCommError$MH() { return ClearCommError$MH_; }

    static final FunctionDescriptor SetupComm$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetupComm$FUNC() { return SetupComm$FUNC_; }

    static final MethodHandle SetupComm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetupComm",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetupComm$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetupComm$MH() { return SetupComm$MH_; }

    static final FunctionDescriptor EscapeCommFunction$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EscapeCommFunction$FUNC() { return EscapeCommFunction$FUNC_; }

    static final MethodHandle EscapeCommFunction$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EscapeCommFunction",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        EscapeCommFunction$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EscapeCommFunction$MH() { return EscapeCommFunction$MH_; }

    static final FunctionDescriptor GetCommConfig$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCommConfig$FUNC() { return GetCommConfig$FUNC_; }

    static final MethodHandle GetCommConfig$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommConfig",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCommConfig$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCommConfig$MH() { return GetCommConfig$MH_; }

    static final FunctionDescriptor GetCommMask$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCommMask$FUNC() { return GetCommMask$FUNC_; }

    static final MethodHandle GetCommMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommMask",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCommMask$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCommMask$MH() { return GetCommMask$MH_; }

    static final FunctionDescriptor GetCommProperties$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCommProperties$FUNC() { return GetCommProperties$FUNC_; }

    static final MethodHandle GetCommProperties$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommProperties",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCommProperties$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCommProperties$MH() { return GetCommProperties$MH_; }

    static final FunctionDescriptor GetCommModemStatus$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCommModemStatus$FUNC() { return GetCommModemStatus$FUNC_; }

    static final MethodHandle GetCommModemStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommModemStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCommModemStatus$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCommModemStatus$MH() { return GetCommModemStatus$MH_; }

    static final FunctionDescriptor GetCommState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCommState$FUNC() { return GetCommState$FUNC_; }

    static final MethodHandle GetCommState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommState",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCommState$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCommState$MH() { return GetCommState$MH_; }

    static final FunctionDescriptor GetCommTimeouts$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCommTimeouts$FUNC() { return GetCommTimeouts$FUNC_; }

    static final MethodHandle GetCommTimeouts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommTimeouts",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCommTimeouts$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCommTimeouts$MH() { return GetCommTimeouts$MH_; }

    static final FunctionDescriptor PurgeComm$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor PurgeComm$FUNC() { return PurgeComm$FUNC_; }

    static final MethodHandle PurgeComm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PurgeComm",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        PurgeComm$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PurgeComm$MH() { return PurgeComm$MH_; }

    static final FunctionDescriptor SetCommBreak$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetCommBreak$FUNC() { return SetCommBreak$FUNC_; }

    static final MethodHandle SetCommBreak$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCommBreak",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetCommBreak$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetCommBreak$MH() { return SetCommBreak$MH_; }

    static final FunctionDescriptor SetCommConfig$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetCommConfig$FUNC() { return SetCommConfig$FUNC_; }

    static final MethodHandle SetCommConfig$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCommConfig",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetCommConfig$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetCommConfig$MH() { return SetCommConfig$MH_; }

    static final FunctionDescriptor SetCommMask$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetCommMask$FUNC() { return SetCommMask$FUNC_; }

    static final MethodHandle SetCommMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCommMask",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetCommMask$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetCommMask$MH() { return SetCommMask$MH_; }

    static final FunctionDescriptor SetCommState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetCommState$FUNC() { return SetCommState$FUNC_; }

    static final MethodHandle SetCommState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCommState",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetCommState$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetCommState$MH() { return SetCommState$MH_; }

    static final FunctionDescriptor SetCommTimeouts$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetCommTimeouts$FUNC() { return SetCommTimeouts$FUNC_; }

    static final MethodHandle SetCommTimeouts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCommTimeouts",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetCommTimeouts$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetCommTimeouts$MH() { return SetCommTimeouts$MH_; }

    static final FunctionDescriptor TransmitCommChar$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor TransmitCommChar$FUNC() { return TransmitCommChar$FUNC_; }

    static final MethodHandle TransmitCommChar$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TransmitCommChar",
        "(Ljdk/incubator/foreign/MemoryAddress;B)I",
        TransmitCommChar$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TransmitCommChar$MH() { return TransmitCommChar$MH_; }

    static final FunctionDescriptor WaitCommEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WaitCommEvent$FUNC() { return WaitCommEvent$FUNC_; }

    static final MethodHandle WaitCommEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WaitCommEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WaitCommEvent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WaitCommEvent$MH() { return WaitCommEvent$MH_; }

    static final FunctionDescriptor OpenCommPort$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor OpenCommPort$FUNC() { return OpenCommPort$FUNC_; }

    static final MethodHandle OpenCommPort$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OpenCommPort",
        "(III)Ljdk/incubator/foreign/MemoryAddress;",
        OpenCommPort$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OpenCommPort$MH() { return OpenCommPort$MH_; }

    static final FunctionDescriptor GetCommPorts$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCommPorts$FUNC() { return GetCommPorts$FUNC_; }

    static final MethodHandle GetCommPorts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCommPorts",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetCommPorts$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCommPorts$MH() { return GetCommPorts$MH_; }

    static final FunctionDescriptor SetTapePosition$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetTapePosition$FUNC() { return SetTapePosition$FUNC_; }

    static final MethodHandle SetTapePosition$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetTapePosition",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIII)I",
        SetTapePosition$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetTapePosition$MH() { return SetTapePosition$MH_; }

}

