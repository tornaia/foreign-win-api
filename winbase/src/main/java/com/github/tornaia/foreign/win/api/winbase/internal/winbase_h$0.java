// Generated by jextract

package com.github.tornaia.foreign.win.api.winbase.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class winbase_h$0 {

    /* package-private */ winbase_h$0() {}
    public static @C("BOOL") int CopyFileTransactedW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("LPBOOL") Addressable pbCancel, @C("DWORD") int dwCopyFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.CopyFileTransactedW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), pbCancel.address(), dwCopyFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int COPYFILE2_CALLBACK_NONE() {
        return winbase_h$constants$1.COPYFILE2_CALLBACK_NONE();
    }
    public static @C("int") int COPYFILE2_CALLBACK_CHUNK_STARTED() {
        return winbase_h$constants$1.COPYFILE2_CALLBACK_CHUNK_STARTED();
    }
    public static @C("int") int COPYFILE2_CALLBACK_CHUNK_FINISHED() {
        return winbase_h$constants$1.COPYFILE2_CALLBACK_CHUNK_FINISHED();
    }
    public static @C("int") int COPYFILE2_CALLBACK_STREAM_STARTED() {
        return winbase_h$constants$1.COPYFILE2_CALLBACK_STREAM_STARTED();
    }
    public static @C("int") int COPYFILE2_CALLBACK_STREAM_FINISHED() {
        return winbase_h$constants$1.COPYFILE2_CALLBACK_STREAM_FINISHED();
    }
    public static @C("int") int COPYFILE2_CALLBACK_POLL_CONTINUE() {
        return winbase_h$constants$1.COPYFILE2_CALLBACK_POLL_CONTINUE();
    }
    public static @C("int") int COPYFILE2_CALLBACK_ERROR() {
        return winbase_h$constants$1.COPYFILE2_CALLBACK_ERROR();
    }
    public static @C("int") int COPYFILE2_CALLBACK_MAX() {
        return winbase_h$constants$1.COPYFILE2_CALLBACK_MAX();
    }
    public static @C("int") int COPYFILE2_PROGRESS_CONTINUE() {
        return winbase_h$constants$1.COPYFILE2_PROGRESS_CONTINUE();
    }
    public static @C("int") int COPYFILE2_PROGRESS_CANCEL() {
        return winbase_h$constants$1.COPYFILE2_PROGRESS_CANCEL();
    }
    public static @C("int") int COPYFILE2_PROGRESS_STOP() {
        return winbase_h$constants$1.COPYFILE2_PROGRESS_STOP();
    }
    public static @C("int") int COPYFILE2_PROGRESS_QUIET() {
        return winbase_h$constants$1.COPYFILE2_PROGRESS_QUIET();
    }
    public static @C("int") int COPYFILE2_PROGRESS_PAUSE() {
        return winbase_h$constants$1.COPYFILE2_PROGRESS_PAUSE();
    }
    public static @C("int") int COPYFILE2_PHASE_NONE() {
        return winbase_h$constants$1.COPYFILE2_PHASE_NONE();
    }
    public static @C("int") int COPYFILE2_PHASE_PREPARE_SOURCE() {
        return winbase_h$constants$1.COPYFILE2_PHASE_PREPARE_SOURCE();
    }
    public static @C("int") int COPYFILE2_PHASE_PREPARE_DEST() {
        return winbase_h$constants$1.COPYFILE2_PHASE_PREPARE_DEST();
    }
    public static @C("int") int COPYFILE2_PHASE_READ_SOURCE() {
        return winbase_h$constants$1.COPYFILE2_PHASE_READ_SOURCE();
    }
    public static @C("int") int COPYFILE2_PHASE_WRITE_DESTINATION() {
        return winbase_h$constants$1.COPYFILE2_PHASE_WRITE_DESTINATION();
    }
    public static @C("int") int COPYFILE2_PHASE_SERVER_COPY() {
        return winbase_h$constants$1.COPYFILE2_PHASE_SERVER_COPY();
    }
    public static @C("int") int COPYFILE2_PHASE_NAMEGRAFT_COPY() {
        return winbase_h$constants$1.COPYFILE2_PHASE_NAMEGRAFT_COPY();
    }
    public static @C("int") int COPYFILE2_PHASE_MAX() {
        return winbase_h$constants$1.COPYFILE2_PHASE_MAX();
    }
    public static  MethodHandle CopyFile2$MH() {
        return winbase_h$constants$1.CopyFile2$MH();
    }
    public static @C("HRESULT") int CopyFile2 (@C("PCWSTR") Addressable pwszExistingFileName, @C("PCWSTR") Addressable pwszNewFileName, @C("COPYFILE2_EXTENDED_PARAMETERS*") Addressable pExtendedParameters) {
        try {
            return (int)winbase_h$constants$1.CopyFile2$MH().invokeExact(pwszExistingFileName.address(), pwszNewFileName.address(), pExtendedParameters.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileA$MH() {
        return winbase_h$constants$1.MoveFileA$MH();
    }
    public static @C("BOOL") int MoveFileA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName) {
        try {
            return (int)winbase_h$constants$1.MoveFileA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileW$MH() {
        return winbase_h$constants$1.MoveFileW$MH();
    }
    public static @C("BOOL") int MoveFileW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName) {
        try {
            return (int)winbase_h$constants$1.MoveFileW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileExA$MH() {
        return winbase_h$constants$1.MoveFileExA$MH();
    }
    public static @C("BOOL") int MoveFileExA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName, @C("DWORD") int dwFlags) {
        try {
            return (int)winbase_h$constants$1.MoveFileExA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileExW$MH() {
        return winbase_h$constants$1.MoveFileExW$MH();
    }
    public static @C("BOOL") int MoveFileExW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("DWORD") int dwFlags) {
        try {
            return (int)winbase_h$constants$1.MoveFileExW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileWithProgressA$MH() {
        return winbase_h$constants$1.MoveFileWithProgressA$MH();
    }
    public static @C("BOOL") int MoveFileWithProgressA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("DWORD") int dwFlags) {
        try {
            return (int)winbase_h$constants$1.MoveFileWithProgressA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileWithProgressW$MH() {
        return winbase_h$constants$1.MoveFileWithProgressW$MH();
    }
    public static @C("BOOL") int MoveFileWithProgressW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("DWORD") int dwFlags) {
        try {
            return (int)winbase_h$constants$1.MoveFileWithProgressW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileTransactedA$MH() {
        return winbase_h$constants$1.MoveFileTransactedA$MH();
    }
    public static @C("BOOL") int MoveFileTransactedA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("DWORD") int dwFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.MoveFileTransactedA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), dwFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileTransactedW$MH() {
        return winbase_h$constants$1.MoveFileTransactedW$MH();
    }
    public static @C("BOOL") int MoveFileTransactedW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("DWORD") int dwFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.MoveFileTransactedW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), dwFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReplaceFileA$MH() {
        return winbase_h$constants$1.ReplaceFileA$MH();
    }
    public static @C("BOOL") int ReplaceFileA (@C("LPCSTR") Addressable lpReplacedFileName, @C("LPCSTR") Addressable lpReplacementFileName, @C("LPCSTR") Addressable lpBackupFileName, @C("DWORD") int dwReplaceFlags, @C("LPVOID") Addressable lpExclude, @C("LPVOID") Addressable lpReserved) {
        try {
            return (int)winbase_h$constants$1.ReplaceFileA$MH().invokeExact(lpReplacedFileName.address(), lpReplacementFileName.address(), lpBackupFileName.address(), dwReplaceFlags, lpExclude.address(), lpReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReplaceFileW$MH() {
        return winbase_h$constants$1.ReplaceFileW$MH();
    }
    public static @C("BOOL") int ReplaceFileW (@C("LPCWSTR") Addressable lpReplacedFileName, @C("LPCWSTR") Addressable lpReplacementFileName, @C("LPCWSTR") Addressable lpBackupFileName, @C("DWORD") int dwReplaceFlags, @C("LPVOID") Addressable lpExclude, @C("LPVOID") Addressable lpReserved) {
        try {
            return (int)winbase_h$constants$1.ReplaceFileW$MH().invokeExact(lpReplacedFileName.address(), lpReplacementFileName.address(), lpBackupFileName.address(), dwReplaceFlags, lpExclude.address(), lpReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateHardLinkA$MH() {
        return winbase_h$constants$1.CreateHardLinkA$MH();
    }
    public static @C("BOOL") int CreateHardLinkA (@C("LPCSTR") Addressable lpFileName, @C("LPCSTR") Addressable lpExistingFileName, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)winbase_h$constants$1.CreateHardLinkA$MH().invokeExact(lpFileName.address(), lpExistingFileName.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateHardLinkW$MH() {
        return winbase_h$constants$1.CreateHardLinkW$MH();
    }
    public static @C("BOOL") int CreateHardLinkW (@C("LPCWSTR") Addressable lpFileName, @C("LPCWSTR") Addressable lpExistingFileName, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)winbase_h$constants$1.CreateHardLinkW$MH().invokeExact(lpFileName.address(), lpExistingFileName.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateHardLinkTransactedA$MH() {
        return winbase_h$constants$1.CreateHardLinkTransactedA$MH();
    }
    public static @C("BOOL") int CreateHardLinkTransactedA (@C("LPCSTR") Addressable lpFileName, @C("LPCSTR") Addressable lpExistingFileName, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.CreateHardLinkTransactedA$MH().invokeExact(lpFileName.address(), lpExistingFileName.address(), lpSecurityAttributes.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateHardLinkTransactedW$MH() {
        return winbase_h$constants$1.CreateHardLinkTransactedW$MH();
    }
    public static @C("BOOL") int CreateHardLinkTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("LPCWSTR") Addressable lpExistingFileName, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)winbase_h$constants$1.CreateHardLinkTransactedW$MH().invokeExact(lpFileName.address(), lpExistingFileName.address(), lpSecurityAttributes.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstStreamTransactedW$MH() {
        return winbase_h$constants$1.FindFirstStreamTransactedW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstStreamTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("STREAM_INFO_LEVELS") int InfoLevel, @C("LPVOID") Addressable lpFindStreamData, @C("DWORD") int dwFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.FindFirstStreamTransactedW$MH().invokeExact(lpFileName.address(), InfoLevel, lpFindStreamData.address(), dwFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFileNameTransactedW$MH() {
        return winbase_h$constants$1.FindFirstFileNameTransactedW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstFileNameTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwFlags, @C("LPDWORD") Addressable StringLength, @C("PWSTR") Addressable LinkName, @C("HANDLE") Addressable hTransaction) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.FindFirstFileNameTransactedW$MH().invokeExact(lpFileName.address(), dwFlags, StringLength.address(), LinkName.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateNamedPipeA$MH() {
        return winbase_h$constants$1.CreateNamedPipeA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateNamedPipeA (@C("LPCSTR") Addressable lpName, @C("DWORD") int dwOpenMode, @C("DWORD") int dwPipeMode, @C("DWORD") int nMaxInstances, @C("DWORD") int nOutBufferSize, @C("DWORD") int nInBufferSize, @C("DWORD") int nDefaultTimeOut, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateNamedPipeA$MH().invokeExact(lpName.address(), dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeHandleStateA$MH() {
        return winbase_h$constants$1.GetNamedPipeHandleStateA$MH();
    }
    public static @C("BOOL") int GetNamedPipeHandleStateA (@C("HANDLE") Addressable hNamedPipe, @C("LPDWORD") Addressable lpState, @C("LPDWORD") Addressable lpCurInstances, @C("LPDWORD") Addressable lpMaxCollectionCount, @C("LPDWORD") Addressable lpCollectDataTimeout, @C("LPSTR") Addressable lpUserName, @C("DWORD") int nMaxUserNameSize) {
        try {
            return (int)winbase_h$constants$1.GetNamedPipeHandleStateA$MH().invokeExact(hNamedPipe.address(), lpState.address(), lpCurInstances.address(), lpMaxCollectionCount.address(), lpCollectDataTimeout.address(), lpUserName.address(), nMaxUserNameSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CallNamedPipeA$MH() {
        return winbase_h$constants$1.CallNamedPipeA$MH();
    }
    public static @C("BOOL") int CallNamedPipeA (@C("LPCSTR") Addressable lpNamedPipeName, @C("LPVOID") Addressable lpInBuffer, @C("DWORD") int nInBufferSize, @C("LPVOID") Addressable lpOutBuffer, @C("DWORD") int nOutBufferSize, @C("LPDWORD") Addressable lpBytesRead, @C("DWORD") int nTimeOut) {
        try {
            return (int)winbase_h$constants$1.CallNamedPipeA$MH().invokeExact(lpNamedPipeName.address(), lpInBuffer.address(), nInBufferSize, lpOutBuffer.address(), nOutBufferSize, lpBytesRead.address(), nTimeOut);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitNamedPipeA$MH() {
        return winbase_h$constants$1.WaitNamedPipeA$MH();
    }
    public static @C("BOOL") int WaitNamedPipeA (@C("LPCSTR") Addressable lpNamedPipeName, @C("DWORD") int nTimeOut) {
        try {
            return (int)winbase_h$constants$1.WaitNamedPipeA$MH().invokeExact(lpNamedPipeName.address(), nTimeOut);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeClientComputerNameA$MH() {
        return winbase_h$constants$1.GetNamedPipeClientComputerNameA$MH();
    }
    public static @C("BOOL") int GetNamedPipeClientComputerNameA (@C("HANDLE") Addressable Pipe, @C("LPSTR") Addressable ClientComputerName, @C("ULONG") int ClientComputerNameLength) {
        try {
            return (int)winbase_h$constants$1.GetNamedPipeClientComputerNameA$MH().invokeExact(Pipe.address(), ClientComputerName.address(), ClientComputerNameLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeClientProcessId$MH() {
        return winbase_h$constants$1.GetNamedPipeClientProcessId$MH();
    }
    public static @C("BOOL") int GetNamedPipeClientProcessId (@C("HANDLE") Addressable Pipe, @C("PULONG") Addressable ClientProcessId) {
        try {
            return (int)winbase_h$constants$1.GetNamedPipeClientProcessId$MH().invokeExact(Pipe.address(), ClientProcessId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeClientSessionId$MH() {
        return winbase_h$constants$1.GetNamedPipeClientSessionId$MH();
    }
    public static @C("BOOL") int GetNamedPipeClientSessionId (@C("HANDLE") Addressable Pipe, @C("PULONG") Addressable ClientSessionId) {
        try {
            return (int)winbase_h$constants$1.GetNamedPipeClientSessionId$MH().invokeExact(Pipe.address(), ClientSessionId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeServerProcessId$MH() {
        return winbase_h$constants$1.GetNamedPipeServerProcessId$MH();
    }
    public static @C("BOOL") int GetNamedPipeServerProcessId (@C("HANDLE") Addressable Pipe, @C("PULONG") Addressable ServerProcessId) {
        try {
            return (int)winbase_h$constants$1.GetNamedPipeServerProcessId$MH().invokeExact(Pipe.address(), ServerProcessId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeServerSessionId$MH() {
        return winbase_h$constants$1.GetNamedPipeServerSessionId$MH();
    }
    public static @C("BOOL") int GetNamedPipeServerSessionId (@C("HANDLE") Addressable Pipe, @C("PULONG") Addressable ServerSessionId) {
        try {
            return (int)winbase_h$constants$1.GetNamedPipeServerSessionId$MH().invokeExact(Pipe.address(), ServerSessionId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetVolumeLabelA$MH() {
        return winbase_h$constants$1.SetVolumeLabelA$MH();
    }
    public static @C("BOOL") int SetVolumeLabelA (@C("LPCSTR") Addressable lpRootPathName, @C("LPCSTR") Addressable lpVolumeName) {
        try {
            return (int)winbase_h$constants$1.SetVolumeLabelA$MH().invokeExact(lpRootPathName.address(), lpVolumeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetVolumeLabelW$MH() {
        return winbase_h$constants$1.SetVolumeLabelW$MH();
    }
    public static @C("BOOL") int SetVolumeLabelW (@C("LPCWSTR") Addressable lpRootPathName, @C("LPCWSTR") Addressable lpVolumeName) {
        try {
            return (int)winbase_h$constants$1.SetVolumeLabelW$MH().invokeExact(lpRootPathName.address(), lpVolumeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileBandwidthReservation$MH() {
        return winbase_h$constants$1.SetFileBandwidthReservation$MH();
    }
    public static @C("BOOL") int SetFileBandwidthReservation (@C("HANDLE") Addressable hFile, @C("DWORD") int nPeriodMilliseconds, @C("DWORD") int nBytesPerPeriod, @C("BOOL") int bDiscardable, @C("LPDWORD") Addressable lpTransferSize, @C("LPDWORD") Addressable lpNumOutstandingRequests) {
        try {
            return (int)winbase_h$constants$1.SetFileBandwidthReservation$MH().invokeExact(hFile.address(), nPeriodMilliseconds, nBytesPerPeriod, bDiscardable, lpTransferSize.address(), lpNumOutstandingRequests.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileBandwidthReservation$MH() {
        return winbase_h$constants$1.GetFileBandwidthReservation$MH();
    }
    public static @C("BOOL") int GetFileBandwidthReservation (@C("HANDLE") Addressable hFile, @C("LPDWORD") Addressable lpPeriodMilliseconds, @C("LPDWORD") Addressable lpBytesPerPeriod, @C("LPBOOL") Addressable pDiscardable, @C("LPDWORD") Addressable lpTransferSize, @C("LPDWORD") Addressable lpNumOutstandingRequests) {
        try {
            return (int)winbase_h$constants$1.GetFileBandwidthReservation$MH().invokeExact(hFile.address(), lpPeriodMilliseconds.address(), lpBytesPerPeriod.address(), pDiscardable.address(), lpTransferSize.address(), lpNumOutstandingRequests.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ClearEventLogA$MH() {
        return winbase_h$constants$1.ClearEventLogA$MH();
    }
    public static @C("BOOL") int ClearEventLogA (@C("HANDLE") Addressable hEventLog, @C("LPCSTR") Addressable lpBackupFileName) {
        try {
            return (int)winbase_h$constants$1.ClearEventLogA$MH().invokeExact(hEventLog.address(), lpBackupFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ClearEventLogW$MH() {
        return winbase_h$constants$1.ClearEventLogW$MH();
    }
    public static @C("BOOL") int ClearEventLogW (@C("HANDLE") Addressable hEventLog, @C("LPCWSTR") Addressable lpBackupFileName) {
        try {
            return (int)winbase_h$constants$1.ClearEventLogW$MH().invokeExact(hEventLog.address(), lpBackupFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BackupEventLogA$MH() {
        return winbase_h$constants$1.BackupEventLogA$MH();
    }
    public static @C("BOOL") int BackupEventLogA (@C("HANDLE") Addressable hEventLog, @C("LPCSTR") Addressable lpBackupFileName) {
        try {
            return (int)winbase_h$constants$1.BackupEventLogA$MH().invokeExact(hEventLog.address(), lpBackupFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BackupEventLogW$MH() {
        return winbase_h$constants$1.BackupEventLogW$MH();
    }
    public static @C("BOOL") int BackupEventLogW (@C("HANDLE") Addressable hEventLog, @C("LPCWSTR") Addressable lpBackupFileName) {
        try {
            return (int)winbase_h$constants$1.BackupEventLogW$MH().invokeExact(hEventLog.address(), lpBackupFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseEventLog$MH() {
        return winbase_h$constants$1.CloseEventLog$MH();
    }
    public static @C("BOOL") int CloseEventLog (@C("HANDLE") Addressable hEventLog) {
        try {
            return (int)winbase_h$constants$1.CloseEventLog$MH().invokeExact(hEventLog.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeregisterEventSource$MH() {
        return winbase_h$constants$1.DeregisterEventSource$MH();
    }
    public static @C("BOOL") int DeregisterEventSource (@C("HANDLE") Addressable hEventLog) {
        try {
            return (int)winbase_h$constants$1.DeregisterEventSource$MH().invokeExact(hEventLog.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NotifyChangeEventLog$MH() {
        return winbase_h$constants$1.NotifyChangeEventLog$MH();
    }
    public static @C("BOOL") int NotifyChangeEventLog (@C("HANDLE") Addressable hEventLog, @C("HANDLE") Addressable hEvent) {
        try {
            return (int)winbase_h$constants$1.NotifyChangeEventLog$MH().invokeExact(hEventLog.address(), hEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumberOfEventLogRecords$MH() {
        return winbase_h$constants$1.GetNumberOfEventLogRecords$MH();
    }
    public static @C("BOOL") int GetNumberOfEventLogRecords (@C("HANDLE") Addressable hEventLog, @C("PDWORD") Addressable NumberOfRecords) {
        try {
            return (int)winbase_h$constants$1.GetNumberOfEventLogRecords$MH().invokeExact(hEventLog.address(), NumberOfRecords.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetOldestEventLogRecord$MH() {
        return winbase_h$constants$1.GetOldestEventLogRecord$MH();
    }
    public static @C("BOOL") int GetOldestEventLogRecord (@C("HANDLE") Addressable hEventLog, @C("PDWORD") Addressable OldestRecord) {
        try {
            return (int)winbase_h$constants$1.GetOldestEventLogRecord$MH().invokeExact(hEventLog.address(), OldestRecord.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenEventLogA$MH() {
        return winbase_h$constants$1.OpenEventLogA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenEventLogA (@C("LPCSTR") Addressable lpUNCServerName, @C("LPCSTR") Addressable lpSourceName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.OpenEventLogA$MH().invokeExact(lpUNCServerName.address(), lpSourceName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenEventLogW$MH() {
        return winbase_h$constants$1.OpenEventLogW$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenEventLogW (@C("LPCWSTR") Addressable lpUNCServerName, @C("LPCWSTR") Addressable lpSourceName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.OpenEventLogW$MH().invokeExact(lpUNCServerName.address(), lpSourceName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterEventSourceA$MH() {
        return winbase_h$constants$1.RegisterEventSourceA$MH();
    }
    public static @C("HANDLE") MemoryAddress RegisterEventSourceA (@C("LPCSTR") Addressable lpUNCServerName, @C("LPCSTR") Addressable lpSourceName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.RegisterEventSourceA$MH().invokeExact(lpUNCServerName.address(), lpSourceName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterEventSourceW$MH() {
        return winbase_h$constants$1.RegisterEventSourceW$MH();
    }
    public static @C("HANDLE") MemoryAddress RegisterEventSourceW (@C("LPCWSTR") Addressable lpUNCServerName, @C("LPCWSTR") Addressable lpSourceName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.RegisterEventSourceW$MH().invokeExact(lpUNCServerName.address(), lpSourceName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenBackupEventLogA$MH() {
        return winbase_h$constants$1.OpenBackupEventLogA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenBackupEventLogA (@C("LPCSTR") Addressable lpUNCServerName, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.OpenBackupEventLogA$MH().invokeExact(lpUNCServerName.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenBackupEventLogW$MH() {
        return winbase_h$constants$1.OpenBackupEventLogW$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenBackupEventLogW (@C("LPCWSTR") Addressable lpUNCServerName, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.OpenBackupEventLogW$MH().invokeExact(lpUNCServerName.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadEventLogA$MH() {
        return winbase_h$constants$1.ReadEventLogA$MH();
    }
    public static @C("BOOL") int ReadEventLogA (@C("HANDLE") Addressable hEventLog, @C("DWORD") int dwReadFlags, @C("DWORD") int dwRecordOffset, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nNumberOfBytesToRead, @C("DWORD*") Addressable pnBytesRead, @C("DWORD*") Addressable pnMinNumberOfBytesNeeded) {
        try {
            return (int)winbase_h$constants$1.ReadEventLogA$MH().invokeExact(hEventLog.address(), dwReadFlags, dwRecordOffset, lpBuffer.address(), nNumberOfBytesToRead, pnBytesRead.address(), pnMinNumberOfBytesNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadEventLogW$MH() {
        return winbase_h$constants$1.ReadEventLogW$MH();
    }
    public static @C("BOOL") int ReadEventLogW (@C("HANDLE") Addressable hEventLog, @C("DWORD") int dwReadFlags, @C("DWORD") int dwRecordOffset, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nNumberOfBytesToRead, @C("DWORD*") Addressable pnBytesRead, @C("DWORD*") Addressable pnMinNumberOfBytesNeeded) {
        try {
            return (int)winbase_h$constants$1.ReadEventLogW$MH().invokeExact(hEventLog.address(), dwReadFlags, dwRecordOffset, lpBuffer.address(), nNumberOfBytesToRead, pnBytesRead.address(), pnMinNumberOfBytesNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReportEventA$MH() {
        return winbase_h$constants$1.ReportEventA$MH();
    }
    public static @C("BOOL") int ReportEventA (@C("HANDLE") Addressable hEventLog, @C("WORD") short wType, @C("WORD") short wCategory, @C("DWORD") int dwEventID, @C("PSID") Addressable lpUserSid, @C("WORD") short wNumStrings, @C("DWORD") int dwDataSize, @C("LPCSTR*") Addressable lpStrings, @C("LPVOID") Addressable lpRawData) {
        try {
            return (int)winbase_h$constants$1.ReportEventA$MH().invokeExact(hEventLog.address(), wType, wCategory, dwEventID, lpUserSid.address(), wNumStrings, dwDataSize, lpStrings.address(), lpRawData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReportEventW$MH() {
        return winbase_h$constants$1.ReportEventW$MH();
    }
    public static @C("BOOL") int ReportEventW (@C("HANDLE") Addressable hEventLog, @C("WORD") short wType, @C("WORD") short wCategory, @C("DWORD") int dwEventID, @C("PSID") Addressable lpUserSid, @C("WORD") short wNumStrings, @C("DWORD") int dwDataSize, @C("LPCWSTR*") Addressable lpStrings, @C("LPVOID") Addressable lpRawData) {
        try {
            return (int)winbase_h$constants$1.ReportEventW$MH().invokeExact(hEventLog.address(), wType, wCategory, dwEventID, lpUserSid.address(), wNumStrings, dwDataSize, lpStrings.address(), lpRawData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEventLogInformation$MH() {
        return winbase_h$constants$1.GetEventLogInformation$MH();
    }
    public static @C("BOOL") int GetEventLogInformation (@C("HANDLE") Addressable hEventLog, @C("DWORD") int dwInfoLevel, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int cbBufSize, @C("LPDWORD") Addressable pcbBytesNeeded) {
        try {
            return (int)winbase_h$constants$1.GetEventLogInformation$MH().invokeExact(hEventLog.address(), dwInfoLevel, lpBuffer.address(), cbBufSize, pcbBytesNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OperationStart$MH() {
        return winbase_h$constants$1.OperationStart$MH();
    }
    public static @C("BOOL") int OperationStart (@C("OPERATION_START_PARAMETERS*") Addressable OperationStartParams) {
        try {
            return (int)winbase_h$constants$1.OperationStart$MH().invokeExact(OperationStartParams.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OperationEnd$MH() {
        return winbase_h$constants$1.OperationEnd$MH();
    }
    public static @C("BOOL") int OperationEnd (@C("OPERATION_END_PARAMETERS*") Addressable OperationEndParams) {
        try {
            return (int)winbase_h$constants$1.OperationEnd$MH().invokeExact(OperationEndParams.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckAndAuditAlarmA$MH() {
        return winbase_h$constants$1.AccessCheckAndAuditAlarmA$MH();
    }
    public static @C("BOOL") int AccessCheckAndAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("LPSTR") Addressable ObjectTypeName, @C("LPSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("DWORD") int DesiredAccess, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("BOOL") int ObjectCreation, @C("LPDWORD") Addressable GrantedAccess, @C("LPBOOL") Addressable AccessStatus, @C("LPBOOL") Addressable pfGenerateOnClose) {
        try {
            return (int)winbase_h$constants$1.AccessCheckAndAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), DesiredAccess, GenericMapping.address(), ObjectCreation, GrantedAccess.address(), AccessStatus.address(), pfGenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckByTypeAndAuditAlarmA$MH() {
        return winbase_h$constants$1.AccessCheckByTypeAndAuditAlarmA$MH();
    }
    public static @C("BOOL") int AccessCheckByTypeAndAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("LPCSTR") Addressable ObjectTypeName, @C("LPCSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("PSID") Addressable PrincipalSelfSid, @C("DWORD") int DesiredAccess, @C("AUDIT_EVENT_TYPE") int AuditType, @C("DWORD") int Flags, @C("POBJECT_TYPE_LIST") Addressable ObjectTypeList, @C("DWORD") int ObjectTypeListLength, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("BOOL") int ObjectCreation, @C("LPDWORD") Addressable GrantedAccess, @C("LPBOOL") Addressable AccessStatus, @C("LPBOOL") Addressable pfGenerateOnClose) {
        try {
            return (int)winbase_h$constants$1.AccessCheckByTypeAndAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), PrincipalSelfSid.address(), DesiredAccess, AuditType, Flags, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), ObjectCreation, GrantedAccess.address(), AccessStatus.address(), pfGenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckByTypeResultListAndAuditAlarmA$MH() {
        return winbase_h$constants$1.AccessCheckByTypeResultListAndAuditAlarmA$MH();
    }
    public static @C("BOOL") int AccessCheckByTypeResultListAndAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("LPCSTR") Addressable ObjectTypeName, @C("LPCSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("PSID") Addressable PrincipalSelfSid, @C("DWORD") int DesiredAccess, @C("AUDIT_EVENT_TYPE") int AuditType, @C("DWORD") int Flags, @C("POBJECT_TYPE_LIST") Addressable ObjectTypeList, @C("DWORD") int ObjectTypeListLength, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("BOOL") int ObjectCreation, @C("LPDWORD") Addressable GrantedAccess, @C("LPDWORD") Addressable AccessStatusList, @C("LPBOOL") Addressable pfGenerateOnClose) {
        try {
            return (int)winbase_h$constants$1.AccessCheckByTypeResultListAndAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), PrincipalSelfSid.address(), DesiredAccess, AuditType, Flags, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), ObjectCreation, GrantedAccess.address(), AccessStatusList.address(), pfGenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH() {
        return winbase_h$constants$1.AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH();
    }
    public static @C("BOOL") int AccessCheckByTypeResultListAndAuditAlarmByHandleA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("HANDLE") Addressable ClientToken, @C("LPCSTR") Addressable ObjectTypeName, @C("LPCSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("PSID") Addressable PrincipalSelfSid, @C("DWORD") int DesiredAccess, @C("AUDIT_EVENT_TYPE") int AuditType, @C("DWORD") int Flags, @C("POBJECT_TYPE_LIST") Addressable ObjectTypeList, @C("DWORD") int ObjectTypeListLength, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("BOOL") int ObjectCreation, @C("LPDWORD") Addressable GrantedAccess, @C("LPDWORD") Addressable AccessStatusList, @C("LPBOOL") Addressable pfGenerateOnClose) {
        try {
            return (int)winbase_h$constants$1.AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH().invokeExact(SubsystemName.address(), HandleId.address(), ClientToken.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), PrincipalSelfSid.address(), DesiredAccess, AuditType, Flags, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), ObjectCreation, GrantedAccess.address(), AccessStatusList.address(), pfGenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ObjectOpenAuditAlarmA$MH() {
        return winbase_h$constants$1.ObjectOpenAuditAlarmA$MH();
    }
    public static @C("BOOL") int ObjectOpenAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("LPSTR") Addressable ObjectTypeName, @C("LPSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("HANDLE") Addressable ClientToken, @C("DWORD") int DesiredAccess, @C("DWORD") int GrantedAccess, @C("PPRIVILEGE_SET") Addressable Privileges, @C("BOOL") int ObjectCreation, @C("BOOL") int AccessGranted, @C("LPBOOL") Addressable GenerateOnClose) {
        try {
            return (int)winbase_h$constants$1.ObjectOpenAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), pSecurityDescriptor.address(), ClientToken.address(), DesiredAccess, GrantedAccess, Privileges.address(), ObjectCreation, AccessGranted, GenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ObjectPrivilegeAuditAlarmA$MH() {
        return winbase_h$constants$1.ObjectPrivilegeAuditAlarmA$MH();
    }
    public static @C("BOOL") int ObjectPrivilegeAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("HANDLE") Addressable ClientToken, @C("DWORD") int DesiredAccess, @C("PPRIVILEGE_SET") Addressable Privileges, @C("BOOL") int AccessGranted) {
        try {
            return (int)winbase_h$constants$1.ObjectPrivilegeAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), ClientToken.address(), DesiredAccess, Privileges.address(), AccessGranted);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ObjectCloseAuditAlarmA$MH() {
        return winbase_h$constants$1.ObjectCloseAuditAlarmA$MH();
    }
    public static @C("BOOL") int ObjectCloseAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("BOOL") int GenerateOnClose) {
        try {
            return (int)winbase_h$constants$1.ObjectCloseAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), GenerateOnClose);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ObjectDeleteAuditAlarmA$MH() {
        return winbase_h$constants$1.ObjectDeleteAuditAlarmA$MH();
    }
    public static @C("BOOL") int ObjectDeleteAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("BOOL") int GenerateOnClose) {
        try {
            return (int)winbase_h$constants$1.ObjectDeleteAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), GenerateOnClose);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PrivilegedServiceAuditAlarmA$MH() {
        return winbase_h$constants$1.PrivilegedServiceAuditAlarmA$MH();
    }
    public static @C("BOOL") int PrivilegedServiceAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPCSTR") Addressable ServiceName, @C("HANDLE") Addressable ClientToken, @C("PPRIVILEGE_SET") Addressable Privileges, @C("BOOL") int AccessGranted) {
        try {
            return (int)winbase_h$constants$1.PrivilegedServiceAuditAlarmA$MH().invokeExact(SubsystemName.address(), ServiceName.address(), ClientToken.address(), Privileges.address(), AccessGranted);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddConditionalAce$MH() {
        return winbase_h$constants$1.AddConditionalAce$MH();
    }
    public static @C("BOOL") int AddConditionalAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AceFlags, @C("UCHAR") byte AceType, @C("DWORD") int AccessMask, @C("PSID") Addressable pSid, @C("PWCHAR") Addressable ConditionStr, @C("DWORD*") Addressable ReturnLength) {
        try {
            return (int)winbase_h$constants$1.AddConditionalAce$MH().invokeExact(pAcl.address(), dwAceRevision, AceFlags, AceType, AccessMask, pSid.address(), ConditionStr.address(), ReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileSecurityA$MH() {
        return winbase_h$constants$1.SetFileSecurityA$MH();
    }
    public static @C("BOOL") int SetFileSecurityA (@C("LPCSTR") Addressable lpFileName, @C("SECURITY_INFORMATION") int SecurityInformation, @C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor) {
        try {
            return (int)winbase_h$constants$1.SetFileSecurityA$MH().invokeExact(lpFileName.address(), SecurityInformation, pSecurityDescriptor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileSecurityA$MH() {
        return winbase_h$constants$1.GetFileSecurityA$MH();
    }
    public static @C("BOOL") int GetFileSecurityA (@C("LPCSTR") Addressable lpFileName, @C("SECURITY_INFORMATION") int RequestedInformation, @C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpnLengthNeeded) {
        try {
            return (int)winbase_h$constants$1.GetFileSecurityA$MH().invokeExact(lpFileName.address(), RequestedInformation, pSecurityDescriptor.address(), nLength, lpnLengthNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadDirectoryChangesW$MH() {
        return winbase_h$constants$1.ReadDirectoryChangesW$MH();
    }
    public static @C("BOOL") int ReadDirectoryChangesW (@C("HANDLE") Addressable hDirectory, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nBufferLength, @C("BOOL") int bWatchSubtree, @C("DWORD") int dwNotifyFilter, @C("LPDWORD") Addressable lpBytesReturned, @C("LPOVERLAPPED") Addressable lpOverlapped, @C("LPOVERLAPPED_COMPLETION_ROUTINE") Addressable lpCompletionRoutine) {
        try {
            return (int)winbase_h$constants$1.ReadDirectoryChangesW$MH().invokeExact(hDirectory.address(), lpBuffer.address(), nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned.address(), lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadDirectoryChangesExW$MH() {
        return winbase_h$constants$1.ReadDirectoryChangesExW$MH();
    }
    public static @C("BOOL") int ReadDirectoryChangesExW (@C("HANDLE") Addressable hDirectory, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nBufferLength, @C("BOOL") int bWatchSubtree, @C("DWORD") int dwNotifyFilter, @C("LPDWORD") Addressable lpBytesReturned, @C("LPOVERLAPPED") Addressable lpOverlapped, @C("LPOVERLAPPED_COMPLETION_ROUTINE") Addressable lpCompletionRoutine, @C("READ_DIRECTORY_NOTIFY_INFORMATION_CLASS") int ReadDirectoryNotifyInformationClass) {
        try {
            return (int)winbase_h$constants$1.ReadDirectoryChangesExW$MH().invokeExact(hDirectory.address(), lpBuffer.address(), nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned.address(), lpOverlapped.address(), lpCompletionRoutine.address(), ReadDirectoryNotifyInformationClass);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapViewOfFileExNuma$MH() {
        return winbase_h$constants$1.MapViewOfFileExNuma$MH();
    }
    public static @C("LPVOID") MemoryAddress MapViewOfFileExNuma (@C("HANDLE") Addressable hFileMappingObject, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwFileOffsetHigh, @C("DWORD") int dwFileOffsetLow, @C("SIZE_T") long dwNumberOfBytesToMap, @C("LPVOID") Addressable lpBaseAddress, @C("DWORD") int nndPreferred) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.MapViewOfFileExNuma$MH().invokeExact(hFileMappingObject.address(), dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress.address(), nndPreferred);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadReadPtr$MH() {
        return winbase_h$constants$1.IsBadReadPtr$MH();
    }
    public static @C("BOOL") int IsBadReadPtr (@C("void*") Addressable lp, @C("UINT_PTR") long ucb) {
        try {
            return (int)winbase_h$constants$1.IsBadReadPtr$MH().invokeExact(lp.address(), ucb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadWritePtr$MH() {
        return winbase_h$constants$1.IsBadWritePtr$MH();
    }
    public static @C("BOOL") int IsBadWritePtr (@C("LPVOID") Addressable lp, @C("UINT_PTR") long ucb) {
        try {
            return (int)winbase_h$constants$1.IsBadWritePtr$MH().invokeExact(lp.address(), ucb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadHugeReadPtr$MH() {
        return winbase_h$constants$1.IsBadHugeReadPtr$MH();
    }
    public static @C("BOOL") int IsBadHugeReadPtr (@C("void*") Addressable lp, @C("UINT_PTR") long ucb) {
        try {
            return (int)winbase_h$constants$1.IsBadHugeReadPtr$MH().invokeExact(lp.address(), ucb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadHugeWritePtr$MH() {
        return winbase_h$constants$1.IsBadHugeWritePtr$MH();
    }
    public static @C("BOOL") int IsBadHugeWritePtr (@C("LPVOID") Addressable lp, @C("UINT_PTR") long ucb) {
        try {
            return (int)winbase_h$constants$1.IsBadHugeWritePtr$MH().invokeExact(lp.address(), ucb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadCodePtr$MH() {
        return winbase_h$constants$1.IsBadCodePtr$MH();
    }
    public static @C("BOOL") int IsBadCodePtr (@C("FARPROC") Addressable lpfn) {
        try {
            return (int)winbase_h$constants$1.IsBadCodePtr$MH().invokeExact(lpfn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadStringPtrA$MH() {
        return winbase_h$constants$1.IsBadStringPtrA$MH();
    }
    public static @C("BOOL") int IsBadStringPtrA (@C("LPCSTR") Addressable lpsz, @C("UINT_PTR") long ucchMax) {
        try {
            return (int)winbase_h$constants$1.IsBadStringPtrA$MH().invokeExact(lpsz.address(), ucchMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadStringPtrW$MH() {
        return winbase_h$constants$1.IsBadStringPtrW$MH();
    }
    public static @C("BOOL") int IsBadStringPtrW (@C("LPCWSTR") Addressable lpsz, @C("UINT_PTR") long ucchMax) {
        try {
            return (int)winbase_h$constants$1.IsBadStringPtrW$MH().invokeExact(lpsz.address(), ucchMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountSidA$MH() {
        return winbase_h$constants$1.LookupAccountSidA$MH();
    }
    public static @C("BOOL") int LookupAccountSidA (@C("LPCSTR") Addressable lpSystemName, @C("PSID") Addressable Sid, @C("LPSTR") Addressable Name, @C("LPDWORD") Addressable cchName, @C("LPSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)winbase_h$constants$1.LookupAccountSidA$MH().invokeExact(lpSystemName.address(), Sid.address(), Name.address(), cchName.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountSidW$MH() {
        return winbase_h$constants$1.LookupAccountSidW$MH();
    }
    public static @C("BOOL") int LookupAccountSidW (@C("LPCWSTR") Addressable lpSystemName, @C("PSID") Addressable Sid, @C("LPWSTR") Addressable Name, @C("LPDWORD") Addressable cchName, @C("LPWSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)winbase_h$constants$1.LookupAccountSidW$MH().invokeExact(lpSystemName.address(), Sid.address(), Name.address(), cchName.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountNameA$MH() {
        return winbase_h$constants$1.LookupAccountNameA$MH();
    }
    public static @C("BOOL") int LookupAccountNameA (@C("LPCSTR") Addressable lpSystemName, @C("LPCSTR") Addressable lpAccountName, @C("PSID") Addressable Sid, @C("LPDWORD") Addressable cbSid, @C("LPSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)winbase_h$constants$1.LookupAccountNameA$MH().invokeExact(lpSystemName.address(), lpAccountName.address(), Sid.address(), cbSid.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountNameW$MH() {
        return winbase_h$constants$1.LookupAccountNameW$MH();
    }
    public static @C("BOOL") int LookupAccountNameW (@C("LPCWSTR") Addressable lpSystemName, @C("LPCWSTR") Addressable lpAccountName, @C("PSID") Addressable Sid, @C("LPDWORD") Addressable cbSid, @C("LPWSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)winbase_h$constants$1.LookupAccountNameW$MH().invokeExact(lpSystemName.address(), lpAccountName.address(), Sid.address(), cbSid.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountNameLocalA$MH() {
        return winbase_h$constants$1.LookupAccountNameLocalA$MH();
    }
    public static @C("BOOL") int LookupAccountNameLocalA (@C("LPCSTR") Addressable lpAccountName, @C("PSID") Addressable Sid, @C("LPDWORD") Addressable cbSid, @C("LPSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)winbase_h$constants$1.LookupAccountNameLocalA$MH().invokeExact(lpAccountName.address(), Sid.address(), cbSid.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountNameLocalW$MH() {
        return winbase_h$constants$1.LookupAccountNameLocalW$MH();
    }
    public static @C("BOOL") int LookupAccountNameLocalW (@C("LPCWSTR") Addressable lpAccountName, @C("PSID") Addressable Sid, @C("LPDWORD") Addressable cbSid, @C("LPWSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)winbase_h$constants$1.LookupAccountNameLocalW$MH().invokeExact(lpAccountName.address(), Sid.address(), cbSid.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountSidLocalA$MH() {
        return winbase_h$constants$1.LookupAccountSidLocalA$MH();
    }
    public static @C("BOOL") int LookupAccountSidLocalA (@C("PSID") Addressable Sid, @C("LPSTR") Addressable Name, @C("LPDWORD") Addressable cchName, @C("LPSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)winbase_h$constants$1.LookupAccountSidLocalA$MH().invokeExact(Sid.address(), Name.address(), cchName.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountSidLocalW$MH() {
        return winbase_h$constants$1.LookupAccountSidLocalW$MH();
    }
    public static @C("BOOL") int LookupAccountSidLocalW (@C("PSID") Addressable Sid, @C("LPWSTR") Addressable Name, @C("LPDWORD") Addressable cchName, @C("LPWSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)winbase_h$constants$1.LookupAccountSidLocalW$MH().invokeExact(Sid.address(), Name.address(), cchName.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupPrivilegeValueA$MH() {
        return winbase_h$constants$1.LookupPrivilegeValueA$MH();
    }
    public static @C("BOOL") int LookupPrivilegeValueA (@C("LPCSTR") Addressable lpSystemName, @C("LPCSTR") Addressable lpName, @C("PLUID") Addressable lpLuid) {
        try {
            return (int)winbase_h$constants$1.LookupPrivilegeValueA$MH().invokeExact(lpSystemName.address(), lpName.address(), lpLuid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupPrivilegeValueW$MH() {
        return winbase_h$constants$1.LookupPrivilegeValueW$MH();
    }
    public static @C("BOOL") int LookupPrivilegeValueW (@C("LPCWSTR") Addressable lpSystemName, @C("LPCWSTR") Addressable lpName, @C("PLUID") Addressable lpLuid) {
        try {
            return (int)winbase_h$constants$1.LookupPrivilegeValueW$MH().invokeExact(lpSystemName.address(), lpName.address(), lpLuid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupPrivilegeNameA$MH() {
        return winbase_h$constants$1.LookupPrivilegeNameA$MH();
    }
    public static @C("BOOL") int LookupPrivilegeNameA (@C("LPCSTR") Addressable lpSystemName, @C("PLUID") Addressable lpLuid, @C("LPSTR") Addressable lpName, @C("LPDWORD") Addressable cchName) {
        try {
            return (int)winbase_h$constants$1.LookupPrivilegeNameA$MH().invokeExact(lpSystemName.address(), lpLuid.address(), lpName.address(), cchName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupPrivilegeNameW$MH() {
        return winbase_h$constants$1.LookupPrivilegeNameW$MH();
    }
    public static @C("BOOL") int LookupPrivilegeNameW (@C("LPCWSTR") Addressable lpSystemName, @C("PLUID") Addressable lpLuid, @C("LPWSTR") Addressable lpName, @C("LPDWORD") Addressable cchName) {
        try {
            return (int)winbase_h$constants$1.LookupPrivilegeNameW$MH().invokeExact(lpSystemName.address(), lpLuid.address(), lpName.address(), cchName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupPrivilegeDisplayNameA$MH() {
        return winbase_h$constants$1.LookupPrivilegeDisplayNameA$MH();
    }
    public static @C("BOOL") int LookupPrivilegeDisplayNameA (@C("LPCSTR") Addressable lpSystemName, @C("LPCSTR") Addressable lpName, @C("LPSTR") Addressable lpDisplayName, @C("LPDWORD") Addressable cchDisplayName, @C("LPDWORD") Addressable lpLanguageId) {
        try {
            return (int)winbase_h$constants$1.LookupPrivilegeDisplayNameA$MH().invokeExact(lpSystemName.address(), lpName.address(), lpDisplayName.address(), cchDisplayName.address(), lpLanguageId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupPrivilegeDisplayNameW$MH() {
        return winbase_h$constants$1.LookupPrivilegeDisplayNameW$MH();
    }
    public static @C("BOOL") int LookupPrivilegeDisplayNameW (@C("LPCWSTR") Addressable lpSystemName, @C("LPCWSTR") Addressable lpName, @C("LPWSTR") Addressable lpDisplayName, @C("LPDWORD") Addressable cchDisplayName, @C("LPDWORD") Addressable lpLanguageId) {
        try {
            return (int)winbase_h$constants$1.LookupPrivilegeDisplayNameW$MH().invokeExact(lpSystemName.address(), lpName.address(), lpDisplayName.address(), cchDisplayName.address(), lpLanguageId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BuildCommDCBA$MH() {
        return winbase_h$constants$1.BuildCommDCBA$MH();
    }
    public static @C("BOOL") int BuildCommDCBA (@C("LPCSTR") Addressable lpDef, @C("LPDCB") Addressable lpDCB) {
        try {
            return (int)winbase_h$constants$1.BuildCommDCBA$MH().invokeExact(lpDef.address(), lpDCB.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BuildCommDCBW$MH() {
        return winbase_h$constants$1.BuildCommDCBW$MH();
    }
    public static @C("BOOL") int BuildCommDCBW (@C("LPCWSTR") Addressable lpDef, @C("LPDCB") Addressable lpDCB) {
        try {
            return (int)winbase_h$constants$1.BuildCommDCBW$MH().invokeExact(lpDef.address(), lpDCB.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BuildCommDCBAndTimeoutsA$MH() {
        return winbase_h$constants$1.BuildCommDCBAndTimeoutsA$MH();
    }
    public static @C("BOOL") int BuildCommDCBAndTimeoutsA (@C("LPCSTR") Addressable lpDef, @C("LPDCB") Addressable lpDCB, @C("LPCOMMTIMEOUTS") Addressable lpCommTimeouts) {
        try {
            return (int)winbase_h$constants$1.BuildCommDCBAndTimeoutsA$MH().invokeExact(lpDef.address(), lpDCB.address(), lpCommTimeouts.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BuildCommDCBAndTimeoutsW$MH() {
        return winbase_h$constants$1.BuildCommDCBAndTimeoutsW$MH();
    }
    public static @C("BOOL") int BuildCommDCBAndTimeoutsW (@C("LPCWSTR") Addressable lpDef, @C("LPDCB") Addressable lpDCB, @C("LPCOMMTIMEOUTS") Addressable lpCommTimeouts) {
        try {
            return (int)winbase_h$constants$1.BuildCommDCBAndTimeoutsW$MH().invokeExact(lpDef.address(), lpDCB.address(), lpCommTimeouts.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CommConfigDialogA$MH() {
        return winbase_h$constants$1.CommConfigDialogA$MH();
    }
    public static @C("BOOL") int CommConfigDialogA (@C("LPCSTR") Addressable lpszName, @C("HWND") Addressable hWnd, @C("LPCOMMCONFIG") Addressable lpCC) {
        try {
            return (int)winbase_h$constants$1.CommConfigDialogA$MH().invokeExact(lpszName.address(), hWnd.address(), lpCC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CommConfigDialogW$MH() {
        return winbase_h$constants$1.CommConfigDialogW$MH();
    }
    public static @C("BOOL") int CommConfigDialogW (@C("LPCWSTR") Addressable lpszName, @C("HWND") Addressable hWnd, @C("LPCOMMCONFIG") Addressable lpCC) {
        try {
            return (int)winbase_h$constants$1.CommConfigDialogW$MH().invokeExact(lpszName.address(), hWnd.address(), lpCC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDefaultCommConfigA$MH() {
        return winbase_h$constants$1.GetDefaultCommConfigA$MH();
    }
    public static @C("BOOL") int GetDefaultCommConfigA (@C("LPCSTR") Addressable lpszName, @C("LPCOMMCONFIG") Addressable lpCC, @C("LPDWORD") Addressable lpdwSize) {
        try {
            return (int)winbase_h$constants$1.GetDefaultCommConfigA$MH().invokeExact(lpszName.address(), lpCC.address(), lpdwSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDefaultCommConfigW$MH() {
        return winbase_h$constants$1.GetDefaultCommConfigW$MH();
    }
    public static @C("BOOL") int GetDefaultCommConfigW (@C("LPCWSTR") Addressable lpszName, @C("LPCOMMCONFIG") Addressable lpCC, @C("LPDWORD") Addressable lpdwSize) {
        try {
            return (int)winbase_h$constants$1.GetDefaultCommConfigW$MH().invokeExact(lpszName.address(), lpCC.address(), lpdwSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDefaultCommConfigA$MH() {
        return winbase_h$constants$1.SetDefaultCommConfigA$MH();
    }
    public static @C("BOOL") int SetDefaultCommConfigA (@C("LPCSTR") Addressable lpszName, @C("LPCOMMCONFIG") Addressable lpCC, @C("DWORD") int dwSize) {
        try {
            return (int)winbase_h$constants$1.SetDefaultCommConfigA$MH().invokeExact(lpszName.address(), lpCC.address(), dwSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDefaultCommConfigW$MH() {
        return winbase_h$constants$1.SetDefaultCommConfigW$MH();
    }
    public static @C("BOOL") int SetDefaultCommConfigW (@C("LPCWSTR") Addressable lpszName, @C("LPCOMMCONFIG") Addressable lpCC, @C("DWORD") int dwSize) {
        try {
            return (int)winbase_h$constants$1.SetDefaultCommConfigW$MH().invokeExact(lpszName.address(), lpCC.address(), dwSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetComputerNameA$MH() {
        return winbase_h$constants$1.GetComputerNameA$MH();
    }
    public static @C("BOOL") int GetComputerNameA (@C("LPSTR") Addressable lpBuffer, @C("LPDWORD") Addressable nSize) {
        try {
            return (int)winbase_h$constants$1.GetComputerNameA$MH().invokeExact(lpBuffer.address(), nSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetComputerNameW$MH() {
        return winbase_h$constants$1.GetComputerNameW$MH();
    }
    public static @C("BOOL") int GetComputerNameW (@C("LPWSTR") Addressable lpBuffer, @C("LPDWORD") Addressable nSize) {
        try {
            return (int)winbase_h$constants$1.GetComputerNameW$MH().invokeExact(lpBuffer.address(), nSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DnsHostnameToComputerNameA$MH() {
        return winbase_h$constants$1.DnsHostnameToComputerNameA$MH();
    }
    public static @C("BOOL") int DnsHostnameToComputerNameA (@C("LPCSTR") Addressable Hostname, @C("LPSTR") Addressable ComputerName, @C("LPDWORD") Addressable nSize) {
        try {
            return (int)winbase_h$constants$1.DnsHostnameToComputerNameA$MH().invokeExact(Hostname.address(), ComputerName.address(), nSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DnsHostnameToComputerNameW$MH() {
        return winbase_h$constants$1.DnsHostnameToComputerNameW$MH();
    }
    public static @C("BOOL") int DnsHostnameToComputerNameW (@C("LPCWSTR") Addressable Hostname, @C("LPWSTR") Addressable ComputerName, @C("LPDWORD") Addressable nSize) {
        try {
            return (int)winbase_h$constants$1.DnsHostnameToComputerNameW$MH().invokeExact(Hostname.address(), ComputerName.address(), nSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserNameA$MH() {
        return winbase_h$constants$1.GetUserNameA$MH();
    }
    public static @C("BOOL") int GetUserNameA (@C("LPSTR") Addressable lpBuffer, @C("LPDWORD") Addressable pcbBuffer) {
        try {
            return (int)winbase_h$constants$1.GetUserNameA$MH().invokeExact(lpBuffer.address(), pcbBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserNameW$MH() {
        return winbase_h$constants$1.GetUserNameW$MH();
    }
    public static @C("BOOL") int GetUserNameW (@C("LPWSTR") Addressable lpBuffer, @C("LPDWORD") Addressable pcbBuffer) {
        try {
            return (int)winbase_h$constants$1.GetUserNameW$MH().invokeExact(lpBuffer.address(), pcbBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LogonUserA$MH() {
        return winbase_h$constants$1.LogonUserA$MH();
    }
    public static @C("BOOL") int LogonUserA (@C("LPCSTR") Addressable lpszUsername, @C("LPCSTR") Addressable lpszDomain, @C("LPCSTR") Addressable lpszPassword, @C("DWORD") int dwLogonType, @C("DWORD") int dwLogonProvider, @C("PHANDLE") Addressable phToken) {
        try {
            return (int)winbase_h$constants$1.LogonUserA$MH().invokeExact(lpszUsername.address(), lpszDomain.address(), lpszPassword.address(), dwLogonType, dwLogonProvider, phToken.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LogonUserW$MH() {
        return winbase_h$constants$1.LogonUserW$MH();
    }
    public static @C("BOOL") int LogonUserW (@C("LPCWSTR") Addressable lpszUsername, @C("LPCWSTR") Addressable lpszDomain, @C("LPCWSTR") Addressable lpszPassword, @C("DWORD") int dwLogonType, @C("DWORD") int dwLogonProvider, @C("PHANDLE") Addressable phToken) {
        try {
            return (int)winbase_h$constants$1.LogonUserW$MH().invokeExact(lpszUsername.address(), lpszDomain.address(), lpszPassword.address(), dwLogonType, dwLogonProvider, phToken.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LogonUserExA$MH() {
        return winbase_h$constants$1.LogonUserExA$MH();
    }
    public static @C("BOOL") int LogonUserExA (@C("LPCSTR") Addressable lpszUsername, @C("LPCSTR") Addressable lpszDomain, @C("LPCSTR") Addressable lpszPassword, @C("DWORD") int dwLogonType, @C("DWORD") int dwLogonProvider, @C("PHANDLE") Addressable phToken, @C("PSID*") Addressable ppLogonSid, @C("PVOID*") Addressable ppProfileBuffer, @C("LPDWORD") Addressable pdwProfileLength, @C("PQUOTA_LIMITS") Addressable pQuotaLimits) {
        try {
            return (int)winbase_h$constants$1.LogonUserExA$MH().invokeExact(lpszUsername.address(), lpszDomain.address(), lpszPassword.address(), dwLogonType, dwLogonProvider, phToken.address(), ppLogonSid.address(), ppProfileBuffer.address(), pdwProfileLength.address(), pQuotaLimits.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LogonUserExW$MH() {
        return winbase_h$constants$1.LogonUserExW$MH();
    }
    public static @C("BOOL") int LogonUserExW (@C("LPCWSTR") Addressable lpszUsername, @C("LPCWSTR") Addressable lpszDomain, @C("LPCWSTR") Addressable lpszPassword, @C("DWORD") int dwLogonType, @C("DWORD") int dwLogonProvider, @C("PHANDLE") Addressable phToken, @C("PSID*") Addressable ppLogonSid, @C("PVOID*") Addressable ppProfileBuffer, @C("LPDWORD") Addressable pdwProfileLength, @C("PQUOTA_LIMITS") Addressable pQuotaLimits) {
        try {
            return (int)winbase_h$constants$1.LogonUserExW$MH().invokeExact(lpszUsername.address(), lpszDomain.address(), lpszPassword.address(), dwLogonType, dwLogonProvider, phToken.address(), ppLogonSid.address(), ppProfileBuffer.address(), pdwProfileLength.address(), pQuotaLimits.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateProcessWithLogonW$MH() {
        return winbase_h$constants$1.CreateProcessWithLogonW$MH();
    }
    public static @C("BOOL") int CreateProcessWithLogonW (@C("LPCWSTR") Addressable lpUsername, @C("LPCWSTR") Addressable lpDomain, @C("LPCWSTR") Addressable lpPassword, @C("DWORD") int dwLogonFlags, @C("LPCWSTR") Addressable lpApplicationName, @C("LPWSTR") Addressable lpCommandLine, @C("DWORD") int dwCreationFlags, @C("LPVOID") Addressable lpEnvironment, @C("LPCWSTR") Addressable lpCurrentDirectory, @C("LPSTARTUPINFOW") Addressable lpStartupInfo, @C("LPPROCESS_INFORMATION") Addressable lpProcessInformation) {
        try {
            return (int)winbase_h$constants$1.CreateProcessWithLogonW$MH().invokeExact(lpUsername.address(), lpDomain.address(), lpPassword.address(), dwLogonFlags, lpApplicationName.address(), lpCommandLine.address(), dwCreationFlags, lpEnvironment.address(), lpCurrentDirectory.address(), lpStartupInfo.address(), lpProcessInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateProcessWithTokenW$MH() {
        return winbase_h$constants$1.CreateProcessWithTokenW$MH();
    }
    public static @C("BOOL") int CreateProcessWithTokenW (@C("HANDLE") Addressable hToken, @C("DWORD") int dwLogonFlags, @C("LPCWSTR") Addressable lpApplicationName, @C("LPWSTR") Addressable lpCommandLine, @C("DWORD") int dwCreationFlags, @C("LPVOID") Addressable lpEnvironment, @C("LPCWSTR") Addressable lpCurrentDirectory, @C("LPSTARTUPINFOW") Addressable lpStartupInfo, @C("LPPROCESS_INFORMATION") Addressable lpProcessInformation) {
        try {
            return (int)winbase_h$constants$1.CreateProcessWithTokenW$MH().invokeExact(hToken.address(), dwLogonFlags, lpApplicationName.address(), lpCommandLine.address(), dwCreationFlags, lpEnvironment.address(), lpCurrentDirectory.address(), lpStartupInfo.address(), lpProcessInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsTokenUntrusted$MH() {
        return winbase_h$constants$1.IsTokenUntrusted$MH();
    }
    public static @C("BOOL") int IsTokenUntrusted (@C("HANDLE") Addressable TokenHandle) {
        try {
            return (int)winbase_h$constants$1.IsTokenUntrusted$MH().invokeExact(TokenHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterWaitForSingleObject$MH() {
        return winbase_h$constants$1.RegisterWaitForSingleObject$MH();
    }
    public static @C("BOOL") int RegisterWaitForSingleObject (@C("PHANDLE") Addressable phNewWaitObject, @C("HANDLE") Addressable hObject, @C("WAITORTIMERCALLBACK") Addressable Callback, @C("PVOID") Addressable Context, @C("ULONG") int dwMilliseconds, @C("ULONG") int dwFlags) {
        try {
            return (int)winbase_h$constants$1.RegisterWaitForSingleObject$MH().invokeExact(phNewWaitObject.address(), hObject.address(), Callback.address(), Context.address(), dwMilliseconds, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterWait$MH() {
        return winbase_h$constants$1.UnregisterWait$MH();
    }
    public static @C("BOOL") int UnregisterWait (@C("HANDLE") Addressable WaitHandle) {
        try {
            return (int)winbase_h$constants$1.UnregisterWait$MH().invokeExact(WaitHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BindIoCompletionCallback$MH() {
        return winbase_h$constants$1.BindIoCompletionCallback$MH();
    }
    public static @C("BOOL") int BindIoCompletionCallback (@C("HANDLE") Addressable FileHandle, @C("LPOVERLAPPED_COMPLETION_ROUTINE") Addressable Function, @C("ULONG") int Flags) {
        try {
            return (int)winbase_h$constants$1.BindIoCompletionCallback$MH().invokeExact(FileHandle.address(), Function.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTimerQueueTimer$MH() {
        return winbase_h$constants$1.SetTimerQueueTimer$MH();
    }
    public static @C("HANDLE") MemoryAddress SetTimerQueueTimer (@C("HANDLE") Addressable TimerQueue, @C("WAITORTIMERCALLBACK") Addressable Callback, @C("PVOID") Addressable Parameter, @C("DWORD") int DueTime, @C("DWORD") int Period, @C("BOOL") int PreferIo) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.SetTimerQueueTimer$MH().invokeExact(TimerQueue.address(), Callback.address(), Parameter.address(), DueTime, Period, PreferIo);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CancelTimerQueueTimer$MH() {
        return winbase_h$constants$1.CancelTimerQueueTimer$MH();
    }
    public static @C("BOOL") int CancelTimerQueueTimer (@C("HANDLE") Addressable TimerQueue, @C("HANDLE") Addressable Timer) {
        try {
            return (int)winbase_h$constants$1.CancelTimerQueueTimer$MH().invokeExact(TimerQueue.address(), Timer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteTimerQueue$MH() {
        return winbase_h$constants$1.DeleteTimerQueue$MH();
    }
    public static @C("BOOL") int DeleteTimerQueue (@C("HANDLE") Addressable TimerQueue) {
        try {
            return (int)winbase_h$constants$1.DeleteTimerQueue$MH().invokeExact(TimerQueue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeThreadpoolEnvironment$MH() {
        return winbase_h$constants$1.InitializeThreadpoolEnvironment$MH();
    }
    public static void InitializeThreadpoolEnvironment (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            winbase_h$constants$1.InitializeThreadpoolEnvironment$MH().invokeExact(pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolCallbackPool$MH() {
        return winbase_h$constants$1.SetThreadpoolCallbackPool$MH();
    }
    public static void SetThreadpoolCallbackPool (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe, @C("PTP_POOL") Addressable ptpp) {
        try {
            winbase_h$constants$1.SetThreadpoolCallbackPool$MH().invokeExact(pcbe.address(), ptpp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolCallbackCleanupGroup$MH() {
        return winbase_h$constants$1.SetThreadpoolCallbackCleanupGroup$MH();
    }
    public static void SetThreadpoolCallbackCleanupGroup (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe, @C("PTP_CLEANUP_GROUP") Addressable ptpcg, @C("PTP_CLEANUP_GROUP_CANCEL_CALLBACK") Addressable pfng) {
        try {
            winbase_h$constants$1.SetThreadpoolCallbackCleanupGroup$MH().invokeExact(pcbe.address(), ptpcg.address(), pfng.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolCallbackRunsLong$MH() {
        return winbase_h$constants$1.SetThreadpoolCallbackRunsLong$MH();
    }
    public static void SetThreadpoolCallbackRunsLong (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            winbase_h$constants$1.SetThreadpoolCallbackRunsLong$MH().invokeExact(pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolCallbackLibrary$MH() {
        return winbase_h$constants$1.SetThreadpoolCallbackLibrary$MH();
    }
    public static void SetThreadpoolCallbackLibrary (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe, @C("PVOID") Addressable mod) {
        try {
            winbase_h$constants$1.SetThreadpoolCallbackLibrary$MH().invokeExact(pcbe.address(), mod.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolCallbackPriority$MH() {
        return winbase_h$constants$1.SetThreadpoolCallbackPriority$MH();
    }
    public static void SetThreadpoolCallbackPriority (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe, @C("TP_CALLBACK_PRIORITY") int Priority) {
        try {
            winbase_h$constants$1.SetThreadpoolCallbackPriority$MH().invokeExact(pcbe.address(), Priority);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DestroyThreadpoolEnvironment$MH() {
        return winbase_h$constants$1.DestroyThreadpoolEnvironment$MH();
    }
    public static void DestroyThreadpoolEnvironment (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            winbase_h$constants$1.DestroyThreadpoolEnvironment$MH().invokeExact(pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolCallbackPersistent$MH() {
        return winbase_h$constants$1.SetThreadpoolCallbackPersistent$MH();
    }
    public static void SetThreadpoolCallbackPersistent (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            winbase_h$constants$1.SetThreadpoolCallbackPersistent$MH().invokeExact(pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePrivateNamespaceA$MH() {
        return winbase_h$constants$1.CreatePrivateNamespaceA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreatePrivateNamespaceA (@C("LPSECURITY_ATTRIBUTES") Addressable lpPrivateNamespaceAttributes, @C("LPVOID") Addressable lpBoundaryDescriptor, @C("LPCSTR") Addressable lpAliasPrefix) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreatePrivateNamespaceA$MH().invokeExact(lpPrivateNamespaceAttributes.address(), lpBoundaryDescriptor.address(), lpAliasPrefix.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenPrivateNamespaceA$MH() {
        return winbase_h$constants$1.OpenPrivateNamespaceA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenPrivateNamespaceA (@C("LPVOID") Addressable lpBoundaryDescriptor, @C("LPCSTR") Addressable lpAliasPrefix) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.OpenPrivateNamespaceA$MH().invokeExact(lpBoundaryDescriptor.address(), lpAliasPrefix.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateBoundaryDescriptorA$MH() {
        return winbase_h$constants$1.CreateBoundaryDescriptorA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateBoundaryDescriptorA (@C("LPCSTR") Addressable Name, @C("ULONG") int Flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateBoundaryDescriptorA$MH().invokeExact(Name.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddIntegrityLabelToBoundaryDescriptor$MH() {
        return winbase_h$constants$1.AddIntegrityLabelToBoundaryDescriptor$MH();
    }
    public static @C("BOOL") int AddIntegrityLabelToBoundaryDescriptor (@C("HANDLE*") Addressable BoundaryDescriptor, @C("PSID") Addressable IntegrityLabel) {
        try {
            return (int)winbase_h$constants$1.AddIntegrityLabelToBoundaryDescriptor$MH().invokeExact(BoundaryDescriptor.address(), IntegrityLabel.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentHwProfileA$MH() {
        return winbase_h$constants$1.GetCurrentHwProfileA$MH();
    }
    public static @C("BOOL") int GetCurrentHwProfileA (@C("LPHW_PROFILE_INFOA") Addressable lpHwProfileInfo) {
        try {
            return (int)winbase_h$constants$1.GetCurrentHwProfileA$MH().invokeExact(lpHwProfileInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentHwProfileW$MH() {
        return winbase_h$constants$1.GetCurrentHwProfileW$MH();
    }
    public static @C("BOOL") int GetCurrentHwProfileW (@C("LPHW_PROFILE_INFOW") Addressable lpHwProfileInfo) {
        try {
            return (int)winbase_h$constants$1.GetCurrentHwProfileW$MH().invokeExact(lpHwProfileInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerifyVersionInfoA$MH() {
        return winbase_h$constants$1.VerifyVersionInfoA$MH();
    }
    public static @C("BOOL") int VerifyVersionInfoA (@C("LPOSVERSIONINFOEXA") Addressable lpVersionInformation, @C("DWORD") int dwTypeMask, @C("DWORDLONG") long dwlConditionMask) {
        try {
            return (int)winbase_h$constants$1.VerifyVersionInfoA$MH().invokeExact(lpVersionInformation.address(), dwTypeMask, dwlConditionMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerifyVersionInfoW$MH() {
        return winbase_h$constants$1.VerifyVersionInfoW$MH();
    }
    public static @C("BOOL") int VerifyVersionInfoW (@C("LPOSVERSIONINFOEXW") Addressable lpVersionInformation, @C("DWORD") int dwTypeMask, @C("DWORDLONG") long dwlConditionMask) {
        try {
            return (int)winbase_h$constants$1.VerifyVersionInfoW$MH().invokeExact(lpVersionInformation.address(), dwTypeMask, dwlConditionMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSystemPowerState$MH() {
        return winbase_h$constants$1.SetSystemPowerState$MH();
    }
    public static @C("BOOL") int SetSystemPowerState (@C("BOOL") int fSuspend, @C("BOOL") int fForce) {
        try {
            return (int)winbase_h$constants$1.SetSystemPowerState$MH().invokeExact(fSuspend, fForce);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemPowerStatus$MH() {
        return winbase_h$constants$1.GetSystemPowerStatus$MH();
    }
    public static @C("BOOL") int GetSystemPowerStatus (@C("LPSYSTEM_POWER_STATUS") Addressable lpSystemPowerStatus) {
        try {
            return (int)winbase_h$constants$1.GetSystemPowerStatus$MH().invokeExact(lpSystemPowerStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapUserPhysicalPagesScatter$MH() {
        return winbase_h$constants$1.MapUserPhysicalPagesScatter$MH();
    }
    public static @C("BOOL") int MapUserPhysicalPagesScatter (@C("PVOID*") Addressable VirtualAddresses, @C("ULONG_PTR") long NumberOfPages, @C("PULONG_PTR") Addressable PageArray) {
        try {
            return (int)winbase_h$constants$1.MapUserPhysicalPagesScatter$MH().invokeExact(VirtualAddresses.address(), NumberOfPages, PageArray.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateJobObjectA$MH() {
        return winbase_h$constants$1.CreateJobObjectA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateJobObjectA (@C("LPSECURITY_ATTRIBUTES") Addressable lpJobAttributes, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.CreateJobObjectA$MH().invokeExact(lpJobAttributes.address(), lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenJobObjectA$MH() {
        return winbase_h$constants$1.OpenJobObjectA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenJobObjectA (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.OpenJobObjectA$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateJobSet$MH() {
        return winbase_h$constants$1.CreateJobSet$MH();
    }
    public static @C("BOOL") int CreateJobSet (@C("ULONG") int NumJob, @C("PJOB_SET_ARRAY") Addressable UserJobSet, @C("ULONG") int Flags) {
        try {
            return (int)winbase_h$constants$1.CreateJobSet$MH().invokeExact(NumJob, UserJobSet.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstVolumeA$MH() {
        return winbase_h$constants$1.FindFirstVolumeA$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstVolumeA (@C("LPSTR") Addressable lpszVolumeName, @C("DWORD") int cchBufferLength) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.FindFirstVolumeA$MH().invokeExact(lpszVolumeName.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNextVolumeA$MH() {
        return winbase_h$constants$1.FindNextVolumeA$MH();
    }
    public static @C("BOOL") int FindNextVolumeA (@C("HANDLE") Addressable hFindVolume, @C("LPSTR") Addressable lpszVolumeName, @C("DWORD") int cchBufferLength) {
        try {
            return (int)winbase_h$constants$1.FindNextVolumeA$MH().invokeExact(hFindVolume.address(), lpszVolumeName.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstVolumeMountPointA$MH() {
        return winbase_h$constants$1.FindFirstVolumeMountPointA$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstVolumeMountPointA (@C("LPCSTR") Addressable lpszRootPathName, @C("LPSTR") Addressable lpszVolumeMountPoint, @C("DWORD") int cchBufferLength) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.FindFirstVolumeMountPointA$MH().invokeExact(lpszRootPathName.address(), lpszVolumeMountPoint.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstVolumeMountPointW$MH() {
        return winbase_h$constants$1.FindFirstVolumeMountPointW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstVolumeMountPointW (@C("LPCWSTR") Addressable lpszRootPathName, @C("LPWSTR") Addressable lpszVolumeMountPoint, @C("DWORD") int cchBufferLength) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$1.FindFirstVolumeMountPointW$MH().invokeExact(lpszRootPathName.address(), lpszVolumeMountPoint.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNextVolumeMountPointA$MH() {
        return winbase_h$constants$1.FindNextVolumeMountPointA$MH();
    }
    public static @C("BOOL") int FindNextVolumeMountPointA (@C("HANDLE") Addressable hFindVolumeMountPoint, @C("LPSTR") Addressable lpszVolumeMountPoint, @C("DWORD") int cchBufferLength) {
        try {
            return (int)winbase_h$constants$1.FindNextVolumeMountPointA$MH().invokeExact(hFindVolumeMountPoint.address(), lpszVolumeMountPoint.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNextVolumeMountPointW$MH() {
        return winbase_h$constants$1.FindNextVolumeMountPointW$MH();
    }
    public static @C("BOOL") int FindNextVolumeMountPointW (@C("HANDLE") Addressable hFindVolumeMountPoint, @C("LPWSTR") Addressable lpszVolumeMountPoint, @C("DWORD") int cchBufferLength) {
        try {
            return (int)winbase_h$constants$1.FindNextVolumeMountPointW$MH().invokeExact(hFindVolumeMountPoint.address(), lpszVolumeMountPoint.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindVolumeMountPointClose$MH() {
        return winbase_h$constants$1.FindVolumeMountPointClose$MH();
    }
    public static @C("BOOL") int FindVolumeMountPointClose (@C("HANDLE") Addressable hFindVolumeMountPoint) {
        try {
            return (int)winbase_h$constants$1.FindVolumeMountPointClose$MH().invokeExact(hFindVolumeMountPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetVolumeMountPointA$MH() {
        return winbase_h$constants$1.SetVolumeMountPointA$MH();
    }
    public static @C("BOOL") int SetVolumeMountPointA (@C("LPCSTR") Addressable lpszVolumeMountPoint, @C("LPCSTR") Addressable lpszVolumeName) {
        try {
            return (int)winbase_h$constants$1.SetVolumeMountPointA$MH().invokeExact(lpszVolumeMountPoint.address(), lpszVolumeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetVolumeMountPointW$MH() {
        return winbase_h$constants$1.SetVolumeMountPointW$MH();
    }
    public static @C("BOOL") int SetVolumeMountPointW (@C("LPCWSTR") Addressable lpszVolumeMountPoint, @C("LPCWSTR") Addressable lpszVolumeName) {
        try {
            return (int)winbase_h$constants$1.SetVolumeMountPointW$MH().invokeExact(lpszVolumeMountPoint.address(), lpszVolumeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteVolumeMountPointA$MH() {
        return winbase_h$constants$1.DeleteVolumeMountPointA$MH();
    }
    public static @C("BOOL") int DeleteVolumeMountPointA (@C("LPCSTR") Addressable lpszVolumeMountPoint) {
        try {
            return (int)winbase_h$constants$1.DeleteVolumeMountPointA$MH().invokeExact(lpszVolumeMountPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVolumeNameForVolumeMountPointA$MH() {
        return winbase_h$constants$1.GetVolumeNameForVolumeMountPointA$MH();
    }
    public static @C("BOOL") int GetVolumeNameForVolumeMountPointA (@C("LPCSTR") Addressable lpszVolumeMountPoint, @C("LPSTR") Addressable lpszVolumeName, @C("DWORD") int cchBufferLength) {
        try {
            return (int)winbase_h$constants$1.GetVolumeNameForVolumeMountPointA$MH().invokeExact(lpszVolumeMountPoint.address(), lpszVolumeName.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVolumePathNameA$MH() {
        return winbase_h$constants$1.GetVolumePathNameA$MH();
    }
    public static @C("BOOL") int GetVolumePathNameA (@C("LPCSTR") Addressable lpszFileName, @C("LPSTR") Addressable lpszVolumePathName, @C("DWORD") int cchBufferLength) {
        try {
            return (int)winbase_h$constants$1.GetVolumePathNameA$MH().invokeExact(lpszFileName.address(), lpszVolumePathName.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVolumePathNamesForVolumeNameA$MH() {
        return winbase_h$constants$1.GetVolumePathNamesForVolumeNameA$MH();
    }
    public static @C("BOOL") int GetVolumePathNamesForVolumeNameA (@C("LPCSTR") Addressable lpszVolumeName, @C("LPCH") Addressable lpszVolumePathNames, @C("DWORD") int cchBufferLength, @C("PDWORD") Addressable lpcchReturnLength) {
        try {
            return (int)winbase_h$constants$1.GetVolumePathNamesForVolumeNameA$MH().invokeExact(lpszVolumeName.address(), lpszVolumePathNames.address(), cchBufferLength, lpcchReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateActCtxA$MH() {
        return winbase_h$constants$2.CreateActCtxA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateActCtxA (@C("PCACTCTXA") Addressable pActCtx) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.CreateActCtxA$MH().invokeExact(pActCtx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateActCtxW$MH() {
        return winbase_h$constants$2.CreateActCtxW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateActCtxW (@C("PCACTCTXW") Addressable pActCtx) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.CreateActCtxW$MH().invokeExact(pActCtx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddRefActCtx$MH() {
        return winbase_h$constants$2.AddRefActCtx$MH();
    }
    public static void AddRefActCtx (@C("HANDLE") Addressable hActCtx) {
        try {
            winbase_h$constants$2.AddRefActCtx$MH().invokeExact(hActCtx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReleaseActCtx$MH() {
        return winbase_h$constants$2.ReleaseActCtx$MH();
    }
    public static void ReleaseActCtx (@C("HANDLE") Addressable hActCtx) {
        try {
            winbase_h$constants$2.ReleaseActCtx$MH().invokeExact(hActCtx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ZombifyActCtx$MH() {
        return winbase_h$constants$2.ZombifyActCtx$MH();
    }
    public static @C("BOOL") int ZombifyActCtx (@C("HANDLE") Addressable hActCtx) {
        try {
            return (int)winbase_h$constants$2.ZombifyActCtx$MH().invokeExact(hActCtx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ActivateActCtx$MH() {
        return winbase_h$constants$2.ActivateActCtx$MH();
    }
    public static @C("BOOL") int ActivateActCtx (@C("HANDLE") Addressable hActCtx, @C("ULONG_PTR*") Addressable lpCookie) {
        try {
            return (int)winbase_h$constants$2.ActivateActCtx$MH().invokeExact(hActCtx.address(), lpCookie.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeactivateActCtx$MH() {
        return winbase_h$constants$2.DeactivateActCtx$MH();
    }
    public static @C("BOOL") int DeactivateActCtx (@C("DWORD") int dwFlags, @C("ULONG_PTR") long ulCookie) {
        try {
            return (int)winbase_h$constants$2.DeactivateActCtx$MH().invokeExact(dwFlags, ulCookie);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentActCtx$MH() {
        return winbase_h$constants$2.GetCurrentActCtx$MH();
    }
    public static @C("BOOL") int GetCurrentActCtx (@C("HANDLE*") Addressable lphActCtx) {
        try {
            return (int)winbase_h$constants$2.GetCurrentActCtx$MH().invokeExact(lphActCtx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindActCtxSectionStringA$MH() {
        return winbase_h$constants$2.FindActCtxSectionStringA$MH();
    }
    public static @C("BOOL") int FindActCtxSectionStringA (@C("DWORD") int dwFlags, @C("const GUID*") Addressable lpExtensionGuid, @C("ULONG") int ulSectionId, @C("LPCSTR") Addressable lpStringToFind, @C("PACTCTX_SECTION_KEYED_DATA") Addressable ReturnedData) {
        try {
            return (int)winbase_h$constants$2.FindActCtxSectionStringA$MH().invokeExact(dwFlags, lpExtensionGuid.address(), ulSectionId, lpStringToFind.address(), ReturnedData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindActCtxSectionStringW$MH() {
        return winbase_h$constants$2.FindActCtxSectionStringW$MH();
    }
    public static @C("BOOL") int FindActCtxSectionStringW (@C("DWORD") int dwFlags, @C("const GUID*") Addressable lpExtensionGuid, @C("ULONG") int ulSectionId, @C("LPCWSTR") Addressable lpStringToFind, @C("PACTCTX_SECTION_KEYED_DATA") Addressable ReturnedData) {
        try {
            return (int)winbase_h$constants$2.FindActCtxSectionStringW$MH().invokeExact(dwFlags, lpExtensionGuid.address(), ulSectionId, lpStringToFind.address(), ReturnedData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindActCtxSectionGuid$MH() {
        return winbase_h$constants$2.FindActCtxSectionGuid$MH();
    }
    public static @C("BOOL") int FindActCtxSectionGuid (@C("DWORD") int dwFlags, @C("const GUID*") Addressable lpExtensionGuid, @C("ULONG") int ulSectionId, @C("const GUID*") Addressable lpGuidToFind, @C("PACTCTX_SECTION_KEYED_DATA") Addressable ReturnedData) {
        try {
            return (int)winbase_h$constants$2.FindActCtxSectionGuid$MH().invokeExact(dwFlags, lpExtensionGuid.address(), ulSectionId, lpGuidToFind.address(), ReturnedData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryActCtxW$MH() {
        return winbase_h$constants$2.QueryActCtxW$MH();
    }
    public static @C("BOOL") int QueryActCtxW (@C("DWORD") int dwFlags, @C("HANDLE") Addressable hActCtx, @C("PVOID") Addressable pvSubInstance, @C("ULONG") int ulInfoClass, @C("PVOID") Addressable pvBuffer, @C("SIZE_T") long cbBuffer, @C("SIZE_T*") Addressable pcbWrittenOrRequired) {
        try {
            return (int)winbase_h$constants$2.QueryActCtxW$MH().invokeExact(dwFlags, hActCtx.address(), pvSubInstance.address(), ulInfoClass, pvBuffer.address(), cbBuffer, pcbWrittenOrRequired.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WTSGetActiveConsoleSessionId$MH() {
        return winbase_h$constants$2.WTSGetActiveConsoleSessionId$MH();
    }
    public static @C("DWORD") int WTSGetActiveConsoleSessionId () {
        try {
            return (int)winbase_h$constants$2.WTSGetActiveConsoleSessionId$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WTSGetServiceSessionId$MH() {
        return winbase_h$constants$2.WTSGetServiceSessionId$MH();
    }
    public static @C("DWORD") int WTSGetServiceSessionId () {
        try {
            return (int)winbase_h$constants$2.WTSGetServiceSessionId$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WTSIsServerContainer$MH() {
        return winbase_h$constants$2.WTSIsServerContainer$MH();
    }
    public static @C("BOOLEAN") byte WTSIsServerContainer () {
        try {
            return (byte)winbase_h$constants$2.WTSIsServerContainer$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetActiveProcessorGroupCount$MH() {
        return winbase_h$constants$2.GetActiveProcessorGroupCount$MH();
    }
    public static @C("WORD") short GetActiveProcessorGroupCount () {
        try {
            return (short)winbase_h$constants$2.GetActiveProcessorGroupCount$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMaximumProcessorGroupCount$MH() {
        return winbase_h$constants$2.GetMaximumProcessorGroupCount$MH();
    }
    public static @C("WORD") short GetMaximumProcessorGroupCount () {
        try {
            return (short)winbase_h$constants$2.GetMaximumProcessorGroupCount$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetActiveProcessorCount$MH() {
        return winbase_h$constants$2.GetActiveProcessorCount$MH();
    }
    public static @C("DWORD") int GetActiveProcessorCount (@C("WORD") short GroupNumber) {
        try {
            return (int)winbase_h$constants$2.GetActiveProcessorCount$MH().invokeExact(GroupNumber);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMaximumProcessorCount$MH() {
        return winbase_h$constants$2.GetMaximumProcessorCount$MH();
    }
    public static @C("DWORD") int GetMaximumProcessorCount (@C("WORD") short GroupNumber) {
        try {
            return (int)winbase_h$constants$2.GetMaximumProcessorCount$MH().invokeExact(GroupNumber);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaProcessorNode$MH() {
        return winbase_h$constants$2.GetNumaProcessorNode$MH();
    }
    public static @C("BOOL") int GetNumaProcessorNode (@C("UCHAR") byte Processor, @C("PUCHAR") Addressable NodeNumber) {
        try {
            return (int)winbase_h$constants$2.GetNumaProcessorNode$MH().invokeExact(Processor, NodeNumber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaNodeNumberFromHandle$MH() {
        return winbase_h$constants$2.GetNumaNodeNumberFromHandle$MH();
    }
    public static @C("BOOL") int GetNumaNodeNumberFromHandle (@C("HANDLE") Addressable hFile, @C("PUSHORT") Addressable NodeNumber) {
        try {
            return (int)winbase_h$constants$2.GetNumaNodeNumberFromHandle$MH().invokeExact(hFile.address(), NodeNumber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaProcessorNodeEx$MH() {
        return winbase_h$constants$2.GetNumaProcessorNodeEx$MH();
    }
    public static @C("BOOL") int GetNumaProcessorNodeEx (@C("PPROCESSOR_NUMBER") Addressable Processor, @C("PUSHORT") Addressable NodeNumber) {
        try {
            return (int)winbase_h$constants$2.GetNumaProcessorNodeEx$MH().invokeExact(Processor.address(), NodeNumber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaNodeProcessorMask$MH() {
        return winbase_h$constants$2.GetNumaNodeProcessorMask$MH();
    }
    public static @C("BOOL") int GetNumaNodeProcessorMask (@C("UCHAR") byte Node, @C("PULONGLONG") Addressable ProcessorMask) {
        try {
            return (int)winbase_h$constants$2.GetNumaNodeProcessorMask$MH().invokeExact(Node, ProcessorMask.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaAvailableMemoryNode$MH() {
        return winbase_h$constants$2.GetNumaAvailableMemoryNode$MH();
    }
    public static @C("BOOL") int GetNumaAvailableMemoryNode (@C("UCHAR") byte Node, @C("PULONGLONG") Addressable AvailableBytes) {
        try {
            return (int)winbase_h$constants$2.GetNumaAvailableMemoryNode$MH().invokeExact(Node, AvailableBytes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaAvailableMemoryNodeEx$MH() {
        return winbase_h$constants$2.GetNumaAvailableMemoryNodeEx$MH();
    }
    public static @C("BOOL") int GetNumaAvailableMemoryNodeEx (@C("USHORT") short Node, @C("PULONGLONG") Addressable AvailableBytes) {
        try {
            return (int)winbase_h$constants$2.GetNumaAvailableMemoryNodeEx$MH().invokeExact(Node, AvailableBytes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaProximityNode$MH() {
        return winbase_h$constants$2.GetNumaProximityNode$MH();
    }
    public static @C("BOOL") int GetNumaProximityNode (@C("ULONG") int ProximityId, @C("PUCHAR") Addressable NodeNumber) {
        try {
            return (int)winbase_h$constants$2.GetNumaProximityNode$MH().invokeExact(ProximityId, NodeNumber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterApplicationRecoveryCallback$MH() {
        return winbase_h$constants$2.RegisterApplicationRecoveryCallback$MH();
    }
    public static @C("HRESULT") int RegisterApplicationRecoveryCallback (@C("APPLICATION_RECOVERY_CALLBACK") Addressable pRecoveyCallback, @C("PVOID") Addressable pvParameter, @C("DWORD") int dwPingInterval, @C("DWORD") int dwFlags) {
        try {
            return (int)winbase_h$constants$2.RegisterApplicationRecoveryCallback$MH().invokeExact(pRecoveyCallback.address(), pvParameter.address(), dwPingInterval, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterApplicationRecoveryCallback$MH() {
        return winbase_h$constants$2.UnregisterApplicationRecoveryCallback$MH();
    }
    public static @C("HRESULT") int UnregisterApplicationRecoveryCallback () {
        try {
            return (int)winbase_h$constants$2.UnregisterApplicationRecoveryCallback$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterApplicationRestart$MH() {
        return winbase_h$constants$2.RegisterApplicationRestart$MH();
    }
    public static @C("HRESULT") int RegisterApplicationRestart (@C("PCWSTR") Addressable pwzCommandline, @C("DWORD") int dwFlags) {
        try {
            return (int)winbase_h$constants$2.RegisterApplicationRestart$MH().invokeExact(pwzCommandline.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterApplicationRestart$MH() {
        return winbase_h$constants$2.UnregisterApplicationRestart$MH();
    }
    public static @C("HRESULT") int UnregisterApplicationRestart () {
        try {
            return (int)winbase_h$constants$2.UnregisterApplicationRestart$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetApplicationRecoveryCallback$MH() {
        return winbase_h$constants$2.GetApplicationRecoveryCallback$MH();
    }
    public static @C("HRESULT") int GetApplicationRecoveryCallback (@C("HANDLE") Addressable hProcess, @C("APPLICATION_RECOVERY_CALLBACK*") Addressable pRecoveryCallback, @C("PVOID*") Addressable ppvParameter, @C("PDWORD") Addressable pdwPingInterval, @C("PDWORD") Addressable pdwFlags) {
        try {
            return (int)winbase_h$constants$2.GetApplicationRecoveryCallback$MH().invokeExact(hProcess.address(), pRecoveryCallback.address(), ppvParameter.address(), pdwPingInterval.address(), pdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetApplicationRestartSettings$MH() {
        return winbase_h$constants$2.GetApplicationRestartSettings$MH();
    }
    public static @C("HRESULT") int GetApplicationRestartSettings (@C("HANDLE") Addressable hProcess, @C("PWSTR") Addressable pwzCommandline, @C("PDWORD") Addressable pcchSize, @C("PDWORD") Addressable pdwFlags) {
        try {
            return (int)winbase_h$constants$2.GetApplicationRestartSettings$MH().invokeExact(hProcess.address(), pwzCommandline.address(), pcchSize.address(), pdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ApplicationRecoveryInProgress$MH() {
        return winbase_h$constants$2.ApplicationRecoveryInProgress$MH();
    }
    public static @C("HRESULT") int ApplicationRecoveryInProgress (@C("PBOOL") Addressable pbCancelled) {
        try {
            return (int)winbase_h$constants$2.ApplicationRecoveryInProgress$MH().invokeExact(pbCancelled.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ApplicationRecoveryFinished$MH() {
        return winbase_h$constants$2.ApplicationRecoveryFinished$MH();
    }
    public static void ApplicationRecoveryFinished (@C("BOOL") int bSuccess) {
        try {
            winbase_h$constants$2.ApplicationRecoveryFinished$MH().invokeExact(bSuccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int IoPriorityHintVeryLow() {
        return winbase_h$constants$2.IoPriorityHintVeryLow();
    }
    public static @C("int") int IoPriorityHintLow() {
        return winbase_h$constants$2.IoPriorityHintLow();
    }
    public static @C("int") int IoPriorityHintNormal() {
        return winbase_h$constants$2.IoPriorityHintNormal();
    }
    public static @C("int") int MaximumIoPriorityHintType() {
        return winbase_h$constants$2.MaximumIoPriorityHintType();
    }
    public static  MethodHandle GetFileInformationByHandleEx$MH() {
        return winbase_h$constants$2.GetFileInformationByHandleEx$MH();
    }
    public static @C("BOOL") int GetFileInformationByHandleEx (@C("HANDLE") Addressable hFile, @C("FILE_INFO_BY_HANDLE_CLASS") int FileInformationClass, @C("LPVOID") Addressable lpFileInformation, @C("DWORD") int dwBufferSize) {
        try {
            return (int)winbase_h$constants$2.GetFileInformationByHandleEx$MH().invokeExact(hFile.address(), FileInformationClass, lpFileInformation.address(), dwBufferSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int FileIdType() {
        return winbase_h$constants$2.FileIdType();
    }
    public static @C("int") int ObjectIdType() {
        return winbase_h$constants$2.ObjectIdType();
    }
    public static @C("int") int ExtendedFileIdType() {
        return winbase_h$constants$2.ExtendedFileIdType();
    }
    public static @C("int") int MaximumFileIdType() {
        return winbase_h$constants$2.MaximumFileIdType();
    }
    public static  MethodHandle OpenFileById$MH() {
        return winbase_h$constants$2.OpenFileById$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenFileById (@C("HANDLE") Addressable hVolumeHint, @C("LPFILE_ID_DESCRIPTOR") Addressable lpFileId, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("DWORD") int dwFlagsAndAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.OpenFileById$MH().invokeExact(hVolumeHint.address(), lpFileId.address(), dwDesiredAccess, dwShareMode, lpSecurityAttributes.address(), dwFlagsAndAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSymbolicLinkA$MH() {
        return winbase_h$constants$2.CreateSymbolicLinkA$MH();
    }
    public static @C("BOOLEAN") byte CreateSymbolicLinkA (@C("LPCSTR") Addressable lpSymlinkFileName, @C("LPCSTR") Addressable lpTargetFileName, @C("DWORD") int dwFlags) {
        try {
            return (byte)winbase_h$constants$2.CreateSymbolicLinkA$MH().invokeExact(lpSymlinkFileName.address(), lpTargetFileName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSymbolicLinkW$MH() {
        return winbase_h$constants$2.CreateSymbolicLinkW$MH();
    }
    public static @C("BOOLEAN") byte CreateSymbolicLinkW (@C("LPCWSTR") Addressable lpSymlinkFileName, @C("LPCWSTR") Addressable lpTargetFileName, @C("DWORD") int dwFlags) {
        try {
            return (byte)winbase_h$constants$2.CreateSymbolicLinkW$MH().invokeExact(lpSymlinkFileName.address(), lpTargetFileName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryActCtxSettingsW$MH() {
        return winbase_h$constants$2.QueryActCtxSettingsW$MH();
    }
    public static @C("BOOL") int QueryActCtxSettingsW (@C("DWORD") int dwFlags, @C("HANDLE") Addressable hActCtx, @C("PCWSTR") Addressable settingsNameSpace, @C("PCWSTR") Addressable settingName, @C("PWSTR") Addressable pvBuffer, @C("SIZE_T") long dwBuffer, @C("SIZE_T*") Addressable pdwWrittenOrRequired) {
        try {
            return (int)winbase_h$constants$2.QueryActCtxSettingsW$MH().invokeExact(dwFlags, hActCtx.address(), settingsNameSpace.address(), settingName.address(), pvBuffer.address(), dwBuffer, pdwWrittenOrRequired.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSymbolicLinkTransactedA$MH() {
        return winbase_h$constants$2.CreateSymbolicLinkTransactedA$MH();
    }
    public static @C("BOOLEAN") byte CreateSymbolicLinkTransactedA (@C("LPCSTR") Addressable lpSymlinkFileName, @C("LPCSTR") Addressable lpTargetFileName, @C("DWORD") int dwFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (byte)winbase_h$constants$2.CreateSymbolicLinkTransactedA$MH().invokeExact(lpSymlinkFileName.address(), lpTargetFileName.address(), dwFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSymbolicLinkTransactedW$MH() {
        return winbase_h$constants$2.CreateSymbolicLinkTransactedW$MH();
    }
    public static @C("BOOLEAN") byte CreateSymbolicLinkTransactedW (@C("LPCWSTR") Addressable lpSymlinkFileName, @C("LPCWSTR") Addressable lpTargetFileName, @C("DWORD") int dwFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (byte)winbase_h$constants$2.CreateSymbolicLinkTransactedW$MH().invokeExact(lpSymlinkFileName.address(), lpTargetFileName.address(), dwFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReplacePartitionUnit$MH() {
        return winbase_h$constants$2.ReplacePartitionUnit$MH();
    }
    public static @C("BOOL") int ReplacePartitionUnit (@C("PWSTR") Addressable TargetPartition, @C("PWSTR") Addressable SparePartition, @C("ULONG") int Flags) {
        try {
            return (int)winbase_h$constants$2.ReplacePartitionUnit$MH().invokeExact(TargetPartition.address(), SparePartition.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddSecureMemoryCacheCallback$MH() {
        return winbase_h$constants$2.AddSecureMemoryCacheCallback$MH();
    }
    public static @C("BOOL") int AddSecureMemoryCacheCallback (@C("PSECURE_MEMORY_CACHE_CALLBACK") Addressable pfnCallBack) {
        try {
            return (int)winbase_h$constants$2.AddSecureMemoryCacheCallback$MH().invokeExact(pfnCallBack.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveSecureMemoryCacheCallback$MH() {
        return winbase_h$constants$2.RemoveSecureMemoryCacheCallback$MH();
    }
    public static @C("BOOL") int RemoveSecureMemoryCacheCallback (@C("PSECURE_MEMORY_CACHE_CALLBACK") Addressable pfnCallBack) {
        try {
            return (int)winbase_h$constants$2.RemoveSecureMemoryCacheCallback$MH().invokeExact(pfnCallBack.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyContext$MH() {
        return winbase_h$constants$2.CopyContext$MH();
    }
    public static @C("BOOL") int CopyContext (@C("PCONTEXT") Addressable Destination, @C("DWORD") int ContextFlags, @C("PCONTEXT") Addressable Source) {
        try {
            return (int)winbase_h$constants$2.CopyContext$MH().invokeExact(Destination.address(), ContextFlags, Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeContext$MH() {
        return winbase_h$constants$2.InitializeContext$MH();
    }
    public static @C("BOOL") int InitializeContext (@C("PVOID") Addressable Buffer, @C("DWORD") int ContextFlags, @C("PCONTEXT*") Addressable Context, @C("PDWORD") Addressable ContextLength) {
        try {
            return (int)winbase_h$constants$2.InitializeContext$MH().invokeExact(Buffer.address(), ContextFlags, Context.address(), ContextLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeContext2$MH() {
        return winbase_h$constants$2.InitializeContext2$MH();
    }
    public static @C("BOOL") int InitializeContext2 (@C("PVOID") Addressable Buffer, @C("DWORD") int ContextFlags, @C("PCONTEXT*") Addressable Context, @C("PDWORD") Addressable ContextLength, @C("ULONG64") long XStateCompactionMask) {
        try {
            return (int)winbase_h$constants$2.InitializeContext2$MH().invokeExact(Buffer.address(), ContextFlags, Context.address(), ContextLength.address(), XStateCompactionMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnabledXStateFeatures$MH() {
        return winbase_h$constants$2.GetEnabledXStateFeatures$MH();
    }
    public static @C("DWORD64") long GetEnabledXStateFeatures () {
        try {
            return (long)winbase_h$constants$2.GetEnabledXStateFeatures$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetXStateFeaturesMask$MH() {
        return winbase_h$constants$2.GetXStateFeaturesMask$MH();
    }
    public static @C("BOOL") int GetXStateFeaturesMask (@C("PCONTEXT") Addressable Context, @C("PDWORD64") Addressable FeatureMask) {
        try {
            return (int)winbase_h$constants$2.GetXStateFeaturesMask$MH().invokeExact(Context.address(), FeatureMask.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocateXStateFeature$MH() {
        return winbase_h$constants$2.LocateXStateFeature$MH();
    }
    public static @C("PVOID") MemoryAddress LocateXStateFeature (@C("PCONTEXT") Addressable Context, @C("DWORD") int FeatureId, @C("PDWORD") Addressable Length) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)winbase_h$constants$2.LocateXStateFeature$MH().invokeExact(Context.address(), FeatureId, Length.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetXStateFeaturesMask$MH() {
        return winbase_h$constants$2.SetXStateFeaturesMask$MH();
    }
    public static @C("BOOL") int SetXStateFeaturesMask (@C("PCONTEXT") Addressable Context, @C("DWORD64") long FeatureMask) {
        try {
            return (int)winbase_h$constants$2.SetXStateFeaturesMask$MH().invokeExact(Context.address(), FeatureMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnableThreadProfiling$MH() {
        return winbase_h$constants$2.EnableThreadProfiling$MH();
    }
    public static @C("DWORD") int EnableThreadProfiling (@C("HANDLE") Addressable ThreadHandle, @C("DWORD") int Flags, @C("DWORD64") long HardwareCounters, @C("HANDLE*") Addressable PerformanceDataHandle) {
        try {
            return (int)winbase_h$constants$2.EnableThreadProfiling$MH().invokeExact(ThreadHandle.address(), Flags, HardwareCounters, PerformanceDataHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DisableThreadProfiling$MH() {
        return winbase_h$constants$2.DisableThreadProfiling$MH();
    }
    public static @C("DWORD") int DisableThreadProfiling (@C("HANDLE") Addressable PerformanceDataHandle) {
        try {
            return (int)winbase_h$constants$2.DisableThreadProfiling$MH().invokeExact(PerformanceDataHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryThreadProfiling$MH() {
        return winbase_h$constants$2.QueryThreadProfiling$MH();
    }
    public static @C("DWORD") int QueryThreadProfiling (@C("HANDLE") Addressable ThreadHandle, @C("PBOOLEAN") Addressable Enabled) {
        try {
            return (int)winbase_h$constants$2.QueryThreadProfiling$MH().invokeExact(ThreadHandle.address(), Enabled.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadThreadProfilingData$MH() {
        return winbase_h$constants$2.ReadThreadProfilingData$MH();
    }
    public static @C("DWORD") int ReadThreadProfilingData (@C("HANDLE") Addressable PerformanceDataHandle, @C("DWORD") int Flags, @C("PPERFORMANCE_DATA") Addressable PerformanceData) {
        try {
            return (int)winbase_h$constants$2.ReadThreadProfilingData$MH().invokeExact(PerformanceDataHandle.address(), Flags, PerformanceData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RaiseCustomSystemEventTrigger$MH() {
        return winbase_h$constants$2.RaiseCustomSystemEventTrigger$MH();
    }
    public static @C("DWORD") int RaiseCustomSystemEventTrigger (@C("PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") Addressable CustomSystemEventTriggerConfig) {
        try {
            return (int)winbase_h$constants$2.RaiseCustomSystemEventTrigger$MH().invokeExact(CustomSystemEventTriggerConfig.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("unsigned long") int WAIT_FAILED() {
        return winbase_h$constants$2.WAIT_FAILED();
    }
    public static @C("unsigned long") int WAIT_OBJECT_0() {
        return winbase_h$constants$2.WAIT_OBJECT_0();
    }
    public static @C("unsigned long") int WAIT_ABANDONED() {
        return winbase_h$constants$2.WAIT_ABANDONED();
    }
    public static @C("unsigned long") int WAIT_ABANDONED_0() {
        return winbase_h$constants$2.WAIT_ABANDONED_0();
    }
    public static @C("unsigned long") int WAIT_IO_COMPLETION() {
        return winbase_h$constants$2.WAIT_IO_COMPLETION();
    }
    public static @C("unsigned int") int FILE_FLAG_WRITE_THROUGH() {
        return winbase_h$constants$2.FILE_FLAG_WRITE_THROUGH();
    }
    public static @C("int") int SECURITY_ANONYMOUS() {
        return winbase_h$constants$2.SECURITY_ANONYMOUS();
    }
    public static @C("int") int SECURITY_IDENTIFICATION() {
        return winbase_h$constants$2.SECURITY_IDENTIFICATION();
    }
    public static @C("int") int SECURITY_IMPERSONATION() {
        return winbase_h$constants$2.SECURITY_IMPERSONATION();
    }
    public static @C("int") int SECURITY_DELEGATION() {
        return winbase_h$constants$2.SECURITY_DELEGATION();
    }
    public static @C("unsigned long") int SP_SERIALCOMM() {
        return winbase_h$constants$2.SP_SERIALCOMM();
    }
    public static @C("unsigned long") int PST_UNSPECIFIED() {
        return winbase_h$constants$2.PST_UNSPECIFIED();
    }
    public static @C("unsigned long") int PST_RS232() {
        return winbase_h$constants$2.PST_RS232();
    }
    public static @C("unsigned long") int PST_PARALLELPORT() {
        return winbase_h$constants$2.PST_PARALLELPORT();
    }
    public static @C("unsigned long") int PST_RS422() {
        return winbase_h$constants$2.PST_RS422();
    }
    public static @C("unsigned long") int PST_RS423() {
        return winbase_h$constants$2.PST_RS423();
    }
    public static @C("unsigned long") int PST_RS449() {
        return winbase_h$constants$2.PST_RS449();
    }
    public static @C("unsigned long") int PST_MODEM() {
        return winbase_h$constants$2.PST_MODEM();
    }
    public static @C("unsigned long") int PST_FAX() {
        return winbase_h$constants$2.PST_FAX();
    }
    public static @C("unsigned long") int PST_SCANNER() {
        return winbase_h$constants$2.PST_SCANNER();
    }
    public static @C("unsigned long") int PST_NETWORK_BRIDGE() {
        return winbase_h$constants$2.PST_NETWORK_BRIDGE();
    }
    public static @C("unsigned long") int PST_LAT() {
        return winbase_h$constants$2.PST_LAT();
    }
    public static @C("unsigned long") int PST_TCPIP_TELNET() {
        return winbase_h$constants$2.PST_TCPIP_TELNET();
    }
    public static @C("unsigned long") int PST_X25() {
        return winbase_h$constants$2.PST_X25();
    }
    public static @C("unsigned long") int PCF_DTRDSR() {
        return winbase_h$constants$2.PCF_DTRDSR();
    }
    public static @C("unsigned long") int PCF_RTSCTS() {
        return winbase_h$constants$2.PCF_RTSCTS();
    }
    public static @C("unsigned long") int PCF_RLSD() {
        return winbase_h$constants$2.PCF_RLSD();
    }
    public static @C("unsigned long") int PCF_PARITY_CHECK() {
        return winbase_h$constants$2.PCF_PARITY_CHECK();
    }
    public static @C("unsigned long") int PCF_XONXOFF() {
        return winbase_h$constants$2.PCF_XONXOFF();
    }
    public static @C("unsigned long") int PCF_SETXCHAR() {
        return winbase_h$constants$2.PCF_SETXCHAR();
    }
    public static @C("unsigned long") int PCF_TOTALTIMEOUTS() {
        return winbase_h$constants$2.PCF_TOTALTIMEOUTS();
    }
    public static @C("unsigned long") int PCF_INTTIMEOUTS() {
        return winbase_h$constants$2.PCF_INTTIMEOUTS();
    }
    public static @C("unsigned long") int PCF_SPECIALCHARS() {
        return winbase_h$constants$2.PCF_SPECIALCHARS();
    }
    public static @C("unsigned long") int PCF_16BITMODE() {
        return winbase_h$constants$2.PCF_16BITMODE();
    }
    public static @C("unsigned long") int SP_PARITY() {
        return winbase_h$constants$2.SP_PARITY();
    }
    public static @C("unsigned long") int SP_BAUD() {
        return winbase_h$constants$2.SP_BAUD();
    }
    public static @C("unsigned long") int SP_DATABITS() {
        return winbase_h$constants$2.SP_DATABITS();
    }
    public static @C("unsigned long") int SP_STOPBITS() {
        return winbase_h$constants$2.SP_STOPBITS();
    }
    public static @C("unsigned long") int SP_HANDSHAKING() {
        return winbase_h$constants$2.SP_HANDSHAKING();
    }
    public static @C("unsigned long") int SP_PARITY_CHECK() {
        return winbase_h$constants$2.SP_PARITY_CHECK();
    }
    public static @C("unsigned long") int SP_RLSD() {
        return winbase_h$constants$2.SP_RLSD();
    }
    public static @C("unsigned long") int BAUD_075() {
        return winbase_h$constants$2.BAUD_075();
    }
    public static @C("unsigned long") int BAUD_110() {
        return winbase_h$constants$2.BAUD_110();
    }
    public static @C("unsigned long") int BAUD_134_5() {
        return winbase_h$constants$2.BAUD_134_5();
    }
    public static @C("unsigned long") int BAUD_150() {
        return winbase_h$constants$2.BAUD_150();
    }
    public static @C("unsigned long") int BAUD_300() {
        return winbase_h$constants$2.BAUD_300();
    }
    public static @C("unsigned long") int BAUD_600() {
        return winbase_h$constants$2.BAUD_600();
    }
    public static @C("unsigned long") int BAUD_1200() {
        return winbase_h$constants$2.BAUD_1200();
    }
    public static @C("unsigned long") int BAUD_1800() {
        return winbase_h$constants$2.BAUD_1800();
    }
    public static @C("unsigned long") int BAUD_2400() {
        return winbase_h$constants$2.BAUD_2400();
    }
    public static @C("unsigned long") int BAUD_4800() {
        return winbase_h$constants$2.BAUD_4800();
    }
    public static @C("unsigned long") int BAUD_7200() {
        return winbase_h$constants$2.BAUD_7200();
    }
    public static @C("unsigned long") int BAUD_9600() {
        return winbase_h$constants$2.BAUD_9600();
    }
    public static @C("unsigned long") int BAUD_14400() {
        return winbase_h$constants$2.BAUD_14400();
    }
    public static @C("unsigned long") int BAUD_19200() {
        return winbase_h$constants$2.BAUD_19200();
    }
    public static @C("unsigned long") int BAUD_38400() {
        return winbase_h$constants$2.BAUD_38400();
    }
    public static @C("unsigned long") int BAUD_56K() {
        return winbase_h$constants$2.BAUD_56K();
    }
    public static @C("unsigned long") int BAUD_128K() {
        return winbase_h$constants$2.BAUD_128K();
    }
    public static @C("unsigned long") int BAUD_115200() {
        return winbase_h$constants$2.BAUD_115200();
    }
    public static @C("unsigned long") int BAUD_57600() {
        return winbase_h$constants$2.BAUD_57600();
    }
    public static @C("unsigned long") int BAUD_USER() {
        return winbase_h$constants$2.BAUD_USER();
    }
    public static @C("unsigned short") short DATABITS_5() {
        return winbase_h$constants$2.DATABITS_5();
    }
    public static @C("unsigned short") short DATABITS_6() {
        return winbase_h$constants$2.DATABITS_6();
    }
    public static @C("unsigned short") short DATABITS_7() {
        return winbase_h$constants$2.DATABITS_7();
    }
    public static @C("unsigned short") short DATABITS_8() {
        return winbase_h$constants$2.DATABITS_8();
    }
    public static @C("unsigned short") short DATABITS_16() {
        return winbase_h$constants$2.DATABITS_16();
    }
    public static @C("unsigned short") short DATABITS_16X() {
        return winbase_h$constants$2.DATABITS_16X();
    }
    public static @C("unsigned short") short STOPBITS_10() {
        return winbase_h$constants$2.STOPBITS_10();
    }
    public static @C("unsigned short") short STOPBITS_15() {
        return winbase_h$constants$2.STOPBITS_15();
    }
    public static @C("unsigned short") short STOPBITS_20() {
        return winbase_h$constants$2.STOPBITS_20();
    }
    public static @C("unsigned short") short PARITY_NONE() {
        return winbase_h$constants$2.PARITY_NONE();
    }
    public static @C("unsigned short") short PARITY_ODD() {
        return winbase_h$constants$2.PARITY_ODD();
    }
    public static @C("unsigned short") short PARITY_EVEN() {
        return winbase_h$constants$2.PARITY_EVEN();
    }
    public static @C("unsigned short") short PARITY_MARK() {
        return winbase_h$constants$2.PARITY_MARK();
    }
    public static @C("unsigned short") short PARITY_SPACE() {
        return winbase_h$constants$2.PARITY_SPACE();
    }
    public static @C("unsigned long") int COMMPROP_INITIALIZED() {
        return winbase_h$constants$2.COMMPROP_INITIALIZED();
    }
    public static @C("int") int GMEM_LOWER() {
        return winbase_h$constants$2.GMEM_LOWER();
    }
    public static @C("int") int GHND() {
        return winbase_h$constants$2.GHND();
    }
    public static @C("int") int GPTR() {
        return winbase_h$constants$2.GPTR();
    }
    public static @C("unsigned int") int CREATE_IGNORE_SYSTEM_DEFAULT() {
        return winbase_h$constants$2.CREATE_IGNORE_SYSTEM_DEFAULT();
    }
    public static @C("int") int THREAD_PRIORITY_LOWEST() {
        return winbase_h$constants$2.THREAD_PRIORITY_LOWEST();
    }
    public static @C("int") int THREAD_PRIORITY_BELOW_NORMAL() {
        return winbase_h$constants$2.THREAD_PRIORITY_BELOW_NORMAL();
    }
    public static @C("int") int THREAD_PRIORITY_HIGHEST() {
        return winbase_h$constants$2.THREAD_PRIORITY_HIGHEST();
    }
    public static @C("int") int THREAD_PRIORITY_ABOVE_NORMAL() {
        return winbase_h$constants$2.THREAD_PRIORITY_ABOVE_NORMAL();
    }
    public static @C("int") int THREAD_PRIORITY_ERROR_RETURN() {
        return winbase_h$constants$2.THREAD_PRIORITY_ERROR_RETURN();
    }
    public static @C("int") int THREAD_PRIORITY_TIME_CRITICAL() {
        return winbase_h$constants$2.THREAD_PRIORITY_TIME_CRITICAL();
    }
    public static @C("int") int THREAD_PRIORITY_IDLE() {
        return winbase_h$constants$2.THREAD_PRIORITY_IDLE();
    }
    public static @C("unsigned long") int STD_INPUT_HANDLE() {
        return winbase_h$constants$2.STD_INPUT_HANDLE();
    }
    public static @C("unsigned long") int STD_OUTPUT_HANDLE() {
        return winbase_h$constants$2.STD_OUTPUT_HANDLE();
    }
    public static @C("unsigned long") int STD_ERROR_HANDLE() {
        return winbase_h$constants$2.STD_ERROR_HANDLE();
    }
    public static @C("unsigned int") int INFINITE() {
        return winbase_h$constants$2.INFINITE();
    }
    public static @C("int") int IE_BADID() {
        return winbase_h$constants$2.IE_BADID();
    }
    public static @C("int") int IE_OPEN() {
        return winbase_h$constants$2.IE_OPEN();
    }
    public static @C("int") int IE_NOPEN() {
        return winbase_h$constants$2.IE_NOPEN();
    }
    public static @C("int") int IE_MEMORY() {
        return winbase_h$constants$2.IE_MEMORY();
    }
    public static @C("int") int IE_DEFAULT() {
        return winbase_h$constants$2.IE_DEFAULT();
    }
    public static @C("int") int IE_HARDWARE() {
        return winbase_h$constants$2.IE_HARDWARE();
    }
    public static @C("int") int IE_BYTESIZE() {
        return winbase_h$constants$2.IE_BYTESIZE();
    }
    public static @C("int") int IE_BAUDRATE() {
        return winbase_h$constants$2.IE_BAUDRATE();
    }
    public static @C("unsigned long") int MS_CTS_ON() {
        return winbase_h$constants$2.MS_CTS_ON();
    }
    public static @C("unsigned long") int MS_DSR_ON() {
        return winbase_h$constants$2.MS_DSR_ON();
    }
    public static @C("unsigned long") int MS_RING_ON() {
        return winbase_h$constants$2.MS_RING_ON();
    }
    public static @C("unsigned long") int MS_RLSD_ON() {
        return winbase_h$constants$2.MS_RLSD_ON();
    }
    public static @C("int") int S_SERDVNA() {
        return winbase_h$constants$2.S_SERDVNA();
    }
    public static @C("int") int S_SEROFM() {
        return winbase_h$constants$2.S_SEROFM();
    }
    public static @C("int") int S_SERMACT() {
        return winbase_h$constants$2.S_SERMACT();
    }
    public static @C("int") int S_SERQFUL() {
        return winbase_h$constants$2.S_SERQFUL();
    }
    public static @C("int") int S_SERBDNT() {
        return winbase_h$constants$2.S_SERBDNT();
    }
    public static @C("int") int S_SERDLN() {
        return winbase_h$constants$2.S_SERDLN();
    }
    public static @C("int") int S_SERDCC() {
        return winbase_h$constants$2.S_SERDCC();
    }
    public static @C("int") int S_SERDTP() {
        return winbase_h$constants$2.S_SERDTP();
    }
    public static @C("int") int S_SERDVL() {
        return winbase_h$constants$2.S_SERDVL();
    }
    public static @C("int") int S_SERDMD() {
        return winbase_h$constants$2.S_SERDMD();
    }
    public static @C("int") int S_SERDSH() {
        return winbase_h$constants$2.S_SERDSH();
    }
    public static @C("int") int S_SERDPT() {
        return winbase_h$constants$2.S_SERDPT();
    }
    public static @C("int") int S_SERDFQ() {
        return winbase_h$constants$2.S_SERDFQ();
    }
    public static @C("int") int S_SERDDR() {
        return winbase_h$constants$2.S_SERDDR();
    }
    public static @C("int") int S_SERDSR() {
        return winbase_h$constants$2.S_SERDSR();
    }
    public static @C("int") int S_SERDST() {
        return winbase_h$constants$2.S_SERDST();
    }
    public static @C("unsigned int") int NMPWAIT_WAIT_FOREVER() {
        return winbase_h$constants$2.NMPWAIT_WAIT_FOREVER();
    }
    public static @C("int") int FS_CASE_IS_PRESERVED() {
        return winbase_h$constants$2.FS_CASE_IS_PRESERVED();
    }
    public static @C("int") int FS_CASE_SENSITIVE() {
        return winbase_h$constants$2.FS_CASE_SENSITIVE();
    }
    public static @C("int") int FS_UNICODE_STORED_ON_DISK() {
        return winbase_h$constants$2.FS_UNICODE_STORED_ON_DISK();
    }
    public static @C("int") int FS_PERSISTENT_ACLS() {
        return winbase_h$constants$2.FS_PERSISTENT_ACLS();
    }
    public static @C("int") int FS_VOL_IS_COMPRESSED() {
        return winbase_h$constants$2.FS_VOL_IS_COMPRESSED();
    }
    public static @C("int") int FS_FILE_COMPRESSION() {
        return winbase_h$constants$2.FS_FILE_COMPRESSION();
    }
    public static @C("int") int FS_FILE_ENCRYPTION() {
        return winbase_h$constants$2.FS_FILE_ENCRYPTION();
    }
    public static @C("unsigned short") short INVALID_ATOM() {
        return winbase_h$constants$2.INVALID_ATOM();
    }
    public static @C("int") int SCS_THIS_PLATFORM_BINARY() {
        return winbase_h$constants$2.SCS_THIS_PLATFORM_BINARY();
    }
    public static @C("int") int UMS_VERSION() {
        return winbase_h$constants$2.UMS_VERSION();
    }
    public static @C("int") int CRITICAL_SECTION_NO_DEBUG_INFO() {
        return winbase_h$constants$2.CRITICAL_SECTION_NO_DEBUG_INFO();
    }
    public static @C("int") int EFS_USE_RECOVERY_KEYS() {
        return winbase_h$constants$2.EFS_USE_RECOVERY_KEYS();
    }
    public static @C("int") int CREATE_FOR_IMPORT() {
        return winbase_h$constants$2.CREATE_FOR_IMPORT();
    }
    public static @C("int") int CREATE_FOR_DIR() {
        return winbase_h$constants$2.CREATE_FOR_DIR();
    }
    public static @C("int") int OVERWRITE_HIDDEN() {
        return winbase_h$constants$2.OVERWRITE_HIDDEN();
    }
    public static @C("int") int EFSRPC_SECURE_ONLY() {
        return winbase_h$constants$2.EFSRPC_SECURE_ONLY();
    }
    public static @C("int") int EFS_DROP_ALTERNATE_STREAMS() {
        return winbase_h$constants$2.EFS_DROP_ALTERNATE_STREAMS();
    }
    public static @C("unsigned int") int PROTECTION_LEVEL_SAME() {
        return winbase_h$constants$2.PROTECTION_LEVEL_SAME();
    }
    public static @C("unsigned int") int PROTECTION_LEVEL_NONE() {
        return winbase_h$constants$2.PROTECTION_LEVEL_NONE();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_PARENT_PROCESS() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_PARENT_PROCESS();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_HANDLE_LIST() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_HANDLE_LIST();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_PREFERRED_NODE() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_PREFERRED_NODE();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_UMS_THREAD() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_UMS_THREAD();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_PROTECTION_LEVEL() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_PROTECTION_LEVEL();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_MASK();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_DEFER();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_OFF();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON_REQ_RELOCS() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON_REQ_RELOCS();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_MASK();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_DEFER();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_OFF();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_RESERVED();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_MASK();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_DEFER();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_ON();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_OFF();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_RESERVED();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_MASK();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_DEFER();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_ON();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_OFF();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_RESERVED();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_MASK();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_DEFER();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_ON();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_OFF();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_RESERVED();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_MASK();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_DEFER();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_ON();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_OFF();
    }
    public static @C("int") int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_RESERVED();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_RESERVED();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON_ALLOW_OPT_OUT() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON_ALLOW_OPT_OUT();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_EXPORT_SUPPRESSION() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_EXPORT_SUPPRESSION();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_AUDIT_NONSYSTEM_FONTS() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_AUDIT_NONSYSTEM_FONTS();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_RESERVED();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_RESERVED();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_RESERVED();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_AUDIT() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_AUDIT();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_RESERVED();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_NOINHERIT() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_NOINHERIT();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_RESERVED();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_RESERVED();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_RESERVED();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_MASK() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_MASK();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_DEFER() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_DEFER();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_ON() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_ON();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_OFF() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_OFF();
    }
    public static @C("unsigned long long") long PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_RESERVED() {
        return winbase_h$constants$2.PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_RESERVED();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_JOB_LIST() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_JOB_LIST();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_CHILD_PROCESS_POLICY() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_CHILD_PROCESS_POLICY();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_WIN32K_FILTER() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_WIN32K_FILTER();
    }
    public static @C("int") int PROC_THREAD_ATTRIBUTE_DESKTOP_APP_POLICY() {
        return winbase_h$constants$2.PROC_THREAD_ATTRIBUTE_DESKTOP_APP_POLICY();
    }
    public static @C("char*") MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A() {
        return winbase_h$constants$2.GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A();
    }
    public static @C("unsigned short*") MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W() {
        return winbase_h$constants$2.GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W();
    }
    public static @C("char*") MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T() {
        return winbase_h$constants$2.GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T();
    }
    public static @C("char*") MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A() {
        return winbase_h$constants$2.GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A();
    }
    public static @C("unsigned short*") MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W() {
        return winbase_h$constants$2.GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W();
    }
    public static @C("char*") MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T() {
        return winbase_h$constants$2.GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T();
    }
    public static @C("char*") MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A() {
        return winbase_h$constants$2.GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A();
    }
    public static @C("unsigned short*") MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W() {
        return winbase_h$constants$2.GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W();
    }
    public static @C("char*") MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T() {
        return winbase_h$constants$2.GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T();
    }
    public static @C("int") int BASE_SEARCH_PATH_INVALID_FLAGS() {
        return winbase_h$constants$2.BASE_SEARCH_PATH_INVALID_FLAGS();
    }
    public static @C("long") int COPYFILE2_MESSAGE_COPY_OFFLOAD() {
        return winbase_h$constants$2.COPYFILE2_MESSAGE_COPY_OFFLOAD();
    }
    public static @C("unsigned int") int LOGON_ZERO_PASSWORD_BUFFER() {
        return winbase_h$constants$2.LOGON_ZERO_PASSWORD_BUFFER();
    }
    public static @C("int") int DOCKINFO_UNDOCKED() {
        return winbase_h$constants$2.DOCKINFO_UNDOCKED();
    }
    public static @C("int") int DOCKINFO_DOCKED() {
        return winbase_h$constants$2.DOCKINFO_DOCKED();
    }
    public static @C("int") int DOCKINFO_USER_SUPPLIED() {
        return winbase_h$constants$2.DOCKINFO_USER_SUPPLIED();
    }
    public static @C("int") int DOCKINFO_USER_UNDOCKED() {
        return winbase_h$constants$2.DOCKINFO_USER_UNDOCKED();
    }
    public static @C("int") int DOCKINFO_USER_DOCKED() {
        return winbase_h$constants$2.DOCKINFO_USER_DOCKED();
    }
    public static @C("unsigned int") int BATTERY_LIFE_UNKNOWN() {
        return winbase_h$constants$2.BATTERY_LIFE_UNKNOWN();
    }
    public static @C("int") int ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID() {
        return winbase_h$constants$2.ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID();
    }
    public static @C("int") int ACTCTX_FLAG_LANGID_VALID() {
        return winbase_h$constants$2.ACTCTX_FLAG_LANGID_VALID();
    }
    public static @C("int") int ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID() {
        return winbase_h$constants$2.ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID();
    }
    public static @C("int") int ACTCTX_FLAG_RESOURCE_NAME_VALID() {
        return winbase_h$constants$2.ACTCTX_FLAG_RESOURCE_NAME_VALID();
    }
    public static @C("int") int ACTCTX_FLAG_SET_PROCESS_DEFAULT() {
        return winbase_h$constants$2.ACTCTX_FLAG_SET_PROCESS_DEFAULT();
    }
    public static @C("int") int ACTCTX_FLAG_APPLICATION_NAME_VALID() {
        return winbase_h$constants$2.ACTCTX_FLAG_APPLICATION_NAME_VALID();
    }
    public static @C("int") int ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF() {
        return winbase_h$constants$2.ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF();
    }
    public static @C("int") int ACTCTX_FLAG_HMODULE_VALID() {
        return winbase_h$constants$2.ACTCTX_FLAG_HMODULE_VALID();
    }
    public static @C("int") int DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION() {
        return winbase_h$constants$2.DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION();
    }
    public static @C("int") int FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX() {
        return winbase_h$constants$2.FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX();
    }
    public static @C("int") int FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS() {
        return winbase_h$constants$2.FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS();
    }
    public static @C("int") int FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA() {
        return winbase_h$constants$2.FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA();
    }
    public static @C("int") int QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX() {
        return winbase_h$constants$2.QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX();
    }
    public static @C("int") int QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE() {
        return winbase_h$constants$2.QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE();
    }
    public static @C("int") int QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS() {
        return winbase_h$constants$2.QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS();
    }
    public static @C("unsigned int") int QUERY_ACTCTX_FLAG_NO_ADDREF() {
        return winbase_h$constants$2.QUERY_ACTCTX_FLAG_NO_ADDREF();
    }
    public static @C("int") int RECOVERY_MAX_PING_INTERVAL() {
        return winbase_h$constants$2.RECOVERY_MAX_PING_INTERVAL();
    }
    public static @C("unsigned int") int STORAGE_INFO_OFFSET_UNKNOWN() {
        return winbase_h$constants$2.STORAGE_INFO_OFFSET_UNKNOWN();
    }
    public static @C("int") int SYMBOLIC_LINK_FLAG_DIRECTORY() {
        return winbase_h$constants$2.SYMBOLIC_LINK_FLAG_DIRECTORY();
    }
    public static @C("int") int SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE() {
        return winbase_h$constants$2.SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE();
    }
    public static @C("int") int MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS() {
        return winbase_h$constants$2.MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS();
    }
}


