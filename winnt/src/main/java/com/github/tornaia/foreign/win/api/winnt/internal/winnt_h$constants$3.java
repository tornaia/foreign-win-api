// Generated by jextract

package com.github.tornaia.foreign.win.api.winnt.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class winnt_h$constants$3 extends winnt_h$constants$2 {

    /* package-private */ winnt_h$constants$3() {}
    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rsi$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rsi$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Rsi$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rsi$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rsi")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rsi$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Rsi$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rdi$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rdi$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Rdi$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rdi$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rdi")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rdi$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Rdi$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R8$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R8$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$R8$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R8$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R8")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R8$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$R8$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R9$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R9$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$R9$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R9$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R9")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R9$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$R9$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R10$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R10$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$R10$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R10$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R10")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R10$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$R10$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R11$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R11$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$R11$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R11$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R11")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R11$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$R11$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R12$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R12$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$R12$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R12$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R12")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R12$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$R12$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R13$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R13$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$R13$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R13$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R13")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R13$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$R13$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R14$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R14$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$R14$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R14$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R14")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R14$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$R14$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R15$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$R15$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$R15$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R15$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R15")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$R15$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$R15$VH_; }

    static final MemoryLayout _SCOPE_TABLE_ARM$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Count"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("BeginAddress"),
            C_LONG.withName("EndAddress"),
            C_LONG.withName("HandlerAddress"),
            C_LONG.withName("JumpTarget")
        )).withName("ScopeRecord")
    ).withName("_SCOPE_TABLE_ARM");
    static final jdk.incubator.foreign.MemoryLayout _SCOPE_TABLE_ARM$struct$LAYOUT() { return _SCOPE_TABLE_ARM$struct$LAYOUT_; }

    static final MemoryLayout _SCOPE_TABLE_ARM$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCOPE_TABLE_ARM$Count$LAYOUT() { return _SCOPE_TABLE_ARM$Count$LAYOUT_; }

    static final VarHandle _SCOPE_TABLE_ARM$Count$VH_ = _SCOPE_TABLE_ARM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle _SCOPE_TABLE_ARM$Count$VH() { return _SCOPE_TABLE_ARM$Count$VH_; }

    static final MemoryLayout _SCOPE_TABLE_ARM64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Count"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("BeginAddress"),
            C_LONG.withName("EndAddress"),
            C_LONG.withName("HandlerAddress"),
            C_LONG.withName("JumpTarget")
        )).withName("ScopeRecord")
    ).withName("_SCOPE_TABLE_ARM64");
    static final jdk.incubator.foreign.MemoryLayout _SCOPE_TABLE_ARM64$struct$LAYOUT() { return _SCOPE_TABLE_ARM64$struct$LAYOUT_; }

    static final MemoryLayout _SCOPE_TABLE_ARM64$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCOPE_TABLE_ARM64$Count$LAYOUT() { return _SCOPE_TABLE_ARM64$Count$LAYOUT_; }

    static final VarHandle _SCOPE_TABLE_ARM64$Count$VH_ = _SCOPE_TABLE_ARM64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle _SCOPE_TABLE_ARM64$Count$VH() { return _SCOPE_TABLE_ARM64$Count$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("X19"),
        C_POINTER.withName("X20"),
        C_POINTER.withName("X21"),
        C_POINTER.withName("X22"),
        C_POINTER.withName("X23"),
        C_POINTER.withName("X24"),
        C_POINTER.withName("X25"),
        C_POINTER.withName("X26"),
        C_POINTER.withName("X27"),
        C_POINTER.withName("X28"),
        C_POINTER.withName("Fp"),
        C_POINTER.withName("Lr"),
        C_POINTER.withName("D8"),
        C_POINTER.withName("D9"),
        C_POINTER.withName("D10"),
        C_POINTER.withName("D11"),
        C_POINTER.withName("D12"),
        C_POINTER.withName("D13"),
        C_POINTER.withName("D14"),
        C_POINTER.withName("D15")
    ).withName("_KNONVOLATILE_CONTEXT_POINTERS_ARM64");
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X19$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X19$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X19$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X19$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("X19")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X19$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X19$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X20$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X20$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X20$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X20$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("X20")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X20$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X20$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X21$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X21$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X21$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X21$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("X21")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X21$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X21$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X22$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X22$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X22$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X22$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("X22")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X22$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X22$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X23$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X23$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X23$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X23$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("X23")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X23$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X23$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X24$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X24$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X24$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X24$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("X24")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X24$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X24$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X25$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X25$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X25$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X25$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("X25")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X25$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X25$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X26$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X26$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X26$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X26$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("X26")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X26$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X26$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X27$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X27$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X27$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X27$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("X27")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X27$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X27$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X28$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X28$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X28$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X28$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("X28")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X28$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$X28$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$Fp$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$Fp$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$Fp$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$Fp$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Fp")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$Fp$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$Fp$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$Lr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$Lr$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$Lr$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$Lr$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Lr")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$Lr$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$Lr$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D8$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D8$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D8$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D8$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("D8")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D8$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D8$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D9$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D9$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D9$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D9$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("D9")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D9$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D9$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D10$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D10$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D10$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D10$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("D10")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D10$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D10$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D11$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D11$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D11$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D11$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("D11")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D11$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D11$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D12$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D12$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D12$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D12$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("D12")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D12$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D12$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D13$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D13$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D13$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D13$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("D13")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D13$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D13$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D14$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D14$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D14$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D14$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("D14")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D14$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D14$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D15$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D15$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D15$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D15$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("D15")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D15$VH() { return _KNONVOLATILE_CONTEXT_POINTERS_ARM64$D15$VH_; }

    static final FunctionDescriptor __int2c$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor __int2c$FUNC() { return __int2c$FUNC_; }

    static final MethodHandle __int2c$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__int2c",
        "()V",
        __int2c$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __int2c$MH() { return __int2c$MH_; }

    static final MemoryLayout _LDT_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("LimitLow"),
        C_SHORT.withName("BaseLow"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_CHAR.withName("BaseMid"),
                C_CHAR.withName("Flags1"),
                C_CHAR.withName("Flags2"),
                C_CHAR.withName("BaseHi")
            ).withName("Bytes"),
            MemoryLayout.ofStruct(
                C_INT
            ).withName("Bits")
        ).withName("HighWord")
    ).withName("_LDT_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _LDT_ENTRY$struct$LAYOUT() { return _LDT_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _LDT_ENTRY$LimitLow$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _LDT_ENTRY$LimitLow$LAYOUT() { return _LDT_ENTRY$LimitLow$LAYOUT_; }

    static final VarHandle _LDT_ENTRY$LimitLow$VH_ = _LDT_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LimitLow"));
    static final java.lang.invoke.VarHandle _LDT_ENTRY$LimitLow$VH() { return _LDT_ENTRY$LimitLow$VH_; }

    static final MemoryLayout _LDT_ENTRY$BaseLow$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _LDT_ENTRY$BaseLow$LAYOUT() { return _LDT_ENTRY$BaseLow$LAYOUT_; }

    static final VarHandle _LDT_ENTRY$BaseLow$VH_ = _LDT_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("BaseLow"));
    static final java.lang.invoke.VarHandle _LDT_ENTRY$BaseLow$VH() { return _LDT_ENTRY$BaseLow$VH_; }

    static final MemoryLayout _LDT_ENTRY$HighWord$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_CHAR.withName("BaseMid"),
            C_CHAR.withName("Flags1"),
            C_CHAR.withName("Flags2"),
            C_CHAR.withName("BaseHi")
        ).withName("Bytes"),
        MemoryLayout.ofStruct(
            C_INT
        ).withName("Bits")
    );
    static final jdk.incubator.foreign.MemoryLayout _LDT_ENTRY$HighWord$union$LAYOUT() { return _LDT_ENTRY$HighWord$union$LAYOUT_; }

    static final MemoryLayout _LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("BaseMid"),
        C_CHAR.withName("Flags1"),
        C_CHAR.withName("Flags2"),
        C_CHAR.withName("BaseHi")
    );
    static final jdk.incubator.foreign.MemoryLayout _LDT_ENTRY$HighWord$Bytes$struct$LAYOUT() { return _LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_; }

    static final MemoryLayout _LDT_ENTRY$HighWord$Bytes$BaseMid$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _LDT_ENTRY$HighWord$Bytes$BaseMid$LAYOUT() { return _LDT_ENTRY$HighWord$Bytes$BaseMid$LAYOUT_; }

    static final VarHandle _LDT_ENTRY$HighWord$Bytes$BaseMid$VH_ = _LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BaseMid"));
    static final java.lang.invoke.VarHandle _LDT_ENTRY$HighWord$Bytes$BaseMid$VH() { return _LDT_ENTRY$HighWord$Bytes$BaseMid$VH_; }

    static final MemoryLayout _LDT_ENTRY$HighWord$Bytes$Flags1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _LDT_ENTRY$HighWord$Bytes$Flags1$LAYOUT() { return _LDT_ENTRY$HighWord$Bytes$Flags1$LAYOUT_; }

    static final VarHandle _LDT_ENTRY$HighWord$Bytes$Flags1$VH_ = _LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags1"));
    static final java.lang.invoke.VarHandle _LDT_ENTRY$HighWord$Bytes$Flags1$VH() { return _LDT_ENTRY$HighWord$Bytes$Flags1$VH_; }

    static final MemoryLayout _LDT_ENTRY$HighWord$Bytes$Flags2$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _LDT_ENTRY$HighWord$Bytes$Flags2$LAYOUT() { return _LDT_ENTRY$HighWord$Bytes$Flags2$LAYOUT_; }

    static final VarHandle _LDT_ENTRY$HighWord$Bytes$Flags2$VH_ = _LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags2"));
    static final java.lang.invoke.VarHandle _LDT_ENTRY$HighWord$Bytes$Flags2$VH() { return _LDT_ENTRY$HighWord$Bytes$Flags2$VH_; }

    static final MemoryLayout _LDT_ENTRY$HighWord$Bytes$BaseHi$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _LDT_ENTRY$HighWord$Bytes$BaseHi$LAYOUT() { return _LDT_ENTRY$HighWord$Bytes$BaseHi$LAYOUT_; }

    static final VarHandle _LDT_ENTRY$HighWord$Bytes$BaseHi$VH_ = _LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BaseHi"));
    static final java.lang.invoke.VarHandle _LDT_ENTRY$HighWord$Bytes$BaseHi$VH() { return _LDT_ENTRY$HighWord$Bytes$BaseHi$VH_; }

    static final MemoryLayout _LDT_ENTRY$HighWord$Bits$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT
    );
    static final jdk.incubator.foreign.MemoryLayout _LDT_ENTRY$HighWord$Bits$struct$LAYOUT() { return _LDT_ENTRY$HighWord$Bits$struct$LAYOUT_; }

    static final FunctionDescriptor ReadAcquire8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadAcquire8$FUNC() { return ReadAcquire8$FUNC_; }

    static final MethodHandle ReadAcquire8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadAcquire8",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        ReadAcquire8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadAcquire8$MH() { return ReadAcquire8$MH_; }

    static final FunctionDescriptor ReadNoFence8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadNoFence8$FUNC() { return ReadNoFence8$FUNC_; }

    static final MethodHandle ReadNoFence8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadNoFence8",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        ReadNoFence8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadNoFence8$MH() { return ReadNoFence8$MH_; }

    static final FunctionDescriptor WriteRelease8$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteRelease8$FUNC() { return WriteRelease8$FUNC_; }

    static final MethodHandle WriteRelease8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteRelease8",
        "(Ljdk/incubator/foreign/MemoryAddress;B)V",
        WriteRelease8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteRelease8$MH() { return WriteRelease8$MH_; }

    static final FunctionDescriptor WriteNoFence8$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteNoFence8$FUNC() { return WriteNoFence8$FUNC_; }

    static final MethodHandle WriteNoFence8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteNoFence8",
        "(Ljdk/incubator/foreign/MemoryAddress;B)V",
        WriteNoFence8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteNoFence8$MH() { return WriteNoFence8$MH_; }

    static final FunctionDescriptor ReadAcquire16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadAcquire16$FUNC() { return ReadAcquire16$FUNC_; }

    static final MethodHandle ReadAcquire16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadAcquire16",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        ReadAcquire16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadAcquire16$MH() { return ReadAcquire16$MH_; }

    static final FunctionDescriptor ReadNoFence16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadNoFence16$FUNC() { return ReadNoFence16$FUNC_; }

    static final MethodHandle ReadNoFence16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadNoFence16",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        ReadNoFence16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadNoFence16$MH() { return ReadNoFence16$MH_; }

    static final FunctionDescriptor WriteRelease16$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteRelease16$FUNC() { return WriteRelease16$FUNC_; }

    static final MethodHandle WriteRelease16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteRelease16",
        "(Ljdk/incubator/foreign/MemoryAddress;S)V",
        WriteRelease16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteRelease16$MH() { return WriteRelease16$MH_; }

    static final FunctionDescriptor WriteNoFence16$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteNoFence16$FUNC() { return WriteNoFence16$FUNC_; }

    static final MethodHandle WriteNoFence16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteNoFence16",
        "(Ljdk/incubator/foreign/MemoryAddress;S)V",
        WriteNoFence16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteNoFence16$MH() { return WriteNoFence16$MH_; }

    static final FunctionDescriptor ReadAcquire$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadAcquire$FUNC() { return ReadAcquire$FUNC_; }

    static final MethodHandle ReadAcquire$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadAcquire",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadAcquire$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadAcquire$MH() { return ReadAcquire$MH_; }

    static final FunctionDescriptor ReadNoFence$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadNoFence$FUNC() { return ReadNoFence$FUNC_; }

    static final MethodHandle ReadNoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadNoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadNoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadNoFence$MH() { return ReadNoFence$MH_; }

    static final FunctionDescriptor WriteRelease$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteRelease$FUNC() { return WriteRelease$FUNC_; }

    static final MethodHandle WriteRelease$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteRelease",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        WriteRelease$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteRelease$MH() { return WriteRelease$MH_; }

    static final FunctionDescriptor WriteNoFence$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteNoFence$FUNC() { return WriteNoFence$FUNC_; }

    static final MethodHandle WriteNoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteNoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        WriteNoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteNoFence$MH() { return WriteNoFence$MH_; }

    static final FunctionDescriptor ReadAcquire64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadAcquire64$FUNC() { return ReadAcquire64$FUNC_; }

    static final MethodHandle ReadAcquire64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadAcquire64",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        ReadAcquire64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadAcquire64$MH() { return ReadAcquire64$MH_; }

    static final FunctionDescriptor ReadNoFence64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadNoFence64$FUNC() { return ReadNoFence64$FUNC_; }

    static final MethodHandle ReadNoFence64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadNoFence64",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        ReadNoFence64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadNoFence64$MH() { return ReadNoFence64$MH_; }

    static final FunctionDescriptor WriteRelease64$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteRelease64$FUNC() { return WriteRelease64$FUNC_; }

    static final MethodHandle WriteRelease64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteRelease64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)V",
        WriteRelease64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteRelease64$MH() { return WriteRelease64$MH_; }

    static final FunctionDescriptor WriteNoFence64$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteNoFence64$FUNC() { return WriteNoFence64$FUNC_; }

    static final MethodHandle WriteNoFence64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteNoFence64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)V",
        WriteNoFence64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteNoFence64$MH() { return WriteNoFence64$MH_; }

    static final FunctionDescriptor ReadRaw8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadRaw8$FUNC() { return ReadRaw8$FUNC_; }

    static final MethodHandle ReadRaw8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadRaw8",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        ReadRaw8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadRaw8$MH() { return ReadRaw8$MH_; }

    static final FunctionDescriptor WriteRaw8$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteRaw8$FUNC() { return WriteRaw8$FUNC_; }

    static final MethodHandle WriteRaw8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteRaw8",
        "(Ljdk/incubator/foreign/MemoryAddress;B)V",
        WriteRaw8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteRaw8$MH() { return WriteRaw8$MH_; }

    static final FunctionDescriptor ReadRaw16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadRaw16$FUNC() { return ReadRaw16$FUNC_; }

    static final MethodHandle ReadRaw16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadRaw16",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        ReadRaw16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadRaw16$MH() { return ReadRaw16$MH_; }

    static final FunctionDescriptor WriteRaw16$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteRaw16$FUNC() { return WriteRaw16$FUNC_; }

    static final MethodHandle WriteRaw16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteRaw16",
        "(Ljdk/incubator/foreign/MemoryAddress;S)V",
        WriteRaw16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteRaw16$MH() { return WriteRaw16$MH_; }

    static final FunctionDescriptor ReadRaw$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadRaw$FUNC() { return ReadRaw$FUNC_; }

    static final MethodHandle ReadRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadRaw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadRaw$MH() { return ReadRaw$MH_; }

    static final FunctionDescriptor WriteRaw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteRaw$FUNC() { return WriteRaw$FUNC_; }

    static final MethodHandle WriteRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        WriteRaw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteRaw$MH() { return WriteRaw$MH_; }

    static final FunctionDescriptor ReadRaw64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadRaw64$FUNC() { return ReadRaw64$FUNC_; }

    static final MethodHandle ReadRaw64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadRaw64",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        ReadRaw64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadRaw64$MH() { return ReadRaw64$MH_; }

    static final FunctionDescriptor WriteRaw64$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteRaw64$FUNC() { return WriteRaw64$FUNC_; }

    static final MethodHandle WriteRaw64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteRaw64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)V",
        WriteRaw64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteRaw64$MH() { return WriteRaw64$MH_; }

    static final FunctionDescriptor ReadUCharAcquire$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadUCharAcquire$FUNC() { return ReadUCharAcquire$FUNC_; }

    static final MethodHandle ReadUCharAcquire$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadUCharAcquire",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        ReadUCharAcquire$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadUCharAcquire$MH() { return ReadUCharAcquire$MH_; }

    static final FunctionDescriptor ReadUCharNoFence$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadUCharNoFence$FUNC() { return ReadUCharNoFence$FUNC_; }

    static final MethodHandle ReadUCharNoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadUCharNoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        ReadUCharNoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadUCharNoFence$MH() { return ReadUCharNoFence$MH_; }

    static final FunctionDescriptor ReadBooleanAcquire$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadBooleanAcquire$FUNC() { return ReadBooleanAcquire$FUNC_; }

    static final MethodHandle ReadBooleanAcquire$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadBooleanAcquire",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        ReadBooleanAcquire$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadBooleanAcquire$MH() { return ReadBooleanAcquire$MH_; }

    static final FunctionDescriptor ReadBooleanNoFence$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadBooleanNoFence$FUNC() { return ReadBooleanNoFence$FUNC_; }

    static final MethodHandle ReadBooleanNoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadBooleanNoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        ReadBooleanNoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadBooleanNoFence$MH() { return ReadBooleanNoFence$MH_; }

    static final FunctionDescriptor ReadUCharRaw$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadUCharRaw$FUNC() { return ReadUCharRaw$FUNC_; }

    static final MethodHandle ReadUCharRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadUCharRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        ReadUCharRaw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadUCharRaw$MH() { return ReadUCharRaw$MH_; }

    static final FunctionDescriptor WriteUCharRelease$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteUCharRelease$FUNC() { return WriteUCharRelease$FUNC_; }

    static final MethodHandle WriteUCharRelease$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteUCharRelease",
        "(Ljdk/incubator/foreign/MemoryAddress;B)V",
        WriteUCharRelease$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteUCharRelease$MH() { return WriteUCharRelease$MH_; }

    static final FunctionDescriptor WriteUCharNoFence$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteUCharNoFence$FUNC() { return WriteUCharNoFence$FUNC_; }

    static final MethodHandle WriteUCharNoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteUCharNoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;B)V",
        WriteUCharNoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteUCharNoFence$MH() { return WriteUCharNoFence$MH_; }

    static final FunctionDescriptor WriteBooleanRelease$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteBooleanRelease$FUNC() { return WriteBooleanRelease$FUNC_; }

    static final MethodHandle WriteBooleanRelease$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteBooleanRelease",
        "(Ljdk/incubator/foreign/MemoryAddress;B)V",
        WriteBooleanRelease$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteBooleanRelease$MH() { return WriteBooleanRelease$MH_; }

    static final FunctionDescriptor WriteBooleanNoFence$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteBooleanNoFence$FUNC() { return WriteBooleanNoFence$FUNC_; }

    static final MethodHandle WriteBooleanNoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteBooleanNoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;B)V",
        WriteBooleanNoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteBooleanNoFence$MH() { return WriteBooleanNoFence$MH_; }

    static final FunctionDescriptor WriteUCharRaw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteUCharRaw$FUNC() { return WriteUCharRaw$FUNC_; }

    static final MethodHandle WriteUCharRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteUCharRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;B)V",
        WriteUCharRaw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteUCharRaw$MH() { return WriteUCharRaw$MH_; }

    static final FunctionDescriptor ReadUShortAcquire$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadUShortAcquire$FUNC() { return ReadUShortAcquire$FUNC_; }

    static final MethodHandle ReadUShortAcquire$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadUShortAcquire",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        ReadUShortAcquire$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadUShortAcquire$MH() { return ReadUShortAcquire$MH_; }

    static final FunctionDescriptor ReadUShortNoFence$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadUShortNoFence$FUNC() { return ReadUShortNoFence$FUNC_; }

    static final MethodHandle ReadUShortNoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadUShortNoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        ReadUShortNoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadUShortNoFence$MH() { return ReadUShortNoFence$MH_; }

    static final FunctionDescriptor ReadUShortRaw$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadUShortRaw$FUNC() { return ReadUShortRaw$FUNC_; }

    static final MethodHandle ReadUShortRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadUShortRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        ReadUShortRaw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadUShortRaw$MH() { return ReadUShortRaw$MH_; }

    static final FunctionDescriptor WriteUShortRelease$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteUShortRelease$FUNC() { return WriteUShortRelease$FUNC_; }

    static final MethodHandle WriteUShortRelease$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteUShortRelease",
        "(Ljdk/incubator/foreign/MemoryAddress;S)V",
        WriteUShortRelease$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteUShortRelease$MH() { return WriteUShortRelease$MH_; }

    static final FunctionDescriptor WriteUShortNoFence$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteUShortNoFence$FUNC() { return WriteUShortNoFence$FUNC_; }

    static final MethodHandle WriteUShortNoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteUShortNoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;S)V",
        WriteUShortNoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteUShortNoFence$MH() { return WriteUShortNoFence$MH_; }

    static final FunctionDescriptor WriteUShortRaw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteUShortRaw$FUNC() { return WriteUShortRaw$FUNC_; }

    static final MethodHandle WriteUShortRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteUShortRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;S)V",
        WriteUShortRaw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteUShortRaw$MH() { return WriteUShortRaw$MH_; }

    static final FunctionDescriptor ReadULongAcquire$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadULongAcquire$FUNC() { return ReadULongAcquire$FUNC_; }

    static final MethodHandle ReadULongAcquire$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadULongAcquire",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadULongAcquire$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadULongAcquire$MH() { return ReadULongAcquire$MH_; }

    static final FunctionDescriptor ReadULongNoFence$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadULongNoFence$FUNC() { return ReadULongNoFence$FUNC_; }

    static final MethodHandle ReadULongNoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadULongNoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadULongNoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadULongNoFence$MH() { return ReadULongNoFence$MH_; }

    static final FunctionDescriptor ReadULongRaw$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadULongRaw$FUNC() { return ReadULongRaw$FUNC_; }

    static final MethodHandle ReadULongRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadULongRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadULongRaw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadULongRaw$MH() { return ReadULongRaw$MH_; }

    static final FunctionDescriptor WriteULongRelease$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteULongRelease$FUNC() { return WriteULongRelease$FUNC_; }

    static final MethodHandle WriteULongRelease$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteULongRelease",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        WriteULongRelease$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteULongRelease$MH() { return WriteULongRelease$MH_; }

    static final FunctionDescriptor WriteULongNoFence$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteULongNoFence$FUNC() { return WriteULongNoFence$FUNC_; }

    static final MethodHandle WriteULongNoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteULongNoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        WriteULongNoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteULongNoFence$MH() { return WriteULongNoFence$MH_; }

    static final FunctionDescriptor WriteULongRaw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteULongRaw$FUNC() { return WriteULongRaw$FUNC_; }

    static final MethodHandle WriteULongRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteULongRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        WriteULongRaw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteULongRaw$MH() { return WriteULongRaw$MH_; }

    static final FunctionDescriptor ReadULong64Acquire$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadULong64Acquire$FUNC() { return ReadULong64Acquire$FUNC_; }

    static final MethodHandle ReadULong64Acquire$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadULong64Acquire",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        ReadULong64Acquire$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadULong64Acquire$MH() { return ReadULong64Acquire$MH_; }

    static final FunctionDescriptor ReadULong64NoFence$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadULong64NoFence$FUNC() { return ReadULong64NoFence$FUNC_; }

    static final MethodHandle ReadULong64NoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadULong64NoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        ReadULong64NoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadULong64NoFence$MH() { return ReadULong64NoFence$MH_; }

    static final FunctionDescriptor ReadULong64Raw$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadULong64Raw$FUNC() { return ReadULong64Raw$FUNC_; }

    static final MethodHandle ReadULong64Raw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadULong64Raw",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        ReadULong64Raw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadULong64Raw$MH() { return ReadULong64Raw$MH_; }

    static final FunctionDescriptor WriteULong64Release$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteULong64Release$FUNC() { return WriteULong64Release$FUNC_; }

    static final MethodHandle WriteULong64Release$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteULong64Release",
        "(Ljdk/incubator/foreign/MemoryAddress;J)V",
        WriteULong64Release$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteULong64Release$MH() { return WriteULong64Release$MH_; }

    static final FunctionDescriptor WriteULong64NoFence$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteULong64NoFence$FUNC() { return WriteULong64NoFence$FUNC_; }

    static final MethodHandle WriteULong64NoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteULong64NoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;J)V",
        WriteULong64NoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteULong64NoFence$MH() { return WriteULong64NoFence$MH_; }

    static final FunctionDescriptor WriteULong64Raw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteULong64Raw$FUNC() { return WriteULong64Raw$FUNC_; }

    static final MethodHandle WriteULong64Raw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteULong64Raw",
        "(Ljdk/incubator/foreign/MemoryAddress;J)V",
        WriteULong64Raw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteULong64Raw$MH() { return WriteULong64Raw$MH_; }

    static final FunctionDescriptor ReadPointerAcquire$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadPointerAcquire$FUNC() { return ReadPointerAcquire$FUNC_; }

    static final MethodHandle ReadPointerAcquire$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadPointerAcquire",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ReadPointerAcquire$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadPointerAcquire$MH() { return ReadPointerAcquire$MH_; }

    static final FunctionDescriptor ReadPointerNoFence$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadPointerNoFence$FUNC() { return ReadPointerNoFence$FUNC_; }

    static final MethodHandle ReadPointerNoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadPointerNoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ReadPointerNoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadPointerNoFence$MH() { return ReadPointerNoFence$MH_; }

    static final FunctionDescriptor ReadPointerRaw$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadPointerRaw$FUNC() { return ReadPointerRaw$FUNC_; }

    static final MethodHandle ReadPointerRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadPointerRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ReadPointerRaw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadPointerRaw$MH() { return ReadPointerRaw$MH_; }

    static final FunctionDescriptor WritePointerRelease$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WritePointerRelease$FUNC() { return WritePointerRelease$FUNC_; }

    static final MethodHandle WritePointerRelease$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WritePointerRelease",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        WritePointerRelease$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WritePointerRelease$MH() { return WritePointerRelease$MH_; }

    static final FunctionDescriptor WritePointerNoFence$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WritePointerNoFence$FUNC() { return WritePointerNoFence$FUNC_; }

    static final MethodHandle WritePointerNoFence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WritePointerNoFence",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        WritePointerNoFence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WritePointerNoFence$MH() { return WritePointerNoFence$MH_; }

    static final FunctionDescriptor WritePointerRaw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WritePointerRaw$FUNC() { return WritePointerRaw$FUNC_; }

    static final MethodHandle WritePointerRaw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WritePointerRaw",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        WritePointerRaw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WritePointerRaw$MH() { return WritePointerRaw$MH_; }

    static final MemoryLayout _WOW64_FLOATING_SAVE_AREA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ControlWord"),
        C_LONG.withName("StatusWord"),
        C_LONG.withName("TagWord"),
        C_LONG.withName("ErrorOffset"),
        C_LONG.withName("ErrorSelector"),
        C_LONG.withName("DataOffset"),
        C_LONG.withName("DataSelector"),
        MemoryLayout.ofSequence(80, C_CHAR).withName("RegisterArea"),
        C_LONG.withName("Cr0NpxState")
    ).withName("_WOW64_FLOATING_SAVE_AREA");
    static final jdk.incubator.foreign.MemoryLayout _WOW64_FLOATING_SAVE_AREA$struct$LAYOUT() { return _WOW64_FLOATING_SAVE_AREA$struct$LAYOUT_; }

    static final MemoryLayout _WOW64_FLOATING_SAVE_AREA$ControlWord$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_FLOATING_SAVE_AREA$ControlWord$LAYOUT() { return _WOW64_FLOATING_SAVE_AREA$ControlWord$LAYOUT_; }

    static final VarHandle _WOW64_FLOATING_SAVE_AREA$ControlWord$VH_ = _WOW64_FLOATING_SAVE_AREA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlWord"));
    static final java.lang.invoke.VarHandle _WOW64_FLOATING_SAVE_AREA$ControlWord$VH() { return _WOW64_FLOATING_SAVE_AREA$ControlWord$VH_; }

    static final MemoryLayout _WOW64_FLOATING_SAVE_AREA$StatusWord$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_FLOATING_SAVE_AREA$StatusWord$LAYOUT() { return _WOW64_FLOATING_SAVE_AREA$StatusWord$LAYOUT_; }

    static final VarHandle _WOW64_FLOATING_SAVE_AREA$StatusWord$VH_ = _WOW64_FLOATING_SAVE_AREA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StatusWord"));
    static final java.lang.invoke.VarHandle _WOW64_FLOATING_SAVE_AREA$StatusWord$VH() { return _WOW64_FLOATING_SAVE_AREA$StatusWord$VH_; }

    static final MemoryLayout _WOW64_FLOATING_SAVE_AREA$TagWord$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_FLOATING_SAVE_AREA$TagWord$LAYOUT() { return _WOW64_FLOATING_SAVE_AREA$TagWord$LAYOUT_; }

    static final VarHandle _WOW64_FLOATING_SAVE_AREA$TagWord$VH_ = _WOW64_FLOATING_SAVE_AREA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TagWord"));
    static final java.lang.invoke.VarHandle _WOW64_FLOATING_SAVE_AREA$TagWord$VH() { return _WOW64_FLOATING_SAVE_AREA$TagWord$VH_; }

    static final MemoryLayout _WOW64_FLOATING_SAVE_AREA$ErrorOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_FLOATING_SAVE_AREA$ErrorOffset$LAYOUT() { return _WOW64_FLOATING_SAVE_AREA$ErrorOffset$LAYOUT_; }

    static final VarHandle _WOW64_FLOATING_SAVE_AREA$ErrorOffset$VH_ = _WOW64_FLOATING_SAVE_AREA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ErrorOffset"));
    static final java.lang.invoke.VarHandle _WOW64_FLOATING_SAVE_AREA$ErrorOffset$VH() { return _WOW64_FLOATING_SAVE_AREA$ErrorOffset$VH_; }

    static final MemoryLayout _WOW64_FLOATING_SAVE_AREA$ErrorSelector$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_FLOATING_SAVE_AREA$ErrorSelector$LAYOUT() { return _WOW64_FLOATING_SAVE_AREA$ErrorSelector$LAYOUT_; }

    static final VarHandle _WOW64_FLOATING_SAVE_AREA$ErrorSelector$VH_ = _WOW64_FLOATING_SAVE_AREA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ErrorSelector"));
    static final java.lang.invoke.VarHandle _WOW64_FLOATING_SAVE_AREA$ErrorSelector$VH() { return _WOW64_FLOATING_SAVE_AREA$ErrorSelector$VH_; }

    static final MemoryLayout _WOW64_FLOATING_SAVE_AREA$DataOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_FLOATING_SAVE_AREA$DataOffset$LAYOUT() { return _WOW64_FLOATING_SAVE_AREA$DataOffset$LAYOUT_; }

    static final VarHandle _WOW64_FLOATING_SAVE_AREA$DataOffset$VH_ = _WOW64_FLOATING_SAVE_AREA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataOffset"));
    static final java.lang.invoke.VarHandle _WOW64_FLOATING_SAVE_AREA$DataOffset$VH() { return _WOW64_FLOATING_SAVE_AREA$DataOffset$VH_; }

    static final MemoryLayout _WOW64_FLOATING_SAVE_AREA$DataSelector$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_FLOATING_SAVE_AREA$DataSelector$LAYOUT() { return _WOW64_FLOATING_SAVE_AREA$DataSelector$LAYOUT_; }

    static final VarHandle _WOW64_FLOATING_SAVE_AREA$DataSelector$VH_ = _WOW64_FLOATING_SAVE_AREA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataSelector"));
    static final java.lang.invoke.VarHandle _WOW64_FLOATING_SAVE_AREA$DataSelector$VH() { return _WOW64_FLOATING_SAVE_AREA$DataSelector$VH_; }

    static final MemoryLayout _WOW64_FLOATING_SAVE_AREA$Cr0NpxState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_FLOATING_SAVE_AREA$Cr0NpxState$LAYOUT() { return _WOW64_FLOATING_SAVE_AREA$Cr0NpxState$LAYOUT_; }

    static final VarHandle _WOW64_FLOATING_SAVE_AREA$Cr0NpxState$VH_ = _WOW64_FLOATING_SAVE_AREA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Cr0NpxState"));
    static final java.lang.invoke.VarHandle _WOW64_FLOATING_SAVE_AREA$Cr0NpxState$VH() { return _WOW64_FLOATING_SAVE_AREA$Cr0NpxState$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ContextFlags"),
        C_LONG.withName("Dr0"),
        C_LONG.withName("Dr1"),
        C_LONG.withName("Dr2"),
        C_LONG.withName("Dr3"),
        C_LONG.withName("Dr6"),
        C_LONG.withName("Dr7"),
        MemoryLayout.ofStruct(
            C_LONG.withName("ControlWord"),
            C_LONG.withName("StatusWord"),
            C_LONG.withName("TagWord"),
            C_LONG.withName("ErrorOffset"),
            C_LONG.withName("ErrorSelector"),
            C_LONG.withName("DataOffset"),
            C_LONG.withName("DataSelector"),
            MemoryLayout.ofSequence(80, C_CHAR).withName("RegisterArea"),
            C_LONG.withName("Cr0NpxState")
        ).withName("FloatSave"),
        C_LONG.withName("SegGs"),
        C_LONG.withName("SegFs"),
        C_LONG.withName("SegEs"),
        C_LONG.withName("SegDs"),
        C_LONG.withName("Edi"),
        C_LONG.withName("Esi"),
        C_LONG.withName("Ebx"),
        C_LONG.withName("Edx"),
        C_LONG.withName("Ecx"),
        C_LONG.withName("Eax"),
        C_LONG.withName("Ebp"),
        C_LONG.withName("Eip"),
        C_LONG.withName("SegCs"),
        C_LONG.withName("EFlags"),
        C_LONG.withName("Esp"),
        C_LONG.withName("SegSs"),
        MemoryLayout.ofSequence(512, C_CHAR).withName("ExtendedRegisters")
    ).withName("_WOW64_CONTEXT");
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$struct$LAYOUT() { return _WOW64_CONTEXT$struct$LAYOUT_; }

    static final MemoryLayout _WOW64_CONTEXT$ContextFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$ContextFlags$LAYOUT() { return _WOW64_CONTEXT$ContextFlags$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$ContextFlags$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ContextFlags"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$ContextFlags$VH() { return _WOW64_CONTEXT$ContextFlags$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Dr0$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Dr0$LAYOUT() { return _WOW64_CONTEXT$Dr0$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Dr0$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Dr0"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Dr0$VH() { return _WOW64_CONTEXT$Dr0$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Dr1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Dr1$LAYOUT() { return _WOW64_CONTEXT$Dr1$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Dr1$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Dr1"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Dr1$VH() { return _WOW64_CONTEXT$Dr1$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Dr2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Dr2$LAYOUT() { return _WOW64_CONTEXT$Dr2$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Dr2$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Dr2"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Dr2$VH() { return _WOW64_CONTEXT$Dr2$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Dr3$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Dr3$LAYOUT() { return _WOW64_CONTEXT$Dr3$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Dr3$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Dr3"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Dr3$VH() { return _WOW64_CONTEXT$Dr3$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Dr6$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Dr6$LAYOUT() { return _WOW64_CONTEXT$Dr6$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Dr6$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Dr6"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Dr6$VH() { return _WOW64_CONTEXT$Dr6$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Dr7$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Dr7$LAYOUT() { return _WOW64_CONTEXT$Dr7$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Dr7$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Dr7"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Dr7$VH() { return _WOW64_CONTEXT$Dr7$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$SegGs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$SegGs$LAYOUT() { return _WOW64_CONTEXT$SegGs$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$SegGs$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SegGs"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$SegGs$VH() { return _WOW64_CONTEXT$SegGs$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$SegFs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$SegFs$LAYOUT() { return _WOW64_CONTEXT$SegFs$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$SegFs$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SegFs"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$SegFs$VH() { return _WOW64_CONTEXT$SegFs$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$SegEs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$SegEs$LAYOUT() { return _WOW64_CONTEXT$SegEs$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$SegEs$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SegEs"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$SegEs$VH() { return _WOW64_CONTEXT$SegEs$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$SegDs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$SegDs$LAYOUT() { return _WOW64_CONTEXT$SegDs$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$SegDs$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SegDs"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$SegDs$VH() { return _WOW64_CONTEXT$SegDs$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Edi$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Edi$LAYOUT() { return _WOW64_CONTEXT$Edi$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Edi$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Edi"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Edi$VH() { return _WOW64_CONTEXT$Edi$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Esi$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Esi$LAYOUT() { return _WOW64_CONTEXT$Esi$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Esi$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Esi"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Esi$VH() { return _WOW64_CONTEXT$Esi$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Ebx$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Ebx$LAYOUT() { return _WOW64_CONTEXT$Ebx$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Ebx$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Ebx"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Ebx$VH() { return _WOW64_CONTEXT$Ebx$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Edx$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Edx$LAYOUT() { return _WOW64_CONTEXT$Edx$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Edx$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Edx"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Edx$VH() { return _WOW64_CONTEXT$Edx$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Ecx$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Ecx$LAYOUT() { return _WOW64_CONTEXT$Ecx$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Ecx$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Ecx"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Ecx$VH() { return _WOW64_CONTEXT$Ecx$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Eax$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Eax$LAYOUT() { return _WOW64_CONTEXT$Eax$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Eax$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Eax"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Eax$VH() { return _WOW64_CONTEXT$Eax$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Ebp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Ebp$LAYOUT() { return _WOW64_CONTEXT$Ebp$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Ebp$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Ebp"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Ebp$VH() { return _WOW64_CONTEXT$Ebp$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Eip$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Eip$LAYOUT() { return _WOW64_CONTEXT$Eip$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Eip$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Eip"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Eip$VH() { return _WOW64_CONTEXT$Eip$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$SegCs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$SegCs$LAYOUT() { return _WOW64_CONTEXT$SegCs$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$SegCs$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SegCs"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$SegCs$VH() { return _WOW64_CONTEXT$SegCs$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$EFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$EFlags$LAYOUT() { return _WOW64_CONTEXT$EFlags$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$EFlags$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EFlags"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$EFlags$VH() { return _WOW64_CONTEXT$EFlags$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Esp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Esp$LAYOUT() { return _WOW64_CONTEXT$Esp$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Esp$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Esp"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Esp$VH() { return _WOW64_CONTEXT$Esp$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$SegSs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$SegSs$LAYOUT() { return _WOW64_CONTEXT$SegSs$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$SegSs$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SegSs"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$SegSs$VH() { return _WOW64_CONTEXT$SegSs$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("LimitLow"),
        C_SHORT.withName("BaseLow"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_CHAR.withName("BaseMid"),
                C_CHAR.withName("Flags1"),
                C_CHAR.withName("Flags2"),
                C_CHAR.withName("BaseHi")
            ).withName("Bytes"),
            MemoryLayout.ofStruct(
                C_INT
            ).withName("Bits")
        ).withName("HighWord")
    ).withName("_WOW64_LDT_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$struct$LAYOUT() { return _WOW64_LDT_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$LimitLow$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$LimitLow$LAYOUT() { return _WOW64_LDT_ENTRY$LimitLow$LAYOUT_; }

    static final VarHandle _WOW64_LDT_ENTRY$LimitLow$VH_ = _WOW64_LDT_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LimitLow"));
    static final java.lang.invoke.VarHandle _WOW64_LDT_ENTRY$LimitLow$VH() { return _WOW64_LDT_ENTRY$LimitLow$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$BaseLow$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$BaseLow$LAYOUT() { return _WOW64_LDT_ENTRY$BaseLow$LAYOUT_; }

    static final VarHandle _WOW64_LDT_ENTRY$BaseLow$VH_ = _WOW64_LDT_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("BaseLow"));
    static final java.lang.invoke.VarHandle _WOW64_LDT_ENTRY$BaseLow$VH() { return _WOW64_LDT_ENTRY$BaseLow$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_CHAR.withName("BaseMid"),
            C_CHAR.withName("Flags1"),
            C_CHAR.withName("Flags2"),
            C_CHAR.withName("BaseHi")
        ).withName("Bytes"),
        MemoryLayout.ofStruct(
            C_INT
        ).withName("Bits")
    );
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$union$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$union$LAYOUT_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("BaseMid"),
        C_CHAR.withName("Flags1"),
        C_CHAR.withName("Flags2"),
        C_CHAR.withName("BaseHi")
    );
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$LAYOUT_; }

    static final VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$VH_ = _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BaseMid"));
    static final java.lang.invoke.VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$VH() { return _WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$LAYOUT_; }

    static final VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$VH_ = _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags1"));
    static final java.lang.invoke.VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$VH() { return _WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$LAYOUT_; }

    static final VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$VH_ = _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags2"));
    static final java.lang.invoke.VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$VH() { return _WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$LAYOUT_; }

    static final VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$VH_ = _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BaseHi"));
    static final java.lang.invoke.VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$VH() { return _WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bits$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT
    );
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bits$struct$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$Bits$struct$LAYOUT_; }

    static final MemoryLayout _WOW64_DESCRIPTOR_TABLE_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Selector"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("LimitLow"),
            C_SHORT.withName("BaseLow"),
            MemoryLayout.ofUnion(
                MemoryLayout.ofStruct(
                    C_CHAR.withName("BaseMid"),
                    C_CHAR.withName("Flags1"),
                    C_CHAR.withName("Flags2"),
                    C_CHAR.withName("BaseHi")
                ).withName("Bytes"),
                MemoryLayout.ofStruct(
                    C_INT
                ).withName("Bits")
            ).withName("HighWord")
        ).withName("Descriptor")
    ).withName("_WOW64_DESCRIPTOR_TABLE_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _WOW64_DESCRIPTOR_TABLE_ENTRY$struct$LAYOUT() { return _WOW64_DESCRIPTOR_TABLE_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$LAYOUT() { return _WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$LAYOUT_; }

    static final VarHandle _WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$VH_ = _WOW64_DESCRIPTOR_TABLE_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Selector"));
    static final java.lang.invoke.VarHandle _WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$VH() { return _WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ExceptionCode"),
        C_LONG.withName("ExceptionFlags"),
        C_POINTER.withName("ExceptionRecord"),
        C_POINTER.withName("ExceptionAddress"),
        C_LONG.withName("NumberParameters"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(15, C_LONGLONG).withName("ExceptionInformation")
    ).withName("_EXCEPTION_RECORD");
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD$struct$LAYOUT() { return _EXCEPTION_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _EXCEPTION_RECORD$ExceptionCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD$ExceptionCode$LAYOUT() { return _EXCEPTION_RECORD$ExceptionCode$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD$ExceptionCode$VH_ = _EXCEPTION_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionCode"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD$ExceptionCode$VH() { return _EXCEPTION_RECORD$ExceptionCode$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD$ExceptionFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD$ExceptionFlags$LAYOUT() { return _EXCEPTION_RECORD$ExceptionFlags$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD$ExceptionFlags$VH_ = _EXCEPTION_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionFlags"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD$ExceptionFlags$VH() { return _EXCEPTION_RECORD$ExceptionFlags$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD$ExceptionRecord$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD$ExceptionRecord$LAYOUT() { return _EXCEPTION_RECORD$ExceptionRecord$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD$ExceptionRecord$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionRecord")));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD$ExceptionRecord$VH() { return _EXCEPTION_RECORD$ExceptionRecord$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD$ExceptionAddress$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD$ExceptionAddress$LAYOUT() { return _EXCEPTION_RECORD$ExceptionAddress$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD$ExceptionAddress$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionAddress")));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD$ExceptionAddress$VH() { return _EXCEPTION_RECORD$ExceptionAddress$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD$NumberParameters$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD$NumberParameters$LAYOUT() { return _EXCEPTION_RECORD$NumberParameters$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD$NumberParameters$VH_ = _EXCEPTION_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberParameters"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD$NumberParameters$VH() { return _EXCEPTION_RECORD$NumberParameters$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ExceptionCode"),
        C_LONG.withName("ExceptionFlags"),
        C_LONG.withName("ExceptionRecord"),
        C_LONG.withName("ExceptionAddress"),
        C_LONG.withName("NumberParameters"),
        MemoryLayout.ofSequence(15, C_LONG).withName("ExceptionInformation")
    ).withName("_EXCEPTION_RECORD32");
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD32$struct$LAYOUT() { return _EXCEPTION_RECORD32$struct$LAYOUT_; }

    static final MemoryLayout _EXCEPTION_RECORD32$ExceptionCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD32$ExceptionCode$LAYOUT() { return _EXCEPTION_RECORD32$ExceptionCode$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD32$ExceptionCode$VH_ = _EXCEPTION_RECORD32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionCode"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD32$ExceptionCode$VH() { return _EXCEPTION_RECORD32$ExceptionCode$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD32$ExceptionFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD32$ExceptionFlags$LAYOUT() { return _EXCEPTION_RECORD32$ExceptionFlags$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD32$ExceptionFlags$VH_ = _EXCEPTION_RECORD32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionFlags"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD32$ExceptionFlags$VH() { return _EXCEPTION_RECORD32$ExceptionFlags$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD32$ExceptionRecord$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD32$ExceptionRecord$LAYOUT() { return _EXCEPTION_RECORD32$ExceptionRecord$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD32$ExceptionRecord$VH_ = _EXCEPTION_RECORD32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionRecord"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD32$ExceptionRecord$VH() { return _EXCEPTION_RECORD32$ExceptionRecord$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD32$ExceptionAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD32$ExceptionAddress$LAYOUT() { return _EXCEPTION_RECORD32$ExceptionAddress$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD32$ExceptionAddress$VH_ = _EXCEPTION_RECORD32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionAddress"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD32$ExceptionAddress$VH() { return _EXCEPTION_RECORD32$ExceptionAddress$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD32$NumberParameters$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD32$NumberParameters$LAYOUT() { return _EXCEPTION_RECORD32$NumberParameters$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD32$NumberParameters$VH_ = _EXCEPTION_RECORD32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberParameters"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD32$NumberParameters$VH() { return _EXCEPTION_RECORD32$NumberParameters$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ExceptionCode"),
        C_LONG.withName("ExceptionFlags"),
        C_LONGLONG.withName("ExceptionRecord"),
        C_LONGLONG.withName("ExceptionAddress"),
        C_LONG.withName("NumberParameters"),
        C_LONG.withName("__unusedAlignment"),
        MemoryLayout.ofSequence(15, C_LONGLONG).withName("ExceptionInformation")
    ).withName("_EXCEPTION_RECORD64");
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$struct$LAYOUT() { return _EXCEPTION_RECORD64$struct$LAYOUT_; }

    static final MemoryLayout _EXCEPTION_RECORD64$ExceptionCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$ExceptionCode$LAYOUT() { return _EXCEPTION_RECORD64$ExceptionCode$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD64$ExceptionCode$VH_ = _EXCEPTION_RECORD64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionCode"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD64$ExceptionCode$VH() { return _EXCEPTION_RECORD64$ExceptionCode$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD64$ExceptionFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$ExceptionFlags$LAYOUT() { return _EXCEPTION_RECORD64$ExceptionFlags$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD64$ExceptionFlags$VH_ = _EXCEPTION_RECORD64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionFlags"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD64$ExceptionFlags$VH() { return _EXCEPTION_RECORD64$ExceptionFlags$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD64$ExceptionRecord$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$ExceptionRecord$LAYOUT() { return _EXCEPTION_RECORD64$ExceptionRecord$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD64$ExceptionRecord$VH_ = _EXCEPTION_RECORD64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionRecord"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD64$ExceptionRecord$VH() { return _EXCEPTION_RECORD64$ExceptionRecord$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD64$ExceptionAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$ExceptionAddress$LAYOUT() { return _EXCEPTION_RECORD64$ExceptionAddress$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD64$ExceptionAddress$VH_ = _EXCEPTION_RECORD64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionAddress"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD64$ExceptionAddress$VH() { return _EXCEPTION_RECORD64$ExceptionAddress$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD64$NumberParameters$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$NumberParameters$LAYOUT() { return _EXCEPTION_RECORD64$NumberParameters$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD64$NumberParameters$VH_ = _EXCEPTION_RECORD64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberParameters"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD64$NumberParameters$VH() { return _EXCEPTION_RECORD64$NumberParameters$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD64$__unusedAlignment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$__unusedAlignment$LAYOUT() { return _EXCEPTION_RECORD64$__unusedAlignment$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD64$__unusedAlignment$VH_ = _EXCEPTION_RECORD64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("__unusedAlignment"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD64$__unusedAlignment$VH() { return _EXCEPTION_RECORD64$__unusedAlignment$VH_; }

    static final MemoryLayout _EXCEPTION_POINTERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("ExceptionRecord"),
        C_POINTER.withName("ContextRecord")
    ).withName("_EXCEPTION_POINTERS");
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_POINTERS$struct$LAYOUT() { return _EXCEPTION_POINTERS$struct$LAYOUT_; }

    static final MemoryLayout _EXCEPTION_POINTERS$ExceptionRecord$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_POINTERS$ExceptionRecord$LAYOUT() { return _EXCEPTION_POINTERS$ExceptionRecord$LAYOUT_; }

    static final VarHandle _EXCEPTION_POINTERS$ExceptionRecord$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionRecord")));
    static final java.lang.invoke.VarHandle _EXCEPTION_POINTERS$ExceptionRecord$VH() { return _EXCEPTION_POINTERS$ExceptionRecord$VH_; }

    static final MemoryLayout _EXCEPTION_POINTERS$ContextRecord$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_POINTERS$ContextRecord$LAYOUT() { return _EXCEPTION_POINTERS$ContextRecord$LAYOUT_; }

    static final VarHandle _EXCEPTION_POINTERS$ContextRecord$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ContextRecord")));
    static final java.lang.invoke.VarHandle _EXCEPTION_POINTERS$ContextRecord$VH() { return _EXCEPTION_POINTERS$ContextRecord$VH_; }

    static final MemoryLayout _GENERIC_MAPPING$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("GenericRead"),
        C_LONG.withName("GenericWrite"),
        C_LONG.withName("GenericExecute"),
        C_LONG.withName("GenericAll")
    ).withName("_GENERIC_MAPPING");
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_MAPPING$struct$LAYOUT() { return _GENERIC_MAPPING$struct$LAYOUT_; }

    static final MemoryLayout _GENERIC_MAPPING$GenericRead$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_MAPPING$GenericRead$LAYOUT() { return _GENERIC_MAPPING$GenericRead$LAYOUT_; }

    static final VarHandle _GENERIC_MAPPING$GenericRead$VH_ = _GENERIC_MAPPING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GenericRead"));
    static final java.lang.invoke.VarHandle _GENERIC_MAPPING$GenericRead$VH() { return _GENERIC_MAPPING$GenericRead$VH_; }

    static final MemoryLayout _GENERIC_MAPPING$GenericWrite$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_MAPPING$GenericWrite$LAYOUT() { return _GENERIC_MAPPING$GenericWrite$LAYOUT_; }

    static final VarHandle _GENERIC_MAPPING$GenericWrite$VH_ = _GENERIC_MAPPING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GenericWrite"));
    static final java.lang.invoke.VarHandle _GENERIC_MAPPING$GenericWrite$VH() { return _GENERIC_MAPPING$GenericWrite$VH_; }

    static final MemoryLayout _GENERIC_MAPPING$GenericExecute$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_MAPPING$GenericExecute$LAYOUT() { return _GENERIC_MAPPING$GenericExecute$LAYOUT_; }

    static final VarHandle _GENERIC_MAPPING$GenericExecute$VH_ = _GENERIC_MAPPING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GenericExecute"));
    static final java.lang.invoke.VarHandle _GENERIC_MAPPING$GenericExecute$VH() { return _GENERIC_MAPPING$GenericExecute$VH_; }

    static final MemoryLayout _GENERIC_MAPPING$GenericAll$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_MAPPING$GenericAll$LAYOUT() { return _GENERIC_MAPPING$GenericAll$LAYOUT_; }

    static final VarHandle _GENERIC_MAPPING$GenericAll$VH_ = _GENERIC_MAPPING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GenericAll"));
    static final java.lang.invoke.VarHandle _GENERIC_MAPPING$GenericAll$VH() { return _GENERIC_MAPPING$GenericAll$VH_; }

    static final MemoryLayout _LUID_AND_ATTRIBUTES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("Luid"),
        C_LONG.withName("Attributes")
    ).withName("_LUID_AND_ATTRIBUTES");
    static final jdk.incubator.foreign.MemoryLayout _LUID_AND_ATTRIBUTES$struct$LAYOUT() { return _LUID_AND_ATTRIBUTES$struct$LAYOUT_; }

    static final MemoryLayout _LUID_AND_ATTRIBUTES$Attributes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LUID_AND_ATTRIBUTES$Attributes$LAYOUT() { return _LUID_AND_ATTRIBUTES$Attributes$LAYOUT_; }

    static final VarHandle _LUID_AND_ATTRIBUTES$Attributes$VH_ = _LUID_AND_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Attributes"));
    static final java.lang.invoke.VarHandle _LUID_AND_ATTRIBUTES$Attributes$VH() { return _LUID_AND_ATTRIBUTES$Attributes$VH_; }

    static final MemoryLayout _SID_IDENTIFIER_AUTHORITY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(6, C_CHAR).withName("Value")
    ).withName("_SID_IDENTIFIER_AUTHORITY");
    static final jdk.incubator.foreign.MemoryLayout _SID_IDENTIFIER_AUTHORITY$struct$LAYOUT() { return _SID_IDENTIFIER_AUTHORITY$struct$LAYOUT_; }

    static final MemoryLayout _SID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Revision"),
        C_CHAR.withName("SubAuthorityCount"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(6, C_CHAR).withName("Value")
        ).withName("IdentifierAuthority"),
        MemoryLayout.ofSequence(1, C_LONG).withName("SubAuthority")
    ).withName("_SID");
    static final jdk.incubator.foreign.MemoryLayout _SID$struct$LAYOUT() { return _SID$struct$LAYOUT_; }

    static final MemoryLayout _SID$Revision$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SID$Revision$LAYOUT() { return _SID$Revision$LAYOUT_; }

    static final VarHandle _SID$Revision$VH_ = _SID$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Revision"));
    static final java.lang.invoke.VarHandle _SID$Revision$VH() { return _SID$Revision$VH_; }

    static final MemoryLayout _SID$SubAuthorityCount$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SID$SubAuthorityCount$LAYOUT() { return _SID$SubAuthorityCount$LAYOUT_; }

    static final VarHandle _SID$SubAuthorityCount$VH_ = _SID$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SubAuthorityCount"));
    static final java.lang.invoke.VarHandle _SID$SubAuthorityCount$VH() { return _SID$SubAuthorityCount$VH_; }

    static final MemoryLayout _SE_SID$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_CHAR.withName("Revision"),
            C_CHAR.withName("SubAuthorityCount"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(6, C_CHAR).withName("Value")
            ).withName("IdentifierAuthority"),
            MemoryLayout.ofSequence(1, C_LONG).withName("SubAuthority")
        ).withName("Sid"),
        MemoryLayout.ofSequence(68, C_CHAR).withName("Buffer")
    ).withName("_SE_SID");
    static final jdk.incubator.foreign.MemoryLayout _SE_SID$union$LAYOUT() { return _SE_SID$union$LAYOUT_; }

    static final int SidTypeUser() { return (int)1L; }

    static final int SidTypeGroup() { return (int)2L; }

    static final int SidTypeDomain() { return (int)3L; }

    static final int SidTypeAlias() { return (int)4L; }

    static final int SidTypeWellKnownGroup() { return (int)5L; }

    static final int SidTypeDeletedAccount() { return (int)6L; }

    static final int SidTypeInvalid() { return (int)7L; }

    static final int SidTypeUnknown() { return (int)8L; }

    static final int SidTypeComputer() { return (int)9L; }

    static final int SidTypeLabel() { return (int)10L; }

    static final int SidTypeLogonSession() { return (int)11L; }

    static final MemoryLayout _SID_AND_ATTRIBUTES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Sid"),
        C_LONG.withName("Attributes"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_SID_AND_ATTRIBUTES");
    static final jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES$struct$LAYOUT() { return _SID_AND_ATTRIBUTES$struct$LAYOUT_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES$Sid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES$Sid$LAYOUT() { return _SID_AND_ATTRIBUTES$Sid$LAYOUT_; }

    static final VarHandle _SID_AND_ATTRIBUTES$Sid$VH_ = MemoryHandles.asAddressVarHandle(_SID_AND_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Sid")));
    static final java.lang.invoke.VarHandle _SID_AND_ATTRIBUTES$Sid$VH() { return _SID_AND_ATTRIBUTES$Sid$VH_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES$Attributes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES$Attributes$LAYOUT() { return _SID_AND_ATTRIBUTES$Attributes$LAYOUT_; }

    static final VarHandle _SID_AND_ATTRIBUTES$Attributes$VH_ = _SID_AND_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Attributes"));
    static final java.lang.invoke.VarHandle _SID_AND_ATTRIBUTES$Attributes$VH() { return _SID_AND_ATTRIBUTES$Attributes$VH_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES_HASH$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("SidCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("SidAttr"),
        MemoryLayout.ofSequence(32, C_LONGLONG).withName("Hash")
    ).withName("_SID_AND_ATTRIBUTES_HASH");
    static final jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES_HASH$struct$LAYOUT() { return _SID_AND_ATTRIBUTES_HASH$struct$LAYOUT_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES_HASH$SidCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES_HASH$SidCount$LAYOUT() { return _SID_AND_ATTRIBUTES_HASH$SidCount$LAYOUT_; }

    static final VarHandle _SID_AND_ATTRIBUTES_HASH$SidCount$VH_ = _SID_AND_ATTRIBUTES_HASH$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidCount"));
    static final java.lang.invoke.VarHandle _SID_AND_ATTRIBUTES_HASH$SidCount$VH() { return _SID_AND_ATTRIBUTES_HASH$SidCount$VH_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES_HASH$SidAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES_HASH$SidAttr$LAYOUT() { return _SID_AND_ATTRIBUTES_HASH$SidAttr$LAYOUT_; }

    static final VarHandle _SID_AND_ATTRIBUTES_HASH$SidAttr$VH_ = MemoryHandles.asAddressVarHandle(_SID_AND_ATTRIBUTES_HASH$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SidAttr")));
    static final java.lang.invoke.VarHandle _SID_AND_ATTRIBUTES_HASH$SidAttr$VH() { return _SID_AND_ATTRIBUTES_HASH$SidAttr$VH_; }

    static final int WinNullSid() { return (int)0L; }

    static final int WinWorldSid() { return (int)1L; }

    static final int WinLocalSid() { return (int)2L; }

    static final int WinCreatorOwnerSid() { return (int)3L; }

    static final int WinCreatorGroupSid() { return (int)4L; }

    static final int WinCreatorOwnerServerSid() { return (int)5L; }

    static final int WinCreatorGroupServerSid() { return (int)6L; }

    static final int WinNtAuthoritySid() { return (int)7L; }

    static final int WinDialupSid() { return (int)8L; }

    static final int WinNetworkSid() { return (int)9L; }

    static final int WinBatchSid() { return (int)10L; }

    static final int WinInteractiveSid() { return (int)11L; }

    static final int WinServiceSid() { return (int)12L; }

    static final int WinAnonymousSid() { return (int)13L; }

    static final int WinProxySid() { return (int)14L; }

    static final int WinEnterpriseControllersSid() { return (int)15L; }

    static final int WinSelfSid() { return (int)16L; }

    static final int WinAuthenticatedUserSid() { return (int)17L; }

    static final int WinRestrictedCodeSid() { return (int)18L; }

    static final int WinTerminalServerSid() { return (int)19L; }

    static final int WinRemoteLogonIdSid() { return (int)20L; }

    static final int WinLogonIdsSid() { return (int)21L; }

    static final int WinLocalSystemSid() { return (int)22L; }

    static final int WinLocalServiceSid() { return (int)23L; }

    static final int WinNetworkServiceSid() { return (int)24L; }

    static final int WinBuiltinDomainSid() { return (int)25L; }

    static final int WinBuiltinAdministratorsSid() { return (int)26L; }

    static final int WinBuiltinUsersSid() { return (int)27L; }

    static final int WinBuiltinGuestsSid() { return (int)28L; }

    static final int WinBuiltinPowerUsersSid() { return (int)29L; }

    static final int WinBuiltinAccountOperatorsSid() { return (int)30L; }

    static final int WinBuiltinSystemOperatorsSid() { return (int)31L; }

    static final int WinBuiltinPrintOperatorsSid() { return (int)32L; }

    static final int WinBuiltinBackupOperatorsSid() { return (int)33L; }

    static final int WinBuiltinReplicatorSid() { return (int)34L; }

    static final int WinBuiltinPreWindows2000CompatibleAccessSid() { return (int)35L; }

    static final int WinBuiltinRemoteDesktopUsersSid() { return (int)36L; }

    static final int WinBuiltinNetworkConfigurationOperatorsSid() { return (int)37L; }

    static final int WinAccountAdministratorSid() { return (int)38L; }

    static final int WinAccountGuestSid() { return (int)39L; }

    static final int WinAccountKrbtgtSid() { return (int)40L; }

    static final int WinAccountDomainAdminsSid() { return (int)41L; }

    static final int WinAccountDomainUsersSid() { return (int)42L; }

    static final int WinAccountDomainGuestsSid() { return (int)43L; }

    static final int WinAccountComputersSid() { return (int)44L; }

    static final int WinAccountControllersSid() { return (int)45L; }

    static final int WinAccountCertAdminsSid() { return (int)46L; }

    static final int WinAccountSchemaAdminsSid() { return (int)47L; }

    static final int WinAccountEnterpriseAdminsSid() { return (int)48L; }

    static final int WinAccountPolicyAdminsSid() { return (int)49L; }

    static final int WinAccountRasAndIasServersSid() { return (int)50L; }

    static final int WinNTLMAuthenticationSid() { return (int)51L; }

    static final int WinDigestAuthenticationSid() { return (int)52L; }

    static final int WinSChannelAuthenticationSid() { return (int)53L; }

    static final int WinThisOrganizationSid() { return (int)54L; }

    static final int WinOtherOrganizationSid() { return (int)55L; }

    static final int WinBuiltinIncomingForestTrustBuildersSid() { return (int)56L; }

    static final int WinBuiltinPerfMonitoringUsersSid() { return (int)57L; }

    static final int WinBuiltinPerfLoggingUsersSid() { return (int)58L; }

    static final int WinBuiltinAuthorizationAccessSid() { return (int)59L; }

    static final int WinBuiltinTerminalServerLicenseServersSid() { return (int)60L; }

    static final int WinBuiltinDCOMUsersSid() { return (int)61L; }

    static final int WinBuiltinIUsersSid() { return (int)62L; }

    static final int WinIUserSid() { return (int)63L; }

    static final int WinBuiltinCryptoOperatorsSid() { return (int)64L; }

    static final int WinUntrustedLabelSid() { return (int)65L; }

    static final int WinLowLabelSid() { return (int)66L; }

    static final int WinMediumLabelSid() { return (int)67L; }

    static final int WinHighLabelSid() { return (int)68L; }

    static final int WinSystemLabelSid() { return (int)69L; }

    static final int WinWriteRestrictedCodeSid() { return (int)70L; }

    static final int WinCreatorOwnerRightsSid() { return (int)71L; }

    static final int WinCacheablePrincipalsGroupSid() { return (int)72L; }

    static final int WinNonCacheablePrincipalsGroupSid() { return (int)73L; }

    static final int WinEnterpriseReadonlyControllersSid() { return (int)74L; }

    static final int WinAccountReadonlyControllersSid() { return (int)75L; }

    static final int WinBuiltinEventLogReadersGroup() { return (int)76L; }

    static final int WinNewEnterpriseReadonlyControllersSid() { return (int)77L; }

    static final int WinBuiltinCertSvcDComAccessGroup() { return (int)78L; }

    static final int WinMediumPlusLabelSid() { return (int)79L; }

    static final int WinLocalLogonSid() { return (int)80L; }

    static final int WinConsoleLogonSid() { return (int)81L; }

    static final int WinThisOrganizationCertificateSid() { return (int)82L; }

    static final int WinApplicationPackageAuthoritySid() { return (int)83L; }

    static final int WinBuiltinAnyPackageSid() { return (int)84L; }

    static final int WinCapabilityInternetClientSid() { return (int)85L; }

    static final int WinCapabilityInternetClientServerSid() { return (int)86L; }

    static final int WinCapabilityPrivateNetworkClientServerSid() { return (int)87L; }

    static final int WinCapabilityPicturesLibrarySid() { return (int)88L; }

    static final int WinCapabilityVideosLibrarySid() { return (int)89L; }

    static final int WinCapabilityMusicLibrarySid() { return (int)90L; }

    static final int WinCapabilityDocumentsLibrarySid() { return (int)91L; }

    static final int WinCapabilitySharedUserCertificatesSid() { return (int)92L; }

    static final int WinCapabilityEnterpriseAuthenticationSid() { return (int)93L; }

    static final int WinCapabilityRemovableStorageSid() { return (int)94L; }

    static final int WinBuiltinRDSRemoteAccessServersSid() { return (int)95L; }

    static final int WinBuiltinRDSEndpointServersSid() { return (int)96L; }

    static final int WinBuiltinRDSManagementServersSid() { return (int)97L; }

    static final int WinUserModeDriversSid() { return (int)98L; }

    static final int WinBuiltinHyperVAdminsSid() { return (int)99L; }

    static final int WinAccountCloneableControllersSid() { return (int)100L; }

    static final int WinBuiltinAccessControlAssistanceOperatorsSid() { return (int)101L; }

    static final int WinBuiltinRemoteManagementUsersSid() { return (int)102L; }

    static final int WinAuthenticationAuthorityAssertedSid() { return (int)103L; }

    static final int WinAuthenticationServiceAssertedSid() { return (int)104L; }

    static final int WinLocalAccountSid() { return (int)105L; }

    static final int WinLocalAccountAndAdministratorSid() { return (int)106L; }

    static final int WinAccountProtectedUsersSid() { return (int)107L; }

    static final int WinCapabilityAppointmentsSid() { return (int)108L; }

    static final int WinCapabilityContactsSid() { return (int)109L; }

    static final int WinAccountDefaultSystemManagedSid() { return (int)110L; }

    static final int WinBuiltinDefaultSystemManagedGroupSid() { return (int)111L; }

    static final int WinBuiltinStorageReplicaAdminsSid() { return (int)112L; }

    static final int WinAccountKeyAdminsSid() { return (int)113L; }

    static final int WinAccountEnterpriseKeyAdminsSid() { return (int)114L; }

    static final int WinAuthenticationKeyTrustSid() { return (int)115L; }

    static final int WinAuthenticationKeyPropertyMFASid() { return (int)116L; }

    static final int WinAuthenticationKeyPropertyAttestationSid() { return (int)117L; }

    static final int WinAuthenticationFreshKeyAuthSid() { return (int)118L; }

    static final int WinBuiltinDeviceOwnersSid() { return (int)119L; }

    static final MemoryLayout _ACL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("AclRevision"),
        C_CHAR.withName("Sbz1"),
        C_SHORT.withName("AclSize"),
        C_SHORT.withName("AceCount"),
        C_SHORT.withName("Sbz2")
    ).withName("_ACL");
    static final jdk.incubator.foreign.MemoryLayout _ACL$struct$LAYOUT() { return _ACL$struct$LAYOUT_; }

    static final MemoryLayout _ACL$AclRevision$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _ACL$AclRevision$LAYOUT() { return _ACL$AclRevision$LAYOUT_; }

    static final VarHandle _ACL$AclRevision$VH_ = _ACL$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AclRevision"));
    static final java.lang.invoke.VarHandle _ACL$AclRevision$VH() { return _ACL$AclRevision$VH_; }

    static final MemoryLayout _ACL$Sbz1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _ACL$Sbz1$LAYOUT() { return _ACL$Sbz1$LAYOUT_; }

    static final VarHandle _ACL$Sbz1$VH_ = _ACL$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Sbz1"));
    static final java.lang.invoke.VarHandle _ACL$Sbz1$VH() { return _ACL$Sbz1$VH_; }

    static final MemoryLayout _ACL$AclSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _ACL$AclSize$LAYOUT() { return _ACL$AclSize$LAYOUT_; }

    static final VarHandle _ACL$AclSize$VH_ = _ACL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("AclSize"));
    static final java.lang.invoke.VarHandle _ACL$AclSize$VH() { return _ACL$AclSize$VH_; }

    static final MemoryLayout _ACL$AceCount$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _ACL$AceCount$LAYOUT() { return _ACL$AceCount$LAYOUT_; }

    static final VarHandle _ACL$AceCount$VH_ = _ACL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("AceCount"));
    static final java.lang.invoke.VarHandle _ACL$AceCount$VH() { return _ACL$AceCount$VH_; }

    static final MemoryLayout _ACL$Sbz2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _ACL$Sbz2$LAYOUT() { return _ACL$Sbz2$LAYOUT_; }

    static final VarHandle _ACL$Sbz2$VH_ = _ACL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sbz2"));
    static final java.lang.invoke.VarHandle _ACL$Sbz2$VH() { return _ACL$Sbz2$VH_; }

    static final MemoryLayout _ACE_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("AceType"),
        C_CHAR.withName("AceFlags"),
        C_SHORT.withName("AceSize")
    ).withName("_ACE_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _ACE_HEADER$struct$LAYOUT() { return _ACE_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _ACE_HEADER$AceType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _ACE_HEADER$AceType$LAYOUT() { return _ACE_HEADER$AceType$LAYOUT_; }

    static final VarHandle _ACE_HEADER$AceType$VH_ = _ACE_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AceType"));
    static final java.lang.invoke.VarHandle _ACE_HEADER$AceType$VH() { return _ACE_HEADER$AceType$VH_; }

    static final MemoryLayout _ACE_HEADER$AceFlags$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _ACE_HEADER$AceFlags$LAYOUT() { return _ACE_HEADER$AceFlags$LAYOUT_; }

    static final VarHandle _ACE_HEADER$AceFlags$VH_ = _ACE_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AceFlags"));
    static final java.lang.invoke.VarHandle _ACE_HEADER$AceFlags$VH() { return _ACE_HEADER$AceFlags$VH_; }

    static final MemoryLayout _ACE_HEADER$AceSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _ACE_HEADER$AceSize$LAYOUT() { return _ACE_HEADER$AceSize$LAYOUT_; }

    static final VarHandle _ACE_HEADER$AceSize$VH_ = _ACE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("AceSize"));
    static final java.lang.invoke.VarHandle _ACE_HEADER$AceSize$VH() { return _ACE_HEADER$AceSize$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_ALLOWED_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_ACE$struct$LAYOUT() { return _ACCESS_ALLOWED_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_ALLOWED_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_ACE$Mask$LAYOUT() { return _ACCESS_ALLOWED_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_ACE$Mask$VH_ = _ACCESS_ALLOWED_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_ACE$Mask$VH() { return _ACCESS_ALLOWED_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_ACE$SidStart$LAYOUT() { return _ACCESS_ALLOWED_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_ACE$SidStart$VH_ = _ACCESS_ALLOWED_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_ACE$SidStart$VH() { return _ACCESS_ALLOWED_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_DENIED_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_DENIED_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_ACE$struct$LAYOUT() { return _ACCESS_DENIED_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_DENIED_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_ACE$Mask$LAYOUT() { return _ACCESS_DENIED_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_ACE$Mask$VH_ = _ACCESS_DENIED_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_ACE$Mask$VH() { return _ACCESS_DENIED_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_DENIED_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_ACE$SidStart$LAYOUT() { return _ACCESS_DENIED_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_ACE$SidStart$VH_ = _ACCESS_DENIED_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_ACE$SidStart$VH() { return _ACCESS_DENIED_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_AUDIT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_ACE$struct$LAYOUT() { return _SYSTEM_AUDIT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_AUDIT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_ACE$Mask$LAYOUT() { return _SYSTEM_AUDIT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_ACE$Mask$VH_ = _SYSTEM_AUDIT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_ACE$Mask$VH() { return _SYSTEM_AUDIT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_ACE$SidStart$LAYOUT() { return _SYSTEM_AUDIT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_ACE$SidStart$VH_ = _SYSTEM_AUDIT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_ACE$SidStart$VH() { return _SYSTEM_AUDIT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_ALARM_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_ACE$struct$LAYOUT() { return _SYSTEM_ALARM_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ALARM_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_ACE$Mask$LAYOUT() { return _SYSTEM_ALARM_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_ACE$Mask$VH_ = _SYSTEM_ALARM_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_ACE$Mask$VH() { return _SYSTEM_ALARM_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_ACE$SidStart$LAYOUT() { return _SYSTEM_ALARM_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_ACE$SidStart$VH_ = _SYSTEM_ALARM_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_ACE$SidStart$VH() { return _SYSTEM_ALARM_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_RESOURCE_ATTRIBUTE_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$LAYOUT() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH_ = _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$LAYOUT() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH_ = _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_SCOPED_POLICY_ID_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT() { return _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$LAYOUT() { return _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH_ = _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH() { return _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$LAYOUT() { return _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH_ = _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH() { return _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_MANDATORY_LABEL_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT() { return _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$Mask$LAYOUT() { return _SYSTEM_MANDATORY_LABEL_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_MANDATORY_LABEL_ACE$Mask$VH_ = _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_MANDATORY_LABEL_ACE$Mask$VH() { return _SYSTEM_MANDATORY_LABEL_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$SidStart$LAYOUT() { return _SYSTEM_MANDATORY_LABEL_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH_ = _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH() { return _SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_PROCESS_TRUST_LABEL_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$LAYOUT() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH_ = _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$LAYOUT() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH_ = _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_ACCESS_FILTER_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT() { return _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$Mask$LAYOUT() { return _SYSTEM_ACCESS_FILTER_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ACCESS_FILTER_ACE$Mask$VH_ = _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_ACCESS_FILTER_ACE$Mask$VH() { return _SYSTEM_ACCESS_FILTER_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$SidStart$LAYOUT() { return _SYSTEM_ACCESS_FILTER_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ACCESS_FILTER_ACE$SidStart$VH_ = _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_ACCESS_FILTER_ACE$SidStart$VH() { return _SYSTEM_ACCESS_FILTER_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_ALLOWED_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT() { return _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$Mask$LAYOUT() { return _ACCESS_ALLOWED_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_OBJECT_ACE$Mask$VH_ = _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_OBJECT_ACE$Mask$VH() { return _ACCESS_ALLOWED_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$Flags$LAYOUT() { return _ACCESS_ALLOWED_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_OBJECT_ACE$Flags$VH_ = _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_OBJECT_ACE$Flags$VH() { return _ACCESS_ALLOWED_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$SidStart$LAYOUT() { return _ACCESS_ALLOWED_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH_ = _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH() { return _ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_DENIED_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT() { return _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_DENIED_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_OBJECT_ACE$Mask$LAYOUT() { return _ACCESS_DENIED_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_OBJECT_ACE$Mask$VH_ = _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_OBJECT_ACE$Mask$VH() { return _ACCESS_DENIED_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_DENIED_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_OBJECT_ACE$Flags$LAYOUT() { return _ACCESS_DENIED_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_OBJECT_ACE$Flags$VH_ = _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_OBJECT_ACE$Flags$VH() { return _ACCESS_DENIED_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _ACCESS_DENIED_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_OBJECT_ACE$SidStart$LAYOUT() { return _ACCESS_DENIED_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_OBJECT_ACE$SidStart$VH_ = _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_OBJECT_ACE$SidStart$VH() { return _ACCESS_DENIED_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_AUDIT_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT() { return _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$Mask$LAYOUT() { return _SYSTEM_AUDIT_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_OBJECT_ACE$Mask$VH_ = _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_OBJECT_ACE$Mask$VH() { return _SYSTEM_AUDIT_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$Flags$LAYOUT() { return _SYSTEM_AUDIT_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_OBJECT_ACE$Flags$VH_ = _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_OBJECT_ACE$Flags$VH() { return _SYSTEM_AUDIT_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$SidStart$LAYOUT() { return _SYSTEM_AUDIT_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH_ = _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH() { return _SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_ALARM_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT() { return _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$Mask$LAYOUT() { return _SYSTEM_ALARM_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_OBJECT_ACE$Mask$VH_ = _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_OBJECT_ACE$Mask$VH() { return _SYSTEM_ALARM_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$Flags$LAYOUT() { return _SYSTEM_ALARM_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_OBJECT_ACE$Flags$VH_ = _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_OBJECT_ACE$Flags$VH() { return _SYSTEM_ALARM_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$SidStart$LAYOUT() { return _SYSTEM_ALARM_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_OBJECT_ACE$SidStart$VH_ = _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_OBJECT_ACE$SidStart$VH() { return _SYSTEM_ALARM_OBJECT_ACE$SidStart$VH_; }

}

