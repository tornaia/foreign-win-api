// Generated by jextract

package com.github.tornaia.foreign.win.api.winnt.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class winnt_h$constants$7 extends winnt_h$constants$6 {

    /* package-private */ winnt_h$constants$7() {}
    static final MemoryLayout GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD", GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CLASS0_FLOOR_PERF$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CLASS0_FLOOR_PERF$LAYOUT() { return GUID_PROCESSOR_CLASS0_FLOOR_PERF$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CLASS0_FLOOR_PERF$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CLASS0_FLOOR_PERF", GUID_PROCESSOR_CLASS0_FLOOR_PERF$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CLASS0_FLOOR_PERF$SEGMENT() { return GUID_PROCESSOR_CLASS0_FLOOR_PERF$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CLASS1_INITIAL_PERF$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CLASS1_INITIAL_PERF$LAYOUT() { return GUID_PROCESSOR_CLASS1_INITIAL_PERF$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CLASS1_INITIAL_PERF$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CLASS1_INITIAL_PERF", GUID_PROCESSOR_CLASS1_INITIAL_PERF$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CLASS1_INITIAL_PERF$SEGMENT() { return GUID_PROCESSOR_CLASS1_INITIAL_PERF$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$LAYOUT() { return GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_THREAD_SCHEDULING_POLICY", GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$SEGMENT() { return GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$LAYOUT() { return GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY", GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$SEGMENT() { return GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_SYSTEM_COOLING_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_SYSTEM_COOLING_POLICY$LAYOUT() { return GUID_SYSTEM_COOLING_POLICY$LAYOUT_; }

    static final MemorySegment GUID_SYSTEM_COOLING_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_SYSTEM_COOLING_POLICY", GUID_SYSTEM_COOLING_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_SYSTEM_COOLING_POLICY$SEGMENT() { return GUID_SYSTEM_COOLING_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD", GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$LAYOUT() { return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1", GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$SEGMENT() { return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD", GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$LAYOUT() { return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1", GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$SEGMENT() { return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$LAYOUT() { return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME", GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$SEGMENT() { return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$LAYOUT() { return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1", GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$SEGMENT() { return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$LAYOUT() { return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME", GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$SEGMENT() { return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$LAYOUT() { return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1", GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$SEGMENT() { return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$LAYOUT() { return GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING", GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$SEGMENT() { return GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$LAYOUT() { return GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1", GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$SEGMENT() { return GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$LAYOUT() { return GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR", GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$SEGMENT() { return GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$LAYOUT() { return GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1", GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$SEGMENT() { return GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$SEGMENT_; }

    static final MemoryLayout GUID_LOCK_CONSOLE_ON_WAKE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_LOCK_CONSOLE_ON_WAKE$LAYOUT() { return GUID_LOCK_CONSOLE_ON_WAKE$LAYOUT_; }

    static final MemorySegment GUID_LOCK_CONSOLE_ON_WAKE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_LOCK_CONSOLE_ON_WAKE", GUID_LOCK_CONSOLE_ON_WAKE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_LOCK_CONSOLE_ON_WAKE$SEGMENT() { return GUID_LOCK_CONSOLE_ON_WAKE$SEGMENT_; }

    static final MemoryLayout GUID_DEVICE_IDLE_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DEVICE_IDLE_POLICY$LAYOUT() { return GUID_DEVICE_IDLE_POLICY$LAYOUT_; }

    static final MemorySegment GUID_DEVICE_IDLE_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DEVICE_IDLE_POLICY", GUID_DEVICE_IDLE_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DEVICE_IDLE_POLICY$SEGMENT() { return GUID_DEVICE_IDLE_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_CONNECTIVITY_IN_STANDBY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_CONNECTIVITY_IN_STANDBY$LAYOUT() { return GUID_CONNECTIVITY_IN_STANDBY$LAYOUT_; }

    static final MemorySegment GUID_CONNECTIVITY_IN_STANDBY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_CONNECTIVITY_IN_STANDBY", GUID_CONNECTIVITY_IN_STANDBY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_CONNECTIVITY_IN_STANDBY$SEGMENT() { return GUID_CONNECTIVITY_IN_STANDBY$SEGMENT_; }

    static final MemoryLayout GUID_DISCONNECTED_STANDBY_MODE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DISCONNECTED_STANDBY_MODE$LAYOUT() { return GUID_DISCONNECTED_STANDBY_MODE$LAYOUT_; }

    static final MemorySegment GUID_DISCONNECTED_STANDBY_MODE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DISCONNECTED_STANDBY_MODE", GUID_DISCONNECTED_STANDBY_MODE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DISCONNECTED_STANDBY_MODE$SEGMENT() { return GUID_DISCONNECTED_STANDBY_MODE$SEGMENT_; }

    static final MemoryLayout GUID_ACDC_POWER_SOURCE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ACDC_POWER_SOURCE$LAYOUT() { return GUID_ACDC_POWER_SOURCE$LAYOUT_; }

    static final MemorySegment GUID_ACDC_POWER_SOURCE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ACDC_POWER_SOURCE", GUID_ACDC_POWER_SOURCE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ACDC_POWER_SOURCE$SEGMENT() { return GUID_ACDC_POWER_SOURCE$SEGMENT_; }

    static final MemoryLayout GUID_LIDSWITCH_STATE_CHANGE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_LIDSWITCH_STATE_CHANGE$LAYOUT() { return GUID_LIDSWITCH_STATE_CHANGE$LAYOUT_; }

    static final MemorySegment GUID_LIDSWITCH_STATE_CHANGE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_LIDSWITCH_STATE_CHANGE", GUID_LIDSWITCH_STATE_CHANGE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_LIDSWITCH_STATE_CHANGE$SEGMENT() { return GUID_LIDSWITCH_STATE_CHANGE$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_PERCENTAGE_REMAINING$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_PERCENTAGE_REMAINING$LAYOUT() { return GUID_BATTERY_PERCENTAGE_REMAINING$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_PERCENTAGE_REMAINING$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_PERCENTAGE_REMAINING", GUID_BATTERY_PERCENTAGE_REMAINING$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_PERCENTAGE_REMAINING$SEGMENT() { return GUID_BATTERY_PERCENTAGE_REMAINING$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_COUNT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_COUNT$LAYOUT() { return GUID_BATTERY_COUNT$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_COUNT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_COUNT", GUID_BATTERY_COUNT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_COUNT$SEGMENT() { return GUID_BATTERY_COUNT$SEGMENT_; }

    static final MemoryLayout GUID_GLOBAL_USER_PRESENCE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_GLOBAL_USER_PRESENCE$LAYOUT() { return GUID_GLOBAL_USER_PRESENCE$LAYOUT_; }

    static final MemorySegment GUID_GLOBAL_USER_PRESENCE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_GLOBAL_USER_PRESENCE", GUID_GLOBAL_USER_PRESENCE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_GLOBAL_USER_PRESENCE$SEGMENT() { return GUID_GLOBAL_USER_PRESENCE$SEGMENT_; }

    static final MemoryLayout GUID_SESSION_DISPLAY_STATUS$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_SESSION_DISPLAY_STATUS$LAYOUT() { return GUID_SESSION_DISPLAY_STATUS$LAYOUT_; }

    static final MemorySegment GUID_SESSION_DISPLAY_STATUS$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_SESSION_DISPLAY_STATUS", GUID_SESSION_DISPLAY_STATUS$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_SESSION_DISPLAY_STATUS$SEGMENT() { return GUID_SESSION_DISPLAY_STATUS$SEGMENT_; }

    static final MemoryLayout GUID_SESSION_USER_PRESENCE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_SESSION_USER_PRESENCE$LAYOUT() { return GUID_SESSION_USER_PRESENCE$LAYOUT_; }

    static final MemorySegment GUID_SESSION_USER_PRESENCE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_SESSION_USER_PRESENCE", GUID_SESSION_USER_PRESENCE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_SESSION_USER_PRESENCE$SEGMENT() { return GUID_SESSION_USER_PRESENCE$SEGMENT_; }

    static final MemoryLayout GUID_IDLE_BACKGROUND_TASK$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_IDLE_BACKGROUND_TASK$LAYOUT() { return GUID_IDLE_BACKGROUND_TASK$LAYOUT_; }

    static final MemorySegment GUID_IDLE_BACKGROUND_TASK$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_IDLE_BACKGROUND_TASK", GUID_IDLE_BACKGROUND_TASK$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_IDLE_BACKGROUND_TASK$SEGMENT() { return GUID_IDLE_BACKGROUND_TASK$SEGMENT_; }

    static final MemoryLayout GUID_BACKGROUND_TASK_NOTIFICATION$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BACKGROUND_TASK_NOTIFICATION$LAYOUT() { return GUID_BACKGROUND_TASK_NOTIFICATION$LAYOUT_; }

    static final MemorySegment GUID_BACKGROUND_TASK_NOTIFICATION$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BACKGROUND_TASK_NOTIFICATION", GUID_BACKGROUND_TASK_NOTIFICATION$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BACKGROUND_TASK_NOTIFICATION$SEGMENT() { return GUID_BACKGROUND_TASK_NOTIFICATION$SEGMENT_; }

    static final MemoryLayout GUID_APPLAUNCH_BUTTON$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_APPLAUNCH_BUTTON$LAYOUT() { return GUID_APPLAUNCH_BUTTON$LAYOUT_; }

    static final MemorySegment GUID_APPLAUNCH_BUTTON$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_APPLAUNCH_BUTTON", GUID_APPLAUNCH_BUTTON$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_APPLAUNCH_BUTTON$SEGMENT() { return GUID_APPLAUNCH_BUTTON$SEGMENT_; }

    static final MemoryLayout GUID_PCIEXPRESS_SETTINGS_SUBGROUP$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PCIEXPRESS_SETTINGS_SUBGROUP$LAYOUT() { return GUID_PCIEXPRESS_SETTINGS_SUBGROUP$LAYOUT_; }

    static final MemorySegment GUID_PCIEXPRESS_SETTINGS_SUBGROUP$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PCIEXPRESS_SETTINGS_SUBGROUP", GUID_PCIEXPRESS_SETTINGS_SUBGROUP$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PCIEXPRESS_SETTINGS_SUBGROUP$SEGMENT() { return GUID_PCIEXPRESS_SETTINGS_SUBGROUP$SEGMENT_; }

    static final MemoryLayout GUID_PCIEXPRESS_ASPM_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PCIEXPRESS_ASPM_POLICY$LAYOUT() { return GUID_PCIEXPRESS_ASPM_POLICY$LAYOUT_; }

    static final MemorySegment GUID_PCIEXPRESS_ASPM_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PCIEXPRESS_ASPM_POLICY", GUID_PCIEXPRESS_ASPM_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PCIEXPRESS_ASPM_POLICY$SEGMENT() { return GUID_PCIEXPRESS_ASPM_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$LAYOUT() { return GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$LAYOUT_; }

    static final MemorySegment GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ENABLE_SWITCH_FORCED_SHUTDOWN", GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$SEGMENT() { return GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$SEGMENT_; }

    static final MemoryLayout GUID_INTSTEER_SUBGROUP$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_INTSTEER_SUBGROUP$LAYOUT() { return GUID_INTSTEER_SUBGROUP$LAYOUT_; }

    static final MemorySegment GUID_INTSTEER_SUBGROUP$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_INTSTEER_SUBGROUP", GUID_INTSTEER_SUBGROUP$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_INTSTEER_SUBGROUP$SEGMENT() { return GUID_INTSTEER_SUBGROUP$SEGMENT_; }

    static final MemoryLayout GUID_INTSTEER_MODE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_INTSTEER_MODE$LAYOUT() { return GUID_INTSTEER_MODE$LAYOUT_; }

    static final MemorySegment GUID_INTSTEER_MODE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_INTSTEER_MODE", GUID_INTSTEER_MODE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_INTSTEER_MODE$SEGMENT() { return GUID_INTSTEER_MODE$SEGMENT_; }

    static final MemoryLayout GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$LAYOUT() { return GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$LAYOUT_; }

    static final MemorySegment GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_INTSTEER_LOAD_PER_PROC_TRIGGER", GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$SEGMENT() { return GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$SEGMENT_; }

    static final MemoryLayout GUID_INTSTEER_TIME_UNPARK_TRIGGER$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_INTSTEER_TIME_UNPARK_TRIGGER$LAYOUT() { return GUID_INTSTEER_TIME_UNPARK_TRIGGER$LAYOUT_; }

    static final MemorySegment GUID_INTSTEER_TIME_UNPARK_TRIGGER$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_INTSTEER_TIME_UNPARK_TRIGGER", GUID_INTSTEER_TIME_UNPARK_TRIGGER$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_INTSTEER_TIME_UNPARK_TRIGGER$SEGMENT() { return GUID_INTSTEER_TIME_UNPARK_TRIGGER$SEGMENT_; }

    static final MemoryLayout GUID_GRAPHICS_SUBGROUP$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_GRAPHICS_SUBGROUP$LAYOUT() { return GUID_GRAPHICS_SUBGROUP$LAYOUT_; }

    static final MemorySegment GUID_GRAPHICS_SUBGROUP$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_GRAPHICS_SUBGROUP", GUID_GRAPHICS_SUBGROUP$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_GRAPHICS_SUBGROUP$SEGMENT() { return GUID_GRAPHICS_SUBGROUP$SEGMENT_; }

    static final MemoryLayout GUID_GPU_PREFERENCE_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_GPU_PREFERENCE_POLICY$LAYOUT() { return GUID_GPU_PREFERENCE_POLICY$LAYOUT_; }

    static final MemorySegment GUID_GPU_PREFERENCE_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_GPU_PREFERENCE_POLICY", GUID_GPU_PREFERENCE_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_GPU_PREFERENCE_POLICY$SEGMENT() { return GUID_GPU_PREFERENCE_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_MIXED_REALITY_MODE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_MIXED_REALITY_MODE$LAYOUT() { return GUID_MIXED_REALITY_MODE$LAYOUT_; }

    static final MemorySegment GUID_MIXED_REALITY_MODE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_MIXED_REALITY_MODE", GUID_MIXED_REALITY_MODE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_MIXED_REALITY_MODE$SEGMENT() { return GUID_MIXED_REALITY_MODE$SEGMENT_; }

    static final MemoryLayout GUID_SPR_ACTIVE_SESSION_CHANGE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_SPR_ACTIVE_SESSION_CHANGE$LAYOUT() { return GUID_SPR_ACTIVE_SESSION_CHANGE$LAYOUT_; }

    static final MemorySegment GUID_SPR_ACTIVE_SESSION_CHANGE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_SPR_ACTIVE_SESSION_CHANGE", GUID_SPR_ACTIVE_SESSION_CHANGE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_SPR_ACTIVE_SESSION_CHANGE$SEGMENT() { return GUID_SPR_ACTIVE_SESSION_CHANGE$SEGMENT_; }

    static final int PowerSystemUnspecified() { return (int)0L; }

    static final int PowerSystemWorking() { return (int)1L; }

    static final int PowerSystemSleeping1() { return (int)2L; }

    static final int PowerSystemSleeping2() { return (int)3L; }

    static final int PowerSystemSleeping3() { return (int)4L; }

    static final int PowerSystemHibernate() { return (int)5L; }

    static final int PowerSystemShutdown() { return (int)6L; }

    static final int PowerSystemMaximum() { return (int)7L; }

    static final int PowerActionNone() { return (int)0L; }

    static final int PowerActionReserved() { return (int)1L; }

    static final int PowerActionSleep() { return (int)2L; }

    static final int PowerActionHibernate() { return (int)3L; }

    static final int PowerActionShutdown() { return (int)4L; }

    static final int PowerActionShutdownReset() { return (int)5L; }

    static final int PowerActionShutdownOff() { return (int)6L; }

    static final int PowerActionWarmEject() { return (int)7L; }

    static final int PowerActionDisplayOff() { return (int)8L; }

    static final int PowerDeviceUnspecified() { return (int)0L; }

    static final int PowerDeviceD0() { return (int)1L; }

    static final int PowerDeviceD1() { return (int)2L; }

    static final int PowerDeviceD2() { return (int)3L; }

    static final int PowerDeviceD3() { return (int)4L; }

    static final int PowerDeviceMaximum() { return (int)5L; }

    static final int PowerMonitorOff() { return (int)0L; }

    static final int PowerMonitorOn() { return (int)1L; }

    static final int PowerMonitorDim() { return (int)2L; }

    static final int PowerUserPresent() { return (int)0L; }

    static final int PowerUserNotPresent() { return (int)1L; }

    static final int PowerUserInactive() { return (int)2L; }

    static final int PowerUserMaximum() { return (int)3L; }

    static final int PowerUserInvalid() { return (int)3L; }

    static final int LT_DONT_CARE() { return (int)0L; }

    static final int LT_LOWEST_LATENCY() { return (int)1L; }

    static final int PowerRequestDisplayRequired() { return (int)0L; }

    static final int PowerRequestSystemRequired() { return (int)1L; }

    static final int PowerRequestAwayModeRequired() { return (int)2L; }

    static final int PowerRequestExecutionRequired() { return (int)3L; }

    static final MemoryLayout CM_Power_Data_s$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PD_Size"),
        C_INT.withName("PD_MostRecentPowerState"),
        C_LONG.withName("PD_Capabilities"),
        C_LONG.withName("PD_D1Latency"),
        C_LONG.withName("PD_D2Latency"),
        C_LONG.withName("PD_D3Latency"),
        MemoryLayout.ofSequence(7, C_INT).withName("PD_PowerStateMapping"),
        C_INT.withName("PD_DeepestSystemWake")
    ).withName("CM_Power_Data_s");
    static final jdk.incubator.foreign.MemoryLayout CM_Power_Data_s$struct$LAYOUT() { return CM_Power_Data_s$struct$LAYOUT_; }

    static final MemoryLayout CM_Power_Data_s$PD_Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout CM_Power_Data_s$PD_Size$LAYOUT() { return CM_Power_Data_s$PD_Size$LAYOUT_; }

    static final VarHandle CM_Power_Data_s$PD_Size$VH_ = CM_Power_Data_s$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PD_Size"));
    static final java.lang.invoke.VarHandle CM_Power_Data_s$PD_Size$VH() { return CM_Power_Data_s$PD_Size$VH_; }

    static final MemoryLayout CM_Power_Data_s$PD_MostRecentPowerState$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CM_Power_Data_s$PD_MostRecentPowerState$LAYOUT() { return CM_Power_Data_s$PD_MostRecentPowerState$LAYOUT_; }

    static final VarHandle CM_Power_Data_s$PD_MostRecentPowerState$VH_ = CM_Power_Data_s$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PD_MostRecentPowerState"));
    static final java.lang.invoke.VarHandle CM_Power_Data_s$PD_MostRecentPowerState$VH() { return CM_Power_Data_s$PD_MostRecentPowerState$VH_; }

    static final MemoryLayout CM_Power_Data_s$PD_Capabilities$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout CM_Power_Data_s$PD_Capabilities$LAYOUT() { return CM_Power_Data_s$PD_Capabilities$LAYOUT_; }

    static final VarHandle CM_Power_Data_s$PD_Capabilities$VH_ = CM_Power_Data_s$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PD_Capabilities"));
    static final java.lang.invoke.VarHandle CM_Power_Data_s$PD_Capabilities$VH() { return CM_Power_Data_s$PD_Capabilities$VH_; }

    static final MemoryLayout CM_Power_Data_s$PD_D1Latency$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout CM_Power_Data_s$PD_D1Latency$LAYOUT() { return CM_Power_Data_s$PD_D1Latency$LAYOUT_; }

    static final VarHandle CM_Power_Data_s$PD_D1Latency$VH_ = CM_Power_Data_s$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PD_D1Latency"));
    static final java.lang.invoke.VarHandle CM_Power_Data_s$PD_D1Latency$VH() { return CM_Power_Data_s$PD_D1Latency$VH_; }

    static final MemoryLayout CM_Power_Data_s$PD_D2Latency$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout CM_Power_Data_s$PD_D2Latency$LAYOUT() { return CM_Power_Data_s$PD_D2Latency$LAYOUT_; }

    static final VarHandle CM_Power_Data_s$PD_D2Latency$VH_ = CM_Power_Data_s$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PD_D2Latency"));
    static final java.lang.invoke.VarHandle CM_Power_Data_s$PD_D2Latency$VH() { return CM_Power_Data_s$PD_D2Latency$VH_; }

    static final MemoryLayout CM_Power_Data_s$PD_D3Latency$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout CM_Power_Data_s$PD_D3Latency$LAYOUT() { return CM_Power_Data_s$PD_D3Latency$LAYOUT_; }

    static final VarHandle CM_Power_Data_s$PD_D3Latency$VH_ = CM_Power_Data_s$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PD_D3Latency"));
    static final java.lang.invoke.VarHandle CM_Power_Data_s$PD_D3Latency$VH() { return CM_Power_Data_s$PD_D3Latency$VH_; }

    static final MemoryLayout CM_Power_Data_s$PD_DeepestSystemWake$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CM_Power_Data_s$PD_DeepestSystemWake$LAYOUT() { return CM_Power_Data_s$PD_DeepestSystemWake$LAYOUT_; }

    static final VarHandle CM_Power_Data_s$PD_DeepestSystemWake$VH_ = CM_Power_Data_s$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PD_DeepestSystemWake"));
    static final java.lang.invoke.VarHandle CM_Power_Data_s$PD_DeepestSystemWake$VH() { return CM_Power_Data_s$PD_DeepestSystemWake$VH_; }

    static final int SystemPowerPolicyAc() { return (int)0L; }

    static final int SystemPowerPolicyDc() { return (int)1L; }

    static final int VerifySystemPolicyAc() { return (int)2L; }

    static final int VerifySystemPolicyDc() { return (int)3L; }

    static final int SystemPowerCapabilities() { return (int)4L; }

    static final int SystemBatteryState() { return (int)5L; }

    static final int SystemPowerStateHandler() { return (int)6L; }

    static final int ProcessorStateHandler() { return (int)7L; }

    static final int SystemPowerPolicyCurrent() { return (int)8L; }

    static final int AdministratorPowerPolicy() { return (int)9L; }

    static final int SystemReserveHiberFile() { return (int)10L; }

    static final int ProcessorInformation() { return (int)11L; }

    static final int SystemPowerInformation() { return (int)12L; }

    static final int ProcessorStateHandler2() { return (int)13L; }

    static final int LastWakeTime() { return (int)14L; }

    static final int LastSleepTime() { return (int)15L; }

    static final int SystemExecutionState() { return (int)16L; }

    static final int SystemPowerStateNotifyHandler() { return (int)17L; }

    static final int ProcessorPowerPolicyAc() { return (int)18L; }

    static final int ProcessorPowerPolicyDc() { return (int)19L; }

    static final int VerifyProcessorPowerPolicyAc() { return (int)20L; }

    static final int VerifyProcessorPowerPolicyDc() { return (int)21L; }

    static final int ProcessorPowerPolicyCurrent() { return (int)22L; }

    static final int SystemPowerStateLogging() { return (int)23L; }

    static final int SystemPowerLoggingEntry() { return (int)24L; }

    static final int SetPowerSettingValue() { return (int)25L; }

    static final int NotifyUserPowerSetting() { return (int)26L; }

    static final int PowerInformationLevelUnused0() { return (int)27L; }

    static final int SystemMonitorHiberBootPowerOff() { return (int)28L; }

    static final int SystemVideoState() { return (int)29L; }

    static final int TraceApplicationPowerMessage() { return (int)30L; }

    static final int TraceApplicationPowerMessageEnd() { return (int)31L; }

    static final int ProcessorPerfStates() { return (int)32L; }

    static final int ProcessorIdleStates() { return (int)33L; }

    static final int ProcessorCap() { return (int)34L; }

    static final int SystemWakeSource() { return (int)35L; }

    static final int SystemHiberFileInformation() { return (int)36L; }

    static final int TraceServicePowerMessage() { return (int)37L; }

    static final int ProcessorLoad() { return (int)38L; }

    static final int PowerShutdownNotification() { return (int)39L; }

    static final int MonitorCapabilities() { return (int)40L; }

    static final int SessionPowerInit() { return (int)41L; }

    static final int SessionDisplayState() { return (int)42L; }

    static final int PowerRequestCreate() { return (int)43L; }

    static final int PowerRequestAction() { return (int)44L; }

    static final int GetPowerRequestList() { return (int)45L; }

    static final int ProcessorInformationEx() { return (int)46L; }

    static final int NotifyUserModeLegacyPowerEvent() { return (int)47L; }

    static final int GroupPark() { return (int)48L; }

    static final int ProcessorIdleDomains() { return (int)49L; }

    static final int WakeTimerList() { return (int)50L; }

    static final int SystemHiberFileSize() { return (int)51L; }

    static final int ProcessorIdleStatesHv() { return (int)52L; }

    static final int ProcessorPerfStatesHv() { return (int)53L; }

    static final int ProcessorPerfCapHv() { return (int)54L; }

    static final int ProcessorSetIdle() { return (int)55L; }

    static final int LogicalProcessorIdling() { return (int)56L; }

    static final int UserPresence() { return (int)57L; }

    static final int PowerSettingNotificationName() { return (int)58L; }

    static final int GetPowerSettingValue() { return (int)59L; }

    static final int IdleResiliency() { return (int)60L; }

    static final int SessionRITState() { return (int)61L; }

    static final int SessionConnectNotification() { return (int)62L; }

    static final int SessionPowerCleanup() { return (int)63L; }

    static final int SessionLockState() { return (int)64L; }

    static final int SystemHiberbootState() { return (int)65L; }

    static final int PlatformInformation() { return (int)66L; }

    static final int PdcInvocation() { return (int)67L; }

    static final int MonitorInvocation() { return (int)68L; }

    static final int FirmwareTableInformationRegistered() { return (int)69L; }

    static final int SetShutdownSelectedTime() { return (int)70L; }

    static final int SuspendResumeInvocation() { return (int)71L; }

    static final int PlmPowerRequestCreate() { return (int)72L; }

    static final int ScreenOff() { return (int)73L; }

    static final int CsDeviceNotification() { return (int)74L; }

    static final int PlatformRole() { return (int)75L; }

    static final int LastResumePerformance() { return (int)76L; }

    static final int DisplayBurst() { return (int)77L; }

    static final int ExitLatencySamplingPercentage() { return (int)78L; }

    static final int RegisterSpmPowerSettings() { return (int)79L; }

    static final int PlatformIdleStates() { return (int)80L; }

    static final int ProcessorIdleVeto() { return (int)81L; }

    static final int PlatformIdleVeto() { return (int)82L; }

    static final int SystemBatteryStatePrecise() { return (int)83L; }

    static final int ThermalEvent() { return (int)84L; }

    static final int PowerRequestActionInternal() { return (int)85L; }

    static final int BatteryDeviceState() { return (int)86L; }

    static final int PowerInformationInternal() { return (int)87L; }

    static final int ThermalStandby() { return (int)88L; }

    static final int SystemHiberFileType() { return (int)89L; }

    static final int PhysicalPowerButtonPress() { return (int)90L; }

    static final int QueryPotentialDripsConstraint() { return (int)91L; }

    static final int EnergyTrackerCreate() { return (int)92L; }

    static final int EnergyTrackerQuery() { return (int)93L; }

    static final int UpdateBlackBoxRecorder() { return (int)94L; }

    static final int SessionAllowExternalDmaDevices() { return (int)95L; }

    static final int PowerInformationLevelMaximum() { return (int)96L; }

    static final int UserNotPresent() { return (int)0L; }

    static final int UserPresent() { return (int)1L; }

    static final int UserUnknown() { return (int)255L; }

    static final MemoryLayout _POWER_USER_PRESENCE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("UserPresence")
    ).withName("_POWER_USER_PRESENCE");
    static final jdk.incubator.foreign.MemoryLayout _POWER_USER_PRESENCE$struct$LAYOUT() { return _POWER_USER_PRESENCE$struct$LAYOUT_; }

    static final MemoryLayout _POWER_USER_PRESENCE$UserPresence$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _POWER_USER_PRESENCE$UserPresence$LAYOUT() { return _POWER_USER_PRESENCE$UserPresence$LAYOUT_; }

    static final VarHandle _POWER_USER_PRESENCE$UserPresence$VH_ = _POWER_USER_PRESENCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserPresence"));
    static final java.lang.invoke.VarHandle _POWER_USER_PRESENCE$UserPresence$VH() { return _POWER_USER_PRESENCE$UserPresence$VH_; }

    static final MemoryLayout _POWER_SESSION_CONNECT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Connected"),
        C_CHAR.withName("Console")
    ).withName("_POWER_SESSION_CONNECT");
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_CONNECT$struct$LAYOUT() { return _POWER_SESSION_CONNECT$struct$LAYOUT_; }

    static final MemoryLayout _POWER_SESSION_CONNECT$Connected$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_CONNECT$Connected$LAYOUT() { return _POWER_SESSION_CONNECT$Connected$LAYOUT_; }

    static final VarHandle _POWER_SESSION_CONNECT$Connected$VH_ = _POWER_SESSION_CONNECT$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Connected"));
    static final java.lang.invoke.VarHandle _POWER_SESSION_CONNECT$Connected$VH() { return _POWER_SESSION_CONNECT$Connected$VH_; }

    static final MemoryLayout _POWER_SESSION_CONNECT$Console$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_CONNECT$Console$LAYOUT() { return _POWER_SESSION_CONNECT$Console$LAYOUT_; }

    static final VarHandle _POWER_SESSION_CONNECT$Console$VH_ = _POWER_SESSION_CONNECT$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Console"));
    static final java.lang.invoke.VarHandle _POWER_SESSION_CONNECT$Console$VH() { return _POWER_SESSION_CONNECT$Console$VH_; }

    static final MemoryLayout _POWER_SESSION_TIMEOUTS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("InputTimeout"),
        C_LONG.withName("DisplayTimeout")
    ).withName("_POWER_SESSION_TIMEOUTS");
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_TIMEOUTS$struct$LAYOUT() { return _POWER_SESSION_TIMEOUTS$struct$LAYOUT_; }

    static final MemoryLayout _POWER_SESSION_TIMEOUTS$InputTimeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_TIMEOUTS$InputTimeout$LAYOUT() { return _POWER_SESSION_TIMEOUTS$InputTimeout$LAYOUT_; }

    static final VarHandle _POWER_SESSION_TIMEOUTS$InputTimeout$VH_ = _POWER_SESSION_TIMEOUTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("InputTimeout"));
    static final java.lang.invoke.VarHandle _POWER_SESSION_TIMEOUTS$InputTimeout$VH() { return _POWER_SESSION_TIMEOUTS$InputTimeout$VH_; }

    static final MemoryLayout _POWER_SESSION_TIMEOUTS$DisplayTimeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_TIMEOUTS$DisplayTimeout$LAYOUT() { return _POWER_SESSION_TIMEOUTS$DisplayTimeout$LAYOUT_; }

    static final VarHandle _POWER_SESSION_TIMEOUTS$DisplayTimeout$VH_ = _POWER_SESSION_TIMEOUTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DisplayTimeout"));
    static final java.lang.invoke.VarHandle _POWER_SESSION_TIMEOUTS$DisplayTimeout$VH() { return _POWER_SESSION_TIMEOUTS$DisplayTimeout$VH_; }

    static final MemoryLayout _POWER_SESSION_RIT_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Active"),
        MemoryLayout.ofPaddingBits(24),
        C_LONG.withName("LastInputTime")
    ).withName("_POWER_SESSION_RIT_STATE");
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_RIT_STATE$struct$LAYOUT() { return _POWER_SESSION_RIT_STATE$struct$LAYOUT_; }

    static final MemoryLayout _POWER_SESSION_RIT_STATE$Active$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_RIT_STATE$Active$LAYOUT() { return _POWER_SESSION_RIT_STATE$Active$LAYOUT_; }

    static final VarHandle _POWER_SESSION_RIT_STATE$Active$VH_ = _POWER_SESSION_RIT_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Active"));
    static final java.lang.invoke.VarHandle _POWER_SESSION_RIT_STATE$Active$VH() { return _POWER_SESSION_RIT_STATE$Active$VH_; }

    static final MemoryLayout _POWER_SESSION_RIT_STATE$LastInputTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_RIT_STATE$LastInputTime$LAYOUT() { return _POWER_SESSION_RIT_STATE$LastInputTime$LAYOUT_; }

    static final VarHandle _POWER_SESSION_RIT_STATE$LastInputTime$VH_ = _POWER_SESSION_RIT_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LastInputTime"));
    static final java.lang.invoke.VarHandle _POWER_SESSION_RIT_STATE$LastInputTime$VH() { return _POWER_SESSION_RIT_STATE$LastInputTime$VH_; }

    static final MemoryLayout _POWER_SESSION_WINLOGON$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("SessionId"),
        C_CHAR.withName("Console"),
        C_CHAR.withName("Locked"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_POWER_SESSION_WINLOGON");
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_WINLOGON$struct$LAYOUT() { return _POWER_SESSION_WINLOGON$struct$LAYOUT_; }

    static final MemoryLayout _POWER_SESSION_WINLOGON$SessionId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_WINLOGON$SessionId$LAYOUT() { return _POWER_SESSION_WINLOGON$SessionId$LAYOUT_; }

    static final VarHandle _POWER_SESSION_WINLOGON$SessionId$VH_ = _POWER_SESSION_WINLOGON$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SessionId"));
    static final java.lang.invoke.VarHandle _POWER_SESSION_WINLOGON$SessionId$VH() { return _POWER_SESSION_WINLOGON$SessionId$VH_; }

    static final MemoryLayout _POWER_SESSION_WINLOGON$Console$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_WINLOGON$Console$LAYOUT() { return _POWER_SESSION_WINLOGON$Console$LAYOUT_; }

    static final VarHandle _POWER_SESSION_WINLOGON$Console$VH_ = _POWER_SESSION_WINLOGON$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Console"));
    static final java.lang.invoke.VarHandle _POWER_SESSION_WINLOGON$Console$VH() { return _POWER_SESSION_WINLOGON$Console$VH_; }

    static final MemoryLayout _POWER_SESSION_WINLOGON$Locked$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_WINLOGON$Locked$LAYOUT() { return _POWER_SESSION_WINLOGON$Locked$LAYOUT_; }

    static final VarHandle _POWER_SESSION_WINLOGON$Locked$VH_ = _POWER_SESSION_WINLOGON$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Locked"));
    static final java.lang.invoke.VarHandle _POWER_SESSION_WINLOGON$Locked$VH() { return _POWER_SESSION_WINLOGON$Locked$VH_; }

    static final MemoryLayout _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("IsAllowed")
    ).withName("_POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES");
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$struct$LAYOUT() { return _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$struct$LAYOUT_; }

    static final MemoryLayout _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$IsAllowed$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$IsAllowed$LAYOUT() { return _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$IsAllowed$LAYOUT_; }

    static final VarHandle _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$IsAllowed$VH_ = _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsAllowed"));
    static final java.lang.invoke.VarHandle _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$IsAllowed$VH() { return _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$IsAllowed$VH_; }

    static final MemoryLayout _POWER_IDLE_RESILIENCY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("CoalescingTimeout"),
        C_LONG.withName("IdleResiliencyPeriod")
    ).withName("_POWER_IDLE_RESILIENCY");
    static final jdk.incubator.foreign.MemoryLayout _POWER_IDLE_RESILIENCY$struct$LAYOUT() { return _POWER_IDLE_RESILIENCY$struct$LAYOUT_; }

    static final MemoryLayout _POWER_IDLE_RESILIENCY$CoalescingTimeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _POWER_IDLE_RESILIENCY$CoalescingTimeout$LAYOUT() { return _POWER_IDLE_RESILIENCY$CoalescingTimeout$LAYOUT_; }

    static final VarHandle _POWER_IDLE_RESILIENCY$CoalescingTimeout$VH_ = _POWER_IDLE_RESILIENCY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CoalescingTimeout"));
    static final java.lang.invoke.VarHandle _POWER_IDLE_RESILIENCY$CoalescingTimeout$VH() { return _POWER_IDLE_RESILIENCY$CoalescingTimeout$VH_; }

    static final MemoryLayout _POWER_IDLE_RESILIENCY$IdleResiliencyPeriod$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _POWER_IDLE_RESILIENCY$IdleResiliencyPeriod$LAYOUT() { return _POWER_IDLE_RESILIENCY$IdleResiliencyPeriod$LAYOUT_; }

    static final VarHandle _POWER_IDLE_RESILIENCY$IdleResiliencyPeriod$VH_ = _POWER_IDLE_RESILIENCY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IdleResiliencyPeriod"));
    static final java.lang.invoke.VarHandle _POWER_IDLE_RESILIENCY$IdleResiliencyPeriod$VH() { return _POWER_IDLE_RESILIENCY$IdleResiliencyPeriod$VH_; }

    static final int MonitorRequestReasonUnknown() { return (int)0L; }

    static final int MonitorRequestReasonPowerButton() { return (int)1L; }

    static final int MonitorRequestReasonRemoteConnection() { return (int)2L; }

    static final int MonitorRequestReasonScMonitorpower() { return (int)3L; }

    static final int MonitorRequestReasonUserInput() { return (int)4L; }

    static final int MonitorRequestReasonAcDcDisplayBurst() { return (int)5L; }

    static final int MonitorRequestReasonUserDisplayBurst() { return (int)6L; }

    static final int MonitorRequestReasonPoSetSystemState() { return (int)7L; }

    static final int MonitorRequestReasonSetThreadExecutionState() { return (int)8L; }

    static final int MonitorRequestReasonFullWake() { return (int)9L; }

    static final int MonitorRequestReasonSessionUnlock() { return (int)10L; }

    static final int MonitorRequestReasonScreenOffRequest() { return (int)11L; }

    static final int MonitorRequestReasonIdleTimeout() { return (int)12L; }

    static final int MonitorRequestReasonPolicyChange() { return (int)13L; }

    static final int MonitorRequestReasonSleepButton() { return (int)14L; }

    static final int MonitorRequestReasonLid() { return (int)15L; }

    static final int MonitorRequestReasonBatteryCountChange() { return (int)16L; }

    static final int MonitorRequestReasonGracePeriod() { return (int)17L; }

    static final int MonitorRequestReasonPnP() { return (int)18L; }

    static final int MonitorRequestReasonDP() { return (int)19L; }

    static final int MonitorRequestReasonSxTransition() { return (int)20L; }

    static final int MonitorRequestReasonSystemIdle() { return (int)21L; }

    static final int MonitorRequestReasonNearProximity() { return (int)22L; }

    static final int MonitorRequestReasonThermalStandby() { return (int)23L; }

    static final int MonitorRequestReasonResumePdc() { return (int)24L; }

    static final int MonitorRequestReasonResumeS4() { return (int)25L; }

    static final int MonitorRequestReasonTerminal() { return (int)26L; }

    static final int MonitorRequestReasonPdcSignal() { return (int)27L; }

    static final int MonitorRequestReasonAcDcDisplayBurstSuppressed() { return (int)28L; }

    static final int MonitorRequestReasonSystemStateEntered() { return (int)29L; }

    static final int MonitorRequestReasonWinrt() { return (int)30L; }

    static final int MonitorRequestReasonUserInputKeyboard() { return (int)31L; }

    static final int MonitorRequestReasonUserInputMouse() { return (int)32L; }

    static final int MonitorRequestReasonUserInputTouch() { return (int)33L; }

    static final int MonitorRequestReasonUserInputPen() { return (int)34L; }

    static final int MonitorRequestReasonUserInputAccelerometer() { return (int)35L; }

    static final int MonitorRequestReasonUserInputHid() { return (int)36L; }

    static final int MonitorRequestReasonUserInputPoUserPresent() { return (int)37L; }

    static final int MonitorRequestReasonUserInputSessionSwitch() { return (int)38L; }

    static final int MonitorRequestReasonUserInputInitialization() { return (int)39L; }

    static final int MonitorRequestReasonPdcSignalWindowsMobilePwrNotif() { return (int)40L; }

    static final int MonitorRequestReasonPdcSignalWindowsMobileShell() { return (int)41L; }

    static final int MonitorRequestReasonPdcSignalHeyCortana() { return (int)42L; }

    static final int MonitorRequestReasonPdcSignalHolographicShell() { return (int)43L; }

    static final int MonitorRequestReasonPdcSignalFingerprint() { return (int)44L; }

    static final int MonitorRequestReasonDirectedDrips() { return (int)45L; }

    static final int MonitorRequestReasonDim() { return (int)46L; }

    static final int MonitorRequestReasonBuiltinPanel() { return (int)47L; }

    static final int MonitorRequestReasonDisplayRequiredUnDim() { return (int)48L; }

    static final int MonitorRequestReasonBatteryCountChangeSuppressed() { return (int)49L; }

    static final int MonitorRequestReasonResumeModernStandby() { return (int)50L; }

    static final int MonitorRequestReasonMax() { return (int)51L; }

    static final int MonitorRequestTypeOff() { return (int)0L; }

    static final int MonitorRequestTypeOnAndPresent() { return (int)1L; }

    static final int MonitorRequestTypeToggleOn() { return (int)2L; }

    static final MemoryLayout _POWER_MONITOR_INVOCATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Console"),
        MemoryLayout.ofPaddingBits(24),
        C_INT.withName("RequestReason")
    ).withName("_POWER_MONITOR_INVOCATION");
    static final jdk.incubator.foreign.MemoryLayout _POWER_MONITOR_INVOCATION$struct$LAYOUT() { return _POWER_MONITOR_INVOCATION$struct$LAYOUT_; }

    static final MemoryLayout _POWER_MONITOR_INVOCATION$Console$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _POWER_MONITOR_INVOCATION$Console$LAYOUT() { return _POWER_MONITOR_INVOCATION$Console$LAYOUT_; }

    static final VarHandle _POWER_MONITOR_INVOCATION$Console$VH_ = _POWER_MONITOR_INVOCATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Console"));
    static final java.lang.invoke.VarHandle _POWER_MONITOR_INVOCATION$Console$VH() { return _POWER_MONITOR_INVOCATION$Console$VH_; }

    static final MemoryLayout _POWER_MONITOR_INVOCATION$RequestReason$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _POWER_MONITOR_INVOCATION$RequestReason$LAYOUT() { return _POWER_MONITOR_INVOCATION$RequestReason$LAYOUT_; }

    static final VarHandle _POWER_MONITOR_INVOCATION$RequestReason$VH_ = _POWER_MONITOR_INVOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RequestReason"));
    static final java.lang.invoke.VarHandle _POWER_MONITOR_INVOCATION$RequestReason$VH() { return _POWER_MONITOR_INVOCATION$RequestReason$VH_; }

    static final MemoryLayout _RESUME_PERFORMANCE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PostTimeMs"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("TotalResumeTimeMs"),
        C_LONGLONG.withName("ResumeCompleteTimestamp")
    ).withName("_RESUME_PERFORMANCE");
    static final jdk.incubator.foreign.MemoryLayout _RESUME_PERFORMANCE$struct$LAYOUT() { return _RESUME_PERFORMANCE$struct$LAYOUT_; }

    static final MemoryLayout _RESUME_PERFORMANCE$PostTimeMs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RESUME_PERFORMANCE$PostTimeMs$LAYOUT() { return _RESUME_PERFORMANCE$PostTimeMs$LAYOUT_; }

    static final VarHandle _RESUME_PERFORMANCE$PostTimeMs$VH_ = _RESUME_PERFORMANCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PostTimeMs"));
    static final java.lang.invoke.VarHandle _RESUME_PERFORMANCE$PostTimeMs$VH() { return _RESUME_PERFORMANCE$PostTimeMs$VH_; }

    static final MemoryLayout _RESUME_PERFORMANCE$TotalResumeTimeMs$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _RESUME_PERFORMANCE$TotalResumeTimeMs$LAYOUT() { return _RESUME_PERFORMANCE$TotalResumeTimeMs$LAYOUT_; }

    static final VarHandle _RESUME_PERFORMANCE$TotalResumeTimeMs$VH_ = _RESUME_PERFORMANCE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalResumeTimeMs"));
    static final java.lang.invoke.VarHandle _RESUME_PERFORMANCE$TotalResumeTimeMs$VH() { return _RESUME_PERFORMANCE$TotalResumeTimeMs$VH_; }

    static final MemoryLayout _RESUME_PERFORMANCE$ResumeCompleteTimestamp$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _RESUME_PERFORMANCE$ResumeCompleteTimestamp$LAYOUT() { return _RESUME_PERFORMANCE$ResumeCompleteTimestamp$LAYOUT_; }

    static final VarHandle _RESUME_PERFORMANCE$ResumeCompleteTimestamp$VH_ = _RESUME_PERFORMANCE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ResumeCompleteTimestamp"));
    static final java.lang.invoke.VarHandle _RESUME_PERFORMANCE$ResumeCompleteTimestamp$VH() { return _RESUME_PERFORMANCE$ResumeCompleteTimestamp$VH_; }

    static final int PoAc() { return (int)0L; }

    static final int PoDc() { return (int)1L; }

    static final int PoHot() { return (int)2L; }

    static final int PoConditionMaximum() { return (int)3L; }

    static final MemoryLayout SET_POWER_SETTING_VALUE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("Guid"),
        C_INT.withName("PowerCondition"),
        C_LONG.withName("DataLength"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Data"),
        MemoryLayout.ofPaddingBits(24)
    );
    static final jdk.incubator.foreign.MemoryLayout SET_POWER_SETTING_VALUE$struct$LAYOUT() { return SET_POWER_SETTING_VALUE$struct$LAYOUT_; }

    static final MemoryLayout SET_POWER_SETTING_VALUE$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SET_POWER_SETTING_VALUE$Version$LAYOUT() { return SET_POWER_SETTING_VALUE$Version$LAYOUT_; }

    static final VarHandle SET_POWER_SETTING_VALUE$Version$VH_ = SET_POWER_SETTING_VALUE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle SET_POWER_SETTING_VALUE$Version$VH() { return SET_POWER_SETTING_VALUE$Version$VH_; }

    static final MemoryLayout SET_POWER_SETTING_VALUE$PowerCondition$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout SET_POWER_SETTING_VALUE$PowerCondition$LAYOUT() { return SET_POWER_SETTING_VALUE$PowerCondition$LAYOUT_; }

    static final VarHandle SET_POWER_SETTING_VALUE$PowerCondition$VH_ = SET_POWER_SETTING_VALUE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PowerCondition"));
    static final java.lang.invoke.VarHandle SET_POWER_SETTING_VALUE$PowerCondition$VH() { return SET_POWER_SETTING_VALUE$PowerCondition$VH_; }

    static final MemoryLayout SET_POWER_SETTING_VALUE$DataLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SET_POWER_SETTING_VALUE$DataLength$LAYOUT() { return SET_POWER_SETTING_VALUE$DataLength$LAYOUT_; }

    static final VarHandle SET_POWER_SETTING_VALUE$DataLength$VH_ = SET_POWER_SETTING_VALUE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataLength"));
    static final java.lang.invoke.VarHandle SET_POWER_SETTING_VALUE$DataLength$VH() { return SET_POWER_SETTING_VALUE$DataLength$VH_; }

    static final MemoryLayout NOTIFY_USER_POWER_SETTING$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("Guid")
    );
    static final jdk.incubator.foreign.MemoryLayout NOTIFY_USER_POWER_SETTING$struct$LAYOUT() { return NOTIFY_USER_POWER_SETTING$struct$LAYOUT_; }

    static final MemoryLayout _APPLICATIONLAUNCH_SETTING_VALUE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ActivationTime"),
        C_LONG.withName("Flags"),
        C_LONG.withName("ButtonInstanceID")
    ).withName("_APPLICATIONLAUNCH_SETTING_VALUE");
    static final jdk.incubator.foreign.MemoryLayout _APPLICATIONLAUNCH_SETTING_VALUE$struct$LAYOUT() { return _APPLICATIONLAUNCH_SETTING_VALUE$struct$LAYOUT_; }

    static final MemoryLayout _APPLICATIONLAUNCH_SETTING_VALUE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _APPLICATIONLAUNCH_SETTING_VALUE$Flags$LAYOUT() { return _APPLICATIONLAUNCH_SETTING_VALUE$Flags$LAYOUT_; }

    static final VarHandle _APPLICATIONLAUNCH_SETTING_VALUE$Flags$VH_ = _APPLICATIONLAUNCH_SETTING_VALUE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _APPLICATIONLAUNCH_SETTING_VALUE$Flags$VH() { return _APPLICATIONLAUNCH_SETTING_VALUE$Flags$VH_; }

    static final MemoryLayout _APPLICATIONLAUNCH_SETTING_VALUE$ButtonInstanceID$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _APPLICATIONLAUNCH_SETTING_VALUE$ButtonInstanceID$LAYOUT() { return _APPLICATIONLAUNCH_SETTING_VALUE$ButtonInstanceID$LAYOUT_; }

    static final VarHandle _APPLICATIONLAUNCH_SETTING_VALUE$ButtonInstanceID$VH_ = _APPLICATIONLAUNCH_SETTING_VALUE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ButtonInstanceID"));
    static final java.lang.invoke.VarHandle _APPLICATIONLAUNCH_SETTING_VALUE$ButtonInstanceID$VH() { return _APPLICATIONLAUNCH_SETTING_VALUE$ButtonInstanceID$VH_; }

    static final int PlatformRoleUnspecified() { return (int)0L; }

    static final int PlatformRoleDesktop() { return (int)1L; }

    static final int PlatformRoleMobile() { return (int)2L; }

    static final int PlatformRoleWorkstation() { return (int)3L; }

    static final int PlatformRoleEnterpriseServer() { return (int)4L; }

    static final int PlatformRoleSOHOServer() { return (int)5L; }

    static final int PlatformRoleAppliancePC() { return (int)6L; }

    static final int PlatformRolePerformanceServer() { return (int)7L; }

    static final int PlatformRoleSlate() { return (int)8L; }

    static final int PlatformRoleMaximum() { return (int)9L; }

    static final MemoryLayout _POWER_PLATFORM_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("AoAc")
    ).withName("_POWER_PLATFORM_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _POWER_PLATFORM_INFORMATION$struct$LAYOUT() { return _POWER_PLATFORM_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _POWER_PLATFORM_INFORMATION$AoAc$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _POWER_PLATFORM_INFORMATION$AoAc$LAYOUT() { return _POWER_PLATFORM_INFORMATION$AoAc$LAYOUT_; }

    static final VarHandle _POWER_PLATFORM_INFORMATION$AoAc$VH_ = _POWER_PLATFORM_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AoAc"));
    static final java.lang.invoke.VarHandle _POWER_PLATFORM_INFORMATION$AoAc$VH() { return _POWER_PLATFORM_INFORMATION$AoAc$VH_; }

    static final MemoryLayout BATTERY_REPORTING_SCALE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Granularity"),
        C_LONG.withName("Capacity")
    );
    static final jdk.incubator.foreign.MemoryLayout BATTERY_REPORTING_SCALE$struct$LAYOUT() { return BATTERY_REPORTING_SCALE$struct$LAYOUT_; }

    static final MemoryLayout BATTERY_REPORTING_SCALE$Granularity$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout BATTERY_REPORTING_SCALE$Granularity$LAYOUT() { return BATTERY_REPORTING_SCALE$Granularity$LAYOUT_; }

    static final VarHandle BATTERY_REPORTING_SCALE$Granularity$VH_ = BATTERY_REPORTING_SCALE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Granularity"));
    static final java.lang.invoke.VarHandle BATTERY_REPORTING_SCALE$Granularity$VH() { return BATTERY_REPORTING_SCALE$Granularity$VH_; }

    static final MemoryLayout BATTERY_REPORTING_SCALE$Capacity$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout BATTERY_REPORTING_SCALE$Capacity$LAYOUT() { return BATTERY_REPORTING_SCALE$Capacity$LAYOUT_; }

    static final VarHandle BATTERY_REPORTING_SCALE$Capacity$VH_ = BATTERY_REPORTING_SCALE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Capacity"));
    static final java.lang.invoke.VarHandle BATTERY_REPORTING_SCALE$Capacity$VH() { return BATTERY_REPORTING_SCALE$Capacity$VH_; }

    static final MemoryLayout PPM_WMI_LEGACY_PERFSTATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Frequency"),
        C_LONG.withName("Flags"),
        C_LONG.withName("PercentFrequency")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_LEGACY_PERFSTATE$struct$LAYOUT() { return PPM_WMI_LEGACY_PERFSTATE$struct$LAYOUT_; }

    static final MemoryLayout PPM_WMI_LEGACY_PERFSTATE$Frequency$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_LEGACY_PERFSTATE$Frequency$LAYOUT() { return PPM_WMI_LEGACY_PERFSTATE$Frequency$LAYOUT_; }

    static final VarHandle PPM_WMI_LEGACY_PERFSTATE$Frequency$VH_ = PPM_WMI_LEGACY_PERFSTATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Frequency"));
    static final java.lang.invoke.VarHandle PPM_WMI_LEGACY_PERFSTATE$Frequency$VH() { return PPM_WMI_LEGACY_PERFSTATE$Frequency$VH_; }

    static final MemoryLayout PPM_WMI_LEGACY_PERFSTATE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_LEGACY_PERFSTATE$Flags$LAYOUT() { return PPM_WMI_LEGACY_PERFSTATE$Flags$LAYOUT_; }

    static final VarHandle PPM_WMI_LEGACY_PERFSTATE$Flags$VH_ = PPM_WMI_LEGACY_PERFSTATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle PPM_WMI_LEGACY_PERFSTATE$Flags$VH() { return PPM_WMI_LEGACY_PERFSTATE$Flags$VH_; }

    static final MemoryLayout PPM_WMI_LEGACY_PERFSTATE$PercentFrequency$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_LEGACY_PERFSTATE$PercentFrequency$LAYOUT() { return PPM_WMI_LEGACY_PERFSTATE$PercentFrequency$LAYOUT_; }

    static final VarHandle PPM_WMI_LEGACY_PERFSTATE$PercentFrequency$VH_ = PPM_WMI_LEGACY_PERFSTATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PercentFrequency"));
    static final java.lang.invoke.VarHandle PPM_WMI_LEGACY_PERFSTATE$PercentFrequency$VH() { return PPM_WMI_LEGACY_PERFSTATE$PercentFrequency$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Latency"),
        C_LONG.withName("Power"),
        C_LONG.withName("TimeCheck"),
        C_CHAR.withName("PromotePercent"),
        C_CHAR.withName("DemotePercent"),
        C_CHAR.withName("StateType"),
        C_CHAR.withName("Reserved"),
        C_LONG.withName("StateFlags"),
        C_LONG.withName("Context"),
        C_LONG.withName("IdleHandler"),
        C_LONG.withName("Reserved1")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATE$struct$LAYOUT() { return PPM_WMI_IDLE_STATE$struct$LAYOUT_; }

    static final MemoryLayout PPM_WMI_IDLE_STATE$Latency$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATE$Latency$LAYOUT() { return PPM_WMI_IDLE_STATE$Latency$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATE$Latency$VH_ = PPM_WMI_IDLE_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Latency"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATE$Latency$VH() { return PPM_WMI_IDLE_STATE$Latency$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATE$Power$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATE$Power$LAYOUT() { return PPM_WMI_IDLE_STATE$Power$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATE$Power$VH_ = PPM_WMI_IDLE_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Power"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATE$Power$VH() { return PPM_WMI_IDLE_STATE$Power$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATE$TimeCheck$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATE$TimeCheck$LAYOUT() { return PPM_WMI_IDLE_STATE$TimeCheck$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATE$TimeCheck$VH_ = PPM_WMI_IDLE_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeCheck"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATE$TimeCheck$VH() { return PPM_WMI_IDLE_STATE$TimeCheck$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATE$PromotePercent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATE$PromotePercent$LAYOUT() { return PPM_WMI_IDLE_STATE$PromotePercent$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATE$PromotePercent$VH_ = PPM_WMI_IDLE_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PromotePercent"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATE$PromotePercent$VH() { return PPM_WMI_IDLE_STATE$PromotePercent$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATE$DemotePercent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATE$DemotePercent$LAYOUT() { return PPM_WMI_IDLE_STATE$DemotePercent$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATE$DemotePercent$VH_ = PPM_WMI_IDLE_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DemotePercent"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATE$DemotePercent$VH() { return PPM_WMI_IDLE_STATE$DemotePercent$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATE$StateType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATE$StateType$LAYOUT() { return PPM_WMI_IDLE_STATE$StateType$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATE$StateType$VH_ = PPM_WMI_IDLE_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("StateType"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATE$StateType$VH() { return PPM_WMI_IDLE_STATE$StateType$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATE$Reserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATE$Reserved$LAYOUT() { return PPM_WMI_IDLE_STATE$Reserved$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATE$Reserved$VH_ = PPM_WMI_IDLE_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATE$Reserved$VH() { return PPM_WMI_IDLE_STATE$Reserved$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATE$StateFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATE$StateFlags$LAYOUT() { return PPM_WMI_IDLE_STATE$StateFlags$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATE$StateFlags$VH_ = PPM_WMI_IDLE_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StateFlags"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATE$StateFlags$VH() { return PPM_WMI_IDLE_STATE$StateFlags$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATE$Context$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATE$Context$LAYOUT() { return PPM_WMI_IDLE_STATE$Context$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATE$Context$VH_ = PPM_WMI_IDLE_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Context"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATE$Context$VH() { return PPM_WMI_IDLE_STATE$Context$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATE$IdleHandler$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATE$IdleHandler$LAYOUT() { return PPM_WMI_IDLE_STATE$IdleHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATE$IdleHandler$VH_ = PPM_WMI_IDLE_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IdleHandler"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATE$IdleHandler$VH() { return PPM_WMI_IDLE_STATE$IdleHandler$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATE$Reserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATE$Reserved1$LAYOUT() { return PPM_WMI_IDLE_STATE$Reserved1$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATE$Reserved1$VH_ = PPM_WMI_IDLE_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATE$Reserved1$VH() { return PPM_WMI_IDLE_STATE$Reserved1$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Type"),
        C_LONG.withName("Count"),
        C_LONG.withName("TargetState"),
        C_LONG.withName("OldState"),
        C_LONGLONG.withName("TargetProcessors"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Latency"),
            C_LONG.withName("Power"),
            C_LONG.withName("TimeCheck"),
            C_CHAR.withName("PromotePercent"),
            C_CHAR.withName("DemotePercent"),
            C_CHAR.withName("StateType"),
            C_CHAR.withName("Reserved"),
            C_LONG.withName("StateFlags"),
            C_LONG.withName("Context"),
            C_LONG.withName("IdleHandler"),
            C_LONG.withName("Reserved1")
        )).withName("State")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATES$struct$LAYOUT() { return PPM_WMI_IDLE_STATES$struct$LAYOUT_; }

    static final MemoryLayout PPM_WMI_IDLE_STATES$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATES$Type$LAYOUT() { return PPM_WMI_IDLE_STATES$Type$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATES$Type$VH_ = PPM_WMI_IDLE_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATES$Type$VH() { return PPM_WMI_IDLE_STATES$Type$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATES$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATES$Count$LAYOUT() { return PPM_WMI_IDLE_STATES$Count$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATES$Count$VH_ = PPM_WMI_IDLE_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATES$Count$VH() { return PPM_WMI_IDLE_STATES$Count$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATES$TargetState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATES$TargetState$LAYOUT() { return PPM_WMI_IDLE_STATES$TargetState$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATES$TargetState$VH_ = PPM_WMI_IDLE_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TargetState"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATES$TargetState$VH() { return PPM_WMI_IDLE_STATES$TargetState$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATES$OldState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATES$OldState$LAYOUT() { return PPM_WMI_IDLE_STATES$OldState$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATES$OldState$VH_ = PPM_WMI_IDLE_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OldState"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATES$OldState$VH() { return PPM_WMI_IDLE_STATES$OldState$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATES$TargetProcessors$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATES$TargetProcessors$LAYOUT() { return PPM_WMI_IDLE_STATES$TargetProcessors$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATES$TargetProcessors$VH_ = PPM_WMI_IDLE_STATES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TargetProcessors"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATES$TargetProcessors$VH() { return PPM_WMI_IDLE_STATES$TargetProcessors$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATES_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Type"),
        C_LONG.withName("Count"),
        C_LONG.withName("TargetState"),
        C_LONG.withName("OldState"),
        C_POINTER.withName("TargetProcessors"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Latency"),
            C_LONG.withName("Power"),
            C_LONG.withName("TimeCheck"),
            C_CHAR.withName("PromotePercent"),
            C_CHAR.withName("DemotePercent"),
            C_CHAR.withName("StateType"),
            C_CHAR.withName("Reserved"),
            C_LONG.withName("StateFlags"),
            C_LONG.withName("Context"),
            C_LONG.withName("IdleHandler"),
            C_LONG.withName("Reserved1")
        )).withName("State")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATES_EX$struct$LAYOUT() { return PPM_WMI_IDLE_STATES_EX$struct$LAYOUT_; }

    static final MemoryLayout PPM_WMI_IDLE_STATES_EX$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATES_EX$Type$LAYOUT() { return PPM_WMI_IDLE_STATES_EX$Type$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATES_EX$Type$VH_ = PPM_WMI_IDLE_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATES_EX$Type$VH() { return PPM_WMI_IDLE_STATES_EX$Type$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATES_EX$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATES_EX$Count$LAYOUT() { return PPM_WMI_IDLE_STATES_EX$Count$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATES_EX$Count$VH_ = PPM_WMI_IDLE_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATES_EX$Count$VH() { return PPM_WMI_IDLE_STATES_EX$Count$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATES_EX$TargetState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATES_EX$TargetState$LAYOUT() { return PPM_WMI_IDLE_STATES_EX$TargetState$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATES_EX$TargetState$VH_ = PPM_WMI_IDLE_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TargetState"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATES_EX$TargetState$VH() { return PPM_WMI_IDLE_STATES_EX$TargetState$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATES_EX$OldState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATES_EX$OldState$LAYOUT() { return PPM_WMI_IDLE_STATES_EX$OldState$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATES_EX$OldState$VH_ = PPM_WMI_IDLE_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OldState"));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATES_EX$OldState$VH() { return PPM_WMI_IDLE_STATES_EX$OldState$VH_; }

    static final MemoryLayout PPM_WMI_IDLE_STATES_EX$TargetProcessors$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_IDLE_STATES_EX$TargetProcessors$LAYOUT() { return PPM_WMI_IDLE_STATES_EX$TargetProcessors$LAYOUT_; }

    static final VarHandle PPM_WMI_IDLE_STATES_EX$TargetProcessors$VH_ = MemoryHandles.asAddressVarHandle(PPM_WMI_IDLE_STATES_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TargetProcessors")));
    static final java.lang.invoke.VarHandle PPM_WMI_IDLE_STATES_EX$TargetProcessors$VH() { return PPM_WMI_IDLE_STATES_EX$TargetProcessors$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Frequency"),
        C_LONG.withName("Power"),
        C_CHAR.withName("PercentFrequency"),
        C_CHAR.withName("IncreaseLevel"),
        C_CHAR.withName("DecreaseLevel"),
        C_CHAR.withName("Type"),
        C_LONG.withName("IncreaseTime"),
        C_LONG.withName("DecreaseTime"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Control"),
        C_LONGLONG.withName("Status"),
        C_LONG.withName("HitCount"),
        C_LONG.withName("Reserved1"),
        C_LONGLONG.withName("Reserved2"),
        C_LONGLONG.withName("Reserved3")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$struct$LAYOUT() { return PPM_WMI_PERF_STATE$struct$LAYOUT_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$Frequency$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$Frequency$LAYOUT() { return PPM_WMI_PERF_STATE$Frequency$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$Frequency$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Frequency"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$Frequency$VH() { return PPM_WMI_PERF_STATE$Frequency$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$Power$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$Power$LAYOUT() { return PPM_WMI_PERF_STATE$Power$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$Power$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Power"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$Power$VH() { return PPM_WMI_PERF_STATE$Power$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$PercentFrequency$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$PercentFrequency$LAYOUT() { return PPM_WMI_PERF_STATE$PercentFrequency$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$PercentFrequency$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PercentFrequency"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$PercentFrequency$VH() { return PPM_WMI_PERF_STATE$PercentFrequency$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$IncreaseLevel$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$IncreaseLevel$LAYOUT() { return PPM_WMI_PERF_STATE$IncreaseLevel$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$IncreaseLevel$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IncreaseLevel"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$IncreaseLevel$VH() { return PPM_WMI_PERF_STATE$IncreaseLevel$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$DecreaseLevel$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$DecreaseLevel$LAYOUT() { return PPM_WMI_PERF_STATE$DecreaseLevel$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$DecreaseLevel$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DecreaseLevel"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$DecreaseLevel$VH() { return PPM_WMI_PERF_STATE$DecreaseLevel$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$Type$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$Type$LAYOUT() { return PPM_WMI_PERF_STATE$Type$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$Type$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$Type$VH() { return PPM_WMI_PERF_STATE$Type$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$IncreaseTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$IncreaseTime$LAYOUT() { return PPM_WMI_PERF_STATE$IncreaseTime$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$IncreaseTime$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IncreaseTime"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$IncreaseTime$VH() { return PPM_WMI_PERF_STATE$IncreaseTime$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$DecreaseTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$DecreaseTime$LAYOUT() { return PPM_WMI_PERF_STATE$DecreaseTime$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$DecreaseTime$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DecreaseTime"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$DecreaseTime$VH() { return PPM_WMI_PERF_STATE$DecreaseTime$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$Control$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$Control$LAYOUT() { return PPM_WMI_PERF_STATE$Control$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$Control$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Control"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$Control$VH() { return PPM_WMI_PERF_STATE$Control$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$Status$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$Status$LAYOUT() { return PPM_WMI_PERF_STATE$Status$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$Status$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Status"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$Status$VH() { return PPM_WMI_PERF_STATE$Status$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$HitCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$HitCount$LAYOUT() { return PPM_WMI_PERF_STATE$HitCount$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$HitCount$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HitCount"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$HitCount$VH() { return PPM_WMI_PERF_STATE$HitCount$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$Reserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$Reserved1$LAYOUT() { return PPM_WMI_PERF_STATE$Reserved1$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$Reserved1$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$Reserved1$VH() { return PPM_WMI_PERF_STATE$Reserved1$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$Reserved2$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$Reserved2$LAYOUT() { return PPM_WMI_PERF_STATE$Reserved2$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$Reserved2$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$Reserved2$VH() { return PPM_WMI_PERF_STATE$Reserved2$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATE$Reserved3$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATE$Reserved3$LAYOUT() { return PPM_WMI_PERF_STATE$Reserved3$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATE$Reserved3$VH_ = PPM_WMI_PERF_STATE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved3"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATE$Reserved3$VH() { return PPM_WMI_PERF_STATE$Reserved3$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Count"),
        C_LONG.withName("MaxFrequency"),
        C_LONG.withName("CurrentState"),
        C_LONG.withName("MaxPerfState"),
        C_LONG.withName("MinPerfState"),
        C_LONG.withName("LowestPerfState"),
        C_LONG.withName("ThermalConstraint"),
        C_CHAR.withName("BusyAdjThreshold"),
        C_CHAR.withName("PolicyType"),
        C_CHAR.withName("Type"),
        C_CHAR.withName("Reserved"),
        C_LONG.withName("TimerInterval"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("TargetProcessors"),
        C_LONG.withName("PStateHandler"),
        C_LONG.withName("PStateContext"),
        C_LONG.withName("TStateHandler"),
        C_LONG.withName("TStateContext"),
        C_LONG.withName("FeedbackHandler"),
        C_LONG.withName("Reserved1"),
        C_LONGLONG.withName("Reserved2"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Frequency"),
            C_LONG.withName("Power"),
            C_CHAR.withName("PercentFrequency"),
            C_CHAR.withName("IncreaseLevel"),
            C_CHAR.withName("DecreaseLevel"),
            C_CHAR.withName("Type"),
            C_LONG.withName("IncreaseTime"),
            C_LONG.withName("DecreaseTime"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("Control"),
            C_LONGLONG.withName("Status"),
            C_LONG.withName("HitCount"),
            C_LONG.withName("Reserved1"),
            C_LONGLONG.withName("Reserved2"),
            C_LONGLONG.withName("Reserved3")
        )).withName("State")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$struct$LAYOUT() { return PPM_WMI_PERF_STATES$struct$LAYOUT_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$Count$LAYOUT() { return PPM_WMI_PERF_STATES$Count$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$Count$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$Count$VH() { return PPM_WMI_PERF_STATES$Count$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$MaxFrequency$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$MaxFrequency$LAYOUT() { return PPM_WMI_PERF_STATES$MaxFrequency$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$MaxFrequency$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxFrequency"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$MaxFrequency$VH() { return PPM_WMI_PERF_STATES$MaxFrequency$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$CurrentState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$CurrentState$LAYOUT() { return PPM_WMI_PERF_STATES$CurrentState$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$CurrentState$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CurrentState"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$CurrentState$VH() { return PPM_WMI_PERF_STATES$CurrentState$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$MaxPerfState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$MaxPerfState$LAYOUT() { return PPM_WMI_PERF_STATES$MaxPerfState$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$MaxPerfState$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxPerfState"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$MaxPerfState$VH() { return PPM_WMI_PERF_STATES$MaxPerfState$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$MinPerfState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$MinPerfState$LAYOUT() { return PPM_WMI_PERF_STATES$MinPerfState$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$MinPerfState$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinPerfState"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$MinPerfState$VH() { return PPM_WMI_PERF_STATES$MinPerfState$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$LowestPerfState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$LowestPerfState$LAYOUT() { return PPM_WMI_PERF_STATES$LowestPerfState$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$LowestPerfState$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowestPerfState"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$LowestPerfState$VH() { return PPM_WMI_PERF_STATES$LowestPerfState$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$ThermalConstraint$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$ThermalConstraint$LAYOUT() { return PPM_WMI_PERF_STATES$ThermalConstraint$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$ThermalConstraint$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ThermalConstraint"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$ThermalConstraint$VH() { return PPM_WMI_PERF_STATES$ThermalConstraint$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$BusyAdjThreshold$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$BusyAdjThreshold$LAYOUT() { return PPM_WMI_PERF_STATES$BusyAdjThreshold$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$BusyAdjThreshold$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BusyAdjThreshold"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$BusyAdjThreshold$VH() { return PPM_WMI_PERF_STATES$BusyAdjThreshold$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$PolicyType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$PolicyType$LAYOUT() { return PPM_WMI_PERF_STATES$PolicyType$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$PolicyType$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PolicyType"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$PolicyType$VH() { return PPM_WMI_PERF_STATES$PolicyType$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$Type$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$Type$LAYOUT() { return PPM_WMI_PERF_STATES$Type$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$Type$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$Type$VH() { return PPM_WMI_PERF_STATES$Type$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$Reserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$Reserved$LAYOUT() { return PPM_WMI_PERF_STATES$Reserved$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$Reserved$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$Reserved$VH() { return PPM_WMI_PERF_STATES$Reserved$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$TimerInterval$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$TimerInterval$LAYOUT() { return PPM_WMI_PERF_STATES$TimerInterval$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$TimerInterval$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimerInterval"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$TimerInterval$VH() { return PPM_WMI_PERF_STATES$TimerInterval$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$TargetProcessors$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$TargetProcessors$LAYOUT() { return PPM_WMI_PERF_STATES$TargetProcessors$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$TargetProcessors$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TargetProcessors"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$TargetProcessors$VH() { return PPM_WMI_PERF_STATES$TargetProcessors$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$PStateHandler$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$PStateHandler$LAYOUT() { return PPM_WMI_PERF_STATES$PStateHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$PStateHandler$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PStateHandler"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$PStateHandler$VH() { return PPM_WMI_PERF_STATES$PStateHandler$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$PStateContext$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$PStateContext$LAYOUT() { return PPM_WMI_PERF_STATES$PStateContext$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$PStateContext$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PStateContext"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$PStateContext$VH() { return PPM_WMI_PERF_STATES$PStateContext$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$TStateHandler$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$TStateHandler$LAYOUT() { return PPM_WMI_PERF_STATES$TStateHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$TStateHandler$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TStateHandler"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$TStateHandler$VH() { return PPM_WMI_PERF_STATES$TStateHandler$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$TStateContext$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$TStateContext$LAYOUT() { return PPM_WMI_PERF_STATES$TStateContext$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$TStateContext$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TStateContext"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$TStateContext$VH() { return PPM_WMI_PERF_STATES$TStateContext$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$FeedbackHandler$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$FeedbackHandler$LAYOUT() { return PPM_WMI_PERF_STATES$FeedbackHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$FeedbackHandler$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FeedbackHandler"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$FeedbackHandler$VH() { return PPM_WMI_PERF_STATES$FeedbackHandler$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$Reserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$Reserved1$LAYOUT() { return PPM_WMI_PERF_STATES$Reserved1$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$Reserved1$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$Reserved1$VH() { return PPM_WMI_PERF_STATES$Reserved1$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES$Reserved2$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES$Reserved2$LAYOUT() { return PPM_WMI_PERF_STATES$Reserved2$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES$Reserved2$VH_ = PPM_WMI_PERF_STATES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES$Reserved2$VH() { return PPM_WMI_PERF_STATES$Reserved2$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Count"),
        C_LONG.withName("MaxFrequency"),
        C_LONG.withName("CurrentState"),
        C_LONG.withName("MaxPerfState"),
        C_LONG.withName("MinPerfState"),
        C_LONG.withName("LowestPerfState"),
        C_LONG.withName("ThermalConstraint"),
        C_CHAR.withName("BusyAdjThreshold"),
        C_CHAR.withName("PolicyType"),
        C_CHAR.withName("Type"),
        C_CHAR.withName("Reserved"),
        C_LONG.withName("TimerInterval"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("TargetProcessors"),
        C_LONG.withName("PStateHandler"),
        C_LONG.withName("PStateContext"),
        C_LONG.withName("TStateHandler"),
        C_LONG.withName("TStateContext"),
        C_LONG.withName("FeedbackHandler"),
        C_LONG.withName("Reserved1"),
        C_LONGLONG.withName("Reserved2"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Frequency"),
            C_LONG.withName("Power"),
            C_CHAR.withName("PercentFrequency"),
            C_CHAR.withName("IncreaseLevel"),
            C_CHAR.withName("DecreaseLevel"),
            C_CHAR.withName("Type"),
            C_LONG.withName("IncreaseTime"),
            C_LONG.withName("DecreaseTime"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("Control"),
            C_LONGLONG.withName("Status"),
            C_LONG.withName("HitCount"),
            C_LONG.withName("Reserved1"),
            C_LONGLONG.withName("Reserved2"),
            C_LONGLONG.withName("Reserved3")
        )).withName("State")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$struct$LAYOUT() { return PPM_WMI_PERF_STATES_EX$struct$LAYOUT_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$Count$LAYOUT() { return PPM_WMI_PERF_STATES_EX$Count$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$Count$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$Count$VH() { return PPM_WMI_PERF_STATES_EX$Count$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$MaxFrequency$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$MaxFrequency$LAYOUT() { return PPM_WMI_PERF_STATES_EX$MaxFrequency$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$MaxFrequency$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxFrequency"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$MaxFrequency$VH() { return PPM_WMI_PERF_STATES_EX$MaxFrequency$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$CurrentState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$CurrentState$LAYOUT() { return PPM_WMI_PERF_STATES_EX$CurrentState$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$CurrentState$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CurrentState"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$CurrentState$VH() { return PPM_WMI_PERF_STATES_EX$CurrentState$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$MaxPerfState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$MaxPerfState$LAYOUT() { return PPM_WMI_PERF_STATES_EX$MaxPerfState$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$MaxPerfState$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxPerfState"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$MaxPerfState$VH() { return PPM_WMI_PERF_STATES_EX$MaxPerfState$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$MinPerfState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$MinPerfState$LAYOUT() { return PPM_WMI_PERF_STATES_EX$MinPerfState$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$MinPerfState$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinPerfState"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$MinPerfState$VH() { return PPM_WMI_PERF_STATES_EX$MinPerfState$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$LowestPerfState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$LowestPerfState$LAYOUT() { return PPM_WMI_PERF_STATES_EX$LowestPerfState$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$LowestPerfState$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowestPerfState"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$LowestPerfState$VH() { return PPM_WMI_PERF_STATES_EX$LowestPerfState$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$ThermalConstraint$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$ThermalConstraint$LAYOUT() { return PPM_WMI_PERF_STATES_EX$ThermalConstraint$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$ThermalConstraint$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ThermalConstraint"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$ThermalConstraint$VH() { return PPM_WMI_PERF_STATES_EX$ThermalConstraint$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$LAYOUT() { return PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BusyAdjThreshold"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$VH() { return PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$PolicyType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$PolicyType$LAYOUT() { return PPM_WMI_PERF_STATES_EX$PolicyType$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$PolicyType$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PolicyType"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$PolicyType$VH() { return PPM_WMI_PERF_STATES_EX$PolicyType$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$Type$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$Type$LAYOUT() { return PPM_WMI_PERF_STATES_EX$Type$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$Type$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$Type$VH() { return PPM_WMI_PERF_STATES_EX$Type$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$Reserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$Reserved$LAYOUT() { return PPM_WMI_PERF_STATES_EX$Reserved$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$Reserved$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$Reserved$VH() { return PPM_WMI_PERF_STATES_EX$Reserved$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$TimerInterval$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$TimerInterval$LAYOUT() { return PPM_WMI_PERF_STATES_EX$TimerInterval$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$TimerInterval$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimerInterval"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$TimerInterval$VH() { return PPM_WMI_PERF_STATES_EX$TimerInterval$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$TargetProcessors$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$TargetProcessors$LAYOUT() { return PPM_WMI_PERF_STATES_EX$TargetProcessors$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$TargetProcessors$VH_ = MemoryHandles.asAddressVarHandle(PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TargetProcessors")));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$TargetProcessors$VH() { return PPM_WMI_PERF_STATES_EX$TargetProcessors$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$PStateHandler$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$PStateHandler$LAYOUT() { return PPM_WMI_PERF_STATES_EX$PStateHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$PStateHandler$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PStateHandler"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$PStateHandler$VH() { return PPM_WMI_PERF_STATES_EX$PStateHandler$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$PStateContext$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$PStateContext$LAYOUT() { return PPM_WMI_PERF_STATES_EX$PStateContext$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$PStateContext$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PStateContext"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$PStateContext$VH() { return PPM_WMI_PERF_STATES_EX$PStateContext$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$TStateHandler$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$TStateHandler$LAYOUT() { return PPM_WMI_PERF_STATES_EX$TStateHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$TStateHandler$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TStateHandler"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$TStateHandler$VH() { return PPM_WMI_PERF_STATES_EX$TStateHandler$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$TStateContext$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$TStateContext$LAYOUT() { return PPM_WMI_PERF_STATES_EX$TStateContext$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$TStateContext$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TStateContext"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$TStateContext$VH() { return PPM_WMI_PERF_STATES_EX$TStateContext$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$FeedbackHandler$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$FeedbackHandler$LAYOUT() { return PPM_WMI_PERF_STATES_EX$FeedbackHandler$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$FeedbackHandler$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FeedbackHandler"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$FeedbackHandler$VH() { return PPM_WMI_PERF_STATES_EX$FeedbackHandler$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$Reserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$Reserved1$LAYOUT() { return PPM_WMI_PERF_STATES_EX$Reserved1$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$Reserved1$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$Reserved1$VH() { return PPM_WMI_PERF_STATES_EX$Reserved1$VH_; }

    static final MemoryLayout PPM_WMI_PERF_STATES_EX$Reserved2$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_WMI_PERF_STATES_EX$Reserved2$LAYOUT() { return PPM_WMI_PERF_STATES_EX$Reserved2$LAYOUT_; }

    static final VarHandle PPM_WMI_PERF_STATES_EX$Reserved2$VH_ = PPM_WMI_PERF_STATES_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle PPM_WMI_PERF_STATES_EX$Reserved2$VH() { return PPM_WMI_PERF_STATES_EX$Reserved2$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("IdleTransitions"),
        C_LONG.withName("FailedTransitions"),
        C_LONG.withName("InvalidBucketIndex"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("TotalTime"),
        MemoryLayout.ofSequence(6, C_LONG).withName("IdleTimeBuckets")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$VH_ = PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IdleTransitions"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$VH() { return PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$VH_ = PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FailedTransitions"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$VH() { return PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$VH_ = PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("InvalidBucketIndex"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$VH() { return PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING$TotalTime$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING$TotalTime$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING$TotalTime$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING$TotalTime$VH_ = PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalTime"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING$TotalTime$VH() { return PPM_IDLE_STATE_ACCOUNTING$TotalTime$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("StateCount"),
        C_LONG.withName("TotalTransitions"),
        C_LONG.withName("ResetCount"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("StartTime"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("IdleTransitions"),
            C_LONG.withName("FailedTransitions"),
            C_LONG.withName("InvalidBucketIndex"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("TotalTime"),
            MemoryLayout.ofSequence(6, C_LONG).withName("IdleTimeBuckets")
        )).withName("State")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING$struct$LAYOUT() { return PPM_IDLE_ACCOUNTING$struct$LAYOUT_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING$StateCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING$StateCount$LAYOUT() { return PPM_IDLE_ACCOUNTING$StateCount$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING$StateCount$VH_ = PPM_IDLE_ACCOUNTING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StateCount"));
    static final java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING$StateCount$VH() { return PPM_IDLE_ACCOUNTING$StateCount$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING$TotalTransitions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING$TotalTransitions$LAYOUT() { return PPM_IDLE_ACCOUNTING$TotalTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING$TotalTransitions$VH_ = PPM_IDLE_ACCOUNTING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalTransitions"));
    static final java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING$TotalTransitions$VH() { return PPM_IDLE_ACCOUNTING$TotalTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING$ResetCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING$ResetCount$LAYOUT() { return PPM_IDLE_ACCOUNTING$ResetCount$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING$ResetCount$VH_ = PPM_IDLE_ACCOUNTING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ResetCount"));
    static final java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING$ResetCount$VH() { return PPM_IDLE_ACCOUNTING$ResetCount$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING$StartTime$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING$StartTime$LAYOUT() { return PPM_IDLE_ACCOUNTING$StartTime$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING$StartTime$VH_ = PPM_IDLE_ACCOUNTING$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartTime"));
    static final java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING$StartTime$VH() { return PPM_IDLE_ACCOUNTING$StartTime$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("TotalTimeUs"),
        C_LONG.withName("MinTimeUs"),
        C_LONG.withName("MaxTimeUs"),
        C_LONG.withName("Count"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT() { return PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT_; }

    static final MemoryLayout PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$LAYOUT() { return PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$VH_ = PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalTimeUs"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$VH() { return PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$LAYOUT() { return PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$VH_ = PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinTimeUs"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$VH() { return PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$LAYOUT() { return PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$VH_ = PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxTimeUs"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$VH() { return PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_BUCKET_EX$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_BUCKET_EX$Count$LAYOUT() { return PPM_IDLE_STATE_BUCKET_EX$Count$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_BUCKET_EX$Count$VH_ = PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_BUCKET_EX$Count$VH() { return PPM_IDLE_STATE_BUCKET_EX$Count$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("TotalTime"),
        C_LONG.withName("IdleTransitions"),
        C_LONG.withName("FailedTransitions"),
        C_LONG.withName("InvalidBucketIndex"),
        C_LONG.withName("MinTimeUs"),
        C_LONG.withName("MaxTimeUs"),
        C_LONG.withName("CancelledTransitions"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_LONGLONG.withName("TotalTimeUs"),
            C_LONG.withName("MinTimeUs"),
            C_LONG.withName("MaxTimeUs"),
            C_LONG.withName("Count"),
            MemoryLayout.ofPaddingBits(32)
        )).withName("IdleTimeBuckets")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalTime"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IdleTransitions"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FailedTransitions"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("InvalidBucketIndex"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinTimeUs"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxTimeUs"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$VH_; }

    static final MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$LAYOUT() { return PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$VH_ = PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CancelledTransitions"));
    static final java.lang.invoke.VarHandle PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$VH() { return PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("StateCount"),
        C_LONG.withName("TotalTransitions"),
        C_LONG.withName("ResetCount"),
        C_LONG.withName("AbortCount"),
        C_LONGLONG.withName("StartTime"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONGLONG.withName("TotalTime"),
            C_LONG.withName("IdleTransitions"),
            C_LONG.withName("FailedTransitions"),
            C_LONG.withName("InvalidBucketIndex"),
            C_LONG.withName("MinTimeUs"),
            C_LONG.withName("MaxTimeUs"),
            C_LONG.withName("CancelledTransitions"),
            MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
                C_LONGLONG.withName("TotalTimeUs"),
                C_LONG.withName("MinTimeUs"),
                C_LONG.withName("MaxTimeUs"),
                C_LONG.withName("Count"),
                MemoryLayout.ofPaddingBits(32)
            )).withName("IdleTimeBuckets")
        )).withName("State")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX$StateCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX$StateCount$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX$StateCount$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING_EX$StateCount$VH_ = PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StateCount"));
    static final java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING_EX$StateCount$VH() { return PPM_IDLE_ACCOUNTING_EX$StateCount$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX$TotalTransitions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX$TotalTransitions$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX$TotalTransitions$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING_EX$TotalTransitions$VH_ = PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalTransitions"));
    static final java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING_EX$TotalTransitions$VH() { return PPM_IDLE_ACCOUNTING_EX$TotalTransitions$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX$ResetCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX$ResetCount$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX$ResetCount$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING_EX$ResetCount$VH_ = PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ResetCount"));
    static final java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING_EX$ResetCount$VH() { return PPM_IDLE_ACCOUNTING_EX$ResetCount$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX$AbortCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX$AbortCount$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX$AbortCount$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING_EX$AbortCount$VH_ = PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AbortCount"));
    static final java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING_EX$AbortCount$VH() { return PPM_IDLE_ACCOUNTING_EX$AbortCount$VH_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX$StartTime$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX$StartTime$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX$StartTime$LAYOUT_; }

    static final VarHandle PPM_IDLE_ACCOUNTING_EX$StartTime$VH_ = PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartTime"));
    static final java.lang.invoke.VarHandle PPM_IDLE_ACCOUNTING_EX$StartTime$VH() { return PPM_IDLE_ACCOUNTING_EX$StartTime$VH_; }

    static final MemoryLayout PPM_PERFSTATE_CHANGE_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_CHANGE_GUID$LAYOUT() { return PPM_PERFSTATE_CHANGE_GUID$LAYOUT_; }

    static final MemorySegment PPM_PERFSTATE_CHANGE_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_PERFSTATE_CHANGE_GUID", PPM_PERFSTATE_CHANGE_GUID$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment PPM_PERFSTATE_CHANGE_GUID$SEGMENT() { return PPM_PERFSTATE_CHANGE_GUID$SEGMENT_; }

    static final MemoryLayout PPM_PERFSTATE_DOMAIN_CHANGE_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_DOMAIN_CHANGE_GUID$LAYOUT() { return PPM_PERFSTATE_DOMAIN_CHANGE_GUID$LAYOUT_; }

    static final MemorySegment PPM_PERFSTATE_DOMAIN_CHANGE_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_PERFSTATE_DOMAIN_CHANGE_GUID", PPM_PERFSTATE_DOMAIN_CHANGE_GUID$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment PPM_PERFSTATE_DOMAIN_CHANGE_GUID$SEGMENT() { return PPM_PERFSTATE_DOMAIN_CHANGE_GUID$SEGMENT_; }

    static final MemoryLayout PPM_IDLESTATE_CHANGE_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLESTATE_CHANGE_GUID$LAYOUT() { return PPM_IDLESTATE_CHANGE_GUID$LAYOUT_; }

    static final MemorySegment PPM_IDLESTATE_CHANGE_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_IDLESTATE_CHANGE_GUID", PPM_IDLESTATE_CHANGE_GUID$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment PPM_IDLESTATE_CHANGE_GUID$SEGMENT() { return PPM_IDLESTATE_CHANGE_GUID$SEGMENT_; }

    static final MemoryLayout PPM_PERFSTATES_DATA_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATES_DATA_GUID$LAYOUT() { return PPM_PERFSTATES_DATA_GUID$LAYOUT_; }

    static final MemorySegment PPM_PERFSTATES_DATA_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_PERFSTATES_DATA_GUID", PPM_PERFSTATES_DATA_GUID$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment PPM_PERFSTATES_DATA_GUID$SEGMENT() { return PPM_PERFSTATES_DATA_GUID$SEGMENT_; }

    static final MemoryLayout PPM_IDLESTATES_DATA_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLESTATES_DATA_GUID$LAYOUT() { return PPM_IDLESTATES_DATA_GUID$LAYOUT_; }

    static final MemorySegment PPM_IDLESTATES_DATA_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_IDLESTATES_DATA_GUID", PPM_IDLESTATES_DATA_GUID$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment PPM_IDLESTATES_DATA_GUID$SEGMENT() { return PPM_IDLESTATES_DATA_GUID$SEGMENT_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_GUID$LAYOUT() { return PPM_IDLE_ACCOUNTING_GUID$LAYOUT_; }

    static final MemorySegment PPM_IDLE_ACCOUNTING_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_IDLE_ACCOUNTING_GUID", PPM_IDLE_ACCOUNTING_GUID$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment PPM_IDLE_ACCOUNTING_GUID$SEGMENT() { return PPM_IDLE_ACCOUNTING_GUID$SEGMENT_; }

    static final MemoryLayout PPM_IDLE_ACCOUNTING_EX_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLE_ACCOUNTING_EX_GUID$LAYOUT() { return PPM_IDLE_ACCOUNTING_EX_GUID$LAYOUT_; }

    static final MemorySegment PPM_IDLE_ACCOUNTING_EX_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_IDLE_ACCOUNTING_EX_GUID", PPM_IDLE_ACCOUNTING_EX_GUID$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment PPM_IDLE_ACCOUNTING_EX_GUID$SEGMENT() { return PPM_IDLE_ACCOUNTING_EX_GUID$SEGMENT_; }

    static final MemoryLayout PPM_THERMALCONSTRAINT_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout PPM_THERMALCONSTRAINT_GUID$LAYOUT() { return PPM_THERMALCONSTRAINT_GUID$LAYOUT_; }

    static final MemorySegment PPM_THERMALCONSTRAINT_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_THERMALCONSTRAINT_GUID", PPM_THERMALCONSTRAINT_GUID$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment PPM_THERMALCONSTRAINT_GUID$SEGMENT() { return PPM_THERMALCONSTRAINT_GUID$SEGMENT_; }

    static final MemoryLayout PPM_PERFMON_PERFSTATE_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFMON_PERFSTATE_GUID$LAYOUT() { return PPM_PERFMON_PERFSTATE_GUID$LAYOUT_; }

    static final MemorySegment PPM_PERFMON_PERFSTATE_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_PERFMON_PERFSTATE_GUID", PPM_PERFMON_PERFSTATE_GUID$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment PPM_PERFMON_PERFSTATE_GUID$SEGMENT() { return PPM_PERFMON_PERFSTATE_GUID$SEGMENT_; }

    static final MemoryLayout PPM_THERMAL_POLICY_CHANGE_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout PPM_THERMAL_POLICY_CHANGE_GUID$LAYOUT() { return PPM_THERMAL_POLICY_CHANGE_GUID$LAYOUT_; }

    static final MemorySegment PPM_THERMAL_POLICY_CHANGE_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "PPM_THERMAL_POLICY_CHANGE_GUID", PPM_THERMAL_POLICY_CHANGE_GUID$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment PPM_THERMAL_POLICY_CHANGE_GUID$SEGMENT() { return PPM_THERMAL_POLICY_CHANGE_GUID$SEGMENT_; }

    static final MemoryLayout PPM_PERFSTATE_EVENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("State"),
        C_LONG.withName("Status"),
        C_LONG.withName("Latency"),
        C_LONG.withName("Speed"),
        C_LONG.withName("Processor")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_EVENT$struct$LAYOUT() { return PPM_PERFSTATE_EVENT$struct$LAYOUT_; }

    static final MemoryLayout PPM_PERFSTATE_EVENT$State$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_EVENT$State$LAYOUT() { return PPM_PERFSTATE_EVENT$State$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_EVENT$State$VH_ = PPM_PERFSTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    static final java.lang.invoke.VarHandle PPM_PERFSTATE_EVENT$State$VH() { return PPM_PERFSTATE_EVENT$State$VH_; }

    static final MemoryLayout PPM_PERFSTATE_EVENT$Status$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_EVENT$Status$LAYOUT() { return PPM_PERFSTATE_EVENT$Status$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_EVENT$Status$VH_ = PPM_PERFSTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Status"));
    static final java.lang.invoke.VarHandle PPM_PERFSTATE_EVENT$Status$VH() { return PPM_PERFSTATE_EVENT$Status$VH_; }

    static final MemoryLayout PPM_PERFSTATE_EVENT$Latency$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_EVENT$Latency$LAYOUT() { return PPM_PERFSTATE_EVENT$Latency$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_EVENT$Latency$VH_ = PPM_PERFSTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Latency"));
    static final java.lang.invoke.VarHandle PPM_PERFSTATE_EVENT$Latency$VH() { return PPM_PERFSTATE_EVENT$Latency$VH_; }

    static final MemoryLayout PPM_PERFSTATE_EVENT$Speed$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_EVENT$Speed$LAYOUT() { return PPM_PERFSTATE_EVENT$Speed$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_EVENT$Speed$VH_ = PPM_PERFSTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Speed"));
    static final java.lang.invoke.VarHandle PPM_PERFSTATE_EVENT$Speed$VH() { return PPM_PERFSTATE_EVENT$Speed$VH_; }

    static final MemoryLayout PPM_PERFSTATE_EVENT$Processor$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_EVENT$Processor$LAYOUT() { return PPM_PERFSTATE_EVENT$Processor$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_EVENT$Processor$VH_ = PPM_PERFSTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Processor"));
    static final java.lang.invoke.VarHandle PPM_PERFSTATE_EVENT$Processor$VH() { return PPM_PERFSTATE_EVENT$Processor$VH_; }

    static final MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("State"),
        C_LONG.withName("Latency"),
        C_LONG.withName("Speed"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Processors")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT() { return PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT_; }

    static final MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$State$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$State$LAYOUT() { return PPM_PERFSTATE_DOMAIN_EVENT$State$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_DOMAIN_EVENT$State$VH_ = PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    static final java.lang.invoke.VarHandle PPM_PERFSTATE_DOMAIN_EVENT$State$VH() { return PPM_PERFSTATE_DOMAIN_EVENT$State$VH_; }

    static final MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$Latency$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$Latency$LAYOUT() { return PPM_PERFSTATE_DOMAIN_EVENT$Latency$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_DOMAIN_EVENT$Latency$VH_ = PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Latency"));
    static final java.lang.invoke.VarHandle PPM_PERFSTATE_DOMAIN_EVENT$Latency$VH() { return PPM_PERFSTATE_DOMAIN_EVENT$Latency$VH_; }

    static final MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$Speed$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$Speed$LAYOUT() { return PPM_PERFSTATE_DOMAIN_EVENT$Speed$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_DOMAIN_EVENT$Speed$VH_ = PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Speed"));
    static final java.lang.invoke.VarHandle PPM_PERFSTATE_DOMAIN_EVENT$Speed$VH() { return PPM_PERFSTATE_DOMAIN_EVENT$Speed$VH_; }

}

