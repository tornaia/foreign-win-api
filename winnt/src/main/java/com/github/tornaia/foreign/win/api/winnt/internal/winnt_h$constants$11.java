// Generated by jextract

package com.github.tornaia.foreign.win.api.winnt.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class winnt_h$constants$11 extends winnt_h$constants$10 {

    /* package-private */ winnt_h$constants$11() {}
    static final MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$LAYOUT() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH_ = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionHandler"));
    static final java.lang.invoke.VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH_; }

    static final MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$LAYOUT() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$VH_ = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HandlerData"));
    static final java.lang.invoke.VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$VH() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$VH_; }

    static final MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$LAYOUT() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH_ = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PrologEndAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH() { return _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH_; }

    static final MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("BeginAddress"),
        C_LONG.withName("EndAddress"),
        C_LONG.withName("ExceptionHandler"),
        C_LONG.withName("HandlerData"),
        C_LONG.withName("PrologEndAddress")
    ).withName("_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_ = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BeginAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_; }

    static final MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$VH_ = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$VH() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$VH_; }

    static final MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$LAYOUT() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH_ = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionHandler"));
    static final java.lang.invoke.VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH_; }

    static final MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$LAYOUT() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$VH_ = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HandlerData"));
    static final java.lang.invoke.VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$VH() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$VH_; }

    static final MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$LAYOUT() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$LAYOUT_; }

    static final VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH_ = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrologEndAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH() { return _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH_; }

    static final MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("BeginAddress"),
        C_LONG.withName("EndAddress"),
        C_LONG.withName("UnwindInfoAddress"),
        C_LONG.withName("UnwindData")
    ).withName("_IMAGE_RUNTIME_FUNCTION_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$LAYOUT_; }

    static final VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_ = _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BeginAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH_; }

    static final MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$LAYOUT_; }

    static final VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$VH_ = _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$VH() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$VH_; }

    static final MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$LAYOUT() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$LAYOUT_; }

    static final VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$VH_ = _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UnwindInfoAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$VH() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$VH_; }

    static final MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$LAYOUT() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$LAYOUT_; }

    static final VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$VH_ = _IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UnwindData"));
    static final java.lang.invoke.VarHandle _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$VH() { return _IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("MinimumRequiredConfigSize"),
        C_LONG.withName("PolicyFlags"),
        C_LONG.withName("NumberOfImports"),
        C_LONG.withName("ImportList"),
        C_LONG.withName("ImportEntrySize"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("FamilyID"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("ImageID"),
        C_LONG.withName("ImageVersion"),
        C_LONG.withName("SecurityVersion"),
        C_LONG.withName("EnclaveSize"),
        C_LONG.withName("NumberOfThreads"),
        C_LONG.withName("EnclaveFlags")
    ).withName("_IMAGE_ENCLAVE_CONFIG32");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$Size$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$Size$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$Size$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$Size$VH() { return _IMAGE_ENCLAVE_CONFIG32$Size$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinimumRequiredConfigSize"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$VH() { return _IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$PolicyFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$PolicyFlags$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$PolicyFlags$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$PolicyFlags$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PolicyFlags"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$PolicyFlags$VH() { return _IMAGE_ENCLAVE_CONFIG32$PolicyFlags$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$NumberOfImports$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$NumberOfImports$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$NumberOfImports$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$NumberOfImports$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfImports"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$NumberOfImports$VH() { return _IMAGE_ENCLAVE_CONFIG32$NumberOfImports$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$ImportList$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$ImportList$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$ImportList$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$ImportList$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImportList"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$ImportList$VH() { return _IMAGE_ENCLAVE_CONFIG32$ImportList$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImportEntrySize"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$VH() { return _IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$ImageVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$ImageVersion$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$ImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$ImageVersion$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImageVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$ImageVersion$VH() { return _IMAGE_ENCLAVE_CONFIG32$ImageVersion$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$SecurityVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$SecurityVersion$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$SecurityVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$SecurityVersion$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$SecurityVersion$VH() { return _IMAGE_ENCLAVE_CONFIG32$SecurityVersion$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$EnclaveSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$EnclaveSize$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$EnclaveSize$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$EnclaveSize$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EnclaveSize"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$EnclaveSize$VH() { return _IMAGE_ENCLAVE_CONFIG32$EnclaveSize$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfThreads"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$VH() { return _IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$VH_ = _IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EnclaveFlags"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$VH() { return _IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("MinimumRequiredConfigSize"),
        C_LONG.withName("PolicyFlags"),
        C_LONG.withName("NumberOfImports"),
        C_LONG.withName("ImportList"),
        C_LONG.withName("ImportEntrySize"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("FamilyID"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("ImageID"),
        C_LONG.withName("ImageVersion"),
        C_LONG.withName("SecurityVersion"),
        C_LONGLONG.withName("EnclaveSize"),
        C_LONG.withName("NumberOfThreads"),
        C_LONG.withName("EnclaveFlags")
    ).withName("_IMAGE_ENCLAVE_CONFIG64");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$Size$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$Size$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$Size$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$Size$VH() { return _IMAGE_ENCLAVE_CONFIG64$Size$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinimumRequiredConfigSize"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$VH() { return _IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$PolicyFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$PolicyFlags$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$PolicyFlags$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$PolicyFlags$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PolicyFlags"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$PolicyFlags$VH() { return _IMAGE_ENCLAVE_CONFIG64$PolicyFlags$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$NumberOfImports$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$NumberOfImports$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$NumberOfImports$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$NumberOfImports$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfImports"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$NumberOfImports$VH() { return _IMAGE_ENCLAVE_CONFIG64$NumberOfImports$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$ImportList$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$ImportList$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$ImportList$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$ImportList$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImportList"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$ImportList$VH() { return _IMAGE_ENCLAVE_CONFIG64$ImportList$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImportEntrySize"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$VH() { return _IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$ImageVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$ImageVersion$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$ImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$ImageVersion$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImageVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$ImageVersion$VH() { return _IMAGE_ENCLAVE_CONFIG64$ImageVersion$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$SecurityVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$SecurityVersion$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$SecurityVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$SecurityVersion$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$SecurityVersion$VH() { return _IMAGE_ENCLAVE_CONFIG64$SecurityVersion$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$EnclaveSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$EnclaveSize$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$EnclaveSize$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$EnclaveSize$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnclaveSize"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$EnclaveSize$VH() { return _IMAGE_ENCLAVE_CONFIG64$EnclaveSize$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfThreads"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$VH() { return _IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$LAYOUT() { return _IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$VH_ = _IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EnclaveFlags"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$VH() { return _IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("MatchType"),
        C_LONG.withName("MinimumSecurityVersion"),
        MemoryLayout.ofSequence(32, C_CHAR).withName("UniqueOrAuthorID"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("FamilyID"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("ImageID"),
        C_LONG.withName("ImportName"),
        C_LONG.withName("Reserved")
    ).withName("_IMAGE_ENCLAVE_IMPORT");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT() { return _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ENCLAVE_IMPORT$MatchType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_IMPORT$MatchType$LAYOUT() { return _IMAGE_ENCLAVE_IMPORT$MatchType$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_IMPORT$MatchType$VH_ = _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MatchType"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_IMPORT$MatchType$VH() { return _IMAGE_ENCLAVE_IMPORT$MatchType$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$LAYOUT() { return _IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$VH_ = _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinimumSecurityVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$VH() { return _IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_IMPORT$ImportName$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_IMPORT$ImportName$LAYOUT() { return _IMAGE_ENCLAVE_IMPORT$ImportName$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_IMPORT$ImportName$VH_ = _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImportName"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_IMPORT$ImportName$VH() { return _IMAGE_ENCLAVE_IMPORT$ImportName$VH_; }

    static final MemoryLayout _IMAGE_ENCLAVE_IMPORT$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ENCLAVE_IMPORT$Reserved$LAYOUT() { return _IMAGE_ENCLAVE_IMPORT$Reserved$LAYOUT_; }

    static final VarHandle _IMAGE_ENCLAVE_IMPORT$Reserved$VH_ = _IMAGE_ENCLAVE_IMPORT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _IMAGE_ENCLAVE_IMPORT$Reserved$VH() { return _IMAGE_ENCLAVE_IMPORT$Reserved$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Characteristics"),
        C_LONG.withName("TimeDateStamp"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion"),
        C_LONG.withName("Type"),
        C_LONG.withName("SizeOfData"),
        C_LONG.withName("AddressOfRawData"),
        C_LONG.withName("PointerToRawData")
    ).withName("_IMAGE_DEBUG_DIRECTORY");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$Characteristics$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$Characteristics$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$Characteristics$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    static final java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$Characteristics$VH() { return _IMAGE_DEBUG_DIRECTORY$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$TimeDateStamp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$TimeDateStamp$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$TimeDateStamp$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    static final java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$TimeDateStamp$VH() { return _IMAGE_DEBUG_DIRECTORY$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$MajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$MajorVersion$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$MajorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$MajorVersion$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$MajorVersion$VH() { return _IMAGE_DEBUG_DIRECTORY$MajorVersion$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$MinorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$MinorVersion$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$MinorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$MinorVersion$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$MinorVersion$VH() { return _IMAGE_DEBUG_DIRECTORY$MinorVersion$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$Type$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$Type$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$Type$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$Type$VH() { return _IMAGE_DEBUG_DIRECTORY$Type$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$SizeOfData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$SizeOfData$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$SizeOfData$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$SizeOfData$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfData"));
    static final java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$SizeOfData$VH() { return _IMAGE_DEBUG_DIRECTORY$SizeOfData$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$AddressOfRawData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$AddressOfRawData$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$AddressOfRawData$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$AddressOfRawData$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfRawData"));
    static final java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$AddressOfRawData$VH() { return _IMAGE_DEBUG_DIRECTORY$AddressOfRawData$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_DIRECTORY$PointerToRawData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_DIRECTORY$PointerToRawData$LAYOUT() { return _IMAGE_DEBUG_DIRECTORY$PointerToRawData$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_DIRECTORY$PointerToRawData$VH_ = _IMAGE_DEBUG_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToRawData"));
    static final java.lang.invoke.VarHandle _IMAGE_DEBUG_DIRECTORY$PointerToRawData$VH() { return _IMAGE_DEBUG_DIRECTORY$PointerToRawData$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NumberOfSymbols"),
        C_LONG.withName("LvaToFirstSymbol"),
        C_LONG.withName("NumberOfLinenumbers"),
        C_LONG.withName("LvaToFirstLinenumber"),
        C_LONG.withName("RvaToFirstByteOfCode"),
        C_LONG.withName("RvaToLastByteOfCode"),
        C_LONG.withName("RvaToFirstByteOfData"),
        C_LONG.withName("RvaToLastByteOfData")
    ).withName("_IMAGE_COFF_SYMBOLS_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfSymbols"));
    static final java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LvaToFirstSymbol"));
    static final java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfLinenumbers"));
    static final java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LvaToFirstLinenumber"));
    static final java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RvaToFirstByteOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RvaToLastByteOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RvaToFirstByteOfData"));
    static final java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$VH_; }

    static final MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$LAYOUT() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$LAYOUT_; }

    static final VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$VH_ = _IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RvaToLastByteOfData"));
    static final java.lang.invoke.VarHandle _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$VH() { return _IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$VH_; }

    static final MemoryLayout _FPO_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ulOffStart"),
        C_LONG.withName("cbProcSize"),
        C_LONG.withName("cdwLocals"),
        C_SHORT.withName("cdwParams"),
        C_SHORT
    ).withName("_FPO_DATA");
    static final jdk.incubator.foreign.MemoryLayout _FPO_DATA$struct$LAYOUT() { return _FPO_DATA$struct$LAYOUT_; }

    static final MemoryLayout _FPO_DATA$ulOffStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FPO_DATA$ulOffStart$LAYOUT() { return _FPO_DATA$ulOffStart$LAYOUT_; }

    static final VarHandle _FPO_DATA$ulOffStart$VH_ = _FPO_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulOffStart"));
    static final java.lang.invoke.VarHandle _FPO_DATA$ulOffStart$VH() { return _FPO_DATA$ulOffStart$VH_; }

    static final MemoryLayout _FPO_DATA$cbProcSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FPO_DATA$cbProcSize$LAYOUT() { return _FPO_DATA$cbProcSize$LAYOUT_; }

    static final VarHandle _FPO_DATA$cbProcSize$VH_ = _FPO_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbProcSize"));
    static final java.lang.invoke.VarHandle _FPO_DATA$cbProcSize$VH() { return _FPO_DATA$cbProcSize$VH_; }

    static final MemoryLayout _FPO_DATA$cdwLocals$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FPO_DATA$cdwLocals$LAYOUT() { return _FPO_DATA$cdwLocals$LAYOUT_; }

    static final VarHandle _FPO_DATA$cdwLocals$VH_ = _FPO_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cdwLocals"));
    static final java.lang.invoke.VarHandle _FPO_DATA$cdwLocals$VH() { return _FPO_DATA$cdwLocals$VH_; }

    static final MemoryLayout _FPO_DATA$cdwParams$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FPO_DATA$cdwParams$LAYOUT() { return _FPO_DATA$cdwParams$LAYOUT_; }

    static final VarHandle _FPO_DATA$cdwParams$VH_ = _FPO_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cdwParams"));
    static final java.lang.invoke.VarHandle _FPO_DATA$cdwParams$VH() { return _FPO_DATA$cdwParams$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_MISC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("DataType"),
        C_LONG.withName("Length"),
        C_CHAR.withName("Unicode"),
        MemoryLayout.ofSequence(3, C_CHAR).withName("Reserved"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Data"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_IMAGE_DEBUG_MISC");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_MISC$struct$LAYOUT() { return _IMAGE_DEBUG_MISC$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DEBUG_MISC$DataType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_MISC$DataType$LAYOUT() { return _IMAGE_DEBUG_MISC$DataType$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_MISC$DataType$VH_ = _IMAGE_DEBUG_MISC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataType"));
    static final java.lang.invoke.VarHandle _IMAGE_DEBUG_MISC$DataType$VH() { return _IMAGE_DEBUG_MISC$DataType$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_MISC$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_MISC$Length$LAYOUT() { return _IMAGE_DEBUG_MISC$Length$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_MISC$Length$VH_ = _IMAGE_DEBUG_MISC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _IMAGE_DEBUG_MISC$Length$VH() { return _IMAGE_DEBUG_MISC$Length$VH_; }

    static final MemoryLayout _IMAGE_DEBUG_MISC$Unicode$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DEBUG_MISC$Unicode$LAYOUT() { return _IMAGE_DEBUG_MISC$Unicode$LAYOUT_; }

    static final VarHandle _IMAGE_DEBUG_MISC$Unicode$VH_ = _IMAGE_DEBUG_MISC$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Unicode"));
    static final java.lang.invoke.VarHandle _IMAGE_DEBUG_MISC$Unicode$VH() { return _IMAGE_DEBUG_MISC$Unicode$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("StartingAddress"),
        C_LONG.withName("EndingAddress"),
        C_LONG.withName("EndOfPrologue")
    ).withName("_IMAGE_FUNCTION_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY$struct$LAYOUT() { return _IMAGE_FUNCTION_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY$StartingAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY$StartingAddress$LAYOUT() { return _IMAGE_FUNCTION_ENTRY$StartingAddress$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY$StartingAddress$VH_ = _IMAGE_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StartingAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY$StartingAddress$VH() { return _IMAGE_FUNCTION_ENTRY$StartingAddress$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY$EndingAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY$EndingAddress$LAYOUT() { return _IMAGE_FUNCTION_ENTRY$EndingAddress$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY$EndingAddress$VH_ = _IMAGE_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndingAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY$EndingAddress$VH() { return _IMAGE_FUNCTION_ENTRY$EndingAddress$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY$EndOfPrologue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY$EndOfPrologue$LAYOUT() { return _IMAGE_FUNCTION_ENTRY$EndOfPrologue$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY$EndOfPrologue$VH_ = _IMAGE_FUNCTION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndOfPrologue"));
    static final java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY$EndOfPrologue$VH() { return _IMAGE_FUNCTION_ENTRY$EndOfPrologue$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartingAddress"),
        C_LONGLONG.withName("EndingAddress"),
        C_LONGLONG.withName("EndOfPrologue"),
        C_LONGLONG.withName("UnwindInfoAddress")
    ).withName("_IMAGE_FUNCTION_ENTRY64");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT() { return _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY64$StartingAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY64$StartingAddress$LAYOUT() { return _IMAGE_FUNCTION_ENTRY64$StartingAddress$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY64$StartingAddress$VH_ = _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartingAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY64$StartingAddress$VH() { return _IMAGE_FUNCTION_ENTRY64$StartingAddress$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY64$EndingAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY64$EndingAddress$LAYOUT() { return _IMAGE_FUNCTION_ENTRY64$EndingAddress$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY64$EndingAddress$VH_ = _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EndingAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY64$EndingAddress$VH() { return _IMAGE_FUNCTION_ENTRY64$EndingAddress$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY64$EndOfPrologue$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY64$EndOfPrologue$LAYOUT() { return _IMAGE_FUNCTION_ENTRY64$EndOfPrologue$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY64$EndOfPrologue$VH_ = _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EndOfPrologue"));
    static final java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY64$EndOfPrologue$VH() { return _IMAGE_FUNCTION_ENTRY64$EndOfPrologue$VH_; }

    static final MemoryLayout _IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$LAYOUT() { return _IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$LAYOUT_; }

    static final VarHandle _IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$VH_ = _IMAGE_FUNCTION_ENTRY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UnwindInfoAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$VH() { return _IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Signature"),
        C_SHORT.withName("Flags"),
        C_SHORT.withName("Machine"),
        C_SHORT.withName("Characteristics"),
        C_LONG.withName("TimeDateStamp"),
        C_LONG.withName("CheckSum"),
        C_LONG.withName("ImageBase"),
        C_LONG.withName("SizeOfImage"),
        C_LONG.withName("NumberOfSections"),
        C_LONG.withName("ExportedNamesSize"),
        C_LONG.withName("DebugDirectorySize"),
        C_LONG.withName("SectionAlignment"),
        MemoryLayout.ofSequence(2, C_LONG).withName("Reserved")
    ).withName("_IMAGE_SEPARATE_DEBUG_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Signature$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Signature$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$Signature$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Signature$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Signature"));
    static final java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Signature$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$Signature$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Flags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Flags$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$Flags$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Flags$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Flags$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$Flags$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Machine$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Machine$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$Machine$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Machine$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    static final java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Machine$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$Machine$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    static final java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    static final java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    static final java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImageBase"));
    static final java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfImage"));
    static final java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfSections"));
    static final java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExportedNamesSize"));
    static final java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DebugDirectorySize"));
    static final java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$VH_; }

    static final MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$LAYOUT() { return _IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$VH_ = _IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectionAlignment"));
    static final java.lang.invoke.VarHandle _IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$VH() { return _IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Signature"),
        C_SHORT.withName("Flags"),
        C_LONG.withName("Size"),
        C_SHORT.withName("Machine"),
        C_SHORT.withName("Characteristics"),
        C_LONG.withName("TimeDateStamp"),
        C_LONG.withName("CheckSum"),
        C_LONG.withName("SizeOfImage"),
        C_LONGLONG.withName("ImageBase")
    ).withName("_NON_PAGED_DEBUG_INFO");
    static final jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$struct$LAYOUT() { return _NON_PAGED_DEBUG_INFO$struct$LAYOUT_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$Signature$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$Signature$LAYOUT() { return _NON_PAGED_DEBUG_INFO$Signature$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$Signature$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Signature"));
    static final java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$Signature$VH() { return _NON_PAGED_DEBUG_INFO$Signature$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$Flags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$Flags$LAYOUT() { return _NON_PAGED_DEBUG_INFO$Flags$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$Flags$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$Flags$VH() { return _NON_PAGED_DEBUG_INFO$Flags$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$Size$LAYOUT() { return _NON_PAGED_DEBUG_INFO$Size$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$Size$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$Size$VH() { return _NON_PAGED_DEBUG_INFO$Size$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$Machine$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$Machine$LAYOUT() { return _NON_PAGED_DEBUG_INFO$Machine$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$Machine$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    static final java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$Machine$VH() { return _NON_PAGED_DEBUG_INFO$Machine$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$Characteristics$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$Characteristics$LAYOUT() { return _NON_PAGED_DEBUG_INFO$Characteristics$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$Characteristics$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    static final java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$Characteristics$VH() { return _NON_PAGED_DEBUG_INFO$Characteristics$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$TimeDateStamp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$TimeDateStamp$LAYOUT() { return _NON_PAGED_DEBUG_INFO$TimeDateStamp$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$TimeDateStamp$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    static final java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$TimeDateStamp$VH() { return _NON_PAGED_DEBUG_INFO$TimeDateStamp$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$CheckSum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$CheckSum$LAYOUT() { return _NON_PAGED_DEBUG_INFO$CheckSum$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$CheckSum$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    static final java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$CheckSum$VH() { return _NON_PAGED_DEBUG_INFO$CheckSum$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$SizeOfImage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$SizeOfImage$LAYOUT() { return _NON_PAGED_DEBUG_INFO$SizeOfImage$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$SizeOfImage$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfImage"));
    static final java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$SizeOfImage$VH() { return _NON_PAGED_DEBUG_INFO$SizeOfImage$VH_; }

    static final MemoryLayout _NON_PAGED_DEBUG_INFO$ImageBase$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NON_PAGED_DEBUG_INFO$ImageBase$LAYOUT() { return _NON_PAGED_DEBUG_INFO$ImageBase$LAYOUT_; }

    static final VarHandle _NON_PAGED_DEBUG_INFO$ImageBase$VH_ = _NON_PAGED_DEBUG_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ImageBase"));
    static final java.lang.invoke.VarHandle _NON_PAGED_DEBUG_INFO$ImageBase$VH() { return _NON_PAGED_DEBUG_INFO$ImageBase$VH_; }

    static final MemoryLayout _ImageArchitectureHeader$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT,
        C_LONG.withName("FirstEntryRVA")
    ).withName("_ImageArchitectureHeader");
    static final jdk.incubator.foreign.MemoryLayout _ImageArchitectureHeader$struct$LAYOUT() { return _ImageArchitectureHeader$struct$LAYOUT_; }

    static final MemoryLayout _ImageArchitectureHeader$FirstEntryRVA$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ImageArchitectureHeader$FirstEntryRVA$LAYOUT() { return _ImageArchitectureHeader$FirstEntryRVA$LAYOUT_; }

    static final VarHandle _ImageArchitectureHeader$FirstEntryRVA$VH_ = _ImageArchitectureHeader$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstEntryRVA"));
    static final java.lang.invoke.VarHandle _ImageArchitectureHeader$FirstEntryRVA$VH() { return _ImageArchitectureHeader$FirstEntryRVA$VH_; }

    static final MemoryLayout _ImageArchitectureEntry$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("FixupInstRVA"),
        C_LONG.withName("NewInst")
    ).withName("_ImageArchitectureEntry");
    static final jdk.incubator.foreign.MemoryLayout _ImageArchitectureEntry$struct$LAYOUT() { return _ImageArchitectureEntry$struct$LAYOUT_; }

    static final MemoryLayout _ImageArchitectureEntry$FixupInstRVA$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ImageArchitectureEntry$FixupInstRVA$LAYOUT() { return _ImageArchitectureEntry$FixupInstRVA$LAYOUT_; }

    static final VarHandle _ImageArchitectureEntry$FixupInstRVA$VH_ = _ImageArchitectureEntry$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FixupInstRVA"));
    static final java.lang.invoke.VarHandle _ImageArchitectureEntry$FixupInstRVA$VH() { return _ImageArchitectureEntry$FixupInstRVA$VH_; }

    static final MemoryLayout _ImageArchitectureEntry$NewInst$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ImageArchitectureEntry$NewInst$LAYOUT() { return _ImageArchitectureEntry$NewInst$LAYOUT_; }

    static final VarHandle _ImageArchitectureEntry$NewInst$VH_ = _ImageArchitectureEntry$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NewInst"));
    static final java.lang.invoke.VarHandle _ImageArchitectureEntry$NewInst$VH() { return _ImageArchitectureEntry$NewInst$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Sig1"),
        C_SHORT.withName("Sig2"),
        C_SHORT.withName("Version"),
        C_SHORT.withName("Machine"),
        C_LONG.withName("TimeDateStamp"),
        C_LONG.withName("SizeOfData"),
        C_SHORT.withName("Ordinal"),
        C_SHORT.withName("Hint"),
        C_SHORT
    ).withName("IMPORT_OBJECT_HEADER");
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$struct$LAYOUT() { return IMPORT_OBJECT_HEADER$struct$LAYOUT_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Sig1$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Sig1$LAYOUT() { return IMPORT_OBJECT_HEADER$Sig1$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Sig1$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig1"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Sig1$VH() { return IMPORT_OBJECT_HEADER$Sig1$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Sig2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Sig2$LAYOUT() { return IMPORT_OBJECT_HEADER$Sig2$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Sig2$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig2"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Sig2$VH() { return IMPORT_OBJECT_HEADER$Sig2$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Version$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Version$LAYOUT() { return IMPORT_OBJECT_HEADER$Version$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Version$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Version$VH() { return IMPORT_OBJECT_HEADER$Version$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Machine$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Machine$LAYOUT() { return IMPORT_OBJECT_HEADER$Machine$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Machine$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Machine$VH() { return IMPORT_OBJECT_HEADER$Machine$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$TimeDateStamp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$TimeDateStamp$LAYOUT() { return IMPORT_OBJECT_HEADER$TimeDateStamp$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$TimeDateStamp$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$TimeDateStamp$VH() { return IMPORT_OBJECT_HEADER$TimeDateStamp$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$SizeOfData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$SizeOfData$LAYOUT() { return IMPORT_OBJECT_HEADER$SizeOfData$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$SizeOfData$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfData"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$SizeOfData$VH() { return IMPORT_OBJECT_HEADER$SizeOfData$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Ordinal$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Ordinal$LAYOUT() { return IMPORT_OBJECT_HEADER$Ordinal$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Ordinal$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Ordinal"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Ordinal$VH() { return IMPORT_OBJECT_HEADER$Ordinal$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Hint$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Hint$LAYOUT() { return IMPORT_OBJECT_HEADER$Hint$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Hint$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Hint"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Hint$VH() { return IMPORT_OBJECT_HEADER$Hint$VH_; }

    static final int IMPORT_OBJECT_CODE() { return (int)0L; }

    static final int IMPORT_OBJECT_DATA() { return (int)1L; }

    static final int IMPORT_OBJECT_CONST() { return (int)2L; }

    static final int IMPORT_OBJECT_ORDINAL() { return (int)0L; }

    static final int IMPORT_OBJECT_NAME() { return (int)1L; }

    static final int IMPORT_OBJECT_NAME_NO_PREFIX() { return (int)2L; }

    static final int IMPORT_OBJECT_NAME_UNDECORATE() { return (int)3L; }

    static final int IMPORT_OBJECT_NAME_EXPORTAS() { return (int)4L; }

    static final int COMIMAGE_FLAGS_ILONLY() { return (int)1L; }

    static final int COMIMAGE_FLAGS_32BITREQUIRED() { return (int)2L; }

    static final int COMIMAGE_FLAGS_IL_LIBRARY() { return (int)4L; }

    static final int COMIMAGE_FLAGS_STRONGNAMESIGNED() { return (int)8L; }

    static final int COMIMAGE_FLAGS_NATIVE_ENTRYPOINT() { return (int)16L; }

    static final int COMIMAGE_FLAGS_TRACKDEBUGDATA() { return (int)65536L; }

    static final int COMIMAGE_FLAGS_32BITPREFERRED() { return (int)131072L; }

    static final int COR_VERSION_MAJOR_V2() { return (int)2L; }

    static final int COR_VERSION_MAJOR() { return (int)2L; }

    static final int COR_VERSION_MINOR() { return (int)5L; }

    static final int COR_DELETED_NAME_LENGTH() { return (int)8L; }

    static final int COR_VTABLEGAP_NAME_LENGTH() { return (int)8L; }

    static final int NATIVE_TYPE_MAX_CB() { return (int)1L; }

    static final int COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE() { return (int)255L; }

    static final int IMAGE_COR_MIH_METHODRVA() { return (int)1L; }

    static final int IMAGE_COR_MIH_EHRVA() { return (int)2L; }

    static final int IMAGE_COR_MIH_BASICBLOCK() { return (int)8L; }

    static final int COR_VTABLE_32BIT() { return (int)1L; }

    static final int COR_VTABLE_64BIT() { return (int)2L; }

    static final int COR_VTABLE_FROM_UNMANAGED() { return (int)4L; }

    static final int COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN() { return (int)8L; }

    static final int COR_VTABLE_CALL_MOST_DERIVED() { return (int)16L; }

    static final int IMAGE_COR_EATJ_THUNK_SIZE() { return (int)32L; }

    static final int MAX_CLASS_NAME() { return (int)1024L; }

    static final int MAX_PACKAGE_NAME() { return (int)1024L; }

    static final MemoryLayout IMAGE_COR20_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cb"),
        C_SHORT.withName("MajorRuntimeVersion"),
        C_SHORT.withName("MinorRuntimeVersion"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("MetaData"),
        C_LONG.withName("Flags"),
        C_LONG.withName("EntryPointToken"),
        C_LONG.withName("EntryPointRVA"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("Resources"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("StrongNameSignature"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("CodeManagerTable"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("VTableFixups"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("ExportAddressTableJumps"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("ManagedNativeHeader")
    ).withName("IMAGE_COR20_HEADER");
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$struct$LAYOUT() { return IMAGE_COR20_HEADER$struct$LAYOUT_; }

    static final MemoryLayout IMAGE_COR20_HEADER$cb$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$cb$LAYOUT() { return IMAGE_COR20_HEADER$cb$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$cb$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cb"));
    static final java.lang.invoke.VarHandle IMAGE_COR20_HEADER$cb$VH() { return IMAGE_COR20_HEADER$cb$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$MajorRuntimeVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$MajorRuntimeVersion$LAYOUT() { return IMAGE_COR20_HEADER$MajorRuntimeVersion$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$MajorRuntimeVersion$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorRuntimeVersion"));
    static final java.lang.invoke.VarHandle IMAGE_COR20_HEADER$MajorRuntimeVersion$VH() { return IMAGE_COR20_HEADER$MajorRuntimeVersion$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$MinorRuntimeVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$MinorRuntimeVersion$LAYOUT() { return IMAGE_COR20_HEADER$MinorRuntimeVersion$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$MinorRuntimeVersion$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorRuntimeVersion"));
    static final java.lang.invoke.VarHandle IMAGE_COR20_HEADER$MinorRuntimeVersion$VH() { return IMAGE_COR20_HEADER$MinorRuntimeVersion$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$Flags$LAYOUT() { return IMAGE_COR20_HEADER$Flags$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$Flags$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle IMAGE_COR20_HEADER$Flags$VH() { return IMAGE_COR20_HEADER$Flags$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$EntryPointToken$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$EntryPointToken$LAYOUT() { return IMAGE_COR20_HEADER$EntryPointToken$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$EntryPointToken$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EntryPointToken"));
    static final java.lang.invoke.VarHandle IMAGE_COR20_HEADER$EntryPointToken$VH() { return IMAGE_COR20_HEADER$EntryPointToken$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$EntryPointRVA$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$EntryPointRVA$LAYOUT() { return IMAGE_COR20_HEADER$EntryPointRVA$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$EntryPointRVA$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EntryPointRVA"));
    static final java.lang.invoke.VarHandle IMAGE_COR20_HEADER$EntryPointRVA$VH() { return IMAGE_COR20_HEADER$EntryPointRVA$VH_; }

    static final FunctionDescriptor RtlCaptureStackBackTrace$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlCaptureStackBackTrace$FUNC() { return RtlCaptureStackBackTrace$FUNC_; }

    static final MethodHandle RtlCaptureStackBackTrace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCaptureStackBackTrace",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)S",
        RtlCaptureStackBackTrace$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlCaptureStackBackTrace$MH() { return RtlCaptureStackBackTrace$MH_; }

    static final FunctionDescriptor RtlCaptureContext$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlCaptureContext$FUNC() { return RtlCaptureContext$FUNC_; }

    static final MethodHandle RtlCaptureContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCaptureContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlCaptureContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlCaptureContext$MH() { return RtlCaptureContext$MH_; }

    static final FunctionDescriptor RtlCaptureContext2$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlCaptureContext2$FUNC() { return RtlCaptureContext2$FUNC_; }

    static final MethodHandle RtlCaptureContext2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCaptureContext2",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlCaptureContext2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlCaptureContext2$MH() { return RtlCaptureContext2$MH_; }

    static final FunctionDescriptor RtlUnwind$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlUnwind$FUNC() { return RtlUnwind$FUNC_; }

    static final MethodHandle RtlUnwind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlUnwind",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlUnwind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlUnwind$MH() { return RtlUnwind$MH_; }

    static final FunctionDescriptor RtlAddFunctionTable$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlAddFunctionTable$FUNC() { return RtlAddFunctionTable$FUNC_; }

    static final MethodHandle RtlAddFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlAddFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)B",
        RtlAddFunctionTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlAddFunctionTable$MH() { return RtlAddFunctionTable$MH_; }

    static final FunctionDescriptor RtlDeleteFunctionTable$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlDeleteFunctionTable$FUNC() { return RtlDeleteFunctionTable$FUNC_; }

    static final MethodHandle RtlDeleteFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlDeleteFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        RtlDeleteFunctionTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlDeleteFunctionTable$MH() { return RtlDeleteFunctionTable$MH_; }

    static final FunctionDescriptor RtlInstallFunctionTableCallback$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_LONGLONG,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInstallFunctionTableCallback$FUNC() { return RtlInstallFunctionTableCallback$FUNC_; }

    static final MethodHandle RtlInstallFunctionTableCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInstallFunctionTableCallback",
        "(JJILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)B",
        RtlInstallFunctionTableCallback$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInstallFunctionTableCallback$MH() { return RtlInstallFunctionTableCallback$MH_; }

    static final FunctionDescriptor RtlInstallFunctionTableCallback$Callback$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInstallFunctionTableCallback$Callback$FUNC() { return RtlInstallFunctionTableCallback$Callback$FUNC_; }

    static final FunctionDescriptor RtlAddGrowableFunctionTable$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlAddGrowableFunctionTable$FUNC() { return RtlAddGrowableFunctionTable$FUNC_; }

    static final MethodHandle RtlAddGrowableFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlAddGrowableFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIJJ)I",
        RtlAddGrowableFunctionTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlAddGrowableFunctionTable$MH() { return RtlAddGrowableFunctionTable$MH_; }

    static final FunctionDescriptor RtlGrowFunctionTable$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlGrowFunctionTable$FUNC() { return RtlGrowFunctionTable$FUNC_; }

    static final MethodHandle RtlGrowFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGrowFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        RtlGrowFunctionTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlGrowFunctionTable$MH() { return RtlGrowFunctionTable$MH_; }

    static final FunctionDescriptor RtlDeleteGrowableFunctionTable$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlDeleteGrowableFunctionTable$FUNC() { return RtlDeleteGrowableFunctionTable$FUNC_; }

    static final MethodHandle RtlDeleteGrowableFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlDeleteGrowableFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlDeleteGrowableFunctionTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlDeleteGrowableFunctionTable$MH() { return RtlDeleteGrowableFunctionTable$MH_; }

    static final FunctionDescriptor RtlLookupFunctionEntry$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlLookupFunctionEntry$FUNC() { return RtlLookupFunctionEntry$FUNC_; }

    static final MethodHandle RtlLookupFunctionEntry$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlLookupFunctionEntry",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlLookupFunctionEntry$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlLookupFunctionEntry$MH() { return RtlLookupFunctionEntry$MH_; }

    static final FunctionDescriptor RtlRestoreContext$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlRestoreContext$FUNC() { return RtlRestoreContext$FUNC_; }

    static final MethodHandle RtlRestoreContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlRestoreContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlRestoreContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlRestoreContext$MH() { return RtlRestoreContext$MH_; }

    static final FunctionDescriptor RtlUnwindEx$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlUnwindEx$FUNC() { return RtlUnwindEx$FUNC_; }

    static final MethodHandle RtlUnwindEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlUnwindEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlUnwindEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlUnwindEx$MH() { return RtlUnwindEx$MH_; }

    static final FunctionDescriptor RtlVirtualUnwind$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlVirtualUnwind$FUNC() { return RtlVirtualUnwind$FUNC_; }

    static final MethodHandle RtlVirtualUnwind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlVirtualUnwind",
        "(IJJLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlVirtualUnwind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlVirtualUnwind$MH() { return RtlVirtualUnwind$MH_; }

    static final FunctionDescriptor RtlRaiseException$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlRaiseException$FUNC() { return RtlRaiseException$FUNC_; }

    static final MethodHandle RtlRaiseException$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlRaiseException",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlRaiseException$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlRaiseException$MH() { return RtlRaiseException$MH_; }

    static final FunctionDescriptor RtlPcToFileHeader$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlPcToFileHeader$FUNC() { return RtlPcToFileHeader$FUNC_; }

    static final MethodHandle RtlPcToFileHeader$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlPcToFileHeader",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlPcToFileHeader$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlPcToFileHeader$MH() { return RtlPcToFileHeader$MH_; }

    static final FunctionDescriptor RtlCompareMemory$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlCompareMemory$FUNC() { return RtlCompareMemory$FUNC_; }

    static final MethodHandle RtlCompareMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCompareMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        RtlCompareMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlCompareMemory$MH() { return RtlCompareMemory$MH_; }

    static final MemoryLayout _SLIST_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Next"),
        MemoryLayout.ofPaddingBits(64)
    ).withName("_SLIST_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _SLIST_ENTRY$struct$LAYOUT() { return _SLIST_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _SLIST_ENTRY$Next$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SLIST_ENTRY$Next$LAYOUT() { return _SLIST_ENTRY$Next$LAYOUT_; }

    static final VarHandle _SLIST_ENTRY$Next$VH_ = MemoryHandles.asAddressVarHandle(_SLIST_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Next")));
    static final java.lang.invoke.VarHandle _SLIST_ENTRY$Next$VH() { return _SLIST_ENTRY$Next$VH_; }

    static final MemoryLayout _SLIST_HEADER$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_LONGLONG.withName("Alignment"),
        C_LONGLONG.withName("Region"),
        MemoryLayout.ofStruct(
            C_LONGLONG,
            C_LONGLONG
        ).withName("HeaderX64")
    ).withName("_SLIST_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _SLIST_HEADER$union$LAYOUT() { return _SLIST_HEADER$union$LAYOUT_; }

    static final MemoryLayout _SLIST_HEADER$Alignment$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SLIST_HEADER$Alignment$LAYOUT() { return _SLIST_HEADER$Alignment$LAYOUT_; }

    static final VarHandle _SLIST_HEADER$Alignment$VH_ = _SLIST_HEADER$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Alignment"));
    static final java.lang.invoke.VarHandle _SLIST_HEADER$Alignment$VH() { return _SLIST_HEADER$Alignment$VH_; }

    static final MemoryLayout _SLIST_HEADER$Region$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SLIST_HEADER$Region$LAYOUT() { return _SLIST_HEADER$Region$LAYOUT_; }

    static final VarHandle _SLIST_HEADER$Region$VH_ = _SLIST_HEADER$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Region"));
    static final java.lang.invoke.VarHandle _SLIST_HEADER$Region$VH() { return _SLIST_HEADER$Region$VH_; }

    static final MemoryLayout _SLIST_HEADER$HeaderX64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.MemoryLayout _SLIST_HEADER$HeaderX64$struct$LAYOUT() { return _SLIST_HEADER$HeaderX64$struct$LAYOUT_; }

    static final FunctionDescriptor RtlInitializeSListHead$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInitializeSListHead$FUNC() { return RtlInitializeSListHead$FUNC_; }

    static final MethodHandle RtlInitializeSListHead$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInitializeSListHead",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlInitializeSListHead$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInitializeSListHead$MH() { return RtlInitializeSListHead$MH_; }

    static final FunctionDescriptor RtlFirstEntrySList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlFirstEntrySList$FUNC() { return RtlFirstEntrySList$FUNC_; }

    static final MethodHandle RtlFirstEntrySList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFirstEntrySList",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlFirstEntrySList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlFirstEntrySList$MH() { return RtlFirstEntrySList$MH_; }

    static final FunctionDescriptor RtlInterlockedPopEntrySList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInterlockedPopEntrySList$FUNC() { return RtlInterlockedPopEntrySList$FUNC_; }

    static final MethodHandle RtlInterlockedPopEntrySList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInterlockedPopEntrySList",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlInterlockedPopEntrySList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInterlockedPopEntrySList$MH() { return RtlInterlockedPopEntrySList$MH_; }

    static final FunctionDescriptor RtlInterlockedPushEntrySList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInterlockedPushEntrySList$FUNC() { return RtlInterlockedPushEntrySList$FUNC_; }

    static final MethodHandle RtlInterlockedPushEntrySList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInterlockedPushEntrySList",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlInterlockedPushEntrySList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInterlockedPushEntrySList$MH() { return RtlInterlockedPushEntrySList$MH_; }

    static final FunctionDescriptor RtlInterlockedPushListSListEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInterlockedPushListSListEx$FUNC() { return RtlInterlockedPushListSListEx$FUNC_; }

    static final MethodHandle RtlInterlockedPushListSListEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInterlockedPushListSListEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        RtlInterlockedPushListSListEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInterlockedPushListSListEx$MH() { return RtlInterlockedPushListSListEx$MH_; }

    static final FunctionDescriptor RtlInterlockedFlushSList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInterlockedFlushSList$FUNC() { return RtlInterlockedFlushSList$FUNC_; }

    static final MethodHandle RtlInterlockedFlushSList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInterlockedFlushSList",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlInterlockedFlushSList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInterlockedFlushSList$MH() { return RtlInterlockedFlushSList$MH_; }

    static final FunctionDescriptor RtlQueryDepthSList$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlQueryDepthSList$FUNC() { return RtlQueryDepthSList$FUNC_; }

    static final MethodHandle RtlQueryDepthSList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlQueryDepthSList",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        RtlQueryDepthSList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlQueryDepthSList$MH() { return RtlQueryDepthSList$MH_; }

    static final FunctionDescriptor RtlGetReturnAddressHijackTarget$FUNC_ = FunctionDescriptor.of(C_LONGLONG);
    static final jdk.incubator.foreign.FunctionDescriptor RtlGetReturnAddressHijackTarget$FUNC() { return RtlGetReturnAddressHijackTarget$FUNC_; }

    static final MethodHandle RtlGetReturnAddressHijackTarget$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGetReturnAddressHijackTarget",
        "()J",
        RtlGetReturnAddressHijackTarget$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlGetReturnAddressHijackTarget$MH() { return RtlGetReturnAddressHijackTarget$MH_; }

    static final MemoryLayout _RTL_RUN_ONCE$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("Ptr")
    ).withName("_RTL_RUN_ONCE");
    static final jdk.incubator.foreign.MemoryLayout _RTL_RUN_ONCE$union$LAYOUT() { return _RTL_RUN_ONCE$union$LAYOUT_; }

    static final MemoryLayout _RTL_RUN_ONCE$Ptr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _RTL_RUN_ONCE$Ptr$LAYOUT() { return _RTL_RUN_ONCE$Ptr$LAYOUT_; }

    static final VarHandle _RTL_RUN_ONCE$Ptr$VH_ = MemoryHandles.asAddressVarHandle(_RTL_RUN_ONCE$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Ptr")));
    static final java.lang.invoke.VarHandle _RTL_RUN_ONCE$Ptr$VH() { return _RTL_RUN_ONCE$Ptr$VH_; }

    static final MemoryLayout _RTL_BARRIER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Reserved1"),
        C_LONG.withName("Reserved2"),
        MemoryLayout.ofSequence(2, C_LONGLONG).withName("Reserved3"),
        C_LONG.withName("Reserved4"),
        C_LONG.withName("Reserved5")
    ).withName("_RTL_BARRIER");
    static final jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$struct$LAYOUT() { return _RTL_BARRIER$struct$LAYOUT_; }

    static final MemoryLayout _RTL_BARRIER$Reserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$Reserved1$LAYOUT() { return _RTL_BARRIER$Reserved1$LAYOUT_; }

    static final VarHandle _RTL_BARRIER$Reserved1$VH_ = _RTL_BARRIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle _RTL_BARRIER$Reserved1$VH() { return _RTL_BARRIER$Reserved1$VH_; }

    static final MemoryLayout _RTL_BARRIER$Reserved2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$Reserved2$LAYOUT() { return _RTL_BARRIER$Reserved2$LAYOUT_; }

    static final VarHandle _RTL_BARRIER$Reserved2$VH_ = _RTL_BARRIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle _RTL_BARRIER$Reserved2$VH() { return _RTL_BARRIER$Reserved2$VH_; }

    static final MemoryLayout _RTL_BARRIER$Reserved4$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$Reserved4$LAYOUT() { return _RTL_BARRIER$Reserved4$LAYOUT_; }

    static final VarHandle _RTL_BARRIER$Reserved4$VH_ = _RTL_BARRIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved4"));
    static final java.lang.invoke.VarHandle _RTL_BARRIER$Reserved4$VH() { return _RTL_BARRIER$Reserved4$VH_; }

    static final MemoryLayout _RTL_BARRIER$Reserved5$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$Reserved5$LAYOUT() { return _RTL_BARRIER$Reserved5$LAYOUT_; }

    static final VarHandle _RTL_BARRIER$Reserved5$VH_ = _RTL_BARRIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved5"));
    static final java.lang.invoke.VarHandle _RTL_BARRIER$Reserved5$VH() { return _RTL_BARRIER$Reserved5$VH_; }

    static final FunctionDescriptor __fastfail$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __fastfail$FUNC() { return __fastfail$FUNC_; }

    static final MethodHandle __fastfail$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__fastfail",
        "(I)V",
        __fastfail$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __fastfail$MH() { return __fastfail$MH_; }

    static final FunctionDescriptor HEAP_MAKE_TAG_FLAGS$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor HEAP_MAKE_TAG_FLAGS$FUNC() { return HEAP_MAKE_TAG_FLAGS$FUNC_; }

    static final MethodHandle HEAP_MAKE_TAG_FLAGS$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HEAP_MAKE_TAG_FLAGS",
        "(II)I",
        HEAP_MAKE_TAG_FLAGS$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle HEAP_MAKE_TAG_FLAGS$MH() { return HEAP_MAKE_TAG_FLAGS$MH_; }

    static final FunctionDescriptor RtlSecureZeroMemory$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlSecureZeroMemory$FUNC() { return RtlSecureZeroMemory$FUNC_; }

    static final MethodHandle RtlSecureZeroMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlSecureZeroMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        RtlSecureZeroMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlSecureZeroMemory$MH() { return RtlSecureZeroMemory$MH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Length"),
        C_SHORT.withName("Flags"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Text"),
        MemoryLayout.ofPaddingBits(8)
    ).withName("_MESSAGE_RESOURCE_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT() { return _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _MESSAGE_RESOURCE_ENTRY$Length$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_ENTRY$Length$LAYOUT() { return _MESSAGE_RESOURCE_ENTRY$Length$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_ENTRY$Length$VH_ = _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _MESSAGE_RESOURCE_ENTRY$Length$VH() { return _MESSAGE_RESOURCE_ENTRY$Length$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_ENTRY$Flags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_ENTRY$Flags$LAYOUT() { return _MESSAGE_RESOURCE_ENTRY$Flags$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_ENTRY$Flags$VH_ = _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _MESSAGE_RESOURCE_ENTRY$Flags$VH() { return _MESSAGE_RESOURCE_ENTRY$Flags$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("LowId"),
        C_LONG.withName("HighId"),
        C_LONG.withName("OffsetToEntries")
    ).withName("_MESSAGE_RESOURCE_BLOCK");
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT() { return _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_; }

    static final MemoryLayout _MESSAGE_RESOURCE_BLOCK$LowId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_BLOCK$LowId$LAYOUT() { return _MESSAGE_RESOURCE_BLOCK$LowId$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_BLOCK$LowId$VH_ = _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowId"));
    static final java.lang.invoke.VarHandle _MESSAGE_RESOURCE_BLOCK$LowId$VH() { return _MESSAGE_RESOURCE_BLOCK$LowId$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_BLOCK$HighId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_BLOCK$HighId$LAYOUT() { return _MESSAGE_RESOURCE_BLOCK$HighId$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_BLOCK$HighId$VH_ = _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighId"));
    static final java.lang.invoke.VarHandle _MESSAGE_RESOURCE_BLOCK$HighId$VH() { return _MESSAGE_RESOURCE_BLOCK$HighId$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$LAYOUT() { return _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH_ = _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OffsetToEntries"));
    static final java.lang.invoke.VarHandle _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH() { return _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NumberOfBlocks"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("LowId"),
            C_LONG.withName("HighId"),
            C_LONG.withName("OffsetToEntries")
        ).withName("_MESSAGE_RESOURCE_BLOCK")).withName("Blocks")
    ).withName("_MESSAGE_RESOURCE_DATA");
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_DATA$struct$LAYOUT() { return _MESSAGE_RESOURCE_DATA$struct$LAYOUT_; }

    static final MemoryLayout _MESSAGE_RESOURCE_DATA$NumberOfBlocks$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_DATA$NumberOfBlocks$LAYOUT() { return _MESSAGE_RESOURCE_DATA$NumberOfBlocks$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH_ = _MESSAGE_RESOURCE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfBlocks"));
    static final java.lang.invoke.VarHandle _MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH() { return _MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwOSVersionInfoSize"),
        C_LONG.withName("dwMajorVersion"),
        C_LONG.withName("dwMinorVersion"),
        C_LONG.withName("dwBuildNumber"),
        C_LONG.withName("dwPlatformId"),
        MemoryLayout.ofSequence(128, C_CHAR).withName("szCSDVersion")
    ).withName("_OSVERSIONINFOA");
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$struct$LAYOUT() { return _OSVERSIONINFOA$struct$LAYOUT_; }

    static final MemoryLayout _OSVERSIONINFOA$dwOSVersionInfoSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwOSVersionInfoSize$LAYOUT() { return _OSVERSIONINFOA$dwOSVersionInfoSize$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwOSVersionInfoSize$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOSVersionInfoSize"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOA$dwOSVersionInfoSize$VH() { return _OSVERSIONINFOA$dwOSVersionInfoSize$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$dwMajorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwMajorVersion$LAYOUT() { return _OSVERSIONINFOA$dwMajorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwMajorVersion$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMajorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOA$dwMajorVersion$VH() { return _OSVERSIONINFOA$dwMajorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$dwMinorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwMinorVersion$LAYOUT() { return _OSVERSIONINFOA$dwMinorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwMinorVersion$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOA$dwMinorVersion$VH() { return _OSVERSIONINFOA$dwMinorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$dwBuildNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwBuildNumber$LAYOUT() { return _OSVERSIONINFOA$dwBuildNumber$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwBuildNumber$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBuildNumber"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOA$dwBuildNumber$VH() { return _OSVERSIONINFOA$dwBuildNumber$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$dwPlatformId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwPlatformId$LAYOUT() { return _OSVERSIONINFOA$dwPlatformId$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwPlatformId$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPlatformId"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOA$dwPlatformId$VH() { return _OSVERSIONINFOA$dwPlatformId$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwOSVersionInfoSize"),
        C_LONG.withName("dwMajorVersion"),
        C_LONG.withName("dwMinorVersion"),
        C_LONG.withName("dwBuildNumber"),
        C_LONG.withName("dwPlatformId"),
        MemoryLayout.ofSequence(128, C_SHORT).withName("szCSDVersion")
    ).withName("_OSVERSIONINFOW");
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$struct$LAYOUT() { return _OSVERSIONINFOW$struct$LAYOUT_; }

    static final MemoryLayout _OSVERSIONINFOW$dwOSVersionInfoSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwOSVersionInfoSize$LAYOUT() { return _OSVERSIONINFOW$dwOSVersionInfoSize$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwOSVersionInfoSize$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOSVersionInfoSize"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOW$dwOSVersionInfoSize$VH() { return _OSVERSIONINFOW$dwOSVersionInfoSize$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$dwMajorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwMajorVersion$LAYOUT() { return _OSVERSIONINFOW$dwMajorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwMajorVersion$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMajorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOW$dwMajorVersion$VH() { return _OSVERSIONINFOW$dwMajorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$dwMinorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwMinorVersion$LAYOUT() { return _OSVERSIONINFOW$dwMinorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwMinorVersion$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOW$dwMinorVersion$VH() { return _OSVERSIONINFOW$dwMinorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$dwBuildNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwBuildNumber$LAYOUT() { return _OSVERSIONINFOW$dwBuildNumber$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwBuildNumber$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBuildNumber"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOW$dwBuildNumber$VH() { return _OSVERSIONINFOW$dwBuildNumber$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$dwPlatformId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwPlatformId$LAYOUT() { return _OSVERSIONINFOW$dwPlatformId$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwPlatformId$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPlatformId"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOW$dwPlatformId$VH() { return _OSVERSIONINFOW$dwPlatformId$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwOSVersionInfoSize"),
        C_LONG.withName("dwMajorVersion"),
        C_LONG.withName("dwMinorVersion"),
        C_LONG.withName("dwBuildNumber"),
        C_LONG.withName("dwPlatformId"),
        MemoryLayout.ofSequence(128, C_CHAR).withName("szCSDVersion"),
        C_SHORT.withName("wServicePackMajor"),
        C_SHORT.withName("wServicePackMinor"),
        C_SHORT.withName("wSuiteMask"),
        C_CHAR.withName("wProductType"),
        C_CHAR.withName("wReserved")
    ).withName("_OSVERSIONINFOEXA");
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$struct$LAYOUT() { return _OSVERSIONINFOEXA$struct$LAYOUT_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwOSVersionInfoSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwOSVersionInfoSize$LAYOUT() { return _OSVERSIONINFOEXA$dwOSVersionInfoSize$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwOSVersionInfoSize$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOSVersionInfoSize"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwOSVersionInfoSize$VH() { return _OSVERSIONINFOEXA$dwOSVersionInfoSize$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwMajorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwMajorVersion$LAYOUT() { return _OSVERSIONINFOEXA$dwMajorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwMajorVersion$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMajorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwMajorVersion$VH() { return _OSVERSIONINFOEXA$dwMajorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwMinorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwMinorVersion$LAYOUT() { return _OSVERSIONINFOEXA$dwMinorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwMinorVersion$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwMinorVersion$VH() { return _OSVERSIONINFOEXA$dwMinorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwBuildNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwBuildNumber$LAYOUT() { return _OSVERSIONINFOEXA$dwBuildNumber$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwBuildNumber$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBuildNumber"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwBuildNumber$VH() { return _OSVERSIONINFOEXA$dwBuildNumber$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwPlatformId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwPlatformId$LAYOUT() { return _OSVERSIONINFOEXA$dwPlatformId$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwPlatformId$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPlatformId"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwPlatformId$VH() { return _OSVERSIONINFOEXA$dwPlatformId$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wServicePackMajor$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wServicePackMajor$LAYOUT() { return _OSVERSIONINFOEXA$wServicePackMajor$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wServicePackMajor$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wServicePackMajor"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wServicePackMajor$VH() { return _OSVERSIONINFOEXA$wServicePackMajor$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wServicePackMinor$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wServicePackMinor$LAYOUT() { return _OSVERSIONINFOEXA$wServicePackMinor$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wServicePackMinor$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wServicePackMinor"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wServicePackMinor$VH() { return _OSVERSIONINFOEXA$wServicePackMinor$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wSuiteMask$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wSuiteMask$LAYOUT() { return _OSVERSIONINFOEXA$wSuiteMask$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wSuiteMask$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wSuiteMask"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wSuiteMask$VH() { return _OSVERSIONINFOEXA$wSuiteMask$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wProductType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wProductType$LAYOUT() { return _OSVERSIONINFOEXA$wProductType$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wProductType$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("wProductType"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wProductType$VH() { return _OSVERSIONINFOEXA$wProductType$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wReserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wReserved$LAYOUT() { return _OSVERSIONINFOEXA$wReserved$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wReserved$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("wReserved"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wReserved$VH() { return _OSVERSIONINFOEXA$wReserved$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwOSVersionInfoSize"),
        C_LONG.withName("dwMajorVersion"),
        C_LONG.withName("dwMinorVersion"),
        C_LONG.withName("dwBuildNumber"),
        C_LONG.withName("dwPlatformId"),
        MemoryLayout.ofSequence(128, C_SHORT).withName("szCSDVersion"),
        C_SHORT.withName("wServicePackMajor"),
        C_SHORT.withName("wServicePackMinor"),
        C_SHORT.withName("wSuiteMask"),
        C_CHAR.withName("wProductType"),
        C_CHAR.withName("wReserved")
    ).withName("_OSVERSIONINFOEXW");
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$struct$LAYOUT() { return _OSVERSIONINFOEXW$struct$LAYOUT_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwOSVersionInfoSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwOSVersionInfoSize$LAYOUT() { return _OSVERSIONINFOEXW$dwOSVersionInfoSize$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwOSVersionInfoSize$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOSVersionInfoSize"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwOSVersionInfoSize$VH() { return _OSVERSIONINFOEXW$dwOSVersionInfoSize$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwMajorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwMajorVersion$LAYOUT() { return _OSVERSIONINFOEXW$dwMajorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwMajorVersion$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMajorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwMajorVersion$VH() { return _OSVERSIONINFOEXW$dwMajorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwMinorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwMinorVersion$LAYOUT() { return _OSVERSIONINFOEXW$dwMinorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwMinorVersion$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwMinorVersion$VH() { return _OSVERSIONINFOEXW$dwMinorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwBuildNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwBuildNumber$LAYOUT() { return _OSVERSIONINFOEXW$dwBuildNumber$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwBuildNumber$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBuildNumber"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwBuildNumber$VH() { return _OSVERSIONINFOEXW$dwBuildNumber$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwPlatformId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwPlatformId$LAYOUT() { return _OSVERSIONINFOEXW$dwPlatformId$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwPlatformId$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPlatformId"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwPlatformId$VH() { return _OSVERSIONINFOEXW$dwPlatformId$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wServicePackMajor$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wServicePackMajor$LAYOUT() { return _OSVERSIONINFOEXW$wServicePackMajor$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wServicePackMajor$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wServicePackMajor"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wServicePackMajor$VH() { return _OSVERSIONINFOEXW$wServicePackMajor$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wServicePackMinor$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wServicePackMinor$LAYOUT() { return _OSVERSIONINFOEXW$wServicePackMinor$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wServicePackMinor$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wServicePackMinor"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wServicePackMinor$VH() { return _OSVERSIONINFOEXW$wServicePackMinor$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wSuiteMask$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wSuiteMask$LAYOUT() { return _OSVERSIONINFOEXW$wSuiteMask$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wSuiteMask$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wSuiteMask"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wSuiteMask$VH() { return _OSVERSIONINFOEXW$wSuiteMask$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wProductType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wProductType$LAYOUT() { return _OSVERSIONINFOEXW$wProductType$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wProductType$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("wProductType"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wProductType$VH() { return _OSVERSIONINFOEXW$wProductType$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wReserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wReserved$LAYOUT() { return _OSVERSIONINFOEXW$wReserved$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wReserved$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("wReserved"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wReserved$VH() { return _OSVERSIONINFOEXW$wReserved$VH_; }

    static final FunctionDescriptor VerSetConditionMask$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_LONG,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor VerSetConditionMask$FUNC() { return VerSetConditionMask$FUNC_; }

    static final MethodHandle VerSetConditionMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerSetConditionMask",
        "(JIB)J",
        VerSetConditionMask$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VerSetConditionMask$MH() { return VerSetConditionMask$MH_; }

    static final FunctionDescriptor RtlGetProductInfo$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_LONG,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlGetProductInfo$FUNC() { return RtlGetProductInfo$FUNC_; }

    static final MethodHandle RtlGetProductInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGetProductInfo",
        "(IIIILjdk/incubator/foreign/MemoryAddress;)B",
        RtlGetProductInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlGetProductInfo$MH() { return RtlGetProductInfo$MH_; }

    static final int UmsThreadInvalidInfoClass() { return (int)0L; }

    static final int UmsThreadUserContext() { return (int)1L; }

    static final int UmsThreadPriority() { return (int)2L; }

    static final int UmsThreadAffinity() { return (int)3L; }

    static final int UmsThreadTeb() { return (int)4L; }

    static final int UmsThreadIsSuspended() { return (int)5L; }

    static final int UmsThreadIsTerminated() { return (int)6L; }

    static final int UmsThreadMaxInfoClass() { return (int)7L; }

    static final int UmsSchedulerStartup() { return (int)0L; }

    static final int UmsSchedulerThreadBlocked() { return (int)1L; }

    static final int UmsSchedulerThreadYield() { return (int)2L; }

    static final FunctionDescriptor RtlCrc32$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlCrc32$FUNC() { return RtlCrc32$FUNC_; }

    static final MethodHandle RtlCrc32$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCrc32",
        "(Ljdk/incubator/foreign/MemoryAddress;JI)I",
        RtlCrc32$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlCrc32$MH() { return RtlCrc32$MH_; }

    static final FunctionDescriptor RtlCrc64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlCrc64$FUNC() { return RtlCrc64$FUNC_; }

    static final MethodHandle RtlCrc64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCrc64",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)J",
        RtlCrc64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlCrc64$MH() { return RtlCrc64$MH_; }

    static final int OS_DEPLOYMENT_STANDARD() { return (int)1L; }

    static final int OS_DEPLOYMENT_COMPACT() { return (int)2L; }

    static final FunctionDescriptor RtlOsDeploymentState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlOsDeploymentState$FUNC() { return RtlOsDeploymentState$FUNC_; }

    static final MethodHandle RtlOsDeploymentState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlOsDeploymentState",
        "(I)I",
        RtlOsDeploymentState$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlOsDeploymentState$MH() { return RtlOsDeploymentState$MH_; }

    static final MemoryLayout _NV_MEMORY_RANGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("BaseAddress"),
        C_LONGLONG.withName("Length")
    ).withName("_NV_MEMORY_RANGE");
    static final jdk.incubator.foreign.MemoryLayout _NV_MEMORY_RANGE$struct$LAYOUT() { return _NV_MEMORY_RANGE$struct$LAYOUT_; }

    static final MemoryLayout _NV_MEMORY_RANGE$BaseAddress$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NV_MEMORY_RANGE$BaseAddress$LAYOUT() { return _NV_MEMORY_RANGE$BaseAddress$LAYOUT_; }

    static final VarHandle _NV_MEMORY_RANGE$BaseAddress$VH_ = MemoryHandles.asAddressVarHandle(_NV_MEMORY_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BaseAddress")));
    static final java.lang.invoke.VarHandle _NV_MEMORY_RANGE$BaseAddress$VH() { return _NV_MEMORY_RANGE$BaseAddress$VH_; }

    static final MemoryLayout _NV_MEMORY_RANGE$Length$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NV_MEMORY_RANGE$Length$LAYOUT() { return _NV_MEMORY_RANGE$Length$LAYOUT_; }

    static final VarHandle _NV_MEMORY_RANGE$Length$VH_ = _NV_MEMORY_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _NV_MEMORY_RANGE$Length$VH() { return _NV_MEMORY_RANGE$Length$VH_; }

    static final FunctionDescriptor RtlGetNonVolatileToken$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlGetNonVolatileToken$FUNC() { return RtlGetNonVolatileToken$FUNC_; }

    static final MethodHandle RtlGetNonVolatileToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGetNonVolatileToken",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        RtlGetNonVolatileToken$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlGetNonVolatileToken$MH() { return RtlGetNonVolatileToken$MH_; }

    static final FunctionDescriptor RtlFreeNonVolatileToken$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlFreeNonVolatileToken$FUNC() { return RtlFreeNonVolatileToken$FUNC_; }

    static final MethodHandle RtlFreeNonVolatileToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFreeNonVolatileToken",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlFreeNonVolatileToken$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlFreeNonVolatileToken$MH() { return RtlFreeNonVolatileToken$MH_; }

    static final FunctionDescriptor RtlFlushNonVolatileMemory$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlFlushNonVolatileMemory$FUNC() { return RtlFlushNonVolatileMemory$FUNC_; }

    static final MethodHandle RtlFlushNonVolatileMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFlushNonVolatileMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        RtlFlushNonVolatileMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlFlushNonVolatileMemory$MH() { return RtlFlushNonVolatileMemory$MH_; }

    static final FunctionDescriptor RtlDrainNonVolatileFlush$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlDrainNonVolatileFlush$FUNC() { return RtlDrainNonVolatileFlush$FUNC_; }

    static final MethodHandle RtlDrainNonVolatileFlush$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlDrainNonVolatileFlush",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlDrainNonVolatileFlush$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlDrainNonVolatileFlush$MH() { return RtlDrainNonVolatileFlush$MH_; }

    static final FunctionDescriptor RtlWriteNonVolatileMemory$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlWriteNonVolatileMemory$FUNC() { return RtlWriteNonVolatileMemory$FUNC_; }

    static final MethodHandle RtlWriteNonVolatileMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlWriteNonVolatileMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        RtlWriteNonVolatileMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlWriteNonVolatileMemory$MH() { return RtlWriteNonVolatileMemory$MH_; }

    static final FunctionDescriptor RtlFillNonVolatileMemory$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_CHAR,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlFillNonVolatileMemory$FUNC() { return RtlFillNonVolatileMemory$FUNC_; }

    static final MethodHandle RtlFillNonVolatileMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFillNonVolatileMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JBI)I",
        RtlFillNonVolatileMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlFillNonVolatileMemory$MH() { return RtlFillNonVolatileMemory$MH_; }

    static final FunctionDescriptor RtlFlushNonVolatileMemoryRanges$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlFlushNonVolatileMemoryRanges$FUNC() { return RtlFlushNonVolatileMemoryRanges$FUNC_; }

    static final MethodHandle RtlFlushNonVolatileMemoryRanges$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFlushNonVolatileMemoryRanges",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        RtlFlushNonVolatileMemoryRanges$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlFlushNonVolatileMemoryRanges$MH() { return RtlFlushNonVolatileMemoryRanges$MH_; }

    static final MemoryLayout CORRELATION_VECTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Version"),
        MemoryLayout.ofSequence(129, C_CHAR).withName("Vector")
    ).withName("CORRELATION_VECTOR");
    static final jdk.incubator.foreign.MemoryLayout CORRELATION_VECTOR$struct$LAYOUT() { return CORRELATION_VECTOR$struct$LAYOUT_; }

    static final MemoryLayout CORRELATION_VECTOR$Version$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout CORRELATION_VECTOR$Version$LAYOUT() { return CORRELATION_VECTOR$Version$LAYOUT_; }

    static final VarHandle CORRELATION_VECTOR$Version$VH_ = CORRELATION_VECTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle CORRELATION_VECTOR$Version$VH() { return CORRELATION_VECTOR$Version$VH_; }

    static final FunctionDescriptor RtlInitializeCorrelationVector$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInitializeCorrelationVector$FUNC() { return RtlInitializeCorrelationVector$FUNC_; }

    static final MethodHandle RtlInitializeCorrelationVector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInitializeCorrelationVector",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RtlInitializeCorrelationVector$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInitializeCorrelationVector$MH() { return RtlInitializeCorrelationVector$MH_; }

    static final FunctionDescriptor RtlIncrementCorrelationVector$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlIncrementCorrelationVector$FUNC() { return RtlIncrementCorrelationVector$FUNC_; }

    static final MethodHandle RtlIncrementCorrelationVector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlIncrementCorrelationVector",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlIncrementCorrelationVector$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlIncrementCorrelationVector$MH() { return RtlIncrementCorrelationVector$MH_; }

    static final FunctionDescriptor RtlExtendCorrelationVector$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlExtendCorrelationVector$FUNC() { return RtlExtendCorrelationVector$FUNC_; }

    static final MethodHandle RtlExtendCorrelationVector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlExtendCorrelationVector",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlExtendCorrelationVector$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlExtendCorrelationVector$MH() { return RtlExtendCorrelationVector$MH_; }

    static final FunctionDescriptor RtlValidateCorrelationVector$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlValidateCorrelationVector$FUNC() { return RtlValidateCorrelationVector$FUNC_; }

    static final MethodHandle RtlValidateCorrelationVector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlValidateCorrelationVector",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlValidateCorrelationVector$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlValidateCorrelationVector$MH() { return RtlValidateCorrelationVector$MH_; }

    static final MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("TriggerId")
    ).withName("_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG");
    static final jdk.incubator.foreign.MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT_; }

    static final MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$LAYOUT() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$LAYOUT_; }

    static final VarHandle _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH_ = _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH_; }

    static final MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$LAYOUT() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$LAYOUT_; }

    static final VarHandle _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH_ = MemoryHandles.asAddressVarHandle(_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TriggerId")));
    static final java.lang.invoke.VarHandle _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH_; }

    static final FunctionDescriptor CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$FUNC() { return CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$FUNC_; }

    static final MethodHandle CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CUSTOM_SYSTEM_EVENT_TRIGGER_INIT",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH() { return CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH_; }

    static final FunctionDescriptor RtlRaiseCustomSystemEventTrigger$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlRaiseCustomSystemEventTrigger$FUNC() { return RtlRaiseCustomSystemEventTrigger$FUNC_; }

    static final MethodHandle RtlRaiseCustomSystemEventTrigger$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlRaiseCustomSystemEventTrigger",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlRaiseCustomSystemEventTrigger$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlRaiseCustomSystemEventTrigger$MH() { return RtlRaiseCustomSystemEventTrigger$MH_; }

    static final int ImagePolicyEntryTypeNone() { return (int)0L; }

    static final int ImagePolicyEntryTypeBool() { return (int)1L; }

    static final int ImagePolicyEntryTypeInt8() { return (int)2L; }

    static final int ImagePolicyEntryTypeUInt8() { return (int)3L; }

    static final int ImagePolicyEntryTypeInt16() { return (int)4L; }

    static final int ImagePolicyEntryTypeUInt16() { return (int)5L; }

    static final int ImagePolicyEntryTypeInt32() { return (int)6L; }

    static final int ImagePolicyEntryTypeUInt32() { return (int)7L; }

    static final int ImagePolicyEntryTypeInt64() { return (int)8L; }

    static final int ImagePolicyEntryTypeUInt64() { return (int)9L; }

    static final int ImagePolicyEntryTypeAnsiString() { return (int)10L; }

    static final int ImagePolicyEntryTypeUnicodeString() { return (int)11L; }

    static final int ImagePolicyEntryTypeOverride() { return (int)12L; }

    static final int ImagePolicyEntryTypeMaximum() { return (int)13L; }

    static final int ImagePolicyIdNone() { return (int)0L; }

    static final int ImagePolicyIdEtw() { return (int)1L; }

    static final int ImagePolicyIdDebug() { return (int)2L; }

    static final int ImagePolicyIdCrashDump() { return (int)3L; }

    static final int ImagePolicyIdCrashDumpKey() { return (int)4L; }

    static final int ImagePolicyIdCrashDumpKeyGuid() { return (int)5L; }

    static final int ImagePolicyIdParentSd() { return (int)6L; }

    static final int ImagePolicyIdParentSdRev() { return (int)7L; }

    static final int ImagePolicyIdSvn() { return (int)8L; }

    static final int ImagePolicyIdDeviceId() { return (int)9L; }

    static final int ImagePolicyIdCapability() { return (int)10L; }

    static final int ImagePolicyIdScenarioId() { return (int)11L; }

    static final int ImagePolicyIdMaximum() { return (int)12L; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Type"),
        C_INT.withName("PolicyId"),
        MemoryLayout.ofUnion(
            C_POINTER.withName("None"),
            C_CHAR.withName("BoolValue"),
            C_CHAR.withName("Int8Value"),
            C_CHAR.withName("UInt8Value"),
            C_SHORT.withName("Int16Value"),
            C_SHORT.withName("UInt16Value"),
            C_INT.withName("Int32Value"),
            C_INT.withName("UInt32Value"),
            C_LONGLONG.withName("Int64Value"),
            C_LONGLONG.withName("UInt64Value"),
            C_POINTER.withName("AnsiStringValue"),
            C_POINTER.withName("UnicodeStringValue")
        ).withName("u")
    ).withName("_IMAGE_POLICY_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$struct$LAYOUT() { return _IMAGE_POLICY_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$Type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$Type$LAYOUT() { return _IMAGE_POLICY_ENTRY$Type$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_ENTRY$Type$VH_ = _IMAGE_POLICY_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _IMAGE_POLICY_ENTRY$Type$VH() { return _IMAGE_POLICY_ENTRY$Type$VH_; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$PolicyId$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$PolicyId$LAYOUT() { return _IMAGE_POLICY_ENTRY$PolicyId$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_ENTRY$PolicyId$VH_ = _IMAGE_POLICY_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PolicyId"));
    static final java.lang.invoke.VarHandle _IMAGE_POLICY_ENTRY$PolicyId$VH() { return _IMAGE_POLICY_ENTRY$PolicyId$VH_; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$u$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("None"),
        C_CHAR.withName("BoolValue"),
        C_CHAR.withName("Int8Value"),
        C_CHAR.withName("UInt8Value"),
        C_SHORT.withName("Int16Value"),
        C_SHORT.withName("UInt16Value"),
        C_INT.withName("Int32Value"),
        C_INT.withName("UInt32Value"),
        C_LONGLONG.withName("Int64Value"),
        C_LONGLONG.withName("UInt64Value"),
        C_POINTER.withName("AnsiStringValue"),
        C_POINTER.withName("UnicodeStringValue")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$u$union$LAYOUT() { return _IMAGE_POLICY_ENTRY$u$union$LAYOUT_; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$u$None$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$u$None$LAYOUT() { return _IMAGE_POLICY_ENTRY$u$None$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_ENTRY$u$None$VH_ = MemoryHandles.asAddressVarHandle(_IMAGE_POLICY_ENTRY$u$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("None")));
    static final java.lang.invoke.VarHandle _IMAGE_POLICY_ENTRY$u$None$VH() { return _IMAGE_POLICY_ENTRY$u$None$VH_; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$u$BoolValue$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$u$BoolValue$LAYOUT() { return _IMAGE_POLICY_ENTRY$u$BoolValue$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_ENTRY$u$BoolValue$VH_ = _IMAGE_POLICY_ENTRY$u$union$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BoolValue"));
    static final java.lang.invoke.VarHandle _IMAGE_POLICY_ENTRY$u$BoolValue$VH() { return _IMAGE_POLICY_ENTRY$u$BoolValue$VH_; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$u$Int8Value$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$u$Int8Value$LAYOUT() { return _IMAGE_POLICY_ENTRY$u$Int8Value$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_ENTRY$u$Int8Value$VH_ = _IMAGE_POLICY_ENTRY$u$union$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Int8Value"));
    static final java.lang.invoke.VarHandle _IMAGE_POLICY_ENTRY$u$Int8Value$VH() { return _IMAGE_POLICY_ENTRY$u$Int8Value$VH_; }

}

