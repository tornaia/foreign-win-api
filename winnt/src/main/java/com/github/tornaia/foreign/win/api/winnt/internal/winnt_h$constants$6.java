// Generated by jextract

package com.github.tornaia.foreign.win.api.winnt.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class winnt_h$constants$6 extends winnt_h$constants$5 {

    /* package-private */ winnt_h$constants$6() {}
    static final MemoryLayout _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$LAYOUT() { return _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$LAYOUT_; }

    static final VarHandle _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH_ = _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsInServerSilo"));
    static final java.lang.invoke.VarHandle _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH() { return _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH_; }

    static final int SERVERSILO_INITING() { return (int)0L; }

    static final int SERVERSILO_STARTED() { return (int)1L; }

    static final int SERVERSILO_SHUTTING_DOWN() { return (int)2L; }

    static final int SERVERSILO_TERMINATING() { return (int)3L; }

    static final int SERVERSILO_TERMINATED() { return (int)4L; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ServiceSessionId"),
        C_INT.withName("State"),
        C_LONG.withName("ExitStatus"),
        C_CHAR.withName("IsDownlevelContainer"),
        MemoryLayout.ofPaddingBits(24),
        C_POINTER.withName("ApiSetSchema"),
        C_POINTER.withName("HostApiSetSchema")
    ).withName("_SERVERSILO_BASIC_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH_ = _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ServiceSessionId"));
    static final java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH() { return _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$State$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$State$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$State$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$State$VH_ = _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    static final java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$State$VH() { return _SERVERSILO_BASIC_INFORMATION$State$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$ExitStatus$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$ExitStatus$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$ExitStatus$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$ExitStatus$VH_ = _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExitStatus"));
    static final java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$ExitStatus$VH() { return _SERVERSILO_BASIC_INFORMATION$ExitStatus$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH_ = _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsDownlevelContainer"));
    static final java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH() { return _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH_ = MemoryHandles.asAddressVarHandle(_SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ApiSetSchema")));
    static final java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH() { return _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH_ = MemoryHandles.asAddressVarHandle(_SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HostApiSetSchema")));
    static final java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH() { return _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH_; }

    static final int FirmwareTypeUnknown() { return (int)0L; }

    static final int FirmwareTypeBios() { return (int)1L; }

    static final int FirmwareTypeUefi() { return (int)2L; }

    static final int FirmwareTypeMax() { return (int)3L; }

    static final int RelationProcessorCore() { return (int)0L; }

    static final int RelationNumaNode() { return (int)1L; }

    static final int RelationCache() { return (int)2L; }

    static final int RelationProcessorPackage() { return (int)3L; }

    static final int RelationGroup() { return (int)4L; }

    static final int RelationAll() { return (int)65535L; }

    static final int CacheUnified() { return (int)0L; }

    static final int CacheInstruction() { return (int)1L; }

    static final int CacheData() { return (int)2L; }

    static final int CacheTrace() { return (int)3L; }

    static final MemoryLayout _CACHE_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Level"),
        C_CHAR.withName("Associativity"),
        C_SHORT.withName("LineSize"),
        C_LONG.withName("Size"),
        C_INT.withName("Type")
    ).withName("_CACHE_DESCRIPTOR");
    static final jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$struct$LAYOUT() { return _CACHE_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$Level$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$Level$LAYOUT() { return _CACHE_DESCRIPTOR$Level$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$Level$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Level"));
    static final java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$Level$VH() { return _CACHE_DESCRIPTOR$Level$VH_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$Associativity$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$Associativity$LAYOUT() { return _CACHE_DESCRIPTOR$Associativity$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$Associativity$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Associativity"));
    static final java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$Associativity$VH() { return _CACHE_DESCRIPTOR$Associativity$VH_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$LineSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$LineSize$LAYOUT() { return _CACHE_DESCRIPTOR$LineSize$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$LineSize$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LineSize"));
    static final java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$LineSize$VH() { return _CACHE_DESCRIPTOR$LineSize$VH_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$Size$LAYOUT() { return _CACHE_DESCRIPTOR$Size$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$Size$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$Size$VH() { return _CACHE_DESCRIPTOR$Size$VH_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$Type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$Type$LAYOUT() { return _CACHE_DESCRIPTOR$Type$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$Type$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$Type$VH() { return _CACHE_DESCRIPTOR$Type$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("ProcessorMask"),
        C_INT.withName("Relationship"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_CHAR.withName("Flags")
        ).withName("ProcessorCore"),
        MemoryLayout.ofStruct(
            C_LONG.withName("NodeNumber")
        ).withName("NumaNode"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("Level"),
            C_CHAR.withName("Associativity"),
            C_SHORT.withName("LineSize"),
            C_LONG.withName("Size"),
            C_INT.withName("Type")
        ).withName("Cache"),
        MemoryLayout.ofSequence(2, C_LONGLONG).withName("Reserved")
    ).withName("_SYSTEM_LOGICAL_PROCESSOR_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcessorMask"));
    static final java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Relationship"));
    static final java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Flags")
    );
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$struct$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$Flags$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$Flags$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$Flags$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$Flags$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$Flags$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NodeNumber")
    );
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$struct$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$NodeNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$NodeNumber$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$NodeNumber$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$NodeNumber$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NodeNumber"));
    static final java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$NodeNumber$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$NodeNumber$VH_; }

    static final MemoryLayout _PROCESSOR_RELATIONSHIP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Flags"),
        C_CHAR.withName("EfficiencyClass"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
        C_SHORT.withName("GroupCount"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Mask"),
            C_SHORT.withName("Group"),
            MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
        ).withName("_GROUP_AFFINITY")).withName("GroupMask")
    ).withName("_PROCESSOR_RELATIONSHIP");
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_RELATIONSHIP$struct$LAYOUT() { return _PROCESSOR_RELATIONSHIP$struct$LAYOUT_; }

    static final MemoryLayout _PROCESSOR_RELATIONSHIP$Flags$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_RELATIONSHIP$Flags$LAYOUT() { return _PROCESSOR_RELATIONSHIP$Flags$LAYOUT_; }

    static final VarHandle _PROCESSOR_RELATIONSHIP$Flags$VH_ = _PROCESSOR_RELATIONSHIP$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESSOR_RELATIONSHIP$Flags$VH() { return _PROCESSOR_RELATIONSHIP$Flags$VH_; }

    static final MemoryLayout _PROCESSOR_RELATIONSHIP$EfficiencyClass$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_RELATIONSHIP$EfficiencyClass$LAYOUT() { return _PROCESSOR_RELATIONSHIP$EfficiencyClass$LAYOUT_; }

    static final VarHandle _PROCESSOR_RELATIONSHIP$EfficiencyClass$VH_ = _PROCESSOR_RELATIONSHIP$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EfficiencyClass"));
    static final java.lang.invoke.VarHandle _PROCESSOR_RELATIONSHIP$EfficiencyClass$VH() { return _PROCESSOR_RELATIONSHIP$EfficiencyClass$VH_; }

    static final MemoryLayout _PROCESSOR_RELATIONSHIP$GroupCount$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_RELATIONSHIP$GroupCount$LAYOUT() { return _PROCESSOR_RELATIONSHIP$GroupCount$LAYOUT_; }

    static final VarHandle _PROCESSOR_RELATIONSHIP$GroupCount$VH_ = _PROCESSOR_RELATIONSHIP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("GroupCount"));
    static final java.lang.invoke.VarHandle _PROCESSOR_RELATIONSHIP$GroupCount$VH() { return _PROCESSOR_RELATIONSHIP$GroupCount$VH_; }

    static final MemoryLayout _NUMA_NODE_RELATIONSHIP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NodeNumber"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Mask"),
            C_SHORT.withName("Group"),
            MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
        ).withName("GroupMask")
    ).withName("_NUMA_NODE_RELATIONSHIP");
    static final jdk.incubator.foreign.MemoryLayout _NUMA_NODE_RELATIONSHIP$struct$LAYOUT() { return _NUMA_NODE_RELATIONSHIP$struct$LAYOUT_; }

    static final MemoryLayout _NUMA_NODE_RELATIONSHIP$NodeNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NUMA_NODE_RELATIONSHIP$NodeNumber$LAYOUT() { return _NUMA_NODE_RELATIONSHIP$NodeNumber$LAYOUT_; }

    static final VarHandle _NUMA_NODE_RELATIONSHIP$NodeNumber$VH_ = _NUMA_NODE_RELATIONSHIP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NodeNumber"));
    static final java.lang.invoke.VarHandle _NUMA_NODE_RELATIONSHIP$NodeNumber$VH() { return _NUMA_NODE_RELATIONSHIP$NodeNumber$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Level"),
        C_CHAR.withName("Associativity"),
        C_SHORT.withName("LineSize"),
        C_LONG.withName("CacheSize"),
        C_INT.withName("Type"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Mask"),
            C_SHORT.withName("Group"),
            MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
        ).withName("GroupMask")
    ).withName("_CACHE_RELATIONSHIP");
    static final jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$struct$LAYOUT() { return _CACHE_RELATIONSHIP$struct$LAYOUT_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$Level$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$Level$LAYOUT() { return _CACHE_RELATIONSHIP$Level$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$Level$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Level"));
    static final java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$Level$VH() { return _CACHE_RELATIONSHIP$Level$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$Associativity$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$Associativity$LAYOUT() { return _CACHE_RELATIONSHIP$Associativity$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$Associativity$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Associativity"));
    static final java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$Associativity$VH() { return _CACHE_RELATIONSHIP$Associativity$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$LineSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$LineSize$LAYOUT() { return _CACHE_RELATIONSHIP$LineSize$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$LineSize$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LineSize"));
    static final java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$LineSize$VH() { return _CACHE_RELATIONSHIP$LineSize$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$CacheSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$CacheSize$LAYOUT() { return _CACHE_RELATIONSHIP$CacheSize$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$CacheSize$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CacheSize"));
    static final java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$CacheSize$VH() { return _CACHE_RELATIONSHIP$CacheSize$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$Type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$Type$LAYOUT() { return _CACHE_RELATIONSHIP$Type$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$Type$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$Type$VH() { return _CACHE_RELATIONSHIP$Type$VH_; }

    static final MemoryLayout _PROCESSOR_GROUP_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("MaximumProcessorCount"),
        C_CHAR.withName("ActiveProcessorCount"),
        MemoryLayout.ofSequence(38, C_CHAR).withName("Reserved"),
        C_LONGLONG.withName("ActiveProcessorMask")
    ).withName("_PROCESSOR_GROUP_INFO");
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_GROUP_INFO$struct$LAYOUT() { return _PROCESSOR_GROUP_INFO$struct$LAYOUT_; }

    static final MemoryLayout _PROCESSOR_GROUP_INFO$MaximumProcessorCount$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_GROUP_INFO$MaximumProcessorCount$LAYOUT() { return _PROCESSOR_GROUP_INFO$MaximumProcessorCount$LAYOUT_; }

    static final VarHandle _PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH_ = _PROCESSOR_GROUP_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MaximumProcessorCount"));
    static final java.lang.invoke.VarHandle _PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH() { return _PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH_; }

    static final MemoryLayout _PROCESSOR_GROUP_INFO$ActiveProcessorCount$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_GROUP_INFO$ActiveProcessorCount$LAYOUT() { return _PROCESSOR_GROUP_INFO$ActiveProcessorCount$LAYOUT_; }

    static final VarHandle _PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH_ = _PROCESSOR_GROUP_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ActiveProcessorCount"));
    static final java.lang.invoke.VarHandle _PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH() { return _PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH_; }

    static final MemoryLayout _PROCESSOR_GROUP_INFO$ActiveProcessorMask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_GROUP_INFO$ActiveProcessorMask$LAYOUT() { return _PROCESSOR_GROUP_INFO$ActiveProcessorMask$LAYOUT_; }

    static final VarHandle _PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH_ = _PROCESSOR_GROUP_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ActiveProcessorMask"));
    static final java.lang.invoke.VarHandle _PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH() { return _PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH_; }

    static final MemoryLayout _GROUP_RELATIONSHIP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("MaximumGroupCount"),
        C_SHORT.withName("ActiveGroupCount"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_CHAR.withName("MaximumProcessorCount"),
            C_CHAR.withName("ActiveProcessorCount"),
            MemoryLayout.ofSequence(38, C_CHAR).withName("Reserved"),
            C_LONGLONG.withName("ActiveProcessorMask")
        ).withName("_PROCESSOR_GROUP_INFO")).withName("GroupInfo")
    ).withName("_GROUP_RELATIONSHIP");
    static final jdk.incubator.foreign.MemoryLayout _GROUP_RELATIONSHIP$struct$LAYOUT() { return _GROUP_RELATIONSHIP$struct$LAYOUT_; }

    static final MemoryLayout _GROUP_RELATIONSHIP$MaximumGroupCount$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GROUP_RELATIONSHIP$MaximumGroupCount$LAYOUT() { return _GROUP_RELATIONSHIP$MaximumGroupCount$LAYOUT_; }

    static final VarHandle _GROUP_RELATIONSHIP$MaximumGroupCount$VH_ = _GROUP_RELATIONSHIP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaximumGroupCount"));
    static final java.lang.invoke.VarHandle _GROUP_RELATIONSHIP$MaximumGroupCount$VH() { return _GROUP_RELATIONSHIP$MaximumGroupCount$VH_; }

    static final MemoryLayout _GROUP_RELATIONSHIP$ActiveGroupCount$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GROUP_RELATIONSHIP$ActiveGroupCount$LAYOUT() { return _GROUP_RELATIONSHIP$ActiveGroupCount$LAYOUT_; }

    static final VarHandle _GROUP_RELATIONSHIP$ActiveGroupCount$VH_ = _GROUP_RELATIONSHIP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ActiveGroupCount"));
    static final java.lang.invoke.VarHandle _GROUP_RELATIONSHIP$ActiveGroupCount$VH() { return _GROUP_RELATIONSHIP$ActiveGroupCount$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Relationship"),
        C_LONG.withName("Size"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("Flags"),
            C_CHAR.withName("EfficiencyClass"),
            MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
            C_SHORT.withName("GroupCount"),
            MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                C_LONGLONG.withName("Mask"),
                C_SHORT.withName("Group"),
                MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
            ).withName("_GROUP_AFFINITY")).withName("GroupMask")
        ).withName("Processor"),
        MemoryLayout.ofStruct(
            C_LONG.withName("NodeNumber"),
            MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
            MemoryLayout.ofStruct(
                C_LONGLONG.withName("Mask"),
                C_SHORT.withName("Group"),
                MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
            ).withName("GroupMask")
        ).withName("NumaNode"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("Level"),
            C_CHAR.withName("Associativity"),
            C_SHORT.withName("LineSize"),
            C_LONG.withName("CacheSize"),
            C_INT.withName("Type"),
            MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
            MemoryLayout.ofStruct(
                C_LONGLONG.withName("Mask"),
                C_SHORT.withName("Group"),
                MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
            ).withName("GroupMask")
        ).withName("Cache"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("MaximumGroupCount"),
            C_SHORT.withName("ActiveGroupCount"),
            MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
            MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                C_CHAR.withName("MaximumProcessorCount"),
                C_CHAR.withName("ActiveProcessorCount"),
                MemoryLayout.ofSequence(38, C_CHAR).withName("Reserved"),
                C_LONGLONG.withName("ActiveProcessorMask")
            ).withName("_PROCESSOR_GROUP_INFO")).withName("GroupInfo")
        ).withName("Group")
    ).withName("_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Relationship"));
    static final java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH_; }

    static final int CpuSetInformation() { return (int)0L; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_INT.withName("Type"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Id"),
            C_SHORT.withName("Group"),
            C_CHAR.withName("LogicalProcessorIndex"),
            C_CHAR.withName("CoreIndex"),
            C_CHAR.withName("LastLevelCacheIndex"),
            C_CHAR.withName("NumaNodeIndex"),
            C_CHAR.withName("EfficiencyClass"),
            C_CHAR.withName("AllFlags"),
            C_CHAR,
            C_LONG.withName("Reserved"),
            C_CHAR.withName("SchedulingClass"),
            C_LONGLONG.withName("AllocationTag")
        ).withName("CpuSet")
    ).withName("_SYSTEM_CPU_SET_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$Size$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$Size$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$Size$VH_ = _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$Size$VH() { return _SYSTEM_CPU_SET_INFORMATION$Size$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$Type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$Type$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$Type$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$Type$VH_ = _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$Type$VH() { return _SYSTEM_CPU_SET_INFORMATION$Type$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Id"),
        C_SHORT.withName("Group"),
        C_CHAR.withName("LogicalProcessorIndex"),
        C_CHAR.withName("CoreIndex"),
        C_CHAR.withName("LastLevelCacheIndex"),
        C_CHAR.withName("NumaNodeIndex"),
        C_CHAR.withName("EfficiencyClass"),
        C_CHAR.withName("AllFlags"),
        C_CHAR,
        C_LONG.withName("Reserved"),
        C_CHAR.withName("SchedulingClass"),
        C_LONGLONG.withName("AllocationTag")
    );
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$Id$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$Id$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$Id$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$Id$VH_ = _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Id"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$Id$VH() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$Id$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$Group$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$Group$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$Group$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$Group$VH_ = _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Group"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$Group$VH() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$Group$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$LogicalProcessorIndex$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$LogicalProcessorIndex$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$LogicalProcessorIndex$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$LogicalProcessorIndex$VH_ = _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("LogicalProcessorIndex"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$LogicalProcessorIndex$VH() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$LogicalProcessorIndex$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$CoreIndex$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$CoreIndex$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$CoreIndex$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$CoreIndex$VH_ = _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("CoreIndex"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$CoreIndex$VH() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$CoreIndex$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$LastLevelCacheIndex$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$LastLevelCacheIndex$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$LastLevelCacheIndex$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$LastLevelCacheIndex$VH_ = _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("LastLevelCacheIndex"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$LastLevelCacheIndex$VH() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$LastLevelCacheIndex$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$NumaNodeIndex$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$NumaNodeIndex$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$NumaNodeIndex$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$NumaNodeIndex$VH_ = _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("NumaNodeIndex"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$NumaNodeIndex$VH() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$NumaNodeIndex$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$EfficiencyClass$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$EfficiencyClass$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$EfficiencyClass$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$EfficiencyClass$VH_ = _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EfficiencyClass"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$EfficiencyClass$VH() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$EfficiencyClass$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$AllFlags$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$AllFlags$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$AllFlags$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$AllFlags$VH_ = _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AllFlags"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$AllFlags$VH() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$AllFlags$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$Reserved$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$Reserved$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$Reserved$VH_ = _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$Reserved$VH() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$Reserved$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$SchedulingClass$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$SchedulingClass$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$SchedulingClass$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$SchedulingClass$VH_ = _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SchedulingClass"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$SchedulingClass$VH() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$SchedulingClass$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$AllocationTag$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$CpuSet$AllocationTag$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$AllocationTag$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$AllocationTag$VH_ = _SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationTag"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$CpuSet$AllocationTag$VH() { return _SYSTEM_CPU_SET_INFORMATION$CpuSet$AllocationTag$VH_; }

    static final MemoryLayout _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("CycleTime")
    ).withName("_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT() { return _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$LAYOUT() { return _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$LAYOUT_; }

    static final VarHandle _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH_ = _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CycleTime"));
    static final java.lang.invoke.VarHandle _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH() { return _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH_; }

    static final MemoryLayout _XSTATE_FEATURE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Offset"),
        C_LONG.withName("Size")
    ).withName("_XSTATE_FEATURE");
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_FEATURE$struct$LAYOUT() { return _XSTATE_FEATURE$struct$LAYOUT_; }

    static final MemoryLayout _XSTATE_FEATURE$Offset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_FEATURE$Offset$LAYOUT() { return _XSTATE_FEATURE$Offset$LAYOUT_; }

    static final VarHandle _XSTATE_FEATURE$Offset$VH_ = _XSTATE_FEATURE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _XSTATE_FEATURE$Offset$VH() { return _XSTATE_FEATURE$Offset$VH_; }

    static final MemoryLayout _XSTATE_FEATURE$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_FEATURE$Size$LAYOUT() { return _XSTATE_FEATURE$Size$LAYOUT_; }

    static final VarHandle _XSTATE_FEATURE$Size$VH_ = _XSTATE_FEATURE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _XSTATE_FEATURE$Size$VH() { return _XSTATE_FEATURE$Size$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("EnabledFeatures"),
        C_LONGLONG.withName("EnabledVolatileFeatures"),
        C_LONG.withName("Size"),
        C_LONG.withName("ControlFlags"),
        C_INT,
        MemoryLayout.ofSequence(64, MemoryLayout.ofStruct(
            C_LONG.withName("Offset"),
            C_LONG.withName("Size")
        ).withName("_XSTATE_FEATURE")).withName("Features"),
        C_LONGLONG.withName("EnabledSupervisorFeatures"),
        C_LONGLONG.withName("AlignedFeatures"),
        C_LONG.withName("AllFeatureSize"),
        MemoryLayout.ofSequence(64, C_LONG).withName("AllFeatures"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("EnabledUserVisibleSupervisorFeatures")
    ).withName("_XSTATE_CONFIGURATION");
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$struct$LAYOUT() { return _XSTATE_CONFIGURATION$struct$LAYOUT_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$EnabledFeatures$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$EnabledFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$EnabledFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$EnabledFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledFeatures"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$EnabledFeatures$VH() { return _XSTATE_CONFIGURATION$EnabledFeatures$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$EnabledVolatileFeatures$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$EnabledVolatileFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$EnabledVolatileFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledVolatileFeatures"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH() { return _XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$Size$LAYOUT() { return _XSTATE_CONFIGURATION$Size$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$Size$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$Size$VH() { return _XSTATE_CONFIGURATION$Size$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$ControlFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$ControlFlags$LAYOUT() { return _XSTATE_CONFIGURATION$ControlFlags$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$ControlFlags$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$ControlFlags$VH() { return _XSTATE_CONFIGURATION$ControlFlags$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledSupervisorFeatures"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH() { return _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$AlignedFeatures$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$AlignedFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$AlignedFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$AlignedFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AlignedFeatures"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$AlignedFeatures$VH() { return _XSTATE_CONFIGURATION$AlignedFeatures$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$AllFeatureSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$AllFeatureSize$LAYOUT() { return _XSTATE_CONFIGURATION$AllFeatureSize$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$AllFeatureSize$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllFeatureSize"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$AllFeatureSize$VH() { return _XSTATE_CONFIGURATION$AllFeatureSize$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledUserVisibleSupervisorFeatures"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH() { return _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("BaseAddress"),
        C_POINTER.withName("AllocationBase"),
        C_LONG.withName("AllocationProtect"),
        C_SHORT.withName("PartitionId"),
        MemoryLayout.ofPaddingBits(16),
        C_LONGLONG.withName("RegionSize"),
        C_LONG.withName("State"),
        C_LONG.withName("Protect"),
        C_LONG.withName("Type"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_MEMORY_BASIC_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$struct$LAYOUT() { return _MEMORY_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$BaseAddress$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$BaseAddress$LAYOUT() { return _MEMORY_BASIC_INFORMATION$BaseAddress$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$BaseAddress$VH_ = MemoryHandles.asAddressVarHandle(_MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BaseAddress")));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$BaseAddress$VH() { return _MEMORY_BASIC_INFORMATION$BaseAddress$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$AllocationBase$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$AllocationBase$LAYOUT() { return _MEMORY_BASIC_INFORMATION$AllocationBase$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$AllocationBase$VH_ = MemoryHandles.asAddressVarHandle(_MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationBase")));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$AllocationBase$VH() { return _MEMORY_BASIC_INFORMATION$AllocationBase$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$AllocationProtect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$AllocationProtect$LAYOUT() { return _MEMORY_BASIC_INFORMATION$AllocationProtect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$AllocationProtect$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationProtect"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$AllocationProtect$VH() { return _MEMORY_BASIC_INFORMATION$AllocationProtect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$PartitionId$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$PartitionId$LAYOUT() { return _MEMORY_BASIC_INFORMATION$PartitionId$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$PartitionId$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("PartitionId"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$PartitionId$VH() { return _MEMORY_BASIC_INFORMATION$PartitionId$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$RegionSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$RegionSize$LAYOUT() { return _MEMORY_BASIC_INFORMATION$RegionSize$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$RegionSize$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegionSize"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$RegionSize$VH() { return _MEMORY_BASIC_INFORMATION$RegionSize$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$State$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$State$LAYOUT() { return _MEMORY_BASIC_INFORMATION$State$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$State$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$State$VH() { return _MEMORY_BASIC_INFORMATION$State$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$Protect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$Protect$LAYOUT() { return _MEMORY_BASIC_INFORMATION$Protect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$Protect$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Protect"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$Protect$VH() { return _MEMORY_BASIC_INFORMATION$Protect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$Type$LAYOUT() { return _MEMORY_BASIC_INFORMATION$Type$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$Type$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$Type$VH() { return _MEMORY_BASIC_INFORMATION$Type$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("BaseAddress"),
        C_LONG.withName("AllocationBase"),
        C_LONG.withName("AllocationProtect"),
        C_LONG.withName("RegionSize"),
        C_LONG.withName("State"),
        C_LONG.withName("Protect"),
        C_LONG.withName("Type")
    ).withName("_MEMORY_BASIC_INFORMATION32");
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$struct$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$BaseAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$BaseAddress$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$BaseAddress$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$BaseAddress$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseAddress"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$BaseAddress$VH() { return _MEMORY_BASIC_INFORMATION32$BaseAddress$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$AllocationBase$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$AllocationBase$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$AllocationBase$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$AllocationBase$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationBase"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$AllocationBase$VH() { return _MEMORY_BASIC_INFORMATION32$AllocationBase$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$AllocationProtect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$AllocationProtect$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$AllocationProtect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$AllocationProtect$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationProtect"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$AllocationProtect$VH() { return _MEMORY_BASIC_INFORMATION32$AllocationProtect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$RegionSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$RegionSize$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$RegionSize$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$RegionSize$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RegionSize"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$RegionSize$VH() { return _MEMORY_BASIC_INFORMATION32$RegionSize$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$State$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$State$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$State$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$State$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$State$VH() { return _MEMORY_BASIC_INFORMATION32$State$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$Protect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$Protect$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$Protect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$Protect$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Protect"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$Protect$VH() { return _MEMORY_BASIC_INFORMATION32$Protect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$Type$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$Type$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$Type$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$Type$VH() { return _MEMORY_BASIC_INFORMATION32$Type$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("BaseAddress"),
        C_LONGLONG.withName("AllocationBase"),
        C_LONG.withName("AllocationProtect"),
        C_LONG.withName("__alignment1"),
        C_LONGLONG.withName("RegionSize"),
        C_LONG.withName("State"),
        C_LONG.withName("Protect"),
        C_LONG.withName("Type"),
        C_LONG.withName("__alignment2")
    ).withName("_MEMORY_BASIC_INFORMATION64");
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$struct$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$BaseAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$BaseAddress$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$BaseAddress$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$BaseAddress$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BaseAddress"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$BaseAddress$VH() { return _MEMORY_BASIC_INFORMATION64$BaseAddress$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$AllocationBase$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$AllocationBase$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$AllocationBase$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$AllocationBase$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationBase"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$AllocationBase$VH() { return _MEMORY_BASIC_INFORMATION64$AllocationBase$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$AllocationProtect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$AllocationProtect$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$AllocationProtect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$AllocationProtect$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationProtect"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$AllocationProtect$VH() { return _MEMORY_BASIC_INFORMATION64$AllocationProtect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$__alignment1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$__alignment1$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$__alignment1$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$__alignment1$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("__alignment1"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$__alignment1$VH() { return _MEMORY_BASIC_INFORMATION64$__alignment1$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$RegionSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$RegionSize$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$RegionSize$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$RegionSize$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegionSize"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$RegionSize$VH() { return _MEMORY_BASIC_INFORMATION64$RegionSize$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$State$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$State$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$State$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$State$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$State$VH() { return _MEMORY_BASIC_INFORMATION64$State$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$Protect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$Protect$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$Protect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$Protect$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Protect"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$Protect$VH() { return _MEMORY_BASIC_INFORMATION64$Protect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$Type$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$Type$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$Type$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$Type$VH() { return _MEMORY_BASIC_INFORMATION64$Type$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$__alignment2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$__alignment2$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$__alignment2$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$__alignment2$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("__alignment2"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$__alignment2$VH() { return _MEMORY_BASIC_INFORMATION64$__alignment2$VH_; }

    static final MemoryLayout _CFG_CALL_TARGET_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Offset"),
        C_LONGLONG.withName("Flags")
    ).withName("_CFG_CALL_TARGET_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CFG_CALL_TARGET_INFO$struct$LAYOUT() { return _CFG_CALL_TARGET_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CFG_CALL_TARGET_INFO$Offset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CFG_CALL_TARGET_INFO$Offset$LAYOUT() { return _CFG_CALL_TARGET_INFO$Offset$LAYOUT_; }

    static final VarHandle _CFG_CALL_TARGET_INFO$Offset$VH_ = _CFG_CALL_TARGET_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _CFG_CALL_TARGET_INFO$Offset$VH() { return _CFG_CALL_TARGET_INFO$Offset$VH_; }

    static final MemoryLayout _CFG_CALL_TARGET_INFO$Flags$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CFG_CALL_TARGET_INFO$Flags$LAYOUT() { return _CFG_CALL_TARGET_INFO$Flags$LAYOUT_; }

    static final VarHandle _CFG_CALL_TARGET_INFO$Flags$VH_ = _CFG_CALL_TARGET_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _CFG_CALL_TARGET_INFO$Flags$VH() { return _CFG_CALL_TARGET_INFO$Flags$VH_; }

    static final MemoryLayout _MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("LowestStartingAddress"),
        C_POINTER.withName("HighestEndingAddress"),
        C_LONGLONG.withName("Alignment")
    ).withName("_MEM_ADDRESS_REQUIREMENTS");
    static final jdk.incubator.foreign.MemoryLayout _MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT() { return _MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_; }

    static final MemoryLayout _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$LAYOUT() { return _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$LAYOUT_; }

    static final VarHandle _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH_ = MemoryHandles.asAddressVarHandle(_MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowestStartingAddress")));
    static final java.lang.invoke.VarHandle _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH() { return _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH_; }

    static final MemoryLayout _MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$LAYOUT() { return _MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$LAYOUT_; }

    static final VarHandle _MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$VH_ = MemoryHandles.asAddressVarHandle(_MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HighestEndingAddress")));
    static final java.lang.invoke.VarHandle _MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$VH() { return _MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$VH_; }

    static final MemoryLayout _MEM_ADDRESS_REQUIREMENTS$Alignment$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEM_ADDRESS_REQUIREMENTS$Alignment$LAYOUT() { return _MEM_ADDRESS_REQUIREMENTS$Alignment$LAYOUT_; }

    static final VarHandle _MEM_ADDRESS_REQUIREMENTS$Alignment$VH_ = _MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Alignment"));
    static final java.lang.invoke.VarHandle _MEM_ADDRESS_REQUIREMENTS$Alignment$VH() { return _MEM_ADDRESS_REQUIREMENTS$Alignment$VH_; }

    static final int MemExtendedParameterInvalidType() { return (int)0L; }

    static final int MemExtendedParameterAddressRequirements() { return (int)1L; }

    static final int MemExtendedParameterNumaNode() { return (int)2L; }

    static final int MemExtendedParameterPartitionHandle() { return (int)3L; }

    static final int MemExtendedParameterUserPhysicalHandle() { return (int)4L; }

    static final int MemExtendedParameterAttributeFlags() { return (int)5L; }

    static final int MemExtendedParameterMax() { return (int)6L; }

    static final MemoryLayout MEM_EXTENDED_PARAMETER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG,
        C_LONGLONG.withName("ULong64"),
        C_POINTER.withName("Pointer"),
        C_LONGLONG.withName("Size"),
        C_POINTER.withName("Handle"),
        C_LONG.withName("ULong")
    ).withName("MEM_EXTENDED_PARAMETER");
    static final jdk.incubator.foreign.MemoryLayout MEM_EXTENDED_PARAMETER$struct$LAYOUT() { return MEM_EXTENDED_PARAMETER$struct$LAYOUT_; }

    static final MemoryLayout MEM_EXTENDED_PARAMETER$ULong64$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout MEM_EXTENDED_PARAMETER$ULong64$LAYOUT() { return MEM_EXTENDED_PARAMETER$ULong64$LAYOUT_; }

    static final VarHandle MEM_EXTENDED_PARAMETER$ULong64$VH_ = MEM_EXTENDED_PARAMETER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ULong64"));
    static final java.lang.invoke.VarHandle MEM_EXTENDED_PARAMETER$ULong64$VH() { return MEM_EXTENDED_PARAMETER$ULong64$VH_; }

    static final MemoryLayout MEM_EXTENDED_PARAMETER$Pointer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout MEM_EXTENDED_PARAMETER$Pointer$LAYOUT() { return MEM_EXTENDED_PARAMETER$Pointer$LAYOUT_; }

    static final VarHandle MEM_EXTENDED_PARAMETER$Pointer$VH_ = MemoryHandles.asAddressVarHandle(MEM_EXTENDED_PARAMETER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Pointer")));
    static final java.lang.invoke.VarHandle MEM_EXTENDED_PARAMETER$Pointer$VH() { return MEM_EXTENDED_PARAMETER$Pointer$VH_; }

    static final MemoryLayout MEM_EXTENDED_PARAMETER$Size$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout MEM_EXTENDED_PARAMETER$Size$LAYOUT() { return MEM_EXTENDED_PARAMETER$Size$LAYOUT_; }

    static final VarHandle MEM_EXTENDED_PARAMETER$Size$VH_ = MEM_EXTENDED_PARAMETER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle MEM_EXTENDED_PARAMETER$Size$VH() { return MEM_EXTENDED_PARAMETER$Size$VH_; }

    static final MemoryLayout MEM_EXTENDED_PARAMETER$Handle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout MEM_EXTENDED_PARAMETER$Handle$LAYOUT() { return MEM_EXTENDED_PARAMETER$Handle$LAYOUT_; }

    static final VarHandle MEM_EXTENDED_PARAMETER$Handle$VH_ = MemoryHandles.asAddressVarHandle(MEM_EXTENDED_PARAMETER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Handle")));
    static final java.lang.invoke.VarHandle MEM_EXTENDED_PARAMETER$Handle$VH() { return MEM_EXTENDED_PARAMETER$Handle$VH_; }

    static final MemoryLayout MEM_EXTENDED_PARAMETER$ULong$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout MEM_EXTENDED_PARAMETER$ULong$LAYOUT() { return MEM_EXTENDED_PARAMETER$ULong$LAYOUT_; }

    static final VarHandle MEM_EXTENDED_PARAMETER$ULong$VH_ = MEM_EXTENDED_PARAMETER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ULong"));
    static final java.lang.invoke.VarHandle MEM_EXTENDED_PARAMETER$ULong$VH() { return MEM_EXTENDED_PARAMETER$ULong$VH_; }

    static final int MemSectionExtendedParameterInvalidType() { return (int)0L; }

    static final int MemSectionExtendedParameterUserPhysicalFlags() { return (int)1L; }

    static final int MemSectionExtendedParameterNumaNode() { return (int)2L; }

    static final int MemSectionExtendedParameterMax() { return (int)3L; }

    static final MemoryLayout _ENCLAVE_CREATE_INFO_SGX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(4096, C_CHAR).withName("Secs")
    ).withName("_ENCLAVE_CREATE_INFO_SGX");
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_CREATE_INFO_SGX$struct$LAYOUT() { return _ENCLAVE_CREATE_INFO_SGX$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_SGX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(1808, C_CHAR).withName("SigStruct"),
        MemoryLayout.ofSequence(240, C_CHAR).withName("Reserved1"),
        MemoryLayout.ofSequence(304, C_CHAR).withName("EInitToken"),
        MemoryLayout.ofSequence(1744, C_CHAR).withName("Reserved2")
    ).withName("_ENCLAVE_INIT_INFO_SGX");
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_SGX$struct$LAYOUT() { return _ENCLAVE_INIT_INFO_SGX$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_CREATE_INFO_VBS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        MemoryLayout.ofSequence(32, C_CHAR).withName("OwnerID")
    ).withName("_ENCLAVE_CREATE_INFO_VBS");
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_CREATE_INFO_VBS$struct$LAYOUT() { return _ENCLAVE_CREATE_INFO_VBS$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_CREATE_INFO_VBS$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_CREATE_INFO_VBS$Flags$LAYOUT() { return _ENCLAVE_CREATE_INFO_VBS$Flags$LAYOUT_; }

    static final VarHandle _ENCLAVE_CREATE_INFO_VBS$Flags$VH_ = _ENCLAVE_CREATE_INFO_VBS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _ENCLAVE_CREATE_INFO_VBS$Flags$VH() { return _ENCLAVE_CREATE_INFO_VBS$Flags$VH_; }

    static final MemoryLayout _ENCLAVE_CREATE_INFO_VBS_BASIC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        MemoryLayout.ofSequence(32, C_CHAR).withName("OwnerID")
    ).withName("_ENCLAVE_CREATE_INFO_VBS_BASIC");
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_CREATE_INFO_VBS_BASIC$struct$LAYOUT() { return _ENCLAVE_CREATE_INFO_VBS_BASIC$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$LAYOUT() { return _ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$LAYOUT_; }

    static final VarHandle _ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$VH_ = _ENCLAVE_CREATE_INFO_VBS_BASIC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$VH() { return _ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$VH_; }

    static final MemoryLayout _ENCLAVE_LOAD_DATA_VBS_BASIC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PageType")
    ).withName("_ENCLAVE_LOAD_DATA_VBS_BASIC");
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_LOAD_DATA_VBS_BASIC$struct$LAYOUT() { return _ENCLAVE_LOAD_DATA_VBS_BASIC$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$LAYOUT() { return _ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$LAYOUT_; }

    static final VarHandle _ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$VH_ = _ENCLAVE_LOAD_DATA_VBS_BASIC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PageType"));
    static final java.lang.invoke.VarHandle _ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$VH() { return _ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(16, C_CHAR).withName("FamilyId"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("ImageId"),
        C_LONGLONG.withName("EnclaveSize"),
        C_LONG.withName("EnclaveSvn"),
        C_LONG.withName("Reserved"),
        C_POINTER.withName("SignatureInfoHandle"),
        C_LONGLONG.withName("Unused")
    ).withName("_ENCLAVE_INIT_INFO_VBS_BASIC");
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$VH_ = _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnclaveSize"));
    static final java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$VH() { return _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$VH_ = _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EnclaveSvn"));
    static final java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$VH() { return _ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$VH_ = _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$VH() { return _ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$VH_ = MemoryHandles.asAddressVarHandle(_ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SignatureInfoHandle")));
    static final java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$VH() { return _ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$Unused$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS_BASIC$Unused$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS_BASIC$Unused$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$Unused$VH_ = _ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Unused"));
    static final java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS_BASIC$Unused$VH() { return _ENCLAVE_INIT_INFO_VBS_BASIC$Unused$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Length"),
        C_LONG.withName("ThreadCount")
    ).withName("_ENCLAVE_INIT_INFO_VBS");
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS$struct$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS$struct$LAYOUT_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS$Length$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS$Length$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS$Length$VH_ = _ENCLAVE_INIT_INFO_VBS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS$Length$VH() { return _ENCLAVE_INIT_INFO_VBS$Length$VH_; }

    static final MemoryLayout _ENCLAVE_INIT_INFO_VBS$ThreadCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCLAVE_INIT_INFO_VBS$ThreadCount$LAYOUT() { return _ENCLAVE_INIT_INFO_VBS$ThreadCount$LAYOUT_; }

    static final VarHandle _ENCLAVE_INIT_INFO_VBS$ThreadCount$VH_ = _ENCLAVE_INIT_INFO_VBS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ThreadCount"));
    static final java.lang.invoke.VarHandle _ENCLAVE_INIT_INFO_VBS$ThreadCount$VH() { return _ENCLAVE_INIT_INFO_VBS$ThreadCount$VH_; }

    static final MemoryLayout _FILE_ID_128$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(16, C_CHAR).withName("Identifier")
    ).withName("_FILE_ID_128");
    static final jdk.incubator.foreign.MemoryLayout _FILE_ID_128$struct$LAYOUT() { return _FILE_ID_128$struct$LAYOUT_; }

    static final MemoryLayout _FILE_NOTIFY_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NextEntryOffset"),
        C_LONG.withName("Action"),
        C_LONG.withName("FileNameLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_FILE_NOTIFY_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_INFORMATION$struct$LAYOUT() { return _FILE_NOTIFY_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _FILE_NOTIFY_INFORMATION$NextEntryOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_INFORMATION$NextEntryOffset$LAYOUT() { return _FILE_NOTIFY_INFORMATION$NextEntryOffset$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_INFORMATION$NextEntryOffset$VH_ = _FILE_NOTIFY_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextEntryOffset"));
    static final java.lang.invoke.VarHandle _FILE_NOTIFY_INFORMATION$NextEntryOffset$VH() { return _FILE_NOTIFY_INFORMATION$NextEntryOffset$VH_; }

    static final MemoryLayout _FILE_NOTIFY_INFORMATION$Action$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_INFORMATION$Action$LAYOUT() { return _FILE_NOTIFY_INFORMATION$Action$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_INFORMATION$Action$VH_ = _FILE_NOTIFY_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Action"));
    static final java.lang.invoke.VarHandle _FILE_NOTIFY_INFORMATION$Action$VH() { return _FILE_NOTIFY_INFORMATION$Action$VH_; }

    static final MemoryLayout _FILE_NOTIFY_INFORMATION$FileNameLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_INFORMATION$FileNameLength$LAYOUT() { return _FILE_NOTIFY_INFORMATION$FileNameLength$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_INFORMATION$FileNameLength$VH_ = _FILE_NOTIFY_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    static final java.lang.invoke.VarHandle _FILE_NOTIFY_INFORMATION$FileNameLength$VH() { return _FILE_NOTIFY_INFORMATION$FileNameLength$VH_; }

    static final MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NextEntryOffset"),
        C_LONG.withName("Action"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("CreationTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastModificationTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastChangeTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastAccessTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("AllocatedLength"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileSize"),
        C_LONG.withName("FileAttributes"),
        C_LONG.withName("ReparsePointTag"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileId"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ParentFileId"),
        C_LONG.withName("FileNameLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_FILE_NOTIFY_EXTENDED_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT() { return _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$LAYOUT() { return _FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$VH_ = _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextEntryOffset"));
    static final java.lang.invoke.VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$VH() { return _FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$VH_; }

    static final MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$Action$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$Action$LAYOUT() { return _FILE_NOTIFY_EXTENDED_INFORMATION$Action$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$Action$VH_ = _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Action"));
    static final java.lang.invoke.VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$Action$VH() { return _FILE_NOTIFY_EXTENDED_INFORMATION$Action$VH_; }

    static final MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$LAYOUT() { return _FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$VH_ = _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    static final java.lang.invoke.VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$VH() { return _FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$VH_; }

    static final MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$LAYOUT() { return _FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$VH_ = _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReparsePointTag"));
    static final java.lang.invoke.VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$VH() { return _FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$VH_; }

    static final MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$LAYOUT() { return _FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$LAYOUT_; }

    static final VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$VH_ = _FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    static final java.lang.invoke.VarHandle _FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$VH() { return _FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$VH_; }

    static final MemoryLayout _FILE_SEGMENT_ELEMENT$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("Buffer"),
        C_LONGLONG.withName("Alignment")
    ).withName("_FILE_SEGMENT_ELEMENT");
    static final jdk.incubator.foreign.MemoryLayout _FILE_SEGMENT_ELEMENT$union$LAYOUT() { return _FILE_SEGMENT_ELEMENT$union$LAYOUT_; }

    static final MemoryLayout _FILE_SEGMENT_ELEMENT$Buffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _FILE_SEGMENT_ELEMENT$Buffer$LAYOUT() { return _FILE_SEGMENT_ELEMENT$Buffer$LAYOUT_; }

    static final VarHandle _FILE_SEGMENT_ELEMENT$Buffer$VH_ = MemoryHandles.asAddressVarHandle(_FILE_SEGMENT_ELEMENT$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Buffer")));
    static final java.lang.invoke.VarHandle _FILE_SEGMENT_ELEMENT$Buffer$VH() { return _FILE_SEGMENT_ELEMENT$Buffer$VH_; }

    static final MemoryLayout _FILE_SEGMENT_ELEMENT$Alignment$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_SEGMENT_ELEMENT$Alignment$LAYOUT() { return _FILE_SEGMENT_ELEMENT$Alignment$LAYOUT_; }

    static final VarHandle _FILE_SEGMENT_ELEMENT$Alignment$VH_ = _FILE_SEGMENT_ELEMENT$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Alignment"));
    static final java.lang.invoke.VarHandle _FILE_SEGMENT_ELEMENT$Alignment$VH() { return _FILE_SEGMENT_ELEMENT$Alignment$VH_; }

    static final MemoryLayout _REPARSE_GUID_DATA_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ReparseTag"),
        C_SHORT.withName("ReparseDataLength"),
        C_SHORT.withName("Reserved"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ReparseGuid"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(1, C_CHAR).withName("DataBuffer")
        ).withName("GenericReparseBuffer"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_REPARSE_GUID_DATA_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _REPARSE_GUID_DATA_BUFFER$struct$LAYOUT() { return _REPARSE_GUID_DATA_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _REPARSE_GUID_DATA_BUFFER$ReparseTag$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REPARSE_GUID_DATA_BUFFER$ReparseTag$LAYOUT() { return _REPARSE_GUID_DATA_BUFFER$ReparseTag$LAYOUT_; }

    static final VarHandle _REPARSE_GUID_DATA_BUFFER$ReparseTag$VH_ = _REPARSE_GUID_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReparseTag"));
    static final java.lang.invoke.VarHandle _REPARSE_GUID_DATA_BUFFER$ReparseTag$VH() { return _REPARSE_GUID_DATA_BUFFER$ReparseTag$VH_; }

    static final MemoryLayout _REPARSE_GUID_DATA_BUFFER$ReparseDataLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _REPARSE_GUID_DATA_BUFFER$ReparseDataLength$LAYOUT() { return _REPARSE_GUID_DATA_BUFFER$ReparseDataLength$LAYOUT_; }

    static final VarHandle _REPARSE_GUID_DATA_BUFFER$ReparseDataLength$VH_ = _REPARSE_GUID_DATA_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ReparseDataLength"));
    static final java.lang.invoke.VarHandle _REPARSE_GUID_DATA_BUFFER$ReparseDataLength$VH() { return _REPARSE_GUID_DATA_BUFFER$ReparseDataLength$VH_; }

    static final MemoryLayout _REPARSE_GUID_DATA_BUFFER$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _REPARSE_GUID_DATA_BUFFER$Reserved$LAYOUT() { return _REPARSE_GUID_DATA_BUFFER$Reserved$LAYOUT_; }

    static final VarHandle _REPARSE_GUID_DATA_BUFFER$Reserved$VH_ = _REPARSE_GUID_DATA_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _REPARSE_GUID_DATA_BUFFER$Reserved$VH() { return _REPARSE_GUID_DATA_BUFFER$Reserved$VH_; }

    static final MemoryLayout _REPARSE_GUID_DATA_BUFFER$GenericReparseBuffer$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(1, C_CHAR).withName("DataBuffer")
    );
    static final jdk.incubator.foreign.MemoryLayout _REPARSE_GUID_DATA_BUFFER$GenericReparseBuffer$struct$LAYOUT() { return _REPARSE_GUID_DATA_BUFFER$GenericReparseBuffer$struct$LAYOUT_; }

    static final MemoryLayout _SCRUB_DATA_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_LONG.withName("MaximumIos"),
        MemoryLayout.ofSequence(4, C_LONG).withName("ObjectId"),
        MemoryLayout.ofSequence(25, C_LONG).withName("Reserved"),
        MemoryLayout.ofSequence(816, C_CHAR).withName("ResumeContext")
    ).withName("_SCRUB_DATA_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_INPUT$struct$LAYOUT() { return _SCRUB_DATA_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _SCRUB_DATA_INPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_INPUT$Size$LAYOUT() { return _SCRUB_DATA_INPUT$Size$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_INPUT$Size$VH_ = _SCRUB_DATA_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_INPUT$Size$VH() { return _SCRUB_DATA_INPUT$Size$VH_; }

    static final MemoryLayout _SCRUB_DATA_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_INPUT$Flags$LAYOUT() { return _SCRUB_DATA_INPUT$Flags$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_INPUT$Flags$VH_ = _SCRUB_DATA_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_INPUT$Flags$VH() { return _SCRUB_DATA_INPUT$Flags$VH_; }

    static final MemoryLayout _SCRUB_DATA_INPUT$MaximumIos$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_INPUT$MaximumIos$LAYOUT() { return _SCRUB_DATA_INPUT$MaximumIos$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_INPUT$MaximumIos$VH_ = _SCRUB_DATA_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaximumIos"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_INPUT$MaximumIos$VH() { return _SCRUB_DATA_INPUT$MaximumIos$VH_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Offset"),
        C_LONGLONG.withName("Length")
    ).withName("_SCRUB_PARITY_EXTENT");
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT$struct$LAYOUT() { return _SCRUB_PARITY_EXTENT$struct$LAYOUT_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT$Offset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT$Offset$LAYOUT() { return _SCRUB_PARITY_EXTENT$Offset$LAYOUT_; }

    static final VarHandle _SCRUB_PARITY_EXTENT$Offset$VH_ = _SCRUB_PARITY_EXTENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _SCRUB_PARITY_EXTENT$Offset$VH() { return _SCRUB_PARITY_EXTENT$Offset$VH_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT$Length$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT$Length$LAYOUT() { return _SCRUB_PARITY_EXTENT$Length$LAYOUT_; }

    static final VarHandle _SCRUB_PARITY_EXTENT$Length$VH_ = _SCRUB_PARITY_EXTENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _SCRUB_PARITY_EXTENT$Length$VH() { return _SCRUB_PARITY_EXTENT$Length$VH_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Size"),
        C_SHORT.withName("Flags"),
        C_SHORT.withName("NumberOfParityExtents"),
        C_SHORT.withName("MaximumNumberOfParityExtents"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Offset"),
            C_LONGLONG.withName("Length")
        ).withName("_SCRUB_PARITY_EXTENT")).withName("ParityExtents")
    ).withName("_SCRUB_PARITY_EXTENT_DATA");
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT_DATA$struct$LAYOUT() { return _SCRUB_PARITY_EXTENT_DATA$struct$LAYOUT_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT_DATA$Size$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT_DATA$Size$LAYOUT() { return _SCRUB_PARITY_EXTENT_DATA$Size$LAYOUT_; }

    static final VarHandle _SCRUB_PARITY_EXTENT_DATA$Size$VH_ = _SCRUB_PARITY_EXTENT_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCRUB_PARITY_EXTENT_DATA$Size$VH() { return _SCRUB_PARITY_EXTENT_DATA$Size$VH_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT_DATA$Flags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT_DATA$Flags$LAYOUT() { return _SCRUB_PARITY_EXTENT_DATA$Flags$LAYOUT_; }

    static final VarHandle _SCRUB_PARITY_EXTENT_DATA$Flags$VH_ = _SCRUB_PARITY_EXTENT_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SCRUB_PARITY_EXTENT_DATA$Flags$VH() { return _SCRUB_PARITY_EXTENT_DATA$Flags$VH_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT_DATA$NumberOfParityExtents$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT_DATA$NumberOfParityExtents$LAYOUT() { return _SCRUB_PARITY_EXTENT_DATA$NumberOfParityExtents$LAYOUT_; }

    static final VarHandle _SCRUB_PARITY_EXTENT_DATA$NumberOfParityExtents$VH_ = _SCRUB_PARITY_EXTENT_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfParityExtents"));
    static final java.lang.invoke.VarHandle _SCRUB_PARITY_EXTENT_DATA$NumberOfParityExtents$VH() { return _SCRUB_PARITY_EXTENT_DATA$NumberOfParityExtents$VH_; }

    static final MemoryLayout _SCRUB_PARITY_EXTENT_DATA$MaximumNumberOfParityExtents$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_PARITY_EXTENT_DATA$MaximumNumberOfParityExtents$LAYOUT() { return _SCRUB_PARITY_EXTENT_DATA$MaximumNumberOfParityExtents$LAYOUT_; }

    static final VarHandle _SCRUB_PARITY_EXTENT_DATA$MaximumNumberOfParityExtents$VH_ = _SCRUB_PARITY_EXTENT_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaximumNumberOfParityExtents"));
    static final java.lang.invoke.VarHandle _SCRUB_PARITY_EXTENT_DATA$MaximumNumberOfParityExtents$VH() { return _SCRUB_PARITY_EXTENT_DATA$MaximumNumberOfParityExtents$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_LONG.withName("Status"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("ErrorFileOffset"),
        C_LONGLONG.withName("ErrorLength"),
        C_LONGLONG.withName("NumberOfBytesRepaired"),
        C_LONGLONG.withName("NumberOfBytesFailed"),
        C_LONGLONG.withName("InternalFileReference"),
        C_SHORT.withName("ResumeContextLength"),
        C_SHORT.withName("ParityExtentDataOffset"),
        MemoryLayout.ofSequence(9, C_LONG).withName("Reserved"),
        C_LONGLONG.withName("NumberOfMetadataBytesProcessed"),
        C_LONGLONG.withName("NumberOfDataBytesProcessed"),
        C_LONGLONG.withName("TotalNumberOfMetadataBytesInUse"),
        C_LONGLONG.withName("TotalNumberOfDataBytesInUse"),
        MemoryLayout.ofSequence(816, C_CHAR).withName("ResumeContext")
    ).withName("_SCRUB_DATA_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$struct$LAYOUT() { return _SCRUB_DATA_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$Size$LAYOUT() { return _SCRUB_DATA_OUTPUT$Size$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$Size$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$Size$VH() { return _SCRUB_DATA_OUTPUT$Size$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$Flags$LAYOUT() { return _SCRUB_DATA_OUTPUT$Flags$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$Flags$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$Flags$VH() { return _SCRUB_DATA_OUTPUT$Flags$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$Status$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$Status$LAYOUT() { return _SCRUB_DATA_OUTPUT$Status$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$Status$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Status"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$Status$VH() { return _SCRUB_DATA_OUTPUT$Status$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$ErrorFileOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$ErrorFileOffset$LAYOUT() { return _SCRUB_DATA_OUTPUT$ErrorFileOffset$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$ErrorFileOffset$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ErrorFileOffset"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$ErrorFileOffset$VH() { return _SCRUB_DATA_OUTPUT$ErrorFileOffset$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$ErrorLength$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$ErrorLength$LAYOUT() { return _SCRUB_DATA_OUTPUT$ErrorLength$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$ErrorLength$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ErrorLength"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$ErrorLength$VH() { return _SCRUB_DATA_OUTPUT$ErrorLength$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$NumberOfBytesRepaired$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$NumberOfBytesRepaired$LAYOUT() { return _SCRUB_DATA_OUTPUT$NumberOfBytesRepaired$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$NumberOfBytesRepaired$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumberOfBytesRepaired"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$NumberOfBytesRepaired$VH() { return _SCRUB_DATA_OUTPUT$NumberOfBytesRepaired$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$NumberOfBytesFailed$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$NumberOfBytesFailed$LAYOUT() { return _SCRUB_DATA_OUTPUT$NumberOfBytesFailed$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$NumberOfBytesFailed$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumberOfBytesFailed"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$NumberOfBytesFailed$VH() { return _SCRUB_DATA_OUTPUT$NumberOfBytesFailed$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$InternalFileReference$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$InternalFileReference$LAYOUT() { return _SCRUB_DATA_OUTPUT$InternalFileReference$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$InternalFileReference$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("InternalFileReference"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$InternalFileReference$VH() { return _SCRUB_DATA_OUTPUT$InternalFileReference$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$ResumeContextLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$ResumeContextLength$LAYOUT() { return _SCRUB_DATA_OUTPUT$ResumeContextLength$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$ResumeContextLength$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ResumeContextLength"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$ResumeContextLength$VH() { return _SCRUB_DATA_OUTPUT$ResumeContextLength$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$ParityExtentDataOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$ParityExtentDataOffset$LAYOUT() { return _SCRUB_DATA_OUTPUT$ParityExtentDataOffset$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$ParityExtentDataOffset$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ParityExtentDataOffset"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$ParityExtentDataOffset$VH() { return _SCRUB_DATA_OUTPUT$ParityExtentDataOffset$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$NumberOfMetadataBytesProcessed$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$NumberOfMetadataBytesProcessed$LAYOUT() { return _SCRUB_DATA_OUTPUT$NumberOfMetadataBytesProcessed$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$NumberOfMetadataBytesProcessed$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumberOfMetadataBytesProcessed"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$NumberOfMetadataBytesProcessed$VH() { return _SCRUB_DATA_OUTPUT$NumberOfMetadataBytesProcessed$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$NumberOfDataBytesProcessed$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$NumberOfDataBytesProcessed$LAYOUT() { return _SCRUB_DATA_OUTPUT$NumberOfDataBytesProcessed$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$NumberOfDataBytesProcessed$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumberOfDataBytesProcessed"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$NumberOfDataBytesProcessed$VH() { return _SCRUB_DATA_OUTPUT$NumberOfDataBytesProcessed$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$TotalNumberOfMetadataBytesInUse$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$TotalNumberOfMetadataBytesInUse$LAYOUT() { return _SCRUB_DATA_OUTPUT$TotalNumberOfMetadataBytesInUse$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$TotalNumberOfMetadataBytesInUse$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalNumberOfMetadataBytesInUse"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$TotalNumberOfMetadataBytesInUse$VH() { return _SCRUB_DATA_OUTPUT$TotalNumberOfMetadataBytesInUse$VH_; }

    static final MemoryLayout _SCRUB_DATA_OUTPUT$TotalNumberOfDataBytesInUse$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCRUB_DATA_OUTPUT$TotalNumberOfDataBytesInUse$LAYOUT() { return _SCRUB_DATA_OUTPUT$TotalNumberOfDataBytesInUse$LAYOUT_; }

    static final VarHandle _SCRUB_DATA_OUTPUT$TotalNumberOfDataBytesInUse$VH_ = _SCRUB_DATA_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalNumberOfDataBytesInUse"));
    static final java.lang.invoke.VarHandle _SCRUB_DATA_OUTPUT$TotalNumberOfDataBytesInUse$VH() { return _SCRUB_DATA_OUTPUT$TotalNumberOfDataBytesInUse$VH_; }

    static final int SharedVirtualDisksUnsupported() { return (int)0L; }

    static final int SharedVirtualDisksSupported() { return (int)1L; }

    static final int SharedVirtualDiskSnapshotsSupported() { return (int)3L; }

    static final int SharedVirtualDiskCDPSnapshotsSupported() { return (int)7L; }

    static final int SharedVirtualDiskHandleStateNone() { return (int)0L; }

    static final int SharedVirtualDiskHandleStateFileShared() { return (int)1L; }

    static final int SharedVirtualDiskHandleStateHandleShared() { return (int)3L; }

    static final MemoryLayout _SHARED_VIRTUAL_DISK_SUPPORT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("SharedVirtualDiskSupport"),
        C_INT.withName("HandleState")
    ).withName("_SHARED_VIRTUAL_DISK_SUPPORT");
    static final jdk.incubator.foreign.MemoryLayout _SHARED_VIRTUAL_DISK_SUPPORT$struct$LAYOUT() { return _SHARED_VIRTUAL_DISK_SUPPORT$struct$LAYOUT_; }

    static final MemoryLayout _SHARED_VIRTUAL_DISK_SUPPORT$SharedVirtualDiskSupport$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SHARED_VIRTUAL_DISK_SUPPORT$SharedVirtualDiskSupport$LAYOUT() { return _SHARED_VIRTUAL_DISK_SUPPORT$SharedVirtualDiskSupport$LAYOUT_; }

    static final VarHandle _SHARED_VIRTUAL_DISK_SUPPORT$SharedVirtualDiskSupport$VH_ = _SHARED_VIRTUAL_DISK_SUPPORT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SharedVirtualDiskSupport"));
    static final java.lang.invoke.VarHandle _SHARED_VIRTUAL_DISK_SUPPORT$SharedVirtualDiskSupport$VH() { return _SHARED_VIRTUAL_DISK_SUPPORT$SharedVirtualDiskSupport$VH_; }

    static final MemoryLayout _SHARED_VIRTUAL_DISK_SUPPORT$HandleState$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SHARED_VIRTUAL_DISK_SUPPORT$HandleState$LAYOUT() { return _SHARED_VIRTUAL_DISK_SUPPORT$HandleState$LAYOUT_; }

    static final VarHandle _SHARED_VIRTUAL_DISK_SUPPORT$HandleState$VH_ = _SHARED_VIRTUAL_DISK_SUPPORT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HandleState"));
    static final java.lang.invoke.VarHandle _SHARED_VIRTUAL_DISK_SUPPORT$HandleState$VH() { return _SHARED_VIRTUAL_DISK_SUPPORT$HandleState$VH_; }

    static final MemoryLayout _REARRANGE_FILE_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("SourceStartingOffset"),
        C_LONGLONG.withName("TargetOffset"),
        C_POINTER.withName("SourceFileHandle"),
        C_LONG.withName("Length"),
        C_LONG.withName("Flags")
    ).withName("_REARRANGE_FILE_DATA");
    static final jdk.incubator.foreign.MemoryLayout _REARRANGE_FILE_DATA$struct$LAYOUT() { return _REARRANGE_FILE_DATA$struct$LAYOUT_; }

    static final MemoryLayout _REARRANGE_FILE_DATA$SourceStartingOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _REARRANGE_FILE_DATA$SourceStartingOffset$LAYOUT() { return _REARRANGE_FILE_DATA$SourceStartingOffset$LAYOUT_; }

    static final VarHandle _REARRANGE_FILE_DATA$SourceStartingOffset$VH_ = _REARRANGE_FILE_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SourceStartingOffset"));
    static final java.lang.invoke.VarHandle _REARRANGE_FILE_DATA$SourceStartingOffset$VH() { return _REARRANGE_FILE_DATA$SourceStartingOffset$VH_; }

    static final MemoryLayout _REARRANGE_FILE_DATA$TargetOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _REARRANGE_FILE_DATA$TargetOffset$LAYOUT() { return _REARRANGE_FILE_DATA$TargetOffset$LAYOUT_; }

    static final VarHandle _REARRANGE_FILE_DATA$TargetOffset$VH_ = _REARRANGE_FILE_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TargetOffset"));
    static final java.lang.invoke.VarHandle _REARRANGE_FILE_DATA$TargetOffset$VH() { return _REARRANGE_FILE_DATA$TargetOffset$VH_; }

    static final MemoryLayout _REARRANGE_FILE_DATA$SourceFileHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _REARRANGE_FILE_DATA$SourceFileHandle$LAYOUT() { return _REARRANGE_FILE_DATA$SourceFileHandle$LAYOUT_; }

    static final VarHandle _REARRANGE_FILE_DATA$SourceFileHandle$VH_ = MemoryHandles.asAddressVarHandle(_REARRANGE_FILE_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SourceFileHandle")));
    static final java.lang.invoke.VarHandle _REARRANGE_FILE_DATA$SourceFileHandle$VH() { return _REARRANGE_FILE_DATA$SourceFileHandle$VH_; }

    static final MemoryLayout _REARRANGE_FILE_DATA$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REARRANGE_FILE_DATA$Length$LAYOUT() { return _REARRANGE_FILE_DATA$Length$LAYOUT_; }

    static final VarHandle _REARRANGE_FILE_DATA$Length$VH_ = _REARRANGE_FILE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _REARRANGE_FILE_DATA$Length$VH() { return _REARRANGE_FILE_DATA$Length$VH_; }

    static final MemoryLayout _REARRANGE_FILE_DATA$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REARRANGE_FILE_DATA$Flags$LAYOUT() { return _REARRANGE_FILE_DATA$Flags$LAYOUT_; }

    static final VarHandle _REARRANGE_FILE_DATA$Flags$VH_ = _REARRANGE_FILE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _REARRANGE_FILE_DATA$Flags$VH() { return _REARRANGE_FILE_DATA$Flags$VH_; }

    static final MemoryLayout _REARRANGE_FILE_DATA32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("SourceStartingOffset"),
        C_LONGLONG.withName("TargetOffset"),
        C_INT.withName("SourceFileHandle"),
        C_LONG.withName("Length"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_REARRANGE_FILE_DATA32");
    static final jdk.incubator.foreign.MemoryLayout _REARRANGE_FILE_DATA32$struct$LAYOUT() { return _REARRANGE_FILE_DATA32$struct$LAYOUT_; }

    static final MemoryLayout _REARRANGE_FILE_DATA32$SourceStartingOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _REARRANGE_FILE_DATA32$SourceStartingOffset$LAYOUT() { return _REARRANGE_FILE_DATA32$SourceStartingOffset$LAYOUT_; }

    static final VarHandle _REARRANGE_FILE_DATA32$SourceStartingOffset$VH_ = _REARRANGE_FILE_DATA32$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SourceStartingOffset"));
    static final java.lang.invoke.VarHandle _REARRANGE_FILE_DATA32$SourceStartingOffset$VH() { return _REARRANGE_FILE_DATA32$SourceStartingOffset$VH_; }

    static final MemoryLayout _REARRANGE_FILE_DATA32$TargetOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _REARRANGE_FILE_DATA32$TargetOffset$LAYOUT() { return _REARRANGE_FILE_DATA32$TargetOffset$LAYOUT_; }

    static final VarHandle _REARRANGE_FILE_DATA32$TargetOffset$VH_ = _REARRANGE_FILE_DATA32$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TargetOffset"));
    static final java.lang.invoke.VarHandle _REARRANGE_FILE_DATA32$TargetOffset$VH() { return _REARRANGE_FILE_DATA32$TargetOffset$VH_; }

    static final MemoryLayout _REARRANGE_FILE_DATA32$SourceFileHandle$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _REARRANGE_FILE_DATA32$SourceFileHandle$LAYOUT() { return _REARRANGE_FILE_DATA32$SourceFileHandle$LAYOUT_; }

    static final VarHandle _REARRANGE_FILE_DATA32$SourceFileHandle$VH_ = _REARRANGE_FILE_DATA32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SourceFileHandle"));
    static final java.lang.invoke.VarHandle _REARRANGE_FILE_DATA32$SourceFileHandle$VH() { return _REARRANGE_FILE_DATA32$SourceFileHandle$VH_; }

    static final MemoryLayout _REARRANGE_FILE_DATA32$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REARRANGE_FILE_DATA32$Length$LAYOUT() { return _REARRANGE_FILE_DATA32$Length$LAYOUT_; }

    static final VarHandle _REARRANGE_FILE_DATA32$Length$VH_ = _REARRANGE_FILE_DATA32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _REARRANGE_FILE_DATA32$Length$VH() { return _REARRANGE_FILE_DATA32$Length$VH_; }

    static final MemoryLayout _REARRANGE_FILE_DATA32$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REARRANGE_FILE_DATA32$Flags$LAYOUT() { return _REARRANGE_FILE_DATA32$Flags$LAYOUT_; }

    static final VarHandle _REARRANGE_FILE_DATA32$Flags$VH_ = _REARRANGE_FILE_DATA32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _REARRANGE_FILE_DATA32$Flags$VH() { return _REARRANGE_FILE_DATA32$Flags$VH_; }

    static final MemoryLayout _SHUFFLE_FILE_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartingOffset"),
        C_LONGLONG.withName("Length"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_SHUFFLE_FILE_DATA");
    static final jdk.incubator.foreign.MemoryLayout _SHUFFLE_FILE_DATA$struct$LAYOUT() { return _SHUFFLE_FILE_DATA$struct$LAYOUT_; }

    static final MemoryLayout _SHUFFLE_FILE_DATA$StartingOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SHUFFLE_FILE_DATA$StartingOffset$LAYOUT() { return _SHUFFLE_FILE_DATA$StartingOffset$LAYOUT_; }

    static final VarHandle _SHUFFLE_FILE_DATA$StartingOffset$VH_ = _SHUFFLE_FILE_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartingOffset"));
    static final java.lang.invoke.VarHandle _SHUFFLE_FILE_DATA$StartingOffset$VH() { return _SHUFFLE_FILE_DATA$StartingOffset$VH_; }

    static final MemoryLayout _SHUFFLE_FILE_DATA$Length$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SHUFFLE_FILE_DATA$Length$LAYOUT() { return _SHUFFLE_FILE_DATA$Length$LAYOUT_; }

    static final VarHandle _SHUFFLE_FILE_DATA$Length$VH_ = _SHUFFLE_FILE_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _SHUFFLE_FILE_DATA$Length$VH() { return _SHUFFLE_FILE_DATA$Length$VH_; }

    static final MemoryLayout _SHUFFLE_FILE_DATA$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SHUFFLE_FILE_DATA$Flags$LAYOUT() { return _SHUFFLE_FILE_DATA$Flags$LAYOUT_; }

    static final VarHandle _SHUFFLE_FILE_DATA$Flags$VH_ = _SHUFFLE_FILE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SHUFFLE_FILE_DATA$Flags$VH() { return _SHUFFLE_FILE_DATA$Flags$VH_; }

    static final MemoryLayout _NETWORK_APP_INSTANCE_EA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("AppInstanceID"),
        C_LONG.withName("CsvFlags")
    ).withName("_NETWORK_APP_INSTANCE_EA");
    static final jdk.incubator.foreign.MemoryLayout _NETWORK_APP_INSTANCE_EA$struct$LAYOUT() { return _NETWORK_APP_INSTANCE_EA$struct$LAYOUT_; }

    static final MemoryLayout _NETWORK_APP_INSTANCE_EA$CsvFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NETWORK_APP_INSTANCE_EA$CsvFlags$LAYOUT() { return _NETWORK_APP_INSTANCE_EA$CsvFlags$LAYOUT_; }

    static final VarHandle _NETWORK_APP_INSTANCE_EA$CsvFlags$VH_ = _NETWORK_APP_INSTANCE_EA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CsvFlags"));
    static final java.lang.invoke.VarHandle _NETWORK_APP_INSTANCE_EA$CsvFlags$VH() { return _NETWORK_APP_INSTANCE_EA$CsvFlags$VH_; }

    static final MemoryLayout GUID_MAX_POWER_SAVINGS$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_MAX_POWER_SAVINGS$LAYOUT() { return GUID_MAX_POWER_SAVINGS$LAYOUT_; }

    static final MemorySegment GUID_MAX_POWER_SAVINGS$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_MAX_POWER_SAVINGS", GUID_MAX_POWER_SAVINGS$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_MAX_POWER_SAVINGS$SEGMENT() { return GUID_MAX_POWER_SAVINGS$SEGMENT_; }

    static final MemoryLayout GUID_MIN_POWER_SAVINGS$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_MIN_POWER_SAVINGS$LAYOUT() { return GUID_MIN_POWER_SAVINGS$LAYOUT_; }

    static final MemorySegment GUID_MIN_POWER_SAVINGS$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_MIN_POWER_SAVINGS", GUID_MIN_POWER_SAVINGS$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_MIN_POWER_SAVINGS$SEGMENT() { return GUID_MIN_POWER_SAVINGS$SEGMENT_; }

    static final MemoryLayout GUID_TYPICAL_POWER_SAVINGS$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_TYPICAL_POWER_SAVINGS$LAYOUT() { return GUID_TYPICAL_POWER_SAVINGS$LAYOUT_; }

    static final MemorySegment GUID_TYPICAL_POWER_SAVINGS$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_TYPICAL_POWER_SAVINGS", GUID_TYPICAL_POWER_SAVINGS$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_TYPICAL_POWER_SAVINGS$SEGMENT() { return GUID_TYPICAL_POWER_SAVINGS$SEGMENT_; }

    static final MemoryLayout NO_SUBGROUP_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout NO_SUBGROUP_GUID$LAYOUT() { return NO_SUBGROUP_GUID$LAYOUT_; }

    static final MemorySegment NO_SUBGROUP_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "NO_SUBGROUP_GUID", NO_SUBGROUP_GUID$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment NO_SUBGROUP_GUID$SEGMENT() { return NO_SUBGROUP_GUID$SEGMENT_; }

    static final MemoryLayout ALL_POWERSCHEMES_GUID$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout ALL_POWERSCHEMES_GUID$LAYOUT() { return ALL_POWERSCHEMES_GUID$LAYOUT_; }

    static final MemorySegment ALL_POWERSCHEMES_GUID$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "ALL_POWERSCHEMES_GUID", ALL_POWERSCHEMES_GUID$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment ALL_POWERSCHEMES_GUID$SEGMENT() { return ALL_POWERSCHEMES_GUID$SEGMENT_; }

    static final MemoryLayout GUID_POWERSCHEME_PERSONALITY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_POWERSCHEME_PERSONALITY$LAYOUT() { return GUID_POWERSCHEME_PERSONALITY$LAYOUT_; }

    static final MemorySegment GUID_POWERSCHEME_PERSONALITY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_POWERSCHEME_PERSONALITY", GUID_POWERSCHEME_PERSONALITY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_POWERSCHEME_PERSONALITY$SEGMENT() { return GUID_POWERSCHEME_PERSONALITY$SEGMENT_; }

    static final MemoryLayout GUID_ACTIVE_POWERSCHEME$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ACTIVE_POWERSCHEME$LAYOUT() { return GUID_ACTIVE_POWERSCHEME$LAYOUT_; }

    static final MemorySegment GUID_ACTIVE_POWERSCHEME$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ACTIVE_POWERSCHEME", GUID_ACTIVE_POWERSCHEME$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ACTIVE_POWERSCHEME$SEGMENT() { return GUID_ACTIVE_POWERSCHEME$SEGMENT_; }

    static final MemoryLayout GUID_IDLE_RESILIENCY_SUBGROUP$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_IDLE_RESILIENCY_SUBGROUP$LAYOUT() { return GUID_IDLE_RESILIENCY_SUBGROUP$LAYOUT_; }

    static final MemorySegment GUID_IDLE_RESILIENCY_SUBGROUP$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_IDLE_RESILIENCY_SUBGROUP", GUID_IDLE_RESILIENCY_SUBGROUP$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_IDLE_RESILIENCY_SUBGROUP$SEGMENT() { return GUID_IDLE_RESILIENCY_SUBGROUP$SEGMENT_; }

    static final MemoryLayout GUID_IDLE_RESILIENCY_PERIOD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_IDLE_RESILIENCY_PERIOD$LAYOUT() { return GUID_IDLE_RESILIENCY_PERIOD$LAYOUT_; }

    static final MemorySegment GUID_IDLE_RESILIENCY_PERIOD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_IDLE_RESILIENCY_PERIOD", GUID_IDLE_RESILIENCY_PERIOD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_IDLE_RESILIENCY_PERIOD$SEGMENT() { return GUID_IDLE_RESILIENCY_PERIOD$SEGMENT_; }

    static final MemoryLayout GUID_DEEP_SLEEP_ENABLED$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DEEP_SLEEP_ENABLED$LAYOUT() { return GUID_DEEP_SLEEP_ENABLED$LAYOUT_; }

    static final MemorySegment GUID_DEEP_SLEEP_ENABLED$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DEEP_SLEEP_ENABLED", GUID_DEEP_SLEEP_ENABLED$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DEEP_SLEEP_ENABLED$SEGMENT() { return GUID_DEEP_SLEEP_ENABLED$SEGMENT_; }

    static final MemoryLayout GUID_DEEP_SLEEP_PLATFORM_STATE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DEEP_SLEEP_PLATFORM_STATE$LAYOUT() { return GUID_DEEP_SLEEP_PLATFORM_STATE$LAYOUT_; }

    static final MemorySegment GUID_DEEP_SLEEP_PLATFORM_STATE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DEEP_SLEEP_PLATFORM_STATE", GUID_DEEP_SLEEP_PLATFORM_STATE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DEEP_SLEEP_PLATFORM_STATE$SEGMENT() { return GUID_DEEP_SLEEP_PLATFORM_STATE$SEGMENT_; }

    static final MemoryLayout GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$LAYOUT() { return GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$LAYOUT_; }

    static final MemorySegment GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DISK_COALESCING_POWERDOWN_TIMEOUT", GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$SEGMENT() { return GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$SEGMENT_; }

    static final MemoryLayout GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$LAYOUT() { return GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$LAYOUT_; }

    static final MemorySegment GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT", GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$SEGMENT() { return GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$SEGMENT_; }

    static final MemoryLayout GUID_VIDEO_SUBGROUP$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_VIDEO_SUBGROUP$LAYOUT() { return GUID_VIDEO_SUBGROUP$LAYOUT_; }

    static final MemorySegment GUID_VIDEO_SUBGROUP$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_VIDEO_SUBGROUP", GUID_VIDEO_SUBGROUP$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_VIDEO_SUBGROUP$SEGMENT() { return GUID_VIDEO_SUBGROUP$SEGMENT_; }

    static final MemoryLayout GUID_VIDEO_POWERDOWN_TIMEOUT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_VIDEO_POWERDOWN_TIMEOUT$LAYOUT() { return GUID_VIDEO_POWERDOWN_TIMEOUT$LAYOUT_; }

    static final MemorySegment GUID_VIDEO_POWERDOWN_TIMEOUT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_VIDEO_POWERDOWN_TIMEOUT", GUID_VIDEO_POWERDOWN_TIMEOUT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_VIDEO_POWERDOWN_TIMEOUT$SEGMENT() { return GUID_VIDEO_POWERDOWN_TIMEOUT$SEGMENT_; }

    static final MemoryLayout GUID_VIDEO_ANNOYANCE_TIMEOUT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_VIDEO_ANNOYANCE_TIMEOUT$LAYOUT() { return GUID_VIDEO_ANNOYANCE_TIMEOUT$LAYOUT_; }

    static final MemorySegment GUID_VIDEO_ANNOYANCE_TIMEOUT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_VIDEO_ANNOYANCE_TIMEOUT", GUID_VIDEO_ANNOYANCE_TIMEOUT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_VIDEO_ANNOYANCE_TIMEOUT$SEGMENT() { return GUID_VIDEO_ANNOYANCE_TIMEOUT$SEGMENT_; }

    static final MemoryLayout GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$LAYOUT() { return GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$LAYOUT_; }

    static final MemorySegment GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE", GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$SEGMENT() { return GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$SEGMENT_; }

    static final MemoryLayout GUID_VIDEO_DIM_TIMEOUT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_VIDEO_DIM_TIMEOUT$LAYOUT() { return GUID_VIDEO_DIM_TIMEOUT$LAYOUT_; }

    static final MemorySegment GUID_VIDEO_DIM_TIMEOUT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_VIDEO_DIM_TIMEOUT", GUID_VIDEO_DIM_TIMEOUT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_VIDEO_DIM_TIMEOUT$SEGMENT() { return GUID_VIDEO_DIM_TIMEOUT$SEGMENT_; }

    static final MemoryLayout GUID_VIDEO_ADAPTIVE_POWERDOWN$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_VIDEO_ADAPTIVE_POWERDOWN$LAYOUT() { return GUID_VIDEO_ADAPTIVE_POWERDOWN$LAYOUT_; }

    static final MemorySegment GUID_VIDEO_ADAPTIVE_POWERDOWN$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_VIDEO_ADAPTIVE_POWERDOWN", GUID_VIDEO_ADAPTIVE_POWERDOWN$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_VIDEO_ADAPTIVE_POWERDOWN$SEGMENT() { return GUID_VIDEO_ADAPTIVE_POWERDOWN$SEGMENT_; }

    static final MemoryLayout GUID_MONITOR_POWER_ON$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_MONITOR_POWER_ON$LAYOUT() { return GUID_MONITOR_POWER_ON$LAYOUT_; }

    static final MemorySegment GUID_MONITOR_POWER_ON$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_MONITOR_POWER_ON", GUID_MONITOR_POWER_ON$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_MONITOR_POWER_ON$SEGMENT() { return GUID_MONITOR_POWER_ON$SEGMENT_; }

    static final MemoryLayout GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$LAYOUT() { return GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$LAYOUT_; }

    static final MemorySegment GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS", GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$SEGMENT() { return GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$SEGMENT_; }

    static final MemoryLayout GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$LAYOUT() { return GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$LAYOUT_; }

    static final MemorySegment GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS", GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$SEGMENT() { return GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$SEGMENT_; }

    static final MemoryLayout GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$LAYOUT() { return GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$LAYOUT_; }

    static final MemorySegment GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS", GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$SEGMENT() { return GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$SEGMENT_; }

    static final MemoryLayout GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$LAYOUT() { return GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$LAYOUT_; }

    static final MemorySegment GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS", GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$SEGMENT() { return GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$SEGMENT_; }

    static final MemoryLayout GUID_CONSOLE_DISPLAY_STATE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_CONSOLE_DISPLAY_STATE$LAYOUT() { return GUID_CONSOLE_DISPLAY_STATE$LAYOUT_; }

    static final MemorySegment GUID_CONSOLE_DISPLAY_STATE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_CONSOLE_DISPLAY_STATE", GUID_CONSOLE_DISPLAY_STATE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_CONSOLE_DISPLAY_STATE$SEGMENT() { return GUID_CONSOLE_DISPLAY_STATE$SEGMENT_; }

    static final MemoryLayout GUID_ALLOW_DISPLAY_REQUIRED$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ALLOW_DISPLAY_REQUIRED$LAYOUT() { return GUID_ALLOW_DISPLAY_REQUIRED$LAYOUT_; }

    static final MemorySegment GUID_ALLOW_DISPLAY_REQUIRED$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ALLOW_DISPLAY_REQUIRED", GUID_ALLOW_DISPLAY_REQUIRED$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ALLOW_DISPLAY_REQUIRED$SEGMENT() { return GUID_ALLOW_DISPLAY_REQUIRED$SEGMENT_; }

    static final MemoryLayout GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$LAYOUT() { return GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$LAYOUT_; }

    static final MemorySegment GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_VIDEO_CONSOLE_LOCK_TIMEOUT", GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$SEGMENT() { return GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$SEGMENT_; }

    static final MemoryLayout GUID_ADVANCED_COLOR_QUALITY_BIAS$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ADVANCED_COLOR_QUALITY_BIAS$LAYOUT() { return GUID_ADVANCED_COLOR_QUALITY_BIAS$LAYOUT_; }

    static final MemorySegment GUID_ADVANCED_COLOR_QUALITY_BIAS$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ADVANCED_COLOR_QUALITY_BIAS", GUID_ADVANCED_COLOR_QUALITY_BIAS$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ADVANCED_COLOR_QUALITY_BIAS$SEGMENT() { return GUID_ADVANCED_COLOR_QUALITY_BIAS$SEGMENT_; }

    static final MemoryLayout GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$LAYOUT() { return GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$LAYOUT_; }

    static final MemorySegment GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP", GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$SEGMENT() { return GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$SEGMENT_; }

    static final MemoryLayout GUID_NON_ADAPTIVE_INPUT_TIMEOUT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_NON_ADAPTIVE_INPUT_TIMEOUT$LAYOUT() { return GUID_NON_ADAPTIVE_INPUT_TIMEOUT$LAYOUT_; }

    static final MemorySegment GUID_NON_ADAPTIVE_INPUT_TIMEOUT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_NON_ADAPTIVE_INPUT_TIMEOUT", GUID_NON_ADAPTIVE_INPUT_TIMEOUT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_NON_ADAPTIVE_INPUT_TIMEOUT$SEGMENT() { return GUID_NON_ADAPTIVE_INPUT_TIMEOUT$SEGMENT_; }

    static final MemoryLayout GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$LAYOUT() { return GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$LAYOUT_; }

    static final MemorySegment GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ADAPTIVE_INPUT_CONTROLLER_STATE", GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$SEGMENT() { return GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$SEGMENT_; }

    static final MemoryLayout GUID_DISK_SUBGROUP$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DISK_SUBGROUP$LAYOUT() { return GUID_DISK_SUBGROUP$LAYOUT_; }

    static final MemorySegment GUID_DISK_SUBGROUP$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DISK_SUBGROUP", GUID_DISK_SUBGROUP$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DISK_SUBGROUP$SEGMENT() { return GUID_DISK_SUBGROUP$SEGMENT_; }

    static final MemoryLayout GUID_DISK_MAX_POWER$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DISK_MAX_POWER$LAYOUT() { return GUID_DISK_MAX_POWER$LAYOUT_; }

    static final MemorySegment GUID_DISK_MAX_POWER$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DISK_MAX_POWER", GUID_DISK_MAX_POWER$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DISK_MAX_POWER$SEGMENT() { return GUID_DISK_MAX_POWER$SEGMENT_; }

    static final MemoryLayout GUID_DISK_POWERDOWN_TIMEOUT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DISK_POWERDOWN_TIMEOUT$LAYOUT() { return GUID_DISK_POWERDOWN_TIMEOUT$LAYOUT_; }

    static final MemorySegment GUID_DISK_POWERDOWN_TIMEOUT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DISK_POWERDOWN_TIMEOUT", GUID_DISK_POWERDOWN_TIMEOUT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DISK_POWERDOWN_TIMEOUT$SEGMENT() { return GUID_DISK_POWERDOWN_TIMEOUT$SEGMENT_; }

    static final MemoryLayout GUID_DISK_IDLE_TIMEOUT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DISK_IDLE_TIMEOUT$LAYOUT() { return GUID_DISK_IDLE_TIMEOUT$LAYOUT_; }

    static final MemorySegment GUID_DISK_IDLE_TIMEOUT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DISK_IDLE_TIMEOUT", GUID_DISK_IDLE_TIMEOUT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DISK_IDLE_TIMEOUT$SEGMENT() { return GUID_DISK_IDLE_TIMEOUT$SEGMENT_; }

    static final MemoryLayout GUID_DISK_BURST_IGNORE_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DISK_BURST_IGNORE_THRESHOLD$LAYOUT() { return GUID_DISK_BURST_IGNORE_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_DISK_BURST_IGNORE_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DISK_BURST_IGNORE_THRESHOLD", GUID_DISK_BURST_IGNORE_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DISK_BURST_IGNORE_THRESHOLD$SEGMENT() { return GUID_DISK_BURST_IGNORE_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_DISK_ADAPTIVE_POWERDOWN$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DISK_ADAPTIVE_POWERDOWN$LAYOUT() { return GUID_DISK_ADAPTIVE_POWERDOWN$LAYOUT_; }

    static final MemorySegment GUID_DISK_ADAPTIVE_POWERDOWN$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DISK_ADAPTIVE_POWERDOWN", GUID_DISK_ADAPTIVE_POWERDOWN$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DISK_ADAPTIVE_POWERDOWN$SEGMENT() { return GUID_DISK_ADAPTIVE_POWERDOWN$SEGMENT_; }

    static final MemoryLayout GUID_DISK_NVME_NOPPME$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_DISK_NVME_NOPPME$LAYOUT() { return GUID_DISK_NVME_NOPPME$LAYOUT_; }

    static final MemorySegment GUID_DISK_NVME_NOPPME$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_DISK_NVME_NOPPME", GUID_DISK_NVME_NOPPME$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_DISK_NVME_NOPPME$SEGMENT() { return GUID_DISK_NVME_NOPPME$SEGMENT_; }

    static final MemoryLayout GUID_SLEEP_SUBGROUP$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_SLEEP_SUBGROUP$LAYOUT() { return GUID_SLEEP_SUBGROUP$LAYOUT_; }

    static final MemorySegment GUID_SLEEP_SUBGROUP$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_SLEEP_SUBGROUP", GUID_SLEEP_SUBGROUP$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_SLEEP_SUBGROUP$SEGMENT() { return GUID_SLEEP_SUBGROUP$SEGMENT_; }

    static final MemoryLayout GUID_SLEEP_IDLE_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_SLEEP_IDLE_THRESHOLD$LAYOUT() { return GUID_SLEEP_IDLE_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_SLEEP_IDLE_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_SLEEP_IDLE_THRESHOLD", GUID_SLEEP_IDLE_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_SLEEP_IDLE_THRESHOLD$SEGMENT() { return GUID_SLEEP_IDLE_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_STANDBY_TIMEOUT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_STANDBY_TIMEOUT$LAYOUT() { return GUID_STANDBY_TIMEOUT$LAYOUT_; }

    static final MemorySegment GUID_STANDBY_TIMEOUT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_STANDBY_TIMEOUT", GUID_STANDBY_TIMEOUT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_STANDBY_TIMEOUT$SEGMENT() { return GUID_STANDBY_TIMEOUT$SEGMENT_; }

    static final MemoryLayout GUID_UNATTEND_SLEEP_TIMEOUT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_UNATTEND_SLEEP_TIMEOUT$LAYOUT() { return GUID_UNATTEND_SLEEP_TIMEOUT$LAYOUT_; }

    static final MemorySegment GUID_UNATTEND_SLEEP_TIMEOUT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_UNATTEND_SLEEP_TIMEOUT", GUID_UNATTEND_SLEEP_TIMEOUT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_UNATTEND_SLEEP_TIMEOUT$SEGMENT() { return GUID_UNATTEND_SLEEP_TIMEOUT$SEGMENT_; }

    static final MemoryLayout GUID_HIBERNATE_TIMEOUT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_HIBERNATE_TIMEOUT$LAYOUT() { return GUID_HIBERNATE_TIMEOUT$LAYOUT_; }

    static final MemorySegment GUID_HIBERNATE_TIMEOUT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_HIBERNATE_TIMEOUT", GUID_HIBERNATE_TIMEOUT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_HIBERNATE_TIMEOUT$SEGMENT() { return GUID_HIBERNATE_TIMEOUT$SEGMENT_; }

    static final MemoryLayout GUID_HIBERNATE_FASTS4_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_HIBERNATE_FASTS4_POLICY$LAYOUT() { return GUID_HIBERNATE_FASTS4_POLICY$LAYOUT_; }

    static final MemorySegment GUID_HIBERNATE_FASTS4_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_HIBERNATE_FASTS4_POLICY", GUID_HIBERNATE_FASTS4_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_HIBERNATE_FASTS4_POLICY$SEGMENT() { return GUID_HIBERNATE_FASTS4_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_CRITICAL_POWER_TRANSITION$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_CRITICAL_POWER_TRANSITION$LAYOUT() { return GUID_CRITICAL_POWER_TRANSITION$LAYOUT_; }

    static final MemorySegment GUID_CRITICAL_POWER_TRANSITION$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_CRITICAL_POWER_TRANSITION", GUID_CRITICAL_POWER_TRANSITION$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_CRITICAL_POWER_TRANSITION$SEGMENT() { return GUID_CRITICAL_POWER_TRANSITION$SEGMENT_; }

    static final MemoryLayout GUID_SYSTEM_AWAYMODE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_SYSTEM_AWAYMODE$LAYOUT() { return GUID_SYSTEM_AWAYMODE$LAYOUT_; }

    static final MemorySegment GUID_SYSTEM_AWAYMODE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_SYSTEM_AWAYMODE", GUID_SYSTEM_AWAYMODE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_SYSTEM_AWAYMODE$SEGMENT() { return GUID_SYSTEM_AWAYMODE$SEGMENT_; }

    static final MemoryLayout GUID_ALLOW_AWAYMODE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ALLOW_AWAYMODE$LAYOUT() { return GUID_ALLOW_AWAYMODE$LAYOUT_; }

    static final MemorySegment GUID_ALLOW_AWAYMODE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ALLOW_AWAYMODE", GUID_ALLOW_AWAYMODE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ALLOW_AWAYMODE$SEGMENT() { return GUID_ALLOW_AWAYMODE$SEGMENT_; }

    static final MemoryLayout GUID_USER_PRESENCE_PREDICTION$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_USER_PRESENCE_PREDICTION$LAYOUT() { return GUID_USER_PRESENCE_PREDICTION$LAYOUT_; }

    static final MemorySegment GUID_USER_PRESENCE_PREDICTION$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_USER_PRESENCE_PREDICTION", GUID_USER_PRESENCE_PREDICTION$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_USER_PRESENCE_PREDICTION$SEGMENT() { return GUID_USER_PRESENCE_PREDICTION$SEGMENT_; }

    static final MemoryLayout GUID_STANDBY_BUDGET_GRACE_PERIOD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_STANDBY_BUDGET_GRACE_PERIOD$LAYOUT() { return GUID_STANDBY_BUDGET_GRACE_PERIOD$LAYOUT_; }

    static final MemorySegment GUID_STANDBY_BUDGET_GRACE_PERIOD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_STANDBY_BUDGET_GRACE_PERIOD", GUID_STANDBY_BUDGET_GRACE_PERIOD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_STANDBY_BUDGET_GRACE_PERIOD$SEGMENT() { return GUID_STANDBY_BUDGET_GRACE_PERIOD$SEGMENT_; }

    static final MemoryLayout GUID_STANDBY_BUDGET_PERCENT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_STANDBY_BUDGET_PERCENT$LAYOUT() { return GUID_STANDBY_BUDGET_PERCENT$LAYOUT_; }

    static final MemorySegment GUID_STANDBY_BUDGET_PERCENT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_STANDBY_BUDGET_PERCENT", GUID_STANDBY_BUDGET_PERCENT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_STANDBY_BUDGET_PERCENT$SEGMENT() { return GUID_STANDBY_BUDGET_PERCENT$SEGMENT_; }

    static final MemoryLayout GUID_STANDBY_RESERVE_GRACE_PERIOD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_STANDBY_RESERVE_GRACE_PERIOD$LAYOUT() { return GUID_STANDBY_RESERVE_GRACE_PERIOD$LAYOUT_; }

    static final MemorySegment GUID_STANDBY_RESERVE_GRACE_PERIOD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_STANDBY_RESERVE_GRACE_PERIOD", GUID_STANDBY_RESERVE_GRACE_PERIOD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_STANDBY_RESERVE_GRACE_PERIOD$SEGMENT() { return GUID_STANDBY_RESERVE_GRACE_PERIOD$SEGMENT_; }

    static final MemoryLayout GUID_STANDBY_RESERVE_TIME$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_STANDBY_RESERVE_TIME$LAYOUT() { return GUID_STANDBY_RESERVE_TIME$LAYOUT_; }

    static final MemorySegment GUID_STANDBY_RESERVE_TIME$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_STANDBY_RESERVE_TIME", GUID_STANDBY_RESERVE_TIME$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_STANDBY_RESERVE_TIME$SEGMENT() { return GUID_STANDBY_RESERVE_TIME$SEGMENT_; }

    static final MemoryLayout GUID_STANDBY_RESET_PERCENT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_STANDBY_RESET_PERCENT$LAYOUT() { return GUID_STANDBY_RESET_PERCENT$LAYOUT_; }

    static final MemorySegment GUID_STANDBY_RESET_PERCENT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_STANDBY_RESET_PERCENT", GUID_STANDBY_RESET_PERCENT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_STANDBY_RESET_PERCENT$SEGMENT() { return GUID_STANDBY_RESET_PERCENT$SEGMENT_; }

    static final MemoryLayout GUID_ALLOW_STANDBY_STATES$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ALLOW_STANDBY_STATES$LAYOUT() { return GUID_ALLOW_STANDBY_STATES$LAYOUT_; }

    static final MemorySegment GUID_ALLOW_STANDBY_STATES$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ALLOW_STANDBY_STATES", GUID_ALLOW_STANDBY_STATES$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ALLOW_STANDBY_STATES$SEGMENT() { return GUID_ALLOW_STANDBY_STATES$SEGMENT_; }

    static final MemoryLayout GUID_ALLOW_RTC_WAKE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ALLOW_RTC_WAKE$LAYOUT() { return GUID_ALLOW_RTC_WAKE$LAYOUT_; }

    static final MemorySegment GUID_ALLOW_RTC_WAKE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ALLOW_RTC_WAKE", GUID_ALLOW_RTC_WAKE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ALLOW_RTC_WAKE$SEGMENT() { return GUID_ALLOW_RTC_WAKE$SEGMENT_; }

    static final MemoryLayout GUID_LEGACY_RTC_MITIGATION$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_LEGACY_RTC_MITIGATION$LAYOUT() { return GUID_LEGACY_RTC_MITIGATION$LAYOUT_; }

    static final MemorySegment GUID_LEGACY_RTC_MITIGATION$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_LEGACY_RTC_MITIGATION", GUID_LEGACY_RTC_MITIGATION$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_LEGACY_RTC_MITIGATION$SEGMENT() { return GUID_LEGACY_RTC_MITIGATION$SEGMENT_; }

    static final MemoryLayout GUID_ALLOW_SYSTEM_REQUIRED$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ALLOW_SYSTEM_REQUIRED$LAYOUT() { return GUID_ALLOW_SYSTEM_REQUIRED$LAYOUT_; }

    static final MemorySegment GUID_ALLOW_SYSTEM_REQUIRED$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ALLOW_SYSTEM_REQUIRED", GUID_ALLOW_SYSTEM_REQUIRED$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ALLOW_SYSTEM_REQUIRED$SEGMENT() { return GUID_ALLOW_SYSTEM_REQUIRED$SEGMENT_; }

    static final MemoryLayout GUID_POWER_SAVING_STATUS$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_POWER_SAVING_STATUS$LAYOUT() { return GUID_POWER_SAVING_STATUS$LAYOUT_; }

    static final MemorySegment GUID_POWER_SAVING_STATUS$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_POWER_SAVING_STATUS", GUID_POWER_SAVING_STATUS$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_POWER_SAVING_STATUS$SEGMENT() { return GUID_POWER_SAVING_STATUS$SEGMENT_; }

    static final MemoryLayout GUID_ENERGY_SAVER_SUBGROUP$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ENERGY_SAVER_SUBGROUP$LAYOUT() { return GUID_ENERGY_SAVER_SUBGROUP$LAYOUT_; }

    static final MemorySegment GUID_ENERGY_SAVER_SUBGROUP$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ENERGY_SAVER_SUBGROUP", GUID_ENERGY_SAVER_SUBGROUP$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ENERGY_SAVER_SUBGROUP$SEGMENT() { return GUID_ENERGY_SAVER_SUBGROUP$SEGMENT_; }

    static final MemoryLayout GUID_ENERGY_SAVER_BATTERY_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ENERGY_SAVER_BATTERY_THRESHOLD$LAYOUT() { return GUID_ENERGY_SAVER_BATTERY_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_ENERGY_SAVER_BATTERY_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ENERGY_SAVER_BATTERY_THRESHOLD", GUID_ENERGY_SAVER_BATTERY_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ENERGY_SAVER_BATTERY_THRESHOLD$SEGMENT() { return GUID_ENERGY_SAVER_BATTERY_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_ENERGY_SAVER_BRIGHTNESS$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ENERGY_SAVER_BRIGHTNESS$LAYOUT() { return GUID_ENERGY_SAVER_BRIGHTNESS$LAYOUT_; }

    static final MemorySegment GUID_ENERGY_SAVER_BRIGHTNESS$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ENERGY_SAVER_BRIGHTNESS", GUID_ENERGY_SAVER_BRIGHTNESS$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ENERGY_SAVER_BRIGHTNESS$SEGMENT() { return GUID_ENERGY_SAVER_BRIGHTNESS$SEGMENT_; }

    static final MemoryLayout GUID_ENERGY_SAVER_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_ENERGY_SAVER_POLICY$LAYOUT() { return GUID_ENERGY_SAVER_POLICY$LAYOUT_; }

    static final MemorySegment GUID_ENERGY_SAVER_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_ENERGY_SAVER_POLICY", GUID_ENERGY_SAVER_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_ENERGY_SAVER_POLICY$SEGMENT() { return GUID_ENERGY_SAVER_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_SYSTEM_BUTTON_SUBGROUP$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_SYSTEM_BUTTON_SUBGROUP$LAYOUT() { return GUID_SYSTEM_BUTTON_SUBGROUP$LAYOUT_; }

    static final MemorySegment GUID_SYSTEM_BUTTON_SUBGROUP$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_SYSTEM_BUTTON_SUBGROUP", GUID_SYSTEM_BUTTON_SUBGROUP$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_SYSTEM_BUTTON_SUBGROUP$SEGMENT() { return GUID_SYSTEM_BUTTON_SUBGROUP$SEGMENT_; }

    static final MemoryLayout GUID_POWERBUTTON_ACTION$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_POWERBUTTON_ACTION$LAYOUT() { return GUID_POWERBUTTON_ACTION$LAYOUT_; }

    static final MemorySegment GUID_POWERBUTTON_ACTION$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_POWERBUTTON_ACTION", GUID_POWERBUTTON_ACTION$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_POWERBUTTON_ACTION$SEGMENT() { return GUID_POWERBUTTON_ACTION$SEGMENT_; }

    static final MemoryLayout GUID_SLEEPBUTTON_ACTION$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_SLEEPBUTTON_ACTION$LAYOUT() { return GUID_SLEEPBUTTON_ACTION$LAYOUT_; }

    static final MemorySegment GUID_SLEEPBUTTON_ACTION$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_SLEEPBUTTON_ACTION", GUID_SLEEPBUTTON_ACTION$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_SLEEPBUTTON_ACTION$SEGMENT() { return GUID_SLEEPBUTTON_ACTION$SEGMENT_; }

    static final MemoryLayout GUID_USERINTERFACEBUTTON_ACTION$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_USERINTERFACEBUTTON_ACTION$LAYOUT() { return GUID_USERINTERFACEBUTTON_ACTION$LAYOUT_; }

    static final MemorySegment GUID_USERINTERFACEBUTTON_ACTION$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_USERINTERFACEBUTTON_ACTION", GUID_USERINTERFACEBUTTON_ACTION$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_USERINTERFACEBUTTON_ACTION$SEGMENT() { return GUID_USERINTERFACEBUTTON_ACTION$SEGMENT_; }

    static final MemoryLayout GUID_LIDCLOSE_ACTION$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_LIDCLOSE_ACTION$LAYOUT() { return GUID_LIDCLOSE_ACTION$LAYOUT_; }

    static final MemorySegment GUID_LIDCLOSE_ACTION$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_LIDCLOSE_ACTION", GUID_LIDCLOSE_ACTION$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_LIDCLOSE_ACTION$SEGMENT() { return GUID_LIDCLOSE_ACTION$SEGMENT_; }

    static final MemoryLayout GUID_LIDOPEN_POWERSTATE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_LIDOPEN_POWERSTATE$LAYOUT() { return GUID_LIDOPEN_POWERSTATE$LAYOUT_; }

    static final MemorySegment GUID_LIDOPEN_POWERSTATE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_LIDOPEN_POWERSTATE", GUID_LIDOPEN_POWERSTATE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_LIDOPEN_POWERSTATE$SEGMENT() { return GUID_LIDOPEN_POWERSTATE$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_SUBGROUP$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_SUBGROUP$LAYOUT() { return GUID_BATTERY_SUBGROUP$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_SUBGROUP$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_SUBGROUP", GUID_BATTERY_SUBGROUP$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_SUBGROUP$SEGMENT() { return GUID_BATTERY_SUBGROUP$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_DISCHARGE_ACTION_0$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_DISCHARGE_ACTION_0$LAYOUT() { return GUID_BATTERY_DISCHARGE_ACTION_0$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_DISCHARGE_ACTION_0$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_DISCHARGE_ACTION_0", GUID_BATTERY_DISCHARGE_ACTION_0$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_DISCHARGE_ACTION_0$SEGMENT() { return GUID_BATTERY_DISCHARGE_ACTION_0$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_DISCHARGE_LEVEL_0$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_DISCHARGE_LEVEL_0$LAYOUT() { return GUID_BATTERY_DISCHARGE_LEVEL_0$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_0$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_DISCHARGE_LEVEL_0", GUID_BATTERY_DISCHARGE_LEVEL_0$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_0$SEGMENT() { return GUID_BATTERY_DISCHARGE_LEVEL_0$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_DISCHARGE_FLAGS_0$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_DISCHARGE_FLAGS_0$LAYOUT() { return GUID_BATTERY_DISCHARGE_FLAGS_0$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_0$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_DISCHARGE_FLAGS_0", GUID_BATTERY_DISCHARGE_FLAGS_0$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_0$SEGMENT() { return GUID_BATTERY_DISCHARGE_FLAGS_0$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_DISCHARGE_ACTION_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_DISCHARGE_ACTION_1$LAYOUT() { return GUID_BATTERY_DISCHARGE_ACTION_1$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_DISCHARGE_ACTION_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_DISCHARGE_ACTION_1", GUID_BATTERY_DISCHARGE_ACTION_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_DISCHARGE_ACTION_1$SEGMENT() { return GUID_BATTERY_DISCHARGE_ACTION_1$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_DISCHARGE_LEVEL_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_DISCHARGE_LEVEL_1$LAYOUT() { return GUID_BATTERY_DISCHARGE_LEVEL_1$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_DISCHARGE_LEVEL_1", GUID_BATTERY_DISCHARGE_LEVEL_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_1$SEGMENT() { return GUID_BATTERY_DISCHARGE_LEVEL_1$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_DISCHARGE_FLAGS_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_DISCHARGE_FLAGS_1$LAYOUT() { return GUID_BATTERY_DISCHARGE_FLAGS_1$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_DISCHARGE_FLAGS_1", GUID_BATTERY_DISCHARGE_FLAGS_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_1$SEGMENT() { return GUID_BATTERY_DISCHARGE_FLAGS_1$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_DISCHARGE_ACTION_2$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_DISCHARGE_ACTION_2$LAYOUT() { return GUID_BATTERY_DISCHARGE_ACTION_2$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_DISCHARGE_ACTION_2$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_DISCHARGE_ACTION_2", GUID_BATTERY_DISCHARGE_ACTION_2$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_DISCHARGE_ACTION_2$SEGMENT() { return GUID_BATTERY_DISCHARGE_ACTION_2$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_DISCHARGE_LEVEL_2$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_DISCHARGE_LEVEL_2$LAYOUT() { return GUID_BATTERY_DISCHARGE_LEVEL_2$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_2$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_DISCHARGE_LEVEL_2", GUID_BATTERY_DISCHARGE_LEVEL_2$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_2$SEGMENT() { return GUID_BATTERY_DISCHARGE_LEVEL_2$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_DISCHARGE_FLAGS_2$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_DISCHARGE_FLAGS_2$LAYOUT() { return GUID_BATTERY_DISCHARGE_FLAGS_2$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_2$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_DISCHARGE_FLAGS_2", GUID_BATTERY_DISCHARGE_FLAGS_2$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_2$SEGMENT() { return GUID_BATTERY_DISCHARGE_FLAGS_2$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_DISCHARGE_ACTION_3$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_DISCHARGE_ACTION_3$LAYOUT() { return GUID_BATTERY_DISCHARGE_ACTION_3$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_DISCHARGE_ACTION_3$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_DISCHARGE_ACTION_3", GUID_BATTERY_DISCHARGE_ACTION_3$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_DISCHARGE_ACTION_3$SEGMENT() { return GUID_BATTERY_DISCHARGE_ACTION_3$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_DISCHARGE_LEVEL_3$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_DISCHARGE_LEVEL_3$LAYOUT() { return GUID_BATTERY_DISCHARGE_LEVEL_3$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_3$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_DISCHARGE_LEVEL_3", GUID_BATTERY_DISCHARGE_LEVEL_3$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_3$SEGMENT() { return GUID_BATTERY_DISCHARGE_LEVEL_3$SEGMENT_; }

    static final MemoryLayout GUID_BATTERY_DISCHARGE_FLAGS_3$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_BATTERY_DISCHARGE_FLAGS_3$LAYOUT() { return GUID_BATTERY_DISCHARGE_FLAGS_3$LAYOUT_; }

    static final MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_3$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_BATTERY_DISCHARGE_FLAGS_3", GUID_BATTERY_DISCHARGE_FLAGS_3$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_3$SEGMENT() { return GUID_BATTERY_DISCHARGE_FLAGS_3$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_SETTINGS_SUBGROUP$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_SETTINGS_SUBGROUP$LAYOUT() { return GUID_PROCESSOR_SETTINGS_SUBGROUP$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_SETTINGS_SUBGROUP$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_SETTINGS_SUBGROUP", GUID_PROCESSOR_SETTINGS_SUBGROUP$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_SETTINGS_SUBGROUP$SEGMENT() { return GUID_PROCESSOR_SETTINGS_SUBGROUP$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_THROTTLE_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_THROTTLE_POLICY$LAYOUT() { return GUID_PROCESSOR_THROTTLE_POLICY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_THROTTLE_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_THROTTLE_POLICY", GUID_PROCESSOR_THROTTLE_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_THROTTLE_POLICY$SEGMENT() { return GUID_PROCESSOR_THROTTLE_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_THROTTLE_MAXIMUM$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_THROTTLE_MAXIMUM$LAYOUT() { return GUID_PROCESSOR_THROTTLE_MAXIMUM$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_THROTTLE_MAXIMUM$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_THROTTLE_MAXIMUM", GUID_PROCESSOR_THROTTLE_MAXIMUM$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_THROTTLE_MAXIMUM$SEGMENT() { return GUID_PROCESSOR_THROTTLE_MAXIMUM$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_THROTTLE_MAXIMUM_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_THROTTLE_MAXIMUM_1$LAYOUT() { return GUID_PROCESSOR_THROTTLE_MAXIMUM_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_THROTTLE_MAXIMUM_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_THROTTLE_MAXIMUM_1", GUID_PROCESSOR_THROTTLE_MAXIMUM_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_THROTTLE_MAXIMUM_1$SEGMENT() { return GUID_PROCESSOR_THROTTLE_MAXIMUM_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_THROTTLE_MINIMUM$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_THROTTLE_MINIMUM$LAYOUT() { return GUID_PROCESSOR_THROTTLE_MINIMUM$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_THROTTLE_MINIMUM$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_THROTTLE_MINIMUM", GUID_PROCESSOR_THROTTLE_MINIMUM$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_THROTTLE_MINIMUM$SEGMENT() { return GUID_PROCESSOR_THROTTLE_MINIMUM$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_THROTTLE_MINIMUM_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_THROTTLE_MINIMUM_1$LAYOUT() { return GUID_PROCESSOR_THROTTLE_MINIMUM_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_THROTTLE_MINIMUM_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_THROTTLE_MINIMUM_1", GUID_PROCESSOR_THROTTLE_MINIMUM_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_THROTTLE_MINIMUM_1$SEGMENT() { return GUID_PROCESSOR_THROTTLE_MINIMUM_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_FREQUENCY_LIMIT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_FREQUENCY_LIMIT$LAYOUT() { return GUID_PROCESSOR_FREQUENCY_LIMIT$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_FREQUENCY_LIMIT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_FREQUENCY_LIMIT", GUID_PROCESSOR_FREQUENCY_LIMIT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_FREQUENCY_LIMIT$SEGMENT() { return GUID_PROCESSOR_FREQUENCY_LIMIT$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_FREQUENCY_LIMIT_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_FREQUENCY_LIMIT_1$LAYOUT() { return GUID_PROCESSOR_FREQUENCY_LIMIT_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_FREQUENCY_LIMIT_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_FREQUENCY_LIMIT_1", GUID_PROCESSOR_FREQUENCY_LIMIT_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_FREQUENCY_LIMIT_1$SEGMENT() { return GUID_PROCESSOR_FREQUENCY_LIMIT_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_ALLOW_THROTTLING$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_ALLOW_THROTTLING$LAYOUT() { return GUID_PROCESSOR_ALLOW_THROTTLING$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_ALLOW_THROTTLING$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_ALLOW_THROTTLING", GUID_PROCESSOR_ALLOW_THROTTLING$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_ALLOW_THROTTLING$SEGMENT() { return GUID_PROCESSOR_ALLOW_THROTTLING$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_IDLESTATE_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_IDLESTATE_POLICY$LAYOUT() { return GUID_PROCESSOR_IDLESTATE_POLICY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_IDLESTATE_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_IDLESTATE_POLICY", GUID_PROCESSOR_IDLESTATE_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_IDLESTATE_POLICY$SEGMENT() { return GUID_PROCESSOR_IDLESTATE_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERFSTATE_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERFSTATE_POLICY$LAYOUT() { return GUID_PROCESSOR_PERFSTATE_POLICY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERFSTATE_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERFSTATE_POLICY", GUID_PROCESSOR_PERFSTATE_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERFSTATE_POLICY$SEGMENT() { return GUID_PROCESSOR_PERFSTATE_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_INCREASE_THRESHOLD", GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$LAYOUT() { return GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1", GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$SEGMENT() { return GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_DECREASE_THRESHOLD", GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$LAYOUT() { return GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1", GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$SEGMENT() { return GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_INCREASE_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_INCREASE_POLICY$LAYOUT() { return GUID_PROCESSOR_PERF_INCREASE_POLICY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_INCREASE_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_INCREASE_POLICY", GUID_PROCESSOR_PERF_INCREASE_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_INCREASE_POLICY$SEGMENT() { return GUID_PROCESSOR_PERF_INCREASE_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_INCREASE_POLICY_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_INCREASE_POLICY_1$LAYOUT() { return GUID_PROCESSOR_PERF_INCREASE_POLICY_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_INCREASE_POLICY_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_INCREASE_POLICY_1", GUID_PROCESSOR_PERF_INCREASE_POLICY_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_INCREASE_POLICY_1$SEGMENT() { return GUID_PROCESSOR_PERF_INCREASE_POLICY_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_DECREASE_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_DECREASE_POLICY$LAYOUT() { return GUID_PROCESSOR_PERF_DECREASE_POLICY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_DECREASE_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_DECREASE_POLICY", GUID_PROCESSOR_PERF_DECREASE_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_DECREASE_POLICY$SEGMENT() { return GUID_PROCESSOR_PERF_DECREASE_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_DECREASE_POLICY_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_DECREASE_POLICY_1$LAYOUT() { return GUID_PROCESSOR_PERF_DECREASE_POLICY_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_DECREASE_POLICY_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_DECREASE_POLICY_1", GUID_PROCESSOR_PERF_DECREASE_POLICY_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_DECREASE_POLICY_1$SEGMENT() { return GUID_PROCESSOR_PERF_DECREASE_POLICY_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_INCREASE_TIME$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_INCREASE_TIME$LAYOUT() { return GUID_PROCESSOR_PERF_INCREASE_TIME$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_INCREASE_TIME$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_INCREASE_TIME", GUID_PROCESSOR_PERF_INCREASE_TIME$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_INCREASE_TIME$SEGMENT() { return GUID_PROCESSOR_PERF_INCREASE_TIME$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_INCREASE_TIME_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_INCREASE_TIME_1$LAYOUT() { return GUID_PROCESSOR_PERF_INCREASE_TIME_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_INCREASE_TIME_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_INCREASE_TIME_1", GUID_PROCESSOR_PERF_INCREASE_TIME_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_INCREASE_TIME_1$SEGMENT() { return GUID_PROCESSOR_PERF_INCREASE_TIME_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_DECREASE_TIME$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_DECREASE_TIME$LAYOUT() { return GUID_PROCESSOR_PERF_DECREASE_TIME$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_DECREASE_TIME$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_DECREASE_TIME", GUID_PROCESSOR_PERF_DECREASE_TIME$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_DECREASE_TIME$SEGMENT() { return GUID_PROCESSOR_PERF_DECREASE_TIME$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_DECREASE_TIME_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_DECREASE_TIME_1$LAYOUT() { return GUID_PROCESSOR_PERF_DECREASE_TIME_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_DECREASE_TIME_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_DECREASE_TIME_1", GUID_PROCESSOR_PERF_DECREASE_TIME_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_DECREASE_TIME_1$SEGMENT() { return GUID_PROCESSOR_PERF_DECREASE_TIME_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_TIME_CHECK$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_TIME_CHECK$LAYOUT() { return GUID_PROCESSOR_PERF_TIME_CHECK$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_TIME_CHECK$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_TIME_CHECK", GUID_PROCESSOR_PERF_TIME_CHECK$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_TIME_CHECK$SEGMENT() { return GUID_PROCESSOR_PERF_TIME_CHECK$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_BOOST_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_BOOST_POLICY$LAYOUT() { return GUID_PROCESSOR_PERF_BOOST_POLICY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_BOOST_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_BOOST_POLICY", GUID_PROCESSOR_PERF_BOOST_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_BOOST_POLICY$SEGMENT() { return GUID_PROCESSOR_PERF_BOOST_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_BOOST_MODE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_BOOST_MODE$LAYOUT() { return GUID_PROCESSOR_PERF_BOOST_MODE$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_BOOST_MODE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_BOOST_MODE", GUID_PROCESSOR_PERF_BOOST_MODE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_BOOST_MODE$SEGMENT() { return GUID_PROCESSOR_PERF_BOOST_MODE$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$LAYOUT() { return GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_AUTONOMOUS_MODE", GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$SEGMENT() { return GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$LAYOUT() { return GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE", GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$SEGMENT() { return GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$LAYOUT() { return GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1", GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$SEGMENT() { return GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$LAYOUT() { return GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW", GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$SEGMENT() { return GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_DUTY_CYCLING$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_DUTY_CYCLING$LAYOUT() { return GUID_PROCESSOR_DUTY_CYCLING$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_DUTY_CYCLING$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_DUTY_CYCLING", GUID_PROCESSOR_DUTY_CYCLING$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_DUTY_CYCLING$SEGMENT() { return GUID_PROCESSOR_DUTY_CYCLING$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_IDLE_ALLOW_SCALING$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_IDLE_ALLOW_SCALING$LAYOUT() { return GUID_PROCESSOR_IDLE_ALLOW_SCALING$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_IDLE_ALLOW_SCALING$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_IDLE_ALLOW_SCALING", GUID_PROCESSOR_IDLE_ALLOW_SCALING$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_IDLE_ALLOW_SCALING$SEGMENT() { return GUID_PROCESSOR_IDLE_ALLOW_SCALING$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_IDLE_DISABLE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_IDLE_DISABLE$LAYOUT() { return GUID_PROCESSOR_IDLE_DISABLE$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_IDLE_DISABLE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_IDLE_DISABLE", GUID_PROCESSOR_IDLE_DISABLE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_IDLE_DISABLE$SEGMENT() { return GUID_PROCESSOR_IDLE_DISABLE$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_IDLE_STATE_MAXIMUM$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_IDLE_STATE_MAXIMUM$LAYOUT() { return GUID_PROCESSOR_IDLE_STATE_MAXIMUM$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_IDLE_STATE_MAXIMUM$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_IDLE_STATE_MAXIMUM", GUID_PROCESSOR_IDLE_STATE_MAXIMUM$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_IDLE_STATE_MAXIMUM$SEGMENT() { return GUID_PROCESSOR_IDLE_STATE_MAXIMUM$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_IDLE_TIME_CHECK$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_IDLE_TIME_CHECK$LAYOUT() { return GUID_PROCESSOR_IDLE_TIME_CHECK$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_IDLE_TIME_CHECK$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_IDLE_TIME_CHECK", GUID_PROCESSOR_IDLE_TIME_CHECK$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_IDLE_TIME_CHECK$SEGMENT() { return GUID_PROCESSOR_IDLE_TIME_CHECK$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD", GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD", GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD", GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD", GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY", GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY", GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_MAX_CORES$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_MAX_CORES$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_MAX_CORES$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_MAX_CORES$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_MAX_CORES", GUID_PROCESSOR_CORE_PARKING_MAX_CORES$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_MAX_CORES$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_MAX_CORES$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1", GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_MIN_CORES$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_MIN_CORES$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_MIN_CORES$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_MIN_CORES$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_MIN_CORES", GUID_PROCESSOR_CORE_PARKING_MIN_CORES$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_MIN_CORES$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_MIN_CORES$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1", GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME", GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME", GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR", GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD", GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING", GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR", GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD", GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING", GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD", GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PARKING_CORE_OVERRIDE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PARKING_CORE_OVERRIDE$LAYOUT() { return GUID_PROCESSOR_PARKING_CORE_OVERRIDE$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PARKING_CORE_OVERRIDE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PARKING_CORE_OVERRIDE", GUID_PROCESSOR_PARKING_CORE_OVERRIDE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PARKING_CORE_OVERRIDE$SEGMENT() { return GUID_PROCESSOR_PARKING_CORE_OVERRIDE$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PARKING_PERF_STATE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PARKING_PERF_STATE$LAYOUT() { return GUID_PROCESSOR_PARKING_PERF_STATE$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PARKING_PERF_STATE", GUID_PROCESSOR_PARKING_PERF_STATE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE$SEGMENT() { return GUID_PROCESSOR_PARKING_PERF_STATE$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PARKING_PERF_STATE_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PARKING_PERF_STATE_1$LAYOUT() { return GUID_PROCESSOR_PARKING_PERF_STATE_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PARKING_PERF_STATE_1", GUID_PROCESSOR_PARKING_PERF_STATE_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE_1$SEGMENT() { return GUID_PROCESSOR_PARKING_PERF_STATE_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD", GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD", GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD", GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_SOFT_PARKING_LATENCY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_SOFT_PARKING_LATENCY$LAYOUT() { return GUID_PROCESSOR_SOFT_PARKING_LATENCY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_SOFT_PARKING_LATENCY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_SOFT_PARKING_LATENCY", GUID_PROCESSOR_SOFT_PARKING_LATENCY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_SOFT_PARKING_LATENCY$SEGMENT() { return GUID_PROCESSOR_SOFT_PARKING_LATENCY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_HISTORY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_HISTORY$LAYOUT() { return GUID_PROCESSOR_PERF_HISTORY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_HISTORY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_HISTORY", GUID_PROCESSOR_PERF_HISTORY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_HISTORY$SEGMENT() { return GUID_PROCESSOR_PERF_HISTORY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_HISTORY_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_HISTORY_1$LAYOUT() { return GUID_PROCESSOR_PERF_HISTORY_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_HISTORY_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_HISTORY_1", GUID_PROCESSOR_PERF_HISTORY_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_HISTORY_1$SEGMENT() { return GUID_PROCESSOR_PERF_HISTORY_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_INCREASE_HISTORY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_INCREASE_HISTORY$LAYOUT() { return GUID_PROCESSOR_PERF_INCREASE_HISTORY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_INCREASE_HISTORY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_INCREASE_HISTORY", GUID_PROCESSOR_PERF_INCREASE_HISTORY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_INCREASE_HISTORY$SEGMENT() { return GUID_PROCESSOR_PERF_INCREASE_HISTORY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_DECREASE_HISTORY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_DECREASE_HISTORY$LAYOUT() { return GUID_PROCESSOR_PERF_DECREASE_HISTORY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_DECREASE_HISTORY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_DECREASE_HISTORY", GUID_PROCESSOR_PERF_DECREASE_HISTORY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_DECREASE_HISTORY$SEGMENT() { return GUID_PROCESSOR_PERF_DECREASE_HISTORY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$LAYOUT() { return GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY", GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$SEGMENT() { return GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_LATENCY_HINT$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_LATENCY_HINT$LAYOUT() { return GUID_PROCESSOR_PERF_LATENCY_HINT$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_LATENCY_HINT", GUID_PROCESSOR_PERF_LATENCY_HINT$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT$SEGMENT() { return GUID_PROCESSOR_PERF_LATENCY_HINT$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$LAYOUT() { return GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_LATENCY_HINT_PERF", GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$SEGMENT() { return GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$LAYOUT() { return GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1", GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$SEGMENT() { return GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$LAYOUT() { return GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK", GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$SEGMENT() { return GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$LAYOUT() { return GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1", GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$SEGMENT() { return GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_DISTRIBUTE_UTILITY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_DISTRIBUTE_UTILITY$LAYOUT() { return GUID_PROCESSOR_DISTRIBUTE_UTILITY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_DISTRIBUTE_UTILITY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_DISTRIBUTE_UTILITY", GUID_PROCESSOR_DISTRIBUTE_UTILITY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_DISTRIBUTE_UTILITY$SEGMENT() { return GUID_PROCESSOR_DISTRIBUTE_UTILITY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_HETEROGENEOUS_POLICY$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_HETEROGENEOUS_POLICY$LAYOUT() { return GUID_PROCESSOR_HETEROGENEOUS_POLICY$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_HETEROGENEOUS_POLICY$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_HETEROGENEOUS_POLICY", GUID_PROCESSOR_HETEROGENEOUS_POLICY$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_HETEROGENEOUS_POLICY$SEGMENT() { return GUID_PROCESSOR_HETEROGENEOUS_POLICY$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_HETERO_DECREASE_TIME$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_HETERO_DECREASE_TIME$LAYOUT() { return GUID_PROCESSOR_HETERO_DECREASE_TIME$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_HETERO_DECREASE_TIME$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_HETERO_DECREASE_TIME", GUID_PROCESSOR_HETERO_DECREASE_TIME$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_HETERO_DECREASE_TIME$SEGMENT() { return GUID_PROCESSOR_HETERO_DECREASE_TIME$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_HETERO_INCREASE_TIME$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_HETERO_INCREASE_TIME$LAYOUT() { return GUID_PROCESSOR_HETERO_INCREASE_TIME$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_HETERO_INCREASE_TIME$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_HETERO_INCREASE_TIME", GUID_PROCESSOR_HETERO_INCREASE_TIME$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_HETERO_INCREASE_TIME$SEGMENT() { return GUID_PROCESSOR_HETERO_INCREASE_TIME$SEGMENT_; }

    static final MemoryLayout GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$LAYOUT() { return GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$LAYOUT_; }

    static final MemorySegment GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD", GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$SEGMENT() { return GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$SEGMENT_; }

}

