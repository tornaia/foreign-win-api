// Generated by jextract

package com.github.tornaia.foreign.win.api.winnt.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class winnt_h$constants$9 extends winnt_h$constants$8 {

    /* package-private */ winnt_h$constants$9() {}
    static final MemoryLayout _IMAGE_VXD_HEADER$e32_autodata$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_autodata$LAYOUT() { return _IMAGE_VXD_HEADER$e32_autodata$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_autodata$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_autodata"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_autodata$VH() { return _IMAGE_VXD_HEADER$e32_autodata$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_debuginfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_debuginfo$LAYOUT() { return _IMAGE_VXD_HEADER$e32_debuginfo$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_debuginfo$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_debuginfo"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_debuginfo$VH() { return _IMAGE_VXD_HEADER$e32_debuginfo$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_debuglen$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_debuglen$LAYOUT() { return _IMAGE_VXD_HEADER$e32_debuglen$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_debuglen$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_debuglen"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_debuglen$VH() { return _IMAGE_VXD_HEADER$e32_debuglen$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_instpreload$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_instpreload$LAYOUT() { return _IMAGE_VXD_HEADER$e32_instpreload$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_instpreload$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_instpreload"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_instpreload$VH() { return _IMAGE_VXD_HEADER$e32_instpreload$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_instdemand$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_instdemand$LAYOUT() { return _IMAGE_VXD_HEADER$e32_instdemand$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_instdemand$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_instdemand"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_instdemand$VH() { return _IMAGE_VXD_HEADER$e32_instdemand$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_heapsize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_heapsize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_heapsize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_heapsize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_heapsize"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_heapsize$VH() { return _IMAGE_VXD_HEADER$e32_heapsize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_winresoff$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_winresoff$LAYOUT() { return _IMAGE_VXD_HEADER$e32_winresoff$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_winresoff$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_winresoff"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_winresoff$VH() { return _IMAGE_VXD_HEADER$e32_winresoff$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_winreslen$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_winreslen$LAYOUT() { return _IMAGE_VXD_HEADER$e32_winreslen$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_winreslen$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_winreslen"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_winreslen$VH() { return _IMAGE_VXD_HEADER$e32_winreslen$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_devid$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_devid$LAYOUT() { return _IMAGE_VXD_HEADER$e32_devid$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_devid$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_devid"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_devid$VH() { return _IMAGE_VXD_HEADER$e32_devid$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_ddkver$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_ddkver$LAYOUT() { return _IMAGE_VXD_HEADER$e32_ddkver$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_ddkver$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_ddkver"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_ddkver$VH() { return _IMAGE_VXD_HEADER$e32_ddkver$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Machine"),
        C_SHORT.withName("NumberOfSections"),
        C_LONG.withName("TimeDateStamp"),
        C_LONG.withName("PointerToSymbolTable"),
        C_LONG.withName("NumberOfSymbols"),
        C_SHORT.withName("SizeOfOptionalHeader"),
        C_SHORT.withName("Characteristics")
    ).withName("_IMAGE_FILE_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$struct$LAYOUT() { return _IMAGE_FILE_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$Machine$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$Machine$LAYOUT() { return _IMAGE_FILE_HEADER$Machine$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$Machine$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$Machine$VH() { return _IMAGE_FILE_HEADER$Machine$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$NumberOfSections$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$NumberOfSections$LAYOUT() { return _IMAGE_FILE_HEADER$NumberOfSections$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$NumberOfSections$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfSections"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$NumberOfSections$VH() { return _IMAGE_FILE_HEADER$NumberOfSections$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$TimeDateStamp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$TimeDateStamp$LAYOUT() { return _IMAGE_FILE_HEADER$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$TimeDateStamp$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$TimeDateStamp$VH() { return _IMAGE_FILE_HEADER$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$PointerToSymbolTable$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$PointerToSymbolTable$LAYOUT() { return _IMAGE_FILE_HEADER$PointerToSymbolTable$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$PointerToSymbolTable$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToSymbolTable"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$PointerToSymbolTable$VH() { return _IMAGE_FILE_HEADER$PointerToSymbolTable$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$NumberOfSymbols$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$NumberOfSymbols$LAYOUT() { return _IMAGE_FILE_HEADER$NumberOfSymbols$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$NumberOfSymbols$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfSymbols"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$NumberOfSymbols$VH() { return _IMAGE_FILE_HEADER$NumberOfSymbols$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$SizeOfOptionalHeader$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$SizeOfOptionalHeader$LAYOUT() { return _IMAGE_FILE_HEADER$SizeOfOptionalHeader$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SizeOfOptionalHeader"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH() { return _IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$Characteristics$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$Characteristics$LAYOUT() { return _IMAGE_FILE_HEADER$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$Characteristics$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$Characteristics$VH() { return _IMAGE_FILE_HEADER$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_DATA_DIRECTORY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("VirtualAddress"),
        C_LONG.withName("Size")
    ).withName("_IMAGE_DATA_DIRECTORY");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DATA_DIRECTORY$struct$LAYOUT() { return _IMAGE_DATA_DIRECTORY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DATA_DIRECTORY$VirtualAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DATA_DIRECTORY$VirtualAddress$LAYOUT() { return _IMAGE_DATA_DIRECTORY$VirtualAddress$LAYOUT_; }

    static final VarHandle _IMAGE_DATA_DIRECTORY$VirtualAddress$VH_ = _IMAGE_DATA_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_DATA_DIRECTORY$VirtualAddress$VH() { return _IMAGE_DATA_DIRECTORY$VirtualAddress$VH_; }

    static final MemoryLayout _IMAGE_DATA_DIRECTORY$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DATA_DIRECTORY$Size$LAYOUT() { return _IMAGE_DATA_DIRECTORY$Size$LAYOUT_; }

    static final VarHandle _IMAGE_DATA_DIRECTORY$Size$VH_ = _IMAGE_DATA_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _IMAGE_DATA_DIRECTORY$Size$VH() { return _IMAGE_DATA_DIRECTORY$Size$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Magic"),
        C_CHAR.withName("MajorLinkerVersion"),
        C_CHAR.withName("MinorLinkerVersion"),
        C_LONG.withName("SizeOfCode"),
        C_LONG.withName("SizeOfInitializedData"),
        C_LONG.withName("SizeOfUninitializedData"),
        C_LONG.withName("AddressOfEntryPoint"),
        C_LONG.withName("BaseOfCode"),
        C_LONG.withName("BaseOfData"),
        C_LONG.withName("ImageBase"),
        C_LONG.withName("SectionAlignment"),
        C_LONG.withName("FileAlignment"),
        C_SHORT.withName("MajorOperatingSystemVersion"),
        C_SHORT.withName("MinorOperatingSystemVersion"),
        C_SHORT.withName("MajorImageVersion"),
        C_SHORT.withName("MinorImageVersion"),
        C_SHORT.withName("MajorSubsystemVersion"),
        C_SHORT.withName("MinorSubsystemVersion"),
        C_LONG.withName("Win32VersionValue"),
        C_LONG.withName("SizeOfImage"),
        C_LONG.withName("SizeOfHeaders"),
        C_LONG.withName("CheckSum"),
        C_SHORT.withName("Subsystem"),
        C_SHORT.withName("DllCharacteristics"),
        C_LONG.withName("SizeOfStackReserve"),
        C_LONG.withName("SizeOfStackCommit"),
        C_LONG.withName("SizeOfHeapReserve"),
        C_LONG.withName("SizeOfHeapCommit"),
        C_LONG.withName("LoaderFlags"),
        C_LONG.withName("NumberOfRvaAndSizes"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("_IMAGE_DATA_DIRECTORY")).withName("DataDirectory")
    ).withName("_IMAGE_OPTIONAL_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$struct$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$Magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$Magic$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$Magic$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$Magic$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Magic"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$Magic$VH() { return _IMAGE_OPTIONAL_HEADER$Magic$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MajorLinkerVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinorLinkerVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfCode$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfCode$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfCode$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfCode$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfInitializedData"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfUninitializedData"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfEntryPoint"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH() { return _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$BaseOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$BaseOfCode$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$BaseOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$BaseOfCode$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$BaseOfCode$VH() { return _IMAGE_OPTIONAL_HEADER$BaseOfCode$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$BaseOfData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$BaseOfData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$BaseOfData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$BaseOfData$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfData"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$BaseOfData$VH() { return _IMAGE_OPTIONAL_HEADER$BaseOfData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$ImageBase$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$ImageBase$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$ImageBase$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$ImageBase$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImageBase"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$ImageBase$VH() { return _IMAGE_OPTIONAL_HEADER$ImageBase$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SectionAlignment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SectionAlignment$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SectionAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SectionAlignment$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectionAlignment"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SectionAlignment$VH() { return _IMAGE_OPTIONAL_HEADER$SectionAlignment$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$FileAlignment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$FileAlignment$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$FileAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$FileAlignment$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAlignment"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$FileAlignment$VH() { return _IMAGE_OPTIONAL_HEADER$FileAlignment$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorOperatingSystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorOperatingSystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorImageVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorImageVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MajorImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorImageVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorImageVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorImageVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MinorImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorImageVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorSubsystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorSubsystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$Win32VersionValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$Win32VersionValue$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$Win32VersionValue$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Win32VersionValue"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH() { return _IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfImage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfImage$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfImage$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfImage$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfImage"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfImage$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfImage$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfHeaders"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$CheckSum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$CheckSum$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$CheckSum$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$CheckSum$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$CheckSum$VH() { return _IMAGE_OPTIONAL_HEADER$CheckSum$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$Subsystem$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$Subsystem$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$Subsystem$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$Subsystem$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Subsystem"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$Subsystem$VH() { return _IMAGE_OPTIONAL_HEADER$Subsystem$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$DllCharacteristics$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$DllCharacteristics$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$DllCharacteristics$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DllCharacteristics"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH() { return _IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfStackReserve"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfStackCommit"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfHeapReserve"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfHeapCommit"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$LoaderFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$LoaderFlags$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$LoaderFlags$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$LoaderFlags$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LoaderFlags"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$LoaderFlags$VH() { return _IMAGE_OPTIONAL_HEADER$LoaderFlags$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfRvaAndSizes"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH() { return _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Magic"),
        C_CHAR.withName("MajorLinkerVersion"),
        C_CHAR.withName("MinorLinkerVersion"),
        C_LONG.withName("SizeOfCode"),
        C_LONG.withName("SizeOfInitializedData"),
        C_LONG.withName("SizeOfUninitializedData"),
        C_LONG.withName("AddressOfEntryPoint"),
        C_LONG.withName("BaseOfCode"),
        C_LONG.withName("BaseOfData"),
        C_LONG.withName("BaseOfBss"),
        C_LONG.withName("GprMask"),
        MemoryLayout.ofSequence(4, C_LONG).withName("CprMask"),
        C_LONG.withName("GpValue")
    ).withName("_IMAGE_ROM_OPTIONAL_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$Magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$Magic$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$Magic$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$Magic$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Magic"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$Magic$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$Magic$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MajorLinkerVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinorLinkerVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfInitializedData"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfUninitializedData"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfEntryPoint"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfData"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfBss"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$GprMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$GprMask$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$GprMask$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GprMask"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$GpValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$GpValue$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$GpValue$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GpValue"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Magic"),
        C_CHAR.withName("MajorLinkerVersion"),
        C_CHAR.withName("MinorLinkerVersion"),
        C_LONG.withName("SizeOfCode"),
        C_LONG.withName("SizeOfInitializedData"),
        C_LONG.withName("SizeOfUninitializedData"),
        C_LONG.withName("AddressOfEntryPoint"),
        C_LONG.withName("BaseOfCode"),
        C_LONGLONG.withName("ImageBase"),
        C_LONG.withName("SectionAlignment"),
        C_LONG.withName("FileAlignment"),
        C_SHORT.withName("MajorOperatingSystemVersion"),
        C_SHORT.withName("MinorOperatingSystemVersion"),
        C_SHORT.withName("MajorImageVersion"),
        C_SHORT.withName("MinorImageVersion"),
        C_SHORT.withName("MajorSubsystemVersion"),
        C_SHORT.withName("MinorSubsystemVersion"),
        C_LONG.withName("Win32VersionValue"),
        C_LONG.withName("SizeOfImage"),
        C_LONG.withName("SizeOfHeaders"),
        C_LONG.withName("CheckSum"),
        C_SHORT.withName("Subsystem"),
        C_SHORT.withName("DllCharacteristics"),
        C_LONGLONG.withName("SizeOfStackReserve"),
        C_LONGLONG.withName("SizeOfStackCommit"),
        C_LONGLONG.withName("SizeOfHeapReserve"),
        C_LONGLONG.withName("SizeOfHeapCommit"),
        C_LONG.withName("LoaderFlags"),
        C_LONG.withName("NumberOfRvaAndSizes"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("_IMAGE_DATA_DIRECTORY")).withName("DataDirectory")
    ).withName("_IMAGE_OPTIONAL_HEADER64");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$Magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$Magic$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$Magic$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$Magic$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Magic"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$Magic$VH() { return _IMAGE_OPTIONAL_HEADER64$Magic$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MajorLinkerVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinorLinkerVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfCode$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfInitializedData"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfUninitializedData"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfEntryPoint"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH() { return _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$BaseOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$BaseOfCode$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$BaseOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH() { return _IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$ImageBase$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$ImageBase$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$ImageBase$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$ImageBase$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ImageBase"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$ImageBase$VH() { return _IMAGE_OPTIONAL_HEADER64$ImageBase$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SectionAlignment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SectionAlignment$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SectionAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectionAlignment"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH() { return _IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$FileAlignment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$FileAlignment$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$FileAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$FileAlignment$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAlignment"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$FileAlignment$VH() { return _IMAGE_OPTIONAL_HEADER64$FileAlignment$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorOperatingSystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorOperatingSystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorImageVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorImageVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorSubsystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorSubsystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Win32VersionValue"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH() { return _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfImage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfImage$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfImage$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfImage"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfHeaders"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$CheckSum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$CheckSum$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$CheckSum$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$CheckSum$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$CheckSum$VH() { return _IMAGE_OPTIONAL_HEADER64$CheckSum$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$Subsystem$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$Subsystem$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$Subsystem$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$Subsystem$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Subsystem"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$Subsystem$VH() { return _IMAGE_OPTIONAL_HEADER64$Subsystem$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DllCharacteristics"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH() { return _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeOfStackReserve"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeOfStackCommit"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeOfHeapReserve"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeOfHeapCommit"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$LoaderFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$LoaderFlags$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$LoaderFlags$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LoaderFlags"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH() { return _IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfRvaAndSizes"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH() { return _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH_; }

    static final MemoryLayout _IMAGE_NT_HEADERS64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Signature"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Machine"),
            C_SHORT.withName("NumberOfSections"),
            C_LONG.withName("TimeDateStamp"),
            C_LONG.withName("PointerToSymbolTable"),
            C_LONG.withName("NumberOfSymbols"),
            C_SHORT.withName("SizeOfOptionalHeader"),
            C_SHORT.withName("Characteristics")
        ).withName("FileHeader"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Magic"),
            C_CHAR.withName("MajorLinkerVersion"),
            C_CHAR.withName("MinorLinkerVersion"),
            C_LONG.withName("SizeOfCode"),
            C_LONG.withName("SizeOfInitializedData"),
            C_LONG.withName("SizeOfUninitializedData"),
            C_LONG.withName("AddressOfEntryPoint"),
            C_LONG.withName("BaseOfCode"),
            C_LONGLONG.withName("ImageBase"),
            C_LONG.withName("SectionAlignment"),
            C_LONG.withName("FileAlignment"),
            C_SHORT.withName("MajorOperatingSystemVersion"),
            C_SHORT.withName("MinorOperatingSystemVersion"),
            C_SHORT.withName("MajorImageVersion"),
            C_SHORT.withName("MinorImageVersion"),
            C_SHORT.withName("MajorSubsystemVersion"),
            C_SHORT.withName("MinorSubsystemVersion"),
            C_LONG.withName("Win32VersionValue"),
            C_LONG.withName("SizeOfImage"),
            C_LONG.withName("SizeOfHeaders"),
            C_LONG.withName("CheckSum"),
            C_SHORT.withName("Subsystem"),
            C_SHORT.withName("DllCharacteristics"),
            C_LONGLONG.withName("SizeOfStackReserve"),
            C_LONGLONG.withName("SizeOfStackCommit"),
            C_LONGLONG.withName("SizeOfHeapReserve"),
            C_LONGLONG.withName("SizeOfHeapCommit"),
            C_LONG.withName("LoaderFlags"),
            C_LONG.withName("NumberOfRvaAndSizes"),
            MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
                C_LONG.withName("VirtualAddress"),
                C_LONG.withName("Size")
            ).withName("_IMAGE_DATA_DIRECTORY")).withName("DataDirectory")
        ).withName("OptionalHeader")
    ).withName("_IMAGE_NT_HEADERS64");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_NT_HEADERS64$struct$LAYOUT() { return _IMAGE_NT_HEADERS64$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_NT_HEADERS64$Signature$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_NT_HEADERS64$Signature$LAYOUT() { return _IMAGE_NT_HEADERS64$Signature$LAYOUT_; }

    static final VarHandle _IMAGE_NT_HEADERS64$Signature$VH_ = _IMAGE_NT_HEADERS64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Signature"));
    static final java.lang.invoke.VarHandle _IMAGE_NT_HEADERS64$Signature$VH() { return _IMAGE_NT_HEADERS64$Signature$VH_; }

    static final MemoryLayout _IMAGE_NT_HEADERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Signature"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Machine"),
            C_SHORT.withName("NumberOfSections"),
            C_LONG.withName("TimeDateStamp"),
            C_LONG.withName("PointerToSymbolTable"),
            C_LONG.withName("NumberOfSymbols"),
            C_SHORT.withName("SizeOfOptionalHeader"),
            C_SHORT.withName("Characteristics")
        ).withName("FileHeader"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Magic"),
            C_CHAR.withName("MajorLinkerVersion"),
            C_CHAR.withName("MinorLinkerVersion"),
            C_LONG.withName("SizeOfCode"),
            C_LONG.withName("SizeOfInitializedData"),
            C_LONG.withName("SizeOfUninitializedData"),
            C_LONG.withName("AddressOfEntryPoint"),
            C_LONG.withName("BaseOfCode"),
            C_LONG.withName("BaseOfData"),
            C_LONG.withName("ImageBase"),
            C_LONG.withName("SectionAlignment"),
            C_LONG.withName("FileAlignment"),
            C_SHORT.withName("MajorOperatingSystemVersion"),
            C_SHORT.withName("MinorOperatingSystemVersion"),
            C_SHORT.withName("MajorImageVersion"),
            C_SHORT.withName("MinorImageVersion"),
            C_SHORT.withName("MajorSubsystemVersion"),
            C_SHORT.withName("MinorSubsystemVersion"),
            C_LONG.withName("Win32VersionValue"),
            C_LONG.withName("SizeOfImage"),
            C_LONG.withName("SizeOfHeaders"),
            C_LONG.withName("CheckSum"),
            C_SHORT.withName("Subsystem"),
            C_SHORT.withName("DllCharacteristics"),
            C_LONG.withName("SizeOfStackReserve"),
            C_LONG.withName("SizeOfStackCommit"),
            C_LONG.withName("SizeOfHeapReserve"),
            C_LONG.withName("SizeOfHeapCommit"),
            C_LONG.withName("LoaderFlags"),
            C_LONG.withName("NumberOfRvaAndSizes"),
            MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
                C_LONG.withName("VirtualAddress"),
                C_LONG.withName("Size")
            ).withName("_IMAGE_DATA_DIRECTORY")).withName("DataDirectory")
        ).withName("OptionalHeader")
    ).withName("_IMAGE_NT_HEADERS");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_NT_HEADERS$struct$LAYOUT() { return _IMAGE_NT_HEADERS$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_NT_HEADERS$Signature$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_NT_HEADERS$Signature$LAYOUT() { return _IMAGE_NT_HEADERS$Signature$LAYOUT_; }

    static final VarHandle _IMAGE_NT_HEADERS$Signature$VH_ = _IMAGE_NT_HEADERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Signature"));
    static final java.lang.invoke.VarHandle _IMAGE_NT_HEADERS$Signature$VH() { return _IMAGE_NT_HEADERS$Signature$VH_; }

    static final MemoryLayout _IMAGE_ROM_HEADERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_SHORT.withName("Machine"),
            C_SHORT.withName("NumberOfSections"),
            C_LONG.withName("TimeDateStamp"),
            C_LONG.withName("PointerToSymbolTable"),
            C_LONG.withName("NumberOfSymbols"),
            C_SHORT.withName("SizeOfOptionalHeader"),
            C_SHORT.withName("Characteristics")
        ).withName("FileHeader"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Magic"),
            C_CHAR.withName("MajorLinkerVersion"),
            C_CHAR.withName("MinorLinkerVersion"),
            C_LONG.withName("SizeOfCode"),
            C_LONG.withName("SizeOfInitializedData"),
            C_LONG.withName("SizeOfUninitializedData"),
            C_LONG.withName("AddressOfEntryPoint"),
            C_LONG.withName("BaseOfCode"),
            C_LONG.withName("BaseOfData"),
            C_LONG.withName("BaseOfBss"),
            C_LONG.withName("GprMask"),
            MemoryLayout.ofSequence(4, C_LONG).withName("CprMask"),
            C_LONG.withName("GpValue")
        ).withName("OptionalHeader")
    ).withName("_IMAGE_ROM_HEADERS");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_HEADERS$struct$LAYOUT() { return _IMAGE_ROM_HEADERS$struct$LAYOUT_; }

    static final MemoryLayout ANON_OBJECT_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Sig1"),
        C_SHORT.withName("Sig2"),
        C_SHORT.withName("Version"),
        C_SHORT.withName("Machine"),
        C_LONG.withName("TimeDateStamp"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ClassID"),
        C_LONG.withName("SizeOfData")
    ).withName("ANON_OBJECT_HEADER");
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$struct$LAYOUT() { return ANON_OBJECT_HEADER$struct$LAYOUT_; }

    static final MemoryLayout ANON_OBJECT_HEADER$Sig1$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$Sig1$LAYOUT() { return ANON_OBJECT_HEADER$Sig1$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER$Sig1$VH_ = ANON_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig1"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER$Sig1$VH() { return ANON_OBJECT_HEADER$Sig1$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER$Sig2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$Sig2$LAYOUT() { return ANON_OBJECT_HEADER$Sig2$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER$Sig2$VH_ = ANON_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig2"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER$Sig2$VH() { return ANON_OBJECT_HEADER$Sig2$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER$Version$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$Version$LAYOUT() { return ANON_OBJECT_HEADER$Version$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER$Version$VH_ = ANON_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER$Version$VH() { return ANON_OBJECT_HEADER$Version$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER$Machine$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$Machine$LAYOUT() { return ANON_OBJECT_HEADER$Machine$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER$Machine$VH_ = ANON_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER$Machine$VH() { return ANON_OBJECT_HEADER$Machine$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER$TimeDateStamp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$TimeDateStamp$LAYOUT() { return ANON_OBJECT_HEADER$TimeDateStamp$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER$TimeDateStamp$VH_ = ANON_OBJECT_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER$TimeDateStamp$VH() { return ANON_OBJECT_HEADER$TimeDateStamp$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER$SizeOfData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER$SizeOfData$LAYOUT() { return ANON_OBJECT_HEADER$SizeOfData$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER$SizeOfData$VH_ = ANON_OBJECT_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfData"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER$SizeOfData$VH() { return ANON_OBJECT_HEADER$SizeOfData$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Sig1"),
        C_SHORT.withName("Sig2"),
        C_SHORT.withName("Version"),
        C_SHORT.withName("Machine"),
        C_LONG.withName("TimeDateStamp"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ClassID"),
        C_LONG.withName("SizeOfData"),
        C_LONG.withName("Flags"),
        C_LONG.withName("MetaDataSize"),
        C_LONG.withName("MetaDataOffset")
    ).withName("ANON_OBJECT_HEADER_V2");
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$struct$LAYOUT() { return ANON_OBJECT_HEADER_V2$struct$LAYOUT_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$Sig1$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$Sig1$LAYOUT() { return ANON_OBJECT_HEADER_V2$Sig1$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$Sig1$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig1"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$Sig1$VH() { return ANON_OBJECT_HEADER_V2$Sig1$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$Sig2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$Sig2$LAYOUT() { return ANON_OBJECT_HEADER_V2$Sig2$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$Sig2$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig2"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$Sig2$VH() { return ANON_OBJECT_HEADER_V2$Sig2$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$Version$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$Version$LAYOUT() { return ANON_OBJECT_HEADER_V2$Version$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$Version$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$Version$VH() { return ANON_OBJECT_HEADER_V2$Version$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$Machine$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$Machine$LAYOUT() { return ANON_OBJECT_HEADER_V2$Machine$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$Machine$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$Machine$VH() { return ANON_OBJECT_HEADER_V2$Machine$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$TimeDateStamp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$TimeDateStamp$LAYOUT() { return ANON_OBJECT_HEADER_V2$TimeDateStamp$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$TimeDateStamp$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$TimeDateStamp$VH() { return ANON_OBJECT_HEADER_V2$TimeDateStamp$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$SizeOfData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$SizeOfData$LAYOUT() { return ANON_OBJECT_HEADER_V2$SizeOfData$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$SizeOfData$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfData"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$SizeOfData$VH() { return ANON_OBJECT_HEADER_V2$SizeOfData$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$Flags$LAYOUT() { return ANON_OBJECT_HEADER_V2$Flags$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$Flags$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$Flags$VH() { return ANON_OBJECT_HEADER_V2$Flags$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$MetaDataSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$MetaDataSize$LAYOUT() { return ANON_OBJECT_HEADER_V2$MetaDataSize$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$MetaDataSize$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataSize"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$MetaDataSize$VH() { return ANON_OBJECT_HEADER_V2$MetaDataSize$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_V2$MetaDataOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_V2$MetaDataOffset$LAYOUT() { return ANON_OBJECT_HEADER_V2$MetaDataOffset$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_V2$MetaDataOffset$VH_ = ANON_OBJECT_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataOffset"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_V2$MetaDataOffset$VH() { return ANON_OBJECT_HEADER_V2$MetaDataOffset$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Sig1"),
        C_SHORT.withName("Sig2"),
        C_SHORT.withName("Version"),
        C_SHORT.withName("Machine"),
        C_LONG.withName("TimeDateStamp"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ClassID"),
        C_LONG.withName("SizeOfData"),
        C_LONG.withName("Flags"),
        C_LONG.withName("MetaDataSize"),
        C_LONG.withName("MetaDataOffset"),
        C_LONG.withName("NumberOfSections"),
        C_LONG.withName("PointerToSymbolTable"),
        C_LONG.withName("NumberOfSymbols")
    ).withName("ANON_OBJECT_HEADER_BIGOBJ");
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Sig1$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Sig1$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$Sig1$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$Sig1$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig1"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$Sig1$VH() { return ANON_OBJECT_HEADER_BIGOBJ$Sig1$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Sig2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Sig2$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$Sig2$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$Sig2$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig2"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$Sig2$VH() { return ANON_OBJECT_HEADER_BIGOBJ$Sig2$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Version$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Version$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$Version$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$Version$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$Version$VH() { return ANON_OBJECT_HEADER_BIGOBJ$Version$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Machine$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Machine$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$Machine$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$Machine$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$Machine$VH() { return ANON_OBJECT_HEADER_BIGOBJ$Machine$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$VH() { return ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfData"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$VH() { return ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$Flags$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$Flags$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$Flags$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$Flags$VH() { return ANON_OBJECT_HEADER_BIGOBJ$Flags$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataSize"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$VH() { return ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataOffset"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$VH() { return ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfSections"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$VH() { return ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToSymbolTable"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$VH() { return ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$VH_; }

    static final MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$LAYOUT() { return ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$LAYOUT_; }

    static final VarHandle ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$VH_ = ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfSymbols"));
    static final java.lang.invoke.VarHandle ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$VH() { return ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(8, C_CHAR).withName("Name"),
        MemoryLayout.ofUnion(
            C_LONG.withName("PhysicalAddress"),
            C_LONG.withName("VirtualSize")
        ).withName("Misc"),
        C_LONG.withName("VirtualAddress"),
        C_LONG.withName("SizeOfRawData"),
        C_LONG.withName("PointerToRawData"),
        C_LONG.withName("PointerToRelocations"),
        C_LONG.withName("PointerToLinenumbers"),
        C_SHORT.withName("NumberOfRelocations"),
        C_SHORT.withName("NumberOfLinenumbers"),
        C_LONG.withName("Characteristics")
    ).withName("_IMAGE_SECTION_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$struct$LAYOUT() { return _IMAGE_SECTION_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$Misc$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_LONG.withName("PhysicalAddress"),
        C_LONG.withName("VirtualSize")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$Misc$union$LAYOUT() { return _IMAGE_SECTION_HEADER$Misc$union$LAYOUT_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$Misc$PhysicalAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$Misc$PhysicalAddress$LAYOUT() { return _IMAGE_SECTION_HEADER$Misc$PhysicalAddress$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$Misc$PhysicalAddress$VH_ = _IMAGE_SECTION_HEADER$Misc$union$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PhysicalAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$Misc$PhysicalAddress$VH() { return _IMAGE_SECTION_HEADER$Misc$PhysicalAddress$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$Misc$VirtualSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$Misc$VirtualSize$LAYOUT() { return _IMAGE_SECTION_HEADER$Misc$VirtualSize$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$Misc$VirtualSize$VH_ = _IMAGE_SECTION_HEADER$Misc$union$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualSize"));
    static final java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$Misc$VirtualSize$VH() { return _IMAGE_SECTION_HEADER$Misc$VirtualSize$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$VirtualAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$VirtualAddress$LAYOUT() { return _IMAGE_SECTION_HEADER$VirtualAddress$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$VirtualAddress$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$VirtualAddress$VH() { return _IMAGE_SECTION_HEADER$VirtualAddress$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$SizeOfRawData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$SizeOfRawData$LAYOUT() { return _IMAGE_SECTION_HEADER$SizeOfRawData$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$SizeOfRawData$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfRawData"));
    static final java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$SizeOfRawData$VH() { return _IMAGE_SECTION_HEADER$SizeOfRawData$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$PointerToRawData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$PointerToRawData$LAYOUT() { return _IMAGE_SECTION_HEADER$PointerToRawData$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$PointerToRawData$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToRawData"));
    static final java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$PointerToRawData$VH() { return _IMAGE_SECTION_HEADER$PointerToRawData$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$PointerToRelocations$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$PointerToRelocations$LAYOUT() { return _IMAGE_SECTION_HEADER$PointerToRelocations$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$PointerToRelocations$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToRelocations"));
    static final java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$PointerToRelocations$VH() { return _IMAGE_SECTION_HEADER$PointerToRelocations$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$PointerToLinenumbers$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$PointerToLinenumbers$LAYOUT() { return _IMAGE_SECTION_HEADER$PointerToLinenumbers$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$PointerToLinenumbers$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToLinenumbers"));
    static final java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$PointerToLinenumbers$VH() { return _IMAGE_SECTION_HEADER$PointerToLinenumbers$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$NumberOfRelocations$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$NumberOfRelocations$LAYOUT() { return _IMAGE_SECTION_HEADER$NumberOfRelocations$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$NumberOfRelocations$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfRelocations"));
    static final java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$NumberOfRelocations$VH() { return _IMAGE_SECTION_HEADER$NumberOfRelocations$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$NumberOfLinenumbers$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$NumberOfLinenumbers$LAYOUT() { return _IMAGE_SECTION_HEADER$NumberOfLinenumbers$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$NumberOfLinenumbers$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfLinenumbers"));
    static final java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$NumberOfLinenumbers$VH() { return _IMAGE_SECTION_HEADER$NumberOfLinenumbers$VH_; }

    static final MemoryLayout _IMAGE_SECTION_HEADER$Characteristics$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SECTION_HEADER$Characteristics$LAYOUT() { return _IMAGE_SECTION_HEADER$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_SECTION_HEADER$Characteristics$VH_ = _IMAGE_SECTION_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    static final java.lang.invoke.VarHandle _IMAGE_SECTION_HEADER$Characteristics$VH() { return _IMAGE_SECTION_HEADER$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            MemoryLayout.ofSequence(8, C_CHAR).withName("ShortName"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Short"),
                C_LONG.withName("Long")
            ).withName("Name"),
            MemoryLayout.ofSequence(2, C_LONG).withName("LongName")
        ).withName("N"),
        C_LONG.withName("Value"),
        C_SHORT.withName("SectionNumber"),
        C_SHORT.withName("Type"),
        C_CHAR.withName("StorageClass"),
        C_CHAR.withName("NumberOfAuxSymbols")
    ).withName("_IMAGE_SYMBOL");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$struct$LAYOUT() { return _IMAGE_SYMBOL$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_SYMBOL$N$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofSequence(8, C_CHAR).withName("ShortName"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Short"),
            C_LONG.withName("Long")
        ).withName("Name"),
        MemoryLayout.ofSequence(2, C_LONG).withName("LongName")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$N$union$LAYOUT() { return _IMAGE_SYMBOL$N$union$LAYOUT_; }

    static final MemoryLayout _IMAGE_SYMBOL$N$Name$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Short"),
        C_LONG.withName("Long")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$N$Name$struct$LAYOUT() { return _IMAGE_SYMBOL$N$Name$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_SYMBOL$N$Name$Short$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$N$Name$Short$LAYOUT() { return _IMAGE_SYMBOL$N$Name$Short$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL$N$Name$Short$VH_ = _IMAGE_SYMBOL$N$Name$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Short"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL$N$Name$Short$VH() { return _IMAGE_SYMBOL$N$Name$Short$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$N$Name$Long$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$N$Name$Long$LAYOUT() { return _IMAGE_SYMBOL$N$Name$Long$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL$N$Name$Long$VH_ = _IMAGE_SYMBOL$N$Name$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Long"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL$N$Name$Long$VH() { return _IMAGE_SYMBOL$N$Name$Long$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$Value$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$Value$LAYOUT() { return _IMAGE_SYMBOL$Value$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL$Value$VH_ = _IMAGE_SYMBOL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Value"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL$Value$VH() { return _IMAGE_SYMBOL$Value$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$SectionNumber$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$SectionNumber$LAYOUT() { return _IMAGE_SYMBOL$SectionNumber$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL$SectionNumber$VH_ = _IMAGE_SYMBOL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SectionNumber"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL$SectionNumber$VH() { return _IMAGE_SYMBOL$SectionNumber$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$Type$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$Type$LAYOUT() { return _IMAGE_SYMBOL$Type$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL$Type$VH_ = _IMAGE_SYMBOL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL$Type$VH() { return _IMAGE_SYMBOL$Type$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$StorageClass$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$StorageClass$LAYOUT() { return _IMAGE_SYMBOL$StorageClass$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL$StorageClass$VH_ = _IMAGE_SYMBOL$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("StorageClass"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL$StorageClass$VH() { return _IMAGE_SYMBOL$StorageClass$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL$NumberOfAuxSymbols$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL$NumberOfAuxSymbols$LAYOUT() { return _IMAGE_SYMBOL$NumberOfAuxSymbols$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL$NumberOfAuxSymbols$VH_ = _IMAGE_SYMBOL$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("NumberOfAuxSymbols"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL$NumberOfAuxSymbols$VH() { return _IMAGE_SYMBOL$NumberOfAuxSymbols$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            MemoryLayout.ofSequence(8, C_CHAR).withName("ShortName"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Short"),
                C_LONG.withName("Long")
            ).withName("Name"),
            MemoryLayout.ofSequence(2, C_LONG).withName("LongName")
        ).withName("N"),
        C_LONG.withName("Value"),
        C_LONG.withName("SectionNumber"),
        C_SHORT.withName("Type"),
        C_CHAR.withName("StorageClass"),
        C_CHAR.withName("NumberOfAuxSymbols")
    ).withName("_IMAGE_SYMBOL_EX");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$struct$LAYOUT() { return _IMAGE_SYMBOL_EX$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$N$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofSequence(8, C_CHAR).withName("ShortName"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Short"),
            C_LONG.withName("Long")
        ).withName("Name"),
        MemoryLayout.ofSequence(2, C_LONG).withName("LongName")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$N$union$LAYOUT() { return _IMAGE_SYMBOL_EX$N$union$LAYOUT_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$N$Name$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Short"),
        C_LONG.withName("Long")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$N$Name$struct$LAYOUT() { return _IMAGE_SYMBOL_EX$N$Name$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$N$Name$Short$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$N$Name$Short$LAYOUT() { return _IMAGE_SYMBOL_EX$N$Name$Short$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL_EX$N$Name$Short$VH_ = _IMAGE_SYMBOL_EX$N$Name$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Short"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL_EX$N$Name$Short$VH() { return _IMAGE_SYMBOL_EX$N$Name$Short$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$N$Name$Long$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$N$Name$Long$LAYOUT() { return _IMAGE_SYMBOL_EX$N$Name$Long$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL_EX$N$Name$Long$VH_ = _IMAGE_SYMBOL_EX$N$Name$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Long"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL_EX$N$Name$Long$VH() { return _IMAGE_SYMBOL_EX$N$Name$Long$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$Value$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$Value$LAYOUT() { return _IMAGE_SYMBOL_EX$Value$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL_EX$Value$VH_ = _IMAGE_SYMBOL_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Value"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL_EX$Value$VH() { return _IMAGE_SYMBOL_EX$Value$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$SectionNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$SectionNumber$LAYOUT() { return _IMAGE_SYMBOL_EX$SectionNumber$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL_EX$SectionNumber$VH_ = _IMAGE_SYMBOL_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectionNumber"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL_EX$SectionNumber$VH() { return _IMAGE_SYMBOL_EX$SectionNumber$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$Type$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$Type$LAYOUT() { return _IMAGE_SYMBOL_EX$Type$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL_EX$Type$VH_ = _IMAGE_SYMBOL_EX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL_EX$Type$VH() { return _IMAGE_SYMBOL_EX$Type$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$StorageClass$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$StorageClass$LAYOUT() { return _IMAGE_SYMBOL_EX$StorageClass$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL_EX$StorageClass$VH_ = _IMAGE_SYMBOL_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("StorageClass"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL_EX$StorageClass$VH() { return _IMAGE_SYMBOL_EX$StorageClass$VH_; }

    static final MemoryLayout _IMAGE_SYMBOL_EX$NumberOfAuxSymbols$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_SYMBOL_EX$NumberOfAuxSymbols$LAYOUT() { return _IMAGE_SYMBOL_EX$NumberOfAuxSymbols$LAYOUT_; }

    static final VarHandle _IMAGE_SYMBOL_EX$NumberOfAuxSymbols$VH_ = _IMAGE_SYMBOL_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("NumberOfAuxSymbols"));
    static final java.lang.invoke.VarHandle _IMAGE_SYMBOL_EX$NumberOfAuxSymbols$VH() { return _IMAGE_SYMBOL_EX$NumberOfAuxSymbols$VH_; }

    static final MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("bAuxType"),
        C_CHAR.withName("bReserved"),
        C_LONG.withName("SymbolTableIndex"),
        MemoryLayout.ofSequence(12, C_CHAR).withName("rgbReserved")
    ).withName("IMAGE_AUX_SYMBOL_TOKEN_DEF");
    static final jdk.incubator.foreign.MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT_; }

    static final MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$LAYOUT() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$LAYOUT_; }

    static final VarHandle IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$VH_ = IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bAuxType"));
    static final java.lang.invoke.VarHandle IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$VH() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$VH_; }

    static final MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$LAYOUT() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$LAYOUT_; }

    static final VarHandle IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$VH_ = IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bReserved"));
    static final java.lang.invoke.VarHandle IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$VH() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$VH_; }

    static final MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$LAYOUT() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$LAYOUT_; }

    static final VarHandle IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$VH_ = IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SymbolTableIndex"));
    static final java.lang.invoke.VarHandle IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$VH() { return IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_LONG.withName("TagIndex"),
            MemoryLayout.ofUnion(
                MemoryLayout.ofStruct(
                    C_SHORT.withName("Linenumber"),
                    C_SHORT.withName("Size")
                ).withName("LnSz"),
                C_LONG.withName("TotalSize")
            ).withName("Misc"),
            MemoryLayout.ofUnion(
                MemoryLayout.ofStruct(
                    C_LONG.withName("PointerToLinenumber"),
                    C_LONG.withName("PointerToNextFunction")
                ).withName("Function"),
                MemoryLayout.ofStruct(
                    MemoryLayout.ofSequence(4, C_SHORT).withName("Dimension")
                ).withName("Array")
            ).withName("FcnAry"),
            C_SHORT.withName("TvIndex")
        ).withName("Sym"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(18, C_CHAR).withName("Name")
        ).withName("File"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Length"),
            C_SHORT.withName("NumberOfRelocations"),
            C_SHORT.withName("NumberOfLinenumbers"),
            C_LONG.withName("CheckSum"),
            C_SHORT.withName("Number"),
            C_CHAR.withName("Selection"),
            C_CHAR.withName("bReserved"),
            C_SHORT.withName("HighNumber")
        ).withName("Section"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("bAuxType"),
            C_CHAR.withName("bReserved"),
            C_LONG.withName("SymbolTableIndex"),
            MemoryLayout.ofSequence(12, C_CHAR).withName("rgbReserved")
        ).withName("TokenDef"),
        MemoryLayout.ofStruct(
            C_LONG.withName("crc"),
            MemoryLayout.ofSequence(14, C_CHAR).withName("rgbReserved")
        ).withName("CRC")
    ).withName("_IMAGE_AUX_SYMBOL");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$union$LAYOUT() { return _IMAGE_AUX_SYMBOL$union$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("TagIndex"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_SHORT.withName("Linenumber"),
                C_SHORT.withName("Size")
            ).withName("LnSz"),
            C_LONG.withName("TotalSize")
        ).withName("Misc"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_LONG.withName("PointerToLinenumber"),
                C_LONG.withName("PointerToNextFunction")
            ).withName("Function"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(4, C_SHORT).withName("Dimension")
            ).withName("Array")
        ).withName("FcnAry"),
        C_SHORT.withName("TvIndex")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$TagIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$TagIndex$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$TagIndex$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Sym$TagIndex$VH_ = _IMAGE_AUX_SYMBOL$Sym$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TagIndex"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Sym$TagIndex$VH() { return _IMAGE_AUX_SYMBOL$Sym$TagIndex$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$Misc$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_SHORT.withName("Linenumber"),
            C_SHORT.withName("Size")
        ).withName("LnSz"),
        C_LONG.withName("TotalSize")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$Misc$union$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$Misc$union$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Linenumber"),
        C_SHORT.withName("Size")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Linenumber$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Linenumber$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Linenumber$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Linenumber$VH_ = _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Linenumber"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Linenumber$VH() { return _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Linenumber$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Size$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Size$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Size$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Size$VH_ = _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Size$VH() { return _IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Size$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$Misc$TotalSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$Misc$TotalSize$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$Misc$TotalSize$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Sym$Misc$TotalSize$VH_ = _IMAGE_AUX_SYMBOL$Sym$Misc$union$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalSize"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Sym$Misc$TotalSize$VH() { return _IMAGE_AUX_SYMBOL$Sym$Misc$TotalSize$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$FcnAry$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_LONG.withName("PointerToLinenumber"),
            C_LONG.withName("PointerToNextFunction")
        ).withName("Function"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(4, C_SHORT).withName("Dimension")
        ).withName("Array")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$FcnAry$union$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$FcnAry$union$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PointerToLinenumber"),
        C_LONG.withName("PointerToNextFunction")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToLinenumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToLinenumber$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToLinenumber$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToLinenumber$VH_ = _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToLinenumber"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToLinenumber$VH() { return _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToLinenumber$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToNextFunction$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToNextFunction$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToNextFunction$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToNextFunction$VH_ = _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToNextFunction"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToNextFunction$VH() { return _IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToNextFunction$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$FcnAry$Array$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(4, C_SHORT).withName("Dimension")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$FcnAry$Array$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$FcnAry$Array$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Sym$TvIndex$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Sym$TvIndex$LAYOUT() { return _IMAGE_AUX_SYMBOL$Sym$TvIndex$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Sym$TvIndex$VH_ = _IMAGE_AUX_SYMBOL$Sym$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("TvIndex"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Sym$TvIndex$VH() { return _IMAGE_AUX_SYMBOL$Sym$TvIndex$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$File$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(18, C_CHAR).withName("Name")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$File$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL$File$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Section$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Length"),
        C_SHORT.withName("NumberOfRelocations"),
        C_SHORT.withName("NumberOfLinenumbers"),
        C_LONG.withName("CheckSum"),
        C_SHORT.withName("Number"),
        C_CHAR.withName("Selection"),
        C_CHAR.withName("bReserved"),
        C_SHORT.withName("HighNumber")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Section$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL$Section$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Section$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Section$Length$LAYOUT() { return _IMAGE_AUX_SYMBOL$Section$Length$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Section$Length$VH_ = _IMAGE_AUX_SYMBOL$Section$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Section$Length$VH() { return _IMAGE_AUX_SYMBOL$Section$Length$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Section$NumberOfRelocations$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Section$NumberOfRelocations$LAYOUT() { return _IMAGE_AUX_SYMBOL$Section$NumberOfRelocations$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Section$NumberOfRelocations$VH_ = _IMAGE_AUX_SYMBOL$Section$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfRelocations"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Section$NumberOfRelocations$VH() { return _IMAGE_AUX_SYMBOL$Section$NumberOfRelocations$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Section$NumberOfLinenumbers$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Section$NumberOfLinenumbers$LAYOUT() { return _IMAGE_AUX_SYMBOL$Section$NumberOfLinenumbers$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Section$NumberOfLinenumbers$VH_ = _IMAGE_AUX_SYMBOL$Section$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfLinenumbers"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Section$NumberOfLinenumbers$VH() { return _IMAGE_AUX_SYMBOL$Section$NumberOfLinenumbers$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Section$CheckSum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Section$CheckSum$LAYOUT() { return _IMAGE_AUX_SYMBOL$Section$CheckSum$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Section$CheckSum$VH_ = _IMAGE_AUX_SYMBOL$Section$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Section$CheckSum$VH() { return _IMAGE_AUX_SYMBOL$Section$CheckSum$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Section$Number$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Section$Number$LAYOUT() { return _IMAGE_AUX_SYMBOL$Section$Number$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Section$Number$VH_ = _IMAGE_AUX_SYMBOL$Section$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Number"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Section$Number$VH() { return _IMAGE_AUX_SYMBOL$Section$Number$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Section$Selection$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Section$Selection$LAYOUT() { return _IMAGE_AUX_SYMBOL$Section$Selection$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Section$Selection$VH_ = _IMAGE_AUX_SYMBOL$Section$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Selection"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Section$Selection$VH() { return _IMAGE_AUX_SYMBOL$Section$Selection$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Section$bReserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Section$bReserved$LAYOUT() { return _IMAGE_AUX_SYMBOL$Section$bReserved$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Section$bReserved$VH_ = _IMAGE_AUX_SYMBOL$Section$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bReserved"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Section$bReserved$VH() { return _IMAGE_AUX_SYMBOL$Section$bReserved$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$Section$HighNumber$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$Section$HighNumber$LAYOUT() { return _IMAGE_AUX_SYMBOL$Section$HighNumber$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$Section$HighNumber$VH_ = _IMAGE_AUX_SYMBOL$Section$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("HighNumber"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$Section$HighNumber$VH() { return _IMAGE_AUX_SYMBOL$Section$HighNumber$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$CRC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("crc"),
        MemoryLayout.ofSequence(14, C_CHAR).withName("rgbReserved")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$CRC$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL$CRC$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL$CRC$crc$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL$CRC$crc$LAYOUT() { return _IMAGE_AUX_SYMBOL$CRC$crc$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL$CRC$crc$VH_ = _IMAGE_AUX_SYMBOL$CRC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("crc"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL$CRC$crc$VH() { return _IMAGE_AUX_SYMBOL$CRC$crc$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_LONG.withName("WeakDefaultSymIndex"),
            C_LONG.withName("WeakSearchType"),
            MemoryLayout.ofSequence(12, C_CHAR).withName("rgbReserved")
        ).withName("Sym"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(20, C_CHAR).withName("Name")
        ).withName("File"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Length"),
            C_SHORT.withName("NumberOfRelocations"),
            C_SHORT.withName("NumberOfLinenumbers"),
            C_LONG.withName("CheckSum"),
            C_SHORT.withName("Number"),
            C_CHAR.withName("Selection"),
            C_CHAR.withName("bReserved"),
            C_SHORT.withName("HighNumber"),
            MemoryLayout.ofSequence(2, C_CHAR).withName("rgbReserved")
        ).withName("Section"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("bAuxType"),
            C_CHAR.withName("bReserved"),
            C_LONG.withName("SymbolTableIndex"),
            MemoryLayout.ofSequence(12, C_CHAR).withName("rgbReserved")
        ).withName("TokenDef"),
        MemoryLayout.ofSequence(2, C_CHAR).withName("rgbReserved"),
        MemoryLayout.ofStruct(
            C_LONG.withName("crc"),
            MemoryLayout.ofSequence(16, C_CHAR).withName("rgbReserved")
        ).withName("CRC")
    ).withName("_IMAGE_AUX_SYMBOL_EX");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$union$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$union$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$Sym$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("WeakDefaultSymIndex"),
        C_LONG.withName("WeakSearchType"),
        MemoryLayout.ofSequence(12, C_CHAR).withName("rgbReserved")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$Sym$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$Sym$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$Sym$WeakDefaultSymIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$Sym$WeakDefaultSymIndex$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$Sym$WeakDefaultSymIndex$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL_EX$Sym$WeakDefaultSymIndex$VH_ = _IMAGE_AUX_SYMBOL_EX$Sym$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WeakDefaultSymIndex"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL_EX$Sym$WeakDefaultSymIndex$VH() { return _IMAGE_AUX_SYMBOL_EX$Sym$WeakDefaultSymIndex$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$Sym$WeakSearchType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$Sym$WeakSearchType$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$Sym$WeakSearchType$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL_EX$Sym$WeakSearchType$VH_ = _IMAGE_AUX_SYMBOL_EX$Sym$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WeakSearchType"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL_EX$Sym$WeakSearchType$VH() { return _IMAGE_AUX_SYMBOL_EX$Sym$WeakSearchType$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$File$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(20, C_CHAR).withName("Name")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$File$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$File$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Length"),
        C_SHORT.withName("NumberOfRelocations"),
        C_SHORT.withName("NumberOfLinenumbers"),
        C_LONG.withName("CheckSum"),
        C_SHORT.withName("Number"),
        C_CHAR.withName("Selection"),
        C_CHAR.withName("bReserved"),
        C_SHORT.withName("HighNumber"),
        MemoryLayout.ofSequence(2, C_CHAR).withName("rgbReserved")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$Section$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$Length$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$Section$Length$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL_EX$Section$Length$VH_ = _IMAGE_AUX_SYMBOL_EX$Section$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL_EX$Section$Length$VH() { return _IMAGE_AUX_SYMBOL_EX$Section$Length$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$NumberOfRelocations$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$NumberOfRelocations$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$Section$NumberOfRelocations$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL_EX$Section$NumberOfRelocations$VH_ = _IMAGE_AUX_SYMBOL_EX$Section$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfRelocations"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL_EX$Section$NumberOfRelocations$VH() { return _IMAGE_AUX_SYMBOL_EX$Section$NumberOfRelocations$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$NumberOfLinenumbers$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$NumberOfLinenumbers$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$Section$NumberOfLinenumbers$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL_EX$Section$NumberOfLinenumbers$VH_ = _IMAGE_AUX_SYMBOL_EX$Section$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfLinenumbers"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL_EX$Section$NumberOfLinenumbers$VH() { return _IMAGE_AUX_SYMBOL_EX$Section$NumberOfLinenumbers$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$CheckSum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$CheckSum$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$Section$CheckSum$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL_EX$Section$CheckSum$VH_ = _IMAGE_AUX_SYMBOL_EX$Section$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL_EX$Section$CheckSum$VH() { return _IMAGE_AUX_SYMBOL_EX$Section$CheckSum$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$Number$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$Number$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$Section$Number$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL_EX$Section$Number$VH_ = _IMAGE_AUX_SYMBOL_EX$Section$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Number"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL_EX$Section$Number$VH() { return _IMAGE_AUX_SYMBOL_EX$Section$Number$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$Selection$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$Selection$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$Section$Selection$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL_EX$Section$Selection$VH_ = _IMAGE_AUX_SYMBOL_EX$Section$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Selection"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL_EX$Section$Selection$VH() { return _IMAGE_AUX_SYMBOL_EX$Section$Selection$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$bReserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$bReserved$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$Section$bReserved$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL_EX$Section$bReserved$VH_ = _IMAGE_AUX_SYMBOL_EX$Section$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bReserved"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL_EX$Section$bReserved$VH() { return _IMAGE_AUX_SYMBOL_EX$Section$bReserved$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$HighNumber$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$Section$HighNumber$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$Section$HighNumber$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL_EX$Section$HighNumber$VH_ = _IMAGE_AUX_SYMBOL_EX$Section$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("HighNumber"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL_EX$Section$HighNumber$VH() { return _IMAGE_AUX_SYMBOL_EX$Section$HighNumber$VH_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$CRC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("crc"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("rgbReserved")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$CRC$struct$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$CRC$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_AUX_SYMBOL_EX$CRC$crc$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_AUX_SYMBOL_EX$CRC$crc$LAYOUT() { return _IMAGE_AUX_SYMBOL_EX$CRC$crc$LAYOUT_; }

    static final VarHandle _IMAGE_AUX_SYMBOL_EX$CRC$crc$VH_ = _IMAGE_AUX_SYMBOL_EX$CRC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("crc"));
    static final java.lang.invoke.VarHandle _IMAGE_AUX_SYMBOL_EX$CRC$crc$VH() { return _IMAGE_AUX_SYMBOL_EX$CRC$crc$VH_; }

    static final int IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF() { return (int)1L; }

    static final MemoryLayout _IMAGE_RELOCATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("VirtualAddress"),
        C_LONG.withName("RelocCount"),
        C_LONG.withName("SymbolTableIndex"),
        C_SHORT.withName("Type")
    ).withName("_IMAGE_RELOCATION");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_RELOCATION$struct$LAYOUT() { return _IMAGE_RELOCATION$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_RELOCATION$VirtualAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_RELOCATION$VirtualAddress$LAYOUT() { return _IMAGE_RELOCATION$VirtualAddress$LAYOUT_; }

    static final VarHandle _IMAGE_RELOCATION$VirtualAddress$VH_ = _IMAGE_RELOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_RELOCATION$VirtualAddress$VH() { return _IMAGE_RELOCATION$VirtualAddress$VH_; }

    static final MemoryLayout _IMAGE_RELOCATION$RelocCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_RELOCATION$RelocCount$LAYOUT() { return _IMAGE_RELOCATION$RelocCount$LAYOUT_; }

    static final VarHandle _IMAGE_RELOCATION$RelocCount$VH_ = _IMAGE_RELOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RelocCount"));
    static final java.lang.invoke.VarHandle _IMAGE_RELOCATION$RelocCount$VH() { return _IMAGE_RELOCATION$RelocCount$VH_; }

    static final MemoryLayout _IMAGE_RELOCATION$SymbolTableIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_RELOCATION$SymbolTableIndex$LAYOUT() { return _IMAGE_RELOCATION$SymbolTableIndex$LAYOUT_; }

    static final VarHandle _IMAGE_RELOCATION$SymbolTableIndex$VH_ = _IMAGE_RELOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SymbolTableIndex"));
    static final java.lang.invoke.VarHandle _IMAGE_RELOCATION$SymbolTableIndex$VH() { return _IMAGE_RELOCATION$SymbolTableIndex$VH_; }

    static final MemoryLayout _IMAGE_RELOCATION$Type$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_RELOCATION$Type$LAYOUT() { return _IMAGE_RELOCATION$Type$LAYOUT_; }

    static final VarHandle _IMAGE_RELOCATION$Type$VH_ = _IMAGE_RELOCATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _IMAGE_RELOCATION$Type$VH() { return _IMAGE_RELOCATION$Type$VH_; }

    static final MemoryLayout _IMAGE_LINENUMBER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("SymbolTableIndex"),
            C_LONG.withName("VirtualAddress")
        ).withName("Type"),
        C_SHORT.withName("Linenumber")
    ).withName("_IMAGE_LINENUMBER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_LINENUMBER$struct$LAYOUT() { return _IMAGE_LINENUMBER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_LINENUMBER$Type$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_LONG.withName("SymbolTableIndex"),
        C_LONG.withName("VirtualAddress")
    );
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_LINENUMBER$Type$union$LAYOUT() { return _IMAGE_LINENUMBER$Type$union$LAYOUT_; }

    static final MemoryLayout _IMAGE_LINENUMBER$Type$SymbolTableIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_LINENUMBER$Type$SymbolTableIndex$LAYOUT() { return _IMAGE_LINENUMBER$Type$SymbolTableIndex$LAYOUT_; }

    static final VarHandle _IMAGE_LINENUMBER$Type$SymbolTableIndex$VH_ = _IMAGE_LINENUMBER$Type$union$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SymbolTableIndex"));
    static final java.lang.invoke.VarHandle _IMAGE_LINENUMBER$Type$SymbolTableIndex$VH() { return _IMAGE_LINENUMBER$Type$SymbolTableIndex$VH_; }

    static final MemoryLayout _IMAGE_LINENUMBER$Type$VirtualAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_LINENUMBER$Type$VirtualAddress$LAYOUT() { return _IMAGE_LINENUMBER$Type$VirtualAddress$LAYOUT_; }

    static final VarHandle _IMAGE_LINENUMBER$Type$VirtualAddress$VH_ = _IMAGE_LINENUMBER$Type$union$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_LINENUMBER$Type$VirtualAddress$VH() { return _IMAGE_LINENUMBER$Type$VirtualAddress$VH_; }

    static final MemoryLayout _IMAGE_LINENUMBER$Linenumber$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_LINENUMBER$Linenumber$LAYOUT() { return _IMAGE_LINENUMBER$Linenumber$LAYOUT_; }

    static final VarHandle _IMAGE_LINENUMBER$Linenumber$VH_ = _IMAGE_LINENUMBER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Linenumber"));
    static final java.lang.invoke.VarHandle _IMAGE_LINENUMBER$Linenumber$VH() { return _IMAGE_LINENUMBER$Linenumber$VH_; }

    static final MemoryLayout _IMAGE_BASE_RELOCATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("VirtualAddress"),
        C_LONG.withName("SizeOfBlock")
    ).withName("_IMAGE_BASE_RELOCATION");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_BASE_RELOCATION$struct$LAYOUT() { return _IMAGE_BASE_RELOCATION$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_BASE_RELOCATION$VirtualAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_BASE_RELOCATION$VirtualAddress$LAYOUT() { return _IMAGE_BASE_RELOCATION$VirtualAddress$LAYOUT_; }

    static final VarHandle _IMAGE_BASE_RELOCATION$VirtualAddress$VH_ = _IMAGE_BASE_RELOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_BASE_RELOCATION$VirtualAddress$VH() { return _IMAGE_BASE_RELOCATION$VirtualAddress$VH_; }

    static final MemoryLayout _IMAGE_BASE_RELOCATION$SizeOfBlock$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_BASE_RELOCATION$SizeOfBlock$LAYOUT() { return _IMAGE_BASE_RELOCATION$SizeOfBlock$LAYOUT_; }

    static final VarHandle _IMAGE_BASE_RELOCATION$SizeOfBlock$VH_ = _IMAGE_BASE_RELOCATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfBlock"));
    static final java.lang.invoke.VarHandle _IMAGE_BASE_RELOCATION$SizeOfBlock$VH() { return _IMAGE_BASE_RELOCATION$SizeOfBlock$VH_; }

    static final MemoryLayout _IMAGE_ARCHIVE_MEMBER_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(16, C_CHAR).withName("Name"),
        MemoryLayout.ofSequence(12, C_CHAR).withName("Date"),
        MemoryLayout.ofSequence(6, C_CHAR).withName("UserID"),
        MemoryLayout.ofSequence(6, C_CHAR).withName("GroupID"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Mode"),
        MemoryLayout.ofSequence(10, C_CHAR).withName("Size"),
        MemoryLayout.ofSequence(2, C_CHAR).withName("EndHeader")
    ).withName("_IMAGE_ARCHIVE_MEMBER_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ARCHIVE_MEMBER_HEADER$struct$LAYOUT() { return _IMAGE_ARCHIVE_MEMBER_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Characteristics"),
        C_LONG.withName("TimeDateStamp"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion"),
        C_LONG.withName("Name"),
        C_LONG.withName("Base"),
        C_LONG.withName("NumberOfFunctions"),
        C_LONG.withName("NumberOfNames"),
        C_LONG.withName("AddressOfFunctions"),
        C_LONG.withName("AddressOfNames"),
        C_LONG.withName("AddressOfNameOrdinals")
    ).withName("_IMAGE_EXPORT_DIRECTORY");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$Characteristics$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$Characteristics$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$Characteristics$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    static final java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$Characteristics$VH() { return _IMAGE_EXPORT_DIRECTORY$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$TimeDateStamp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$TimeDateStamp$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$TimeDateStamp$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    static final java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$TimeDateStamp$VH() { return _IMAGE_EXPORT_DIRECTORY$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$MajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$MajorVersion$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$MajorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$MajorVersion$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$MajorVersion$VH() { return _IMAGE_EXPORT_DIRECTORY$MajorVersion$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$MinorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$MinorVersion$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$MinorVersion$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$MinorVersion$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$MinorVersion$VH() { return _IMAGE_EXPORT_DIRECTORY$MinorVersion$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$Name$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$Name$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$Name$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$Name$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Name"));
    static final java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$Name$VH() { return _IMAGE_EXPORT_DIRECTORY$Name$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$Base$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$Base$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$Base$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$Base$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Base"));
    static final java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$Base$VH() { return _IMAGE_EXPORT_DIRECTORY$Base$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfFunctions"));
    static final java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$VH() { return _IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$NumberOfNames$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$NumberOfNames$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$NumberOfNames$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$NumberOfNames$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfNames"));
    static final java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$NumberOfNames$VH() { return _IMAGE_EXPORT_DIRECTORY$NumberOfNames$VH_; }

    static final MemoryLayout _IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$LAYOUT() { return _IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$LAYOUT_; }

    static final VarHandle _IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$VH_ = _IMAGE_EXPORT_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfFunctions"));
    static final java.lang.invoke.VarHandle _IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$VH() { return _IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$VH_; }

}

