// Generated by jextract

package com.github.tornaia.foreign.win.api.winnt.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class winnt_h$constants$4 extends winnt_h$constants$3 {

    /* package-private */ winnt_h$constants$4() {}
    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_ALLOWED_CALLBACK_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$Mask$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH_ = _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH() { return _ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH_ = _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH() { return _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_DENIED_CALLBACK_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT() { return _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$Mask$LAYOUT() { return _ACCESS_DENIED_CALLBACK_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_ACE$Mask$VH_ = _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_ACE$Mask$VH() { return _ACCESS_DENIED_CALLBACK_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$SidStart$LAYOUT() { return _ACCESS_DENIED_CALLBACK_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_ACE$SidStart$VH_ = _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_ACE$SidStart$VH() { return _ACCESS_DENIED_CALLBACK_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_AUDIT_CALLBACK_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$Mask$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH_ = _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH() { return _SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH_ = _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH() { return _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_ALARM_CALLBACK_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$Mask$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_ACE$Mask$VH_ = _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_ACE$Mask$VH() { return _SYSTEM_ALARM_CALLBACK_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$SidStart$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH_ = _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH() { return _SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH_ = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH_ = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH_ = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_DENIED_CALLBACK_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$LAYOUT() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH_ = _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$LAYOUT() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH_ = _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH_ = _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH_ = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH_ = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH_ = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_ALARM_CALLBACK_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH_ = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH_ = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH_ = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH_; }

    static final int AclRevisionInformation() { return (int)1L; }

    static final int AclSizeInformation() { return (int)2L; }

    static final MemoryLayout _ACL_REVISION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("AclRevision")
    ).withName("_ACL_REVISION_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _ACL_REVISION_INFORMATION$struct$LAYOUT() { return _ACL_REVISION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACL_REVISION_INFORMATION$AclRevision$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACL_REVISION_INFORMATION$AclRevision$LAYOUT() { return _ACL_REVISION_INFORMATION$AclRevision$LAYOUT_; }

    static final VarHandle _ACL_REVISION_INFORMATION$AclRevision$VH_ = _ACL_REVISION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AclRevision"));
    static final java.lang.invoke.VarHandle _ACL_REVISION_INFORMATION$AclRevision$VH() { return _ACL_REVISION_INFORMATION$AclRevision$VH_; }

    static final MemoryLayout _ACL_SIZE_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("AceCount"),
        C_LONG.withName("AclBytesInUse"),
        C_LONG.withName("AclBytesFree")
    ).withName("_ACL_SIZE_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _ACL_SIZE_INFORMATION$struct$LAYOUT() { return _ACL_SIZE_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACL_SIZE_INFORMATION$AceCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACL_SIZE_INFORMATION$AceCount$LAYOUT() { return _ACL_SIZE_INFORMATION$AceCount$LAYOUT_; }

    static final VarHandle _ACL_SIZE_INFORMATION$AceCount$VH_ = _ACL_SIZE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AceCount"));
    static final java.lang.invoke.VarHandle _ACL_SIZE_INFORMATION$AceCount$VH() { return _ACL_SIZE_INFORMATION$AceCount$VH_; }

    static final MemoryLayout _ACL_SIZE_INFORMATION$AclBytesInUse$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACL_SIZE_INFORMATION$AclBytesInUse$LAYOUT() { return _ACL_SIZE_INFORMATION$AclBytesInUse$LAYOUT_; }

    static final VarHandle _ACL_SIZE_INFORMATION$AclBytesInUse$VH_ = _ACL_SIZE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AclBytesInUse"));
    static final java.lang.invoke.VarHandle _ACL_SIZE_INFORMATION$AclBytesInUse$VH() { return _ACL_SIZE_INFORMATION$AclBytesInUse$VH_; }

    static final MemoryLayout _ACL_SIZE_INFORMATION$AclBytesFree$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACL_SIZE_INFORMATION$AclBytesFree$LAYOUT() { return _ACL_SIZE_INFORMATION$AclBytesFree$LAYOUT_; }

    static final VarHandle _ACL_SIZE_INFORMATION$AclBytesFree$VH_ = _ACL_SIZE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AclBytesFree"));
    static final java.lang.invoke.VarHandle _ACL_SIZE_INFORMATION$AclBytesFree$VH() { return _ACL_SIZE_INFORMATION$AclBytesFree$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Revision"),
        C_CHAR.withName("Sbz1"),
        C_SHORT.withName("Control"),
        C_LONG.withName("Owner"),
        C_LONG.withName("Group"),
        C_LONG.withName("Sacl"),
        C_LONG.withName("Dacl")
    ).withName("_SECURITY_DESCRIPTOR_RELATIVE");
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Revision$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Revision$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Revision$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Revision$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Revision"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Revision$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Revision$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Sbz1"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Control$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Control$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Control$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Control$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Control"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Control$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Control$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Owner$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Owner$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Owner$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Owner$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Owner"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Owner$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Owner$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Group$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Group$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Group$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Group$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Group"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Group$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Group$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Sacl$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Sacl$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Sacl$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Sacl"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Dacl$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Dacl$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Dacl$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Dacl"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Revision"),
        C_CHAR.withName("Sbz1"),
        C_SHORT.withName("Control"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("Owner"),
        C_POINTER.withName("Group"),
        C_POINTER.withName("Sacl"),
        C_POINTER.withName("Dacl")
    ).withName("_SECURITY_DESCRIPTOR");
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$struct$LAYOUT() { return _SECURITY_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Revision$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Revision$LAYOUT() { return _SECURITY_DESCRIPTOR$Revision$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Revision$VH_ = _SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Revision"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Revision$VH() { return _SECURITY_DESCRIPTOR$Revision$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Sbz1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Sbz1$LAYOUT() { return _SECURITY_DESCRIPTOR$Sbz1$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Sbz1$VH_ = _SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Sbz1"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Sbz1$VH() { return _SECURITY_DESCRIPTOR$Sbz1$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Control$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Control$LAYOUT() { return _SECURITY_DESCRIPTOR$Control$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Control$VH_ = _SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Control"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Control$VH() { return _SECURITY_DESCRIPTOR$Control$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Owner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Owner$LAYOUT() { return _SECURITY_DESCRIPTOR$Owner$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Owner$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Owner")));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Owner$VH() { return _SECURITY_DESCRIPTOR$Owner$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Group$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Group$LAYOUT() { return _SECURITY_DESCRIPTOR$Group$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Group$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Group")));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Group$VH() { return _SECURITY_DESCRIPTOR$Group$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Sacl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Sacl$LAYOUT() { return _SECURITY_DESCRIPTOR$Sacl$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Sacl$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Sacl")));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Sacl$VH() { return _SECURITY_DESCRIPTOR$Sacl$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Dacl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Dacl$LAYOUT() { return _SECURITY_DESCRIPTOR$Dacl$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Dacl$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Dacl")));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Dacl$VH() { return _SECURITY_DESCRIPTOR$Dacl$VH_; }

    static final MemoryLayout _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("ConstraintMask")
    ).withName("_SECURITY_OBJECT_AI_PARAMS");
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT() { return _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_OBJECT_AI_PARAMS$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_OBJECT_AI_PARAMS$Size$LAYOUT() { return _SECURITY_OBJECT_AI_PARAMS$Size$LAYOUT_; }

    static final VarHandle _SECURITY_OBJECT_AI_PARAMS$Size$VH_ = _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SECURITY_OBJECT_AI_PARAMS$Size$VH() { return _SECURITY_OBJECT_AI_PARAMS$Size$VH_; }

    static final MemoryLayout _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$LAYOUT() { return _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$LAYOUT_; }

    static final VarHandle _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH_ = _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ConstraintMask"));
    static final java.lang.invoke.VarHandle _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH() { return _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH_; }

    static final MemoryLayout _OBJECT_TYPE_LIST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Level"),
        C_SHORT.withName("Sbz"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("ObjectType")
    ).withName("_OBJECT_TYPE_LIST");
    static final jdk.incubator.foreign.MemoryLayout _OBJECT_TYPE_LIST$struct$LAYOUT() { return _OBJECT_TYPE_LIST$struct$LAYOUT_; }

    static final MemoryLayout _OBJECT_TYPE_LIST$Level$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OBJECT_TYPE_LIST$Level$LAYOUT() { return _OBJECT_TYPE_LIST$Level$LAYOUT_; }

    static final VarHandle _OBJECT_TYPE_LIST$Level$VH_ = _OBJECT_TYPE_LIST$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Level"));
    static final java.lang.invoke.VarHandle _OBJECT_TYPE_LIST$Level$VH() { return _OBJECT_TYPE_LIST$Level$VH_; }

    static final MemoryLayout _OBJECT_TYPE_LIST$Sbz$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OBJECT_TYPE_LIST$Sbz$LAYOUT() { return _OBJECT_TYPE_LIST$Sbz$LAYOUT_; }

    static final VarHandle _OBJECT_TYPE_LIST$Sbz$VH_ = _OBJECT_TYPE_LIST$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sbz"));
    static final java.lang.invoke.VarHandle _OBJECT_TYPE_LIST$Sbz$VH() { return _OBJECT_TYPE_LIST$Sbz$VH_; }

    static final MemoryLayout _OBJECT_TYPE_LIST$ObjectType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OBJECT_TYPE_LIST$ObjectType$LAYOUT() { return _OBJECT_TYPE_LIST$ObjectType$LAYOUT_; }

    static final VarHandle _OBJECT_TYPE_LIST$ObjectType$VH_ = MemoryHandles.asAddressVarHandle(_OBJECT_TYPE_LIST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ObjectType")));
    static final java.lang.invoke.VarHandle _OBJECT_TYPE_LIST$ObjectType$VH() { return _OBJECT_TYPE_LIST$ObjectType$VH_; }

    static final int AuditEventObjectAccess() { return (int)0L; }

    static final int AuditEventDirectoryServiceAccess() { return (int)1L; }

    static final MemoryLayout _PRIVILEGE_SET$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PrivilegeCount"),
        C_LONG.withName("Control"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("Luid"),
            C_LONG.withName("Attributes")
        ).withName("_LUID_AND_ATTRIBUTES")).withName("Privilege")
    ).withName("_PRIVILEGE_SET");
    static final jdk.incubator.foreign.MemoryLayout _PRIVILEGE_SET$struct$LAYOUT() { return _PRIVILEGE_SET$struct$LAYOUT_; }

    static final MemoryLayout _PRIVILEGE_SET$PrivilegeCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PRIVILEGE_SET$PrivilegeCount$LAYOUT() { return _PRIVILEGE_SET$PrivilegeCount$LAYOUT_; }

    static final VarHandle _PRIVILEGE_SET$PrivilegeCount$VH_ = _PRIVILEGE_SET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    static final java.lang.invoke.VarHandle _PRIVILEGE_SET$PrivilegeCount$VH() { return _PRIVILEGE_SET$PrivilegeCount$VH_; }

    static final MemoryLayout _PRIVILEGE_SET$Control$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PRIVILEGE_SET$Control$LAYOUT() { return _PRIVILEGE_SET$Control$LAYOUT_; }

    static final VarHandle _PRIVILEGE_SET$Control$VH_ = _PRIVILEGE_SET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Control"));
    static final java.lang.invoke.VarHandle _PRIVILEGE_SET$Control$VH() { return _PRIVILEGE_SET$Control$VH_; }

    static final int AccessReasonNone() { return (int)0L; }

    static final int AccessReasonAllowedAce() { return (int)65536L; }

    static final int AccessReasonDeniedAce() { return (int)131072L; }

    static final int AccessReasonAllowedParentAce() { return (int)196608L; }

    static final int AccessReasonDeniedParentAce() { return (int)262144L; }

    static final int AccessReasonNotGrantedByCape() { return (int)327680L; }

    static final int AccessReasonNotGrantedByParentCape() { return (int)393216L; }

    static final int AccessReasonNotGrantedToAppContainer() { return (int)458752L; }

    static final int AccessReasonMissingPrivilege() { return (int)1048576L; }

    static final int AccessReasonFromPrivilege() { return (int)2097152L; }

    static final int AccessReasonIntegrityLevel() { return (int)3145728L; }

    static final int AccessReasonOwnership() { return (int)4194304L; }

    static final int AccessReasonNullDacl() { return (int)5242880L; }

    static final int AccessReasonEmptyDacl() { return (int)6291456L; }

    static final int AccessReasonNoSD() { return (int)7340032L; }

    static final int AccessReasonNoGrant() { return (int)8388608L; }

    static final int AccessReasonTrustLabel() { return (int)9437184L; }

    static final int AccessReasonFilterAce() { return (int)10485760L; }

    static final MemoryLayout _ACCESS_REASONS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(32, C_LONG).withName("Data")
    ).withName("_ACCESS_REASONS");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_REASONS$struct$LAYOUT() { return _ACCESS_REASONS$struct$LAYOUT_; }

    static final MemoryLayout _SE_SECURITY_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_POINTER.withName("SecurityDescriptor")
    ).withName("_SE_SECURITY_DESCRIPTOR");
    static final jdk.incubator.foreign.MemoryLayout _SE_SECURITY_DESCRIPTOR$struct$LAYOUT() { return _SE_SECURITY_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _SE_SECURITY_DESCRIPTOR$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_SECURITY_DESCRIPTOR$Size$LAYOUT() { return _SE_SECURITY_DESCRIPTOR$Size$LAYOUT_; }

    static final VarHandle _SE_SECURITY_DESCRIPTOR$Size$VH_ = _SE_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SE_SECURITY_DESCRIPTOR$Size$VH() { return _SE_SECURITY_DESCRIPTOR$Size$VH_; }

    static final MemoryLayout _SE_SECURITY_DESCRIPTOR$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_SECURITY_DESCRIPTOR$Flags$LAYOUT() { return _SE_SECURITY_DESCRIPTOR$Flags$LAYOUT_; }

    static final VarHandle _SE_SECURITY_DESCRIPTOR$Flags$VH_ = _SE_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SE_SECURITY_DESCRIPTOR$Flags$VH() { return _SE_SECURITY_DESCRIPTOR$Flags$VH_; }

    static final MemoryLayout _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$LAYOUT() { return _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$LAYOUT_; }

    static final VarHandle _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH_ = MemoryHandles.asAddressVarHandle(_SE_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SecurityDescriptor")));
    static final java.lang.invoke.VarHandle _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH() { return _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("SeSecurityDescriptor"),
        C_LONG.withName("DesiredAccess"),
        C_LONG.withName("PreviouslyGrantedAccess"),
        C_POINTER.withName("PrincipalSelfSid"),
        C_POINTER.withName("GenericMapping"),
        C_LONG.withName("ObjectTypeListCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("ObjectTypeList")
    ).withName("_SE_ACCESS_REQUEST");
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$struct$LAYOUT() { return _SE_ACCESS_REQUEST$struct$LAYOUT_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$Size$LAYOUT() { return _SE_ACCESS_REQUEST$Size$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$Size$VH_ = _SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$Size$VH() { return _SE_ACCESS_REQUEST$Size$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$SeSecurityDescriptor$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$SeSecurityDescriptor$LAYOUT() { return _SE_ACCESS_REQUEST$SeSecurityDescriptor$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$SeSecurityDescriptor$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SeSecurityDescriptor")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$SeSecurityDescriptor$VH() { return _SE_ACCESS_REQUEST$SeSecurityDescriptor$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$DesiredAccess$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$DesiredAccess$LAYOUT() { return _SE_ACCESS_REQUEST$DesiredAccess$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$DesiredAccess$VH_ = _SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DesiredAccess"));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$DesiredAccess$VH() { return _SE_ACCESS_REQUEST$DesiredAccess$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$LAYOUT() { return _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH_ = _SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PreviouslyGrantedAccess"));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH() { return _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$PrincipalSelfSid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$PrincipalSelfSid$LAYOUT() { return _SE_ACCESS_REQUEST$PrincipalSelfSid$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$PrincipalSelfSid$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PrincipalSelfSid")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$PrincipalSelfSid$VH() { return _SE_ACCESS_REQUEST$PrincipalSelfSid$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$GenericMapping$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$GenericMapping$LAYOUT() { return _SE_ACCESS_REQUEST$GenericMapping$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$GenericMapping$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GenericMapping")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$GenericMapping$VH() { return _SE_ACCESS_REQUEST$GenericMapping$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$ObjectTypeListCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$ObjectTypeListCount$LAYOUT() { return _SE_ACCESS_REQUEST$ObjectTypeListCount$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$ObjectTypeListCount$VH_ = _SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ObjectTypeListCount"));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$ObjectTypeListCount$VH() { return _SE_ACCESS_REQUEST$ObjectTypeListCount$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$ObjectTypeList$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$ObjectTypeList$LAYOUT() { return _SE_ACCESS_REQUEST$ObjectTypeList$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$ObjectTypeList$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ObjectTypeList")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$ObjectTypeList$VH() { return _SE_ACCESS_REQUEST$ObjectTypeList$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("ResultListCount"),
        C_POINTER.withName("GrantedAccess"),
        C_POINTER.withName("AccessStatus"),
        C_POINTER.withName("AccessReason"),
        C_POINTER.withName("Privileges")
    ).withName("_SE_ACCESS_REPLY");
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$struct$LAYOUT() { return _SE_ACCESS_REPLY$struct$LAYOUT_; }

    static final MemoryLayout _SE_ACCESS_REPLY$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$Size$LAYOUT() { return _SE_ACCESS_REPLY$Size$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$Size$VH_ = _SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REPLY$Size$VH() { return _SE_ACCESS_REPLY$Size$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$ResultListCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$ResultListCount$LAYOUT() { return _SE_ACCESS_REPLY$ResultListCount$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$ResultListCount$VH_ = _SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ResultListCount"));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REPLY$ResultListCount$VH() { return _SE_ACCESS_REPLY$ResultListCount$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$GrantedAccess$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$GrantedAccess$LAYOUT() { return _SE_ACCESS_REPLY$GrantedAccess$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$GrantedAccess$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GrantedAccess")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REPLY$GrantedAccess$VH() { return _SE_ACCESS_REPLY$GrantedAccess$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$AccessStatus$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$AccessStatus$LAYOUT() { return _SE_ACCESS_REPLY$AccessStatus$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$AccessStatus$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AccessStatus")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REPLY$AccessStatus$VH() { return _SE_ACCESS_REPLY$AccessStatus$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$AccessReason$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$AccessReason$LAYOUT() { return _SE_ACCESS_REPLY$AccessReason$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$AccessReason$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AccessReason")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REPLY$AccessReason$VH() { return _SE_ACCESS_REPLY$AccessReason$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$Privileges$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$Privileges$LAYOUT() { return _SE_ACCESS_REPLY$Privileges$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$Privileges$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Privileges")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REPLY$Privileges$VH() { return _SE_ACCESS_REPLY$Privileges$VH_; }

    static final int SecurityAnonymous() { return (int)0L; }

    static final int SecurityIdentification() { return (int)1L; }

    static final int SecurityImpersonation() { return (int)2L; }

    static final int SecurityDelegation() { return (int)3L; }

    static final int TokenPrimary() { return (int)1L; }

    static final int TokenImpersonation() { return (int)2L; }

    static final int TokenElevationTypeDefault() { return (int)1L; }

    static final int TokenElevationTypeFull() { return (int)2L; }

    static final int TokenElevationTypeLimited() { return (int)3L; }

    static final int TokenUser() { return (int)1L; }

    static final int TokenGroups() { return (int)2L; }

    static final int TokenPrivileges() { return (int)3L; }

    static final int TokenOwner() { return (int)4L; }

    static final int TokenPrimaryGroup() { return (int)5L; }

    static final int TokenDefaultDacl() { return (int)6L; }

    static final int TokenSource() { return (int)7L; }

    static final int TokenType() { return (int)8L; }

    static final int TokenImpersonationLevel() { return (int)9L; }

    static final int TokenStatistics() { return (int)10L; }

    static final int TokenRestrictedSids() { return (int)11L; }

    static final int TokenSessionId() { return (int)12L; }

    static final int TokenGroupsAndPrivileges() { return (int)13L; }

    static final int TokenSessionReference() { return (int)14L; }

    static final int TokenSandBoxInert() { return (int)15L; }

    static final int TokenAuditPolicy() { return (int)16L; }

    static final int TokenOrigin() { return (int)17L; }

    static final int TokenElevationType() { return (int)18L; }

    static final int TokenLinkedToken() { return (int)19L; }

    static final int TokenElevation() { return (int)20L; }

    static final int TokenHasRestrictions() { return (int)21L; }

    static final int TokenAccessInformation() { return (int)22L; }

    static final int TokenVirtualizationAllowed() { return (int)23L; }

    static final int TokenVirtualizationEnabled() { return (int)24L; }

    static final int TokenIntegrityLevel() { return (int)25L; }

    static final int TokenUIAccess() { return (int)26L; }

    static final int TokenMandatoryPolicy() { return (int)27L; }

    static final int TokenLogonSid() { return (int)28L; }

    static final int TokenIsAppContainer() { return (int)29L; }

    static final int TokenCapabilities() { return (int)30L; }

    static final int TokenAppContainerSid() { return (int)31L; }

    static final int TokenAppContainerNumber() { return (int)32L; }

    static final int TokenUserClaimAttributes() { return (int)33L; }

    static final int TokenDeviceClaimAttributes() { return (int)34L; }

    static final int TokenRestrictedUserClaimAttributes() { return (int)35L; }

    static final int TokenRestrictedDeviceClaimAttributes() { return (int)36L; }

    static final int TokenDeviceGroups() { return (int)37L; }

    static final int TokenRestrictedDeviceGroups() { return (int)38L; }

    static final int TokenSecurityAttributes() { return (int)39L; }

    static final int TokenIsRestricted() { return (int)40L; }

    static final int TokenProcessTrustLevel() { return (int)41L; }

    static final int TokenPrivateNameSpace() { return (int)42L; }

    static final int TokenSingletonAttributes() { return (int)43L; }

    static final int TokenBnoIsolation() { return (int)44L; }

    static final int TokenChildProcessFlags() { return (int)45L; }

    static final int TokenIsLessPrivilegedAppContainer() { return (int)46L; }

    static final int TokenIsSandboxed() { return (int)47L; }

    static final int TokenOriginatingProcessTrustLevel() { return (int)48L; }

    static final int MaxTokenInfoClass() { return (int)49L; }

    static final MemoryLayout _TOKEN_USER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("Sid"),
            C_LONG.withName("Attributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("User")
    ).withName("_TOKEN_USER");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_USER$struct$LAYOUT() { return _TOKEN_USER$struct$LAYOUT_; }

    static final MemoryLayout _SE_TOKEN_USER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_POINTER.withName("Sid"),
                C_LONG.withName("Attributes"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("User")
        ).withName("TokenUser"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("Sid"),
            C_LONG.withName("Attributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("User"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("Revision"),
            C_CHAR.withName("SubAuthorityCount"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(6, C_CHAR).withName("Value")
            ).withName("IdentifierAuthority"),
            MemoryLayout.ofSequence(1, C_LONG).withName("SubAuthority")
        ).withName("Sid"),
        MemoryLayout.ofSequence(68, C_CHAR).withName("Buffer"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_SE_TOKEN_USER");
    static final jdk.incubator.foreign.MemoryLayout _SE_TOKEN_USER$struct$LAYOUT() { return _SE_TOKEN_USER$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_GROUPS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("GroupCount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_POINTER.withName("Sid"),
            C_LONG.withName("Attributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("_SID_AND_ATTRIBUTES")).withName("Groups")
    ).withName("_TOKEN_GROUPS");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS$struct$LAYOUT() { return _TOKEN_GROUPS$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_GROUPS$GroupCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS$GroupCount$LAYOUT() { return _TOKEN_GROUPS$GroupCount$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS$GroupCount$VH_ = _TOKEN_GROUPS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GroupCount"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS$GroupCount$VH() { return _TOKEN_GROUPS$GroupCount$VH_; }

    static final MemoryLayout _TOKEN_PRIVILEGES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PrivilegeCount"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("Luid"),
            C_LONG.withName("Attributes")
        ).withName("_LUID_AND_ATTRIBUTES")).withName("Privileges")
    ).withName("_TOKEN_PRIVILEGES");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_PRIVILEGES$struct$LAYOUT() { return _TOKEN_PRIVILEGES$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_PRIVILEGES$PrivilegeCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_PRIVILEGES$PrivilegeCount$LAYOUT() { return _TOKEN_PRIVILEGES$PrivilegeCount$LAYOUT_; }

    static final VarHandle _TOKEN_PRIVILEGES$PrivilegeCount$VH_ = _TOKEN_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    static final java.lang.invoke.VarHandle _TOKEN_PRIVILEGES$PrivilegeCount$VH() { return _TOKEN_PRIVILEGES$PrivilegeCount$VH_; }

    static final MemoryLayout _TOKEN_OWNER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Owner")
    ).withName("_TOKEN_OWNER");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_OWNER$struct$LAYOUT() { return _TOKEN_OWNER$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_OWNER$Owner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_OWNER$Owner$LAYOUT() { return _TOKEN_OWNER$Owner$LAYOUT_; }

    static final VarHandle _TOKEN_OWNER$Owner$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_OWNER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Owner")));
    static final java.lang.invoke.VarHandle _TOKEN_OWNER$Owner$VH() { return _TOKEN_OWNER$Owner$VH_; }

    static final MemoryLayout _TOKEN_PRIMARY_GROUP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("PrimaryGroup")
    ).withName("_TOKEN_PRIMARY_GROUP");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_PRIMARY_GROUP$struct$LAYOUT() { return _TOKEN_PRIMARY_GROUP$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_PRIMARY_GROUP$PrimaryGroup$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_PRIMARY_GROUP$PrimaryGroup$LAYOUT() { return _TOKEN_PRIMARY_GROUP$PrimaryGroup$LAYOUT_; }

    static final VarHandle _TOKEN_PRIMARY_GROUP$PrimaryGroup$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_PRIMARY_GROUP$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PrimaryGroup")));
    static final java.lang.invoke.VarHandle _TOKEN_PRIMARY_GROUP$PrimaryGroup$VH() { return _TOKEN_PRIMARY_GROUP$PrimaryGroup$VH_; }

    static final MemoryLayout _TOKEN_DEFAULT_DACL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("DefaultDacl")
    ).withName("_TOKEN_DEFAULT_DACL");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_DEFAULT_DACL$struct$LAYOUT() { return _TOKEN_DEFAULT_DACL$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_DEFAULT_DACL$DefaultDacl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_DEFAULT_DACL$DefaultDacl$LAYOUT() { return _TOKEN_DEFAULT_DACL$DefaultDacl$LAYOUT_; }

    static final VarHandle _TOKEN_DEFAULT_DACL$DefaultDacl$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_DEFAULT_DACL$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DefaultDacl")));
    static final java.lang.invoke.VarHandle _TOKEN_DEFAULT_DACL$DefaultDacl$VH() { return _TOKEN_DEFAULT_DACL$DefaultDacl$VH_; }

    static final MemoryLayout _TOKEN_USER_CLAIMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("UserClaims")
    ).withName("_TOKEN_USER_CLAIMS");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_USER_CLAIMS$struct$LAYOUT() { return _TOKEN_USER_CLAIMS$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_USER_CLAIMS$UserClaims$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_USER_CLAIMS$UserClaims$LAYOUT() { return _TOKEN_USER_CLAIMS$UserClaims$LAYOUT_; }

    static final VarHandle _TOKEN_USER_CLAIMS$UserClaims$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_USER_CLAIMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserClaims")));
    static final java.lang.invoke.VarHandle _TOKEN_USER_CLAIMS$UserClaims$VH() { return _TOKEN_USER_CLAIMS$UserClaims$VH_; }

    static final MemoryLayout _TOKEN_DEVICE_CLAIMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("DeviceClaims")
    ).withName("_TOKEN_DEVICE_CLAIMS");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_DEVICE_CLAIMS$struct$LAYOUT() { return _TOKEN_DEVICE_CLAIMS$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_DEVICE_CLAIMS$DeviceClaims$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_DEVICE_CLAIMS$DeviceClaims$LAYOUT() { return _TOKEN_DEVICE_CLAIMS$DeviceClaims$LAYOUT_; }

    static final VarHandle _TOKEN_DEVICE_CLAIMS$DeviceClaims$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_DEVICE_CLAIMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DeviceClaims")));
    static final java.lang.invoke.VarHandle _TOKEN_DEVICE_CLAIMS$DeviceClaims$VH() { return _TOKEN_DEVICE_CLAIMS$DeviceClaims$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("SidCount"),
        C_LONG.withName("SidLength"),
        C_POINTER.withName("Sids"),
        C_LONG.withName("RestrictedSidCount"),
        C_LONG.withName("RestrictedSidLength"),
        C_POINTER.withName("RestrictedSids"),
        C_LONG.withName("PrivilegeCount"),
        C_LONG.withName("PrivilegeLength"),
        C_POINTER.withName("Privileges"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("AuthenticationId")
    ).withName("_TOKEN_GROUPS_AND_PRIVILEGES");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidCount"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidLength"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$Sids$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$Sids$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$Sids$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Sids")));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RestrictedSidCount"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RestrictedSidLength"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RestrictedSids")));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeLength"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Privileges")));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH_; }

    static final MemoryLayout _TOKEN_LINKED_TOKEN$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("LinkedToken")
    ).withName("_TOKEN_LINKED_TOKEN");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_LINKED_TOKEN$struct$LAYOUT() { return _TOKEN_LINKED_TOKEN$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_LINKED_TOKEN$LinkedToken$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_LINKED_TOKEN$LinkedToken$LAYOUT() { return _TOKEN_LINKED_TOKEN$LinkedToken$LAYOUT_; }

    static final VarHandle _TOKEN_LINKED_TOKEN$LinkedToken$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_LINKED_TOKEN$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LinkedToken")));
    static final java.lang.invoke.VarHandle _TOKEN_LINKED_TOKEN$LinkedToken$VH() { return _TOKEN_LINKED_TOKEN$LinkedToken$VH_; }

    static final MemoryLayout _TOKEN_ELEVATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("TokenIsElevated")
    ).withName("_TOKEN_ELEVATION");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ELEVATION$struct$LAYOUT() { return _TOKEN_ELEVATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_ELEVATION$TokenIsElevated$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ELEVATION$TokenIsElevated$LAYOUT() { return _TOKEN_ELEVATION$TokenIsElevated$LAYOUT_; }

    static final VarHandle _TOKEN_ELEVATION$TokenIsElevated$VH_ = _TOKEN_ELEVATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TokenIsElevated"));
    static final java.lang.invoke.VarHandle _TOKEN_ELEVATION$TokenIsElevated$VH() { return _TOKEN_ELEVATION$TokenIsElevated$VH_; }

    static final MemoryLayout _TOKEN_MANDATORY_LABEL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("Sid"),
            C_LONG.withName("Attributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Label")
    ).withName("_TOKEN_MANDATORY_LABEL");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_MANDATORY_LABEL$struct$LAYOUT() { return _TOKEN_MANDATORY_LABEL$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_MANDATORY_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Policy")
    ).withName("_TOKEN_MANDATORY_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_MANDATORY_POLICY$struct$LAYOUT() { return _TOKEN_MANDATORY_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_MANDATORY_POLICY$Policy$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_MANDATORY_POLICY$Policy$LAYOUT() { return _TOKEN_MANDATORY_POLICY$Policy$LAYOUT_; }

    static final VarHandle _TOKEN_MANDATORY_POLICY$Policy$VH_ = _TOKEN_MANDATORY_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Policy"));
    static final java.lang.invoke.VarHandle _TOKEN_MANDATORY_POLICY$Policy$VH() { return _TOKEN_MANDATORY_POLICY$Policy$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("SidHash"),
        C_POINTER.withName("RestrictedSidHash"),
        C_POINTER.withName("Privileges"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("AuthenticationId"),
        C_INT.withName("TokenType"),
        C_INT.withName("ImpersonationLevel"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Policy")
        ).withName("MandatoryPolicy"),
        C_LONG.withName("Flags"),
        C_LONG.withName("AppContainerNumber"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("PackageSid"),
        C_POINTER.withName("CapabilitiesHash"),
        C_POINTER.withName("TrustLevelSid"),
        C_POINTER.withName("SecurityAttributes")
    ).withName("_TOKEN_ACCESS_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$struct$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$SidHash$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$SidHash$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$SidHash$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$SidHash$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SidHash")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$SidHash$VH() { return _TOKEN_ACCESS_INFORMATION$SidHash$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RestrictedSidHash")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH() { return _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$Privileges$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$Privileges$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$Privileges$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$Privileges$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Privileges")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$Privileges$VH() { return _TOKEN_ACCESS_INFORMATION$Privileges$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$TokenType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$TokenType$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$TokenType$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$TokenType$VH_ = _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TokenType"));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$TokenType$VH() { return _TOKEN_ACCESS_INFORMATION$TokenType$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH_ = _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImpersonationLevel"));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH() { return _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$Flags$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$Flags$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$Flags$VH_ = _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$Flags$VH() { return _TOKEN_ACCESS_INFORMATION$Flags$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$AppContainerNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$AppContainerNumber$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$AppContainerNumber$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH_ = _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AppContainerNumber"));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH() { return _TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$PackageSid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$PackageSid$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$PackageSid$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$PackageSid$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PackageSid")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$PackageSid$VH() { return _TOKEN_ACCESS_INFORMATION$PackageSid$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CapabilitiesHash")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH() { return _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$TrustLevelSid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$TrustLevelSid$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$TrustLevelSid$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TrustLevelSid")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH() { return _TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$SecurityAttributes$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$SecurityAttributes$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$SecurityAttributes$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SecurityAttributes")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH() { return _TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH_; }

    static final MemoryLayout _TOKEN_AUDIT_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(30, C_CHAR).withName("PerUserPolicy")
    ).withName("_TOKEN_AUDIT_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_AUDIT_POLICY$struct$LAYOUT() { return _TOKEN_AUDIT_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_SOURCE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(8, C_CHAR).withName("SourceName"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("SourceIdentifier")
    ).withName("_TOKEN_SOURCE");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_SOURCE$struct$LAYOUT() { return _TOKEN_SOURCE$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_STATISTICS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("TokenId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("AuthenticationId"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ExpirationTime"),
        C_INT.withName("TokenType"),
        C_INT.withName("ImpersonationLevel"),
        C_LONG.withName("DynamicCharged"),
        C_LONG.withName("DynamicAvailable"),
        C_LONG.withName("GroupCount"),
        C_LONG.withName("PrivilegeCount"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("ModifiedId")
    ).withName("_TOKEN_STATISTICS");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$struct$LAYOUT() { return _TOKEN_STATISTICS$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_STATISTICS$TokenType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$TokenType$LAYOUT() { return _TOKEN_STATISTICS$TokenType$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$TokenType$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TokenType"));
    static final java.lang.invoke.VarHandle _TOKEN_STATISTICS$TokenType$VH() { return _TOKEN_STATISTICS$TokenType$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$ImpersonationLevel$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$ImpersonationLevel$LAYOUT() { return _TOKEN_STATISTICS$ImpersonationLevel$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$ImpersonationLevel$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImpersonationLevel"));
    static final java.lang.invoke.VarHandle _TOKEN_STATISTICS$ImpersonationLevel$VH() { return _TOKEN_STATISTICS$ImpersonationLevel$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$DynamicCharged$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$DynamicCharged$LAYOUT() { return _TOKEN_STATISTICS$DynamicCharged$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$DynamicCharged$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DynamicCharged"));
    static final java.lang.invoke.VarHandle _TOKEN_STATISTICS$DynamicCharged$VH() { return _TOKEN_STATISTICS$DynamicCharged$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$DynamicAvailable$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$DynamicAvailable$LAYOUT() { return _TOKEN_STATISTICS$DynamicAvailable$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$DynamicAvailable$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DynamicAvailable"));
    static final java.lang.invoke.VarHandle _TOKEN_STATISTICS$DynamicAvailable$VH() { return _TOKEN_STATISTICS$DynamicAvailable$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$GroupCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$GroupCount$LAYOUT() { return _TOKEN_STATISTICS$GroupCount$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$GroupCount$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GroupCount"));
    static final java.lang.invoke.VarHandle _TOKEN_STATISTICS$GroupCount$VH() { return _TOKEN_STATISTICS$GroupCount$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$PrivilegeCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$PrivilegeCount$LAYOUT() { return _TOKEN_STATISTICS$PrivilegeCount$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$PrivilegeCount$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    static final java.lang.invoke.VarHandle _TOKEN_STATISTICS$PrivilegeCount$VH() { return _TOKEN_STATISTICS$PrivilegeCount$VH_; }

    static final MemoryLayout _TOKEN_CONTROL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("TokenId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("AuthenticationId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("ModifiedId"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(8, C_CHAR).withName("SourceName"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("SourceIdentifier")
        ).withName("TokenSource")
    ).withName("_TOKEN_CONTROL");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_CONTROL$struct$LAYOUT() { return _TOKEN_CONTROL$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_ORIGIN$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("OriginatingLogonSession")
    ).withName("_TOKEN_ORIGIN");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ORIGIN$struct$LAYOUT() { return _TOKEN_ORIGIN$struct$LAYOUT_; }

    static final int MandatoryLevelUntrusted() { return (int)0L; }

    static final int MandatoryLevelLow() { return (int)1L; }

    static final int MandatoryLevelMedium() { return (int)2L; }

    static final int MandatoryLevelHigh() { return (int)3L; }

    static final int MandatoryLevelSystem() { return (int)4L; }

    static final int MandatoryLevelSecureProcess() { return (int)5L; }

    static final int MandatoryLevelCount() { return (int)6L; }

    static final MemoryLayout _TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("TokenAppContainer")
    ).withName("_TOKEN_APPCONTAINER_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT() { return _TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$LAYOUT() { return _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$LAYOUT_; }

    static final VarHandle _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TokenAppContainer")));
    static final java.lang.invoke.VarHandle _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH() { return _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH_; }

    static final MemoryLayout _TOKEN_SID_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Sid")
    ).withName("_TOKEN_SID_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_SID_INFORMATION$struct$LAYOUT() { return _TOKEN_SID_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_SID_INFORMATION$Sid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_SID_INFORMATION$Sid$LAYOUT() { return _TOKEN_SID_INFORMATION$Sid$LAYOUT_; }

    static final VarHandle _TOKEN_SID_INFORMATION$Sid$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_SID_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Sid")));
    static final java.lang.invoke.VarHandle _TOKEN_SID_INFORMATION$Sid$VH() { return _TOKEN_SID_INFORMATION$Sid$VH_; }

    static final MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("IsolationPrefix"),
        C_CHAR.withName("IsolationEnabled"),
        MemoryLayout.ofPaddingBits(56)
    ).withName("_TOKEN_BNO_ISOLATION_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT() { return _TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$LAYOUT() { return _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$LAYOUT_; }

    static final VarHandle _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsolationPrefix")));
    static final java.lang.invoke.VarHandle _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH() { return _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH_; }

    static final MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$LAYOUT() { return _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$LAYOUT_; }

    static final VarHandle _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH_ = _TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsolationEnabled"));
    static final java.lang.invoke.VarHandle _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH() { return _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Version"),
        C_POINTER.withName("Name")
    ).withName("_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE");
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH_ = _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Name")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pValue"),
        C_LONG.withName("ValueLength"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE");
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pValue")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH_ = _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ValueLength"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Name"),
        C_SHORT.withName("ValueType"),
        C_SHORT.withName("Reserved"),
        C_LONG.withName("Flags"),
        C_LONG.withName("ValueCount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            C_POINTER.withName("pInt64"),
            C_POINTER.withName("pUint64"),
            C_POINTER.withName("ppString"),
            C_POINTER.withName("pFqbn"),
            C_POINTER.withName("pOctetString")
        ).withName("Values")
    ).withName("_CLAIM_SECURITY_ATTRIBUTE_V1");
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Name$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Name$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Name$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Name")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH_ = _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ValueType"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH_ = _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH_ = _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH_ = _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ValueCount"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("pInt64"),
        C_POINTER.withName("pUint64"),
        C_POINTER.withName("ppString"),
        C_POINTER.withName("pFqbn"),
        C_POINTER.withName("pOctetString")
    );
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pInt64")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUint64")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ppString")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pFqbn")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pOctetString")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Name"),
        C_SHORT.withName("ValueType"),
        C_SHORT.withName("Reserved"),
        C_LONG.withName("Flags"),
        C_LONG.withName("ValueCount"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofSequence(1, C_LONG).withName("pInt64"),
            MemoryLayout.ofSequence(1, C_LONG).withName("pUint64"),
            MemoryLayout.ofSequence(1, C_LONG).withName("ppString"),
            MemoryLayout.ofSequence(1, C_LONG).withName("pFqbn"),
            MemoryLayout.ofSequence(1, C_LONG).withName("pOctetString")
        ).withName("Values")
    ).withName("_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1");
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Name"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ValueType"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ValueCount"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Values$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofSequence(1, C_LONG).withName("pInt64"),
        MemoryLayout.ofSequence(1, C_LONG).withName("pUint64"),
        MemoryLayout.ofSequence(1, C_LONG).withName("ppString"),
        MemoryLayout.ofSequence(1, C_LONG).withName("pFqbn"),
        MemoryLayout.ofSequence(1, C_LONG).withName("pOctetString")
    );
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Values$union$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Values$union$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Version"),
        C_SHORT.withName("Reserved"),
        C_LONG.withName("AttributeCount"),
        MemoryLayout.ofUnion(
            C_POINTER.withName("pAttributeV1")
        ).withName("Attribute")
    ).withName("_CLAIM_SECURITY_ATTRIBUTES_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH_ = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH_ = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH_ = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AttributeCount"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("pAttributeV1")
    );
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$union$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$union$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pAttributeV1")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$VH() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$VH_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Length"),
        C_INT.withName("ImpersonationLevel"),
        C_CHAR.withName("ContextTrackingMode"),
        C_CHAR.withName("EffectiveOnly"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_SECURITY_QUALITY_OF_SERVICE");
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$Length$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$Length$LAYOUT_; }

    static final VarHandle _SECURITY_QUALITY_OF_SERVICE$Length$VH_ = _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _SECURITY_QUALITY_OF_SERVICE$Length$VH() { return _SECURITY_QUALITY_OF_SERVICE$Length$VH_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$LAYOUT_; }

    static final VarHandle _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH_ = _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImpersonationLevel"));
    static final java.lang.invoke.VarHandle _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH() { return _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$LAYOUT_; }

    static final VarHandle _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH_ = _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ContextTrackingMode"));
    static final java.lang.invoke.VarHandle _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH() { return _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$LAYOUT_; }

    static final VarHandle _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH_ = _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EffectiveOnly"));
    static final java.lang.invoke.VarHandle _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH() { return _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Token"),
        C_CHAR.withName("CopyOnOpen"),
        C_CHAR.withName("EffectiveOnly"),
        MemoryLayout.ofPaddingBits(16),
        C_INT.withName("Level")
    ).withName("_SE_IMPERSONATION_STATE");
    static final jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$struct$LAYOUT() { return _SE_IMPERSONATION_STATE$struct$LAYOUT_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$Token$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$Token$LAYOUT() { return _SE_IMPERSONATION_STATE$Token$LAYOUT_; }

    static final VarHandle _SE_IMPERSONATION_STATE$Token$VH_ = MemoryHandles.asAddressVarHandle(_SE_IMPERSONATION_STATE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Token")));
    static final java.lang.invoke.VarHandle _SE_IMPERSONATION_STATE$Token$VH() { return _SE_IMPERSONATION_STATE$Token$VH_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$CopyOnOpen$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$CopyOnOpen$LAYOUT() { return _SE_IMPERSONATION_STATE$CopyOnOpen$LAYOUT_; }

    static final VarHandle _SE_IMPERSONATION_STATE$CopyOnOpen$VH_ = _SE_IMPERSONATION_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("CopyOnOpen"));
    static final java.lang.invoke.VarHandle _SE_IMPERSONATION_STATE$CopyOnOpen$VH() { return _SE_IMPERSONATION_STATE$CopyOnOpen$VH_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$EffectiveOnly$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$EffectiveOnly$LAYOUT() { return _SE_IMPERSONATION_STATE$EffectiveOnly$LAYOUT_; }

    static final VarHandle _SE_IMPERSONATION_STATE$EffectiveOnly$VH_ = _SE_IMPERSONATION_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EffectiveOnly"));
    static final java.lang.invoke.VarHandle _SE_IMPERSONATION_STATE$EffectiveOnly$VH() { return _SE_IMPERSONATION_STATE$EffectiveOnly$VH_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$Level$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$Level$LAYOUT() { return _SE_IMPERSONATION_STATE$Level$LAYOUT_; }

    static final VarHandle _SE_IMPERSONATION_STATE$Level$VH_ = _SE_IMPERSONATION_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Level"));
    static final java.lang.invoke.VarHandle _SE_IMPERSONATION_STATE$Level$VH() { return _SE_IMPERSONATION_STATE$Level$VH_; }

    static final int SeImageSignatureNone() { return (int)0L; }

    static final int SeImageSignatureEmbedded() { return (int)1L; }

    static final int SeImageSignatureCache() { return (int)2L; }

    static final int SeImageSignatureCatalogCached() { return (int)3L; }

    static final int SeImageSignatureCatalogNotCached() { return (int)4L; }

    static final int SeImageSignatureCatalogHint() { return (int)5L; }

    static final int SeImageSignaturePackageCatalog() { return (int)6L; }

    static final int SeLearningModeInvalidType() { return (int)0L; }

    static final int SeLearningModeSettings() { return (int)1L; }

    static final int SeLearningModeMax() { return (int)2L; }

    static final MemoryLayout _SECURITY_CAPABILITIES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("AppContainerSid"),
        C_POINTER.withName("Capabilities"),
        C_LONG.withName("CapabilityCount"),
        C_LONG.withName("Reserved")
    ).withName("_SECURITY_CAPABILITIES");
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$struct$LAYOUT() { return _SECURITY_CAPABILITIES$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_CAPABILITIES$AppContainerSid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$AppContainerSid$LAYOUT() { return _SECURITY_CAPABILITIES$AppContainerSid$LAYOUT_; }

    static final VarHandle _SECURITY_CAPABILITIES$AppContainerSid$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_CAPABILITIES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AppContainerSid")));
    static final java.lang.invoke.VarHandle _SECURITY_CAPABILITIES$AppContainerSid$VH() { return _SECURITY_CAPABILITIES$AppContainerSid$VH_; }

    static final MemoryLayout _SECURITY_CAPABILITIES$Capabilities$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$Capabilities$LAYOUT() { return _SECURITY_CAPABILITIES$Capabilities$LAYOUT_; }

    static final VarHandle _SECURITY_CAPABILITIES$Capabilities$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_CAPABILITIES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Capabilities")));
    static final java.lang.invoke.VarHandle _SECURITY_CAPABILITIES$Capabilities$VH() { return _SECURITY_CAPABILITIES$Capabilities$VH_; }

    static final MemoryLayout _SECURITY_CAPABILITIES$CapabilityCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$CapabilityCount$LAYOUT() { return _SECURITY_CAPABILITIES$CapabilityCount$LAYOUT_; }

    static final VarHandle _SECURITY_CAPABILITIES$CapabilityCount$VH_ = _SECURITY_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CapabilityCount"));
    static final java.lang.invoke.VarHandle _SECURITY_CAPABILITIES$CapabilityCount$VH() { return _SECURITY_CAPABILITIES$CapabilityCount$VH_; }

    static final MemoryLayout _SECURITY_CAPABILITIES$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$Reserved$LAYOUT() { return _SECURITY_CAPABILITIES$Reserved$LAYOUT_; }

    static final VarHandle _SECURITY_CAPABILITIES$Reserved$VH_ = _SECURITY_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _SECURITY_CAPABILITIES$Reserved$VH() { return _SECURITY_CAPABILITIES$Reserved$VH_; }

    static final MemoryLayout _JOB_SET_ARRAY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("JobHandle"),
        C_LONG.withName("MemberLevel"),
        C_LONG.withName("Flags")
    ).withName("_JOB_SET_ARRAY");
    static final jdk.incubator.foreign.MemoryLayout _JOB_SET_ARRAY$struct$LAYOUT() { return _JOB_SET_ARRAY$struct$LAYOUT_; }

    static final MemoryLayout _JOB_SET_ARRAY$JobHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _JOB_SET_ARRAY$JobHandle$LAYOUT() { return _JOB_SET_ARRAY$JobHandle$LAYOUT_; }

    static final VarHandle _JOB_SET_ARRAY$JobHandle$VH_ = MemoryHandles.asAddressVarHandle(_JOB_SET_ARRAY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobHandle")));
    static final java.lang.invoke.VarHandle _JOB_SET_ARRAY$JobHandle$VH() { return _JOB_SET_ARRAY$JobHandle$VH_; }

    static final MemoryLayout _JOB_SET_ARRAY$MemberLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOB_SET_ARRAY$MemberLevel$LAYOUT() { return _JOB_SET_ARRAY$MemberLevel$LAYOUT_; }

    static final VarHandle _JOB_SET_ARRAY$MemberLevel$VH_ = _JOB_SET_ARRAY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MemberLevel"));
    static final java.lang.invoke.VarHandle _JOB_SET_ARRAY$MemberLevel$VH() { return _JOB_SET_ARRAY$MemberLevel$VH_; }

    static final MemoryLayout _JOB_SET_ARRAY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOB_SET_ARRAY$Flags$LAYOUT() { return _JOB_SET_ARRAY$Flags$LAYOUT_; }

    static final VarHandle _JOB_SET_ARRAY$Flags$VH_ = _JOB_SET_ARRAY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _JOB_SET_ARRAY$Flags$VH() { return _JOB_SET_ARRAY$Flags$VH_; }

    static final MemoryLayout _EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Next"),
        C_POINTER.withName("Handler")
    ).withName("_EXCEPTION_REGISTRATION_RECORD");
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT() { return _EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _EXCEPTION_REGISTRATION_RECORD$Next$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_REGISTRATION_RECORD$Next$LAYOUT() { return _EXCEPTION_REGISTRATION_RECORD$Next$LAYOUT_; }

    static final VarHandle _EXCEPTION_REGISTRATION_RECORD$Next$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Next")));
    static final java.lang.invoke.VarHandle _EXCEPTION_REGISTRATION_RECORD$Next$VH() { return _EXCEPTION_REGISTRATION_RECORD$Next$VH_; }

    static final MemoryLayout _EXCEPTION_REGISTRATION_RECORD$Handler$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_REGISTRATION_RECORD$Handler$LAYOUT() { return _EXCEPTION_REGISTRATION_RECORD$Handler$LAYOUT_; }

    static final VarHandle _EXCEPTION_REGISTRATION_RECORD$Handler$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Handler")));
    static final java.lang.invoke.VarHandle _EXCEPTION_REGISTRATION_RECORD$Handler$VH() { return _EXCEPTION_REGISTRATION_RECORD$Handler$VH_; }

    static final MemoryLayout _NT_TIB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("ExceptionList"),
        C_POINTER.withName("StackBase"),
        C_POINTER.withName("StackLimit"),
        C_POINTER.withName("SubSystemTib"),
        C_POINTER.withName("FiberData"),
        C_LONG.withName("Version"),
        C_POINTER.withName("ArbitraryUserPointer"),
        C_POINTER.withName("Self")
    ).withName("_NT_TIB");
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$struct$LAYOUT() { return _NT_TIB$struct$LAYOUT_; }

    static final MemoryLayout _NT_TIB$ExceptionList$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$ExceptionList$LAYOUT() { return _NT_TIB$ExceptionList$LAYOUT_; }

    static final VarHandle _NT_TIB$ExceptionList$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionList")));
    static final java.lang.invoke.VarHandle _NT_TIB$ExceptionList$VH() { return _NT_TIB$ExceptionList$VH_; }

    static final MemoryLayout _NT_TIB$StackBase$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$StackBase$LAYOUT() { return _NT_TIB$StackBase$LAYOUT_; }

    static final VarHandle _NT_TIB$StackBase$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackBase")));
    static final java.lang.invoke.VarHandle _NT_TIB$StackBase$VH() { return _NT_TIB$StackBase$VH_; }

    static final MemoryLayout _NT_TIB$StackLimit$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$StackLimit$LAYOUT() { return _NT_TIB$StackLimit$LAYOUT_; }

    static final VarHandle _NT_TIB$StackLimit$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackLimit")));
    static final java.lang.invoke.VarHandle _NT_TIB$StackLimit$VH() { return _NT_TIB$StackLimit$VH_; }

    static final MemoryLayout _NT_TIB$SubSystemTib$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$SubSystemTib$LAYOUT() { return _NT_TIB$SubSystemTib$LAYOUT_; }

    static final VarHandle _NT_TIB$SubSystemTib$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SubSystemTib")));
    static final java.lang.invoke.VarHandle _NT_TIB$SubSystemTib$VH() { return _NT_TIB$SubSystemTib$VH_; }

    static final MemoryLayout _NT_TIB$FiberData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$FiberData$LAYOUT() { return _NT_TIB$FiberData$LAYOUT_; }

    static final VarHandle _NT_TIB$FiberData$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FiberData")));
    static final java.lang.invoke.VarHandle _NT_TIB$FiberData$VH() { return _NT_TIB$FiberData$VH_; }

    static final MemoryLayout _NT_TIB$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$Version$LAYOUT() { return _NT_TIB$Version$LAYOUT_; }

    static final VarHandle _NT_TIB$Version$VH_ = _NT_TIB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _NT_TIB$Version$VH() { return _NT_TIB$Version$VH_; }

    static final MemoryLayout _NT_TIB$ArbitraryUserPointer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$ArbitraryUserPointer$LAYOUT() { return _NT_TIB$ArbitraryUserPointer$LAYOUT_; }

    static final VarHandle _NT_TIB$ArbitraryUserPointer$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ArbitraryUserPointer")));
    static final java.lang.invoke.VarHandle _NT_TIB$ArbitraryUserPointer$VH() { return _NT_TIB$ArbitraryUserPointer$VH_; }

    static final MemoryLayout _NT_TIB$Self$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$Self$LAYOUT() { return _NT_TIB$Self$LAYOUT_; }

    static final VarHandle _NT_TIB$Self$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Self")));
    static final java.lang.invoke.VarHandle _NT_TIB$Self$VH() { return _NT_TIB$Self$VH_; }

    static final MemoryLayout _NT_TIB32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ExceptionList"),
        C_LONG.withName("StackBase"),
        C_LONG.withName("StackLimit"),
        C_LONG.withName("SubSystemTib"),
        C_LONG.withName("FiberData"),
        C_LONG.withName("Version"),
        C_LONG.withName("ArbitraryUserPointer"),
        C_LONG.withName("Self")
    ).withName("_NT_TIB32");
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$struct$LAYOUT() { return _NT_TIB32$struct$LAYOUT_; }

    static final MemoryLayout _NT_TIB32$ExceptionList$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$ExceptionList$LAYOUT() { return _NT_TIB32$ExceptionList$LAYOUT_; }

    static final VarHandle _NT_TIB32$ExceptionList$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionList"));
    static final java.lang.invoke.VarHandle _NT_TIB32$ExceptionList$VH() { return _NT_TIB32$ExceptionList$VH_; }

    static final MemoryLayout _NT_TIB32$StackBase$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$StackBase$LAYOUT() { return _NT_TIB32$StackBase$LAYOUT_; }

    static final VarHandle _NT_TIB32$StackBase$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StackBase"));
    static final java.lang.invoke.VarHandle _NT_TIB32$StackBase$VH() { return _NT_TIB32$StackBase$VH_; }

    static final MemoryLayout _NT_TIB32$StackLimit$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$StackLimit$LAYOUT() { return _NT_TIB32$StackLimit$LAYOUT_; }

    static final VarHandle _NT_TIB32$StackLimit$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StackLimit"));
    static final java.lang.invoke.VarHandle _NT_TIB32$StackLimit$VH() { return _NT_TIB32$StackLimit$VH_; }

    static final MemoryLayout _NT_TIB32$SubSystemTib$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$SubSystemTib$LAYOUT() { return _NT_TIB32$SubSystemTib$LAYOUT_; }

    static final VarHandle _NT_TIB32$SubSystemTib$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SubSystemTib"));
    static final java.lang.invoke.VarHandle _NT_TIB32$SubSystemTib$VH() { return _NT_TIB32$SubSystemTib$VH_; }

    static final MemoryLayout _NT_TIB32$FiberData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$FiberData$LAYOUT() { return _NT_TIB32$FiberData$LAYOUT_; }

    static final VarHandle _NT_TIB32$FiberData$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FiberData"));
    static final java.lang.invoke.VarHandle _NT_TIB32$FiberData$VH() { return _NT_TIB32$FiberData$VH_; }

    static final MemoryLayout _NT_TIB32$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$Version$LAYOUT() { return _NT_TIB32$Version$LAYOUT_; }

    static final VarHandle _NT_TIB32$Version$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _NT_TIB32$Version$VH() { return _NT_TIB32$Version$VH_; }

    static final MemoryLayout _NT_TIB32$ArbitraryUserPointer$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$ArbitraryUserPointer$LAYOUT() { return _NT_TIB32$ArbitraryUserPointer$LAYOUT_; }

    static final VarHandle _NT_TIB32$ArbitraryUserPointer$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArbitraryUserPointer"));
    static final java.lang.invoke.VarHandle _NT_TIB32$ArbitraryUserPointer$VH() { return _NT_TIB32$ArbitraryUserPointer$VH_; }

    static final MemoryLayout _NT_TIB32$Self$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$Self$LAYOUT() { return _NT_TIB32$Self$LAYOUT_; }

    static final VarHandle _NT_TIB32$Self$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Self"));
    static final java.lang.invoke.VarHandle _NT_TIB32$Self$VH() { return _NT_TIB32$Self$VH_; }

    static final MemoryLayout _NT_TIB64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("ExceptionList"),
        C_LONGLONG.withName("StackBase"),
        C_LONGLONG.withName("StackLimit"),
        C_LONGLONG.withName("SubSystemTib"),
        C_LONGLONG.withName("FiberData"),
        C_LONG.withName("Version"),
        C_LONGLONG.withName("ArbitraryUserPointer"),
        C_LONGLONG.withName("Self")
    ).withName("_NT_TIB64");
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$struct$LAYOUT() { return _NT_TIB64$struct$LAYOUT_; }

    static final MemoryLayout _NT_TIB64$ExceptionList$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$ExceptionList$LAYOUT() { return _NT_TIB64$ExceptionList$LAYOUT_; }

    static final VarHandle _NT_TIB64$ExceptionList$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionList"));
    static final java.lang.invoke.VarHandle _NT_TIB64$ExceptionList$VH() { return _NT_TIB64$ExceptionList$VH_; }

    static final MemoryLayout _NT_TIB64$StackBase$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$StackBase$LAYOUT() { return _NT_TIB64$StackBase$LAYOUT_; }

    static final VarHandle _NT_TIB64$StackBase$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackBase"));
    static final java.lang.invoke.VarHandle _NT_TIB64$StackBase$VH() { return _NT_TIB64$StackBase$VH_; }

    static final MemoryLayout _NT_TIB64$StackLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$StackLimit$LAYOUT() { return _NT_TIB64$StackLimit$LAYOUT_; }

    static final VarHandle _NT_TIB64$StackLimit$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackLimit"));
    static final java.lang.invoke.VarHandle _NT_TIB64$StackLimit$VH() { return _NT_TIB64$StackLimit$VH_; }

    static final MemoryLayout _NT_TIB64$SubSystemTib$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$SubSystemTib$LAYOUT() { return _NT_TIB64$SubSystemTib$LAYOUT_; }

    static final VarHandle _NT_TIB64$SubSystemTib$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SubSystemTib"));
    static final java.lang.invoke.VarHandle _NT_TIB64$SubSystemTib$VH() { return _NT_TIB64$SubSystemTib$VH_; }

    static final MemoryLayout _NT_TIB64$FiberData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$FiberData$LAYOUT() { return _NT_TIB64$FiberData$LAYOUT_; }

    static final VarHandle _NT_TIB64$FiberData$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FiberData"));
    static final java.lang.invoke.VarHandle _NT_TIB64$FiberData$VH() { return _NT_TIB64$FiberData$VH_; }

    static final MemoryLayout _NT_TIB64$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$Version$LAYOUT() { return _NT_TIB64$Version$LAYOUT_; }

    static final VarHandle _NT_TIB64$Version$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _NT_TIB64$Version$VH() { return _NT_TIB64$Version$VH_; }

    static final MemoryLayout _NT_TIB64$ArbitraryUserPointer$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$ArbitraryUserPointer$LAYOUT() { return _NT_TIB64$ArbitraryUserPointer$LAYOUT_; }

    static final VarHandle _NT_TIB64$ArbitraryUserPointer$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ArbitraryUserPointer"));
    static final java.lang.invoke.VarHandle _NT_TIB64$ArbitraryUserPointer$VH() { return _NT_TIB64$ArbitraryUserPointer$VH_; }

    static final MemoryLayout _NT_TIB64$Self$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$Self$LAYOUT() { return _NT_TIB64$Self$LAYOUT_; }

    static final VarHandle _NT_TIB64$Self$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Self"));
    static final java.lang.invoke.VarHandle _NT_TIB64$Self$VH() { return _NT_TIB64$Self$VH_; }

    static final MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("UmsVersion"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("UmsContext"),
        C_POINTER.withName("UmsCompletionList")
    ).withName("_UMS_CREATE_THREAD_ATTRIBUTES");
    static final jdk.incubator.foreign.MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT() { return _UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_; }

    static final MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$LAYOUT() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$LAYOUT_; }

    static final VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH_ = _UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UmsVersion"));
    static final java.lang.invoke.VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH_; }

    static final MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$LAYOUT() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$LAYOUT_; }

    static final VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH_ = MemoryHandles.asAddressVarHandle(_UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UmsContext")));
    static final java.lang.invoke.VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH_; }

    static final MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$LAYOUT() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$LAYOUT_; }

    static final VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH_ = MemoryHandles.asAddressVarHandle(_UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UmsCompletionList")));
    static final java.lang.invoke.VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH_; }

}

