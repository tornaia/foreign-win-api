// Generated by jextract

package com.github.tornaia.foreign.win.api.winnt.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class winnt_h$constants$2 extends winnt_h$constants$1 {

    /* package-private */ winnt_h$constants$2() {}
    static final int DLL_THREAD_DETACH() { return (int)3L; }

    static final int DLL_PROCESS_DETACH() { return (int)0L; }

    static final int EVENTLOG_SEQUENTIAL_READ() { return (int)1L; }

    static final int EVENTLOG_SEEK_READ() { return (int)2L; }

    static final int EVENTLOG_FORWARDS_READ() { return (int)4L; }

    static final int EVENTLOG_BACKWARDS_READ() { return (int)8L; }

    static final int EVENTLOG_SUCCESS() { return (int)0L; }

    static final int EVENTLOG_ERROR_TYPE() { return (int)1L; }

    static final int EVENTLOG_WARNING_TYPE() { return (int)2L; }

    static final int EVENTLOG_INFORMATION_TYPE() { return (int)4L; }

    static final int EVENTLOG_AUDIT_SUCCESS() { return (int)8L; }

    static final int EVENTLOG_AUDIT_FAILURE() { return (int)16L; }

    static final int EVENTLOG_START_PAIRED_EVENT() { return (int)1L; }

    static final int EVENTLOG_END_PAIRED_EVENT() { return (int)2L; }

    static final int EVENTLOG_END_ALL_PAIRED_EVENTS() { return (int)4L; }

    static final int EVENTLOG_PAIRED_EVENT_ACTIVE() { return (int)8L; }

    static final int EVENTLOG_PAIRED_EVENT_INACTIVE() { return (int)16L; }

    static final int MAXLOGICALLOGNAMESIZE() { return (int)256L; }

    static final int REG_STANDARD_FORMAT() { return (int)1L; }

    static final int REG_LATEST_FORMAT() { return (int)2L; }

    static final int REG_NO_COMPRESSION() { return (int)4L; }

    static final int REG_FORCE_UNLOAD() { return (int)1L; }

    static final int SERVICE_KERNEL_DRIVER() { return (int)1L; }

    static final int SERVICE_FILE_SYSTEM_DRIVER() { return (int)2L; }

    static final int SERVICE_ADAPTER() { return (int)4L; }

    static final int SERVICE_RECOGNIZER_DRIVER() { return (int)8L; }

    static final int SERVICE_WIN32_OWN_PROCESS() { return (int)16L; }

    static final int SERVICE_WIN32_SHARE_PROCESS() { return (int)32L; }

    static final int SERVICE_USER_SERVICE() { return (int)64L; }

    static final int SERVICE_USERSERVICE_INSTANCE() { return (int)128L; }

    static final int SERVICE_INTERACTIVE_PROCESS() { return (int)256L; }

    static final int SERVICE_PKG_SERVICE() { return (int)512L; }

    static final int SERVICE_BOOT_START() { return (int)0L; }

    static final int SERVICE_SYSTEM_START() { return (int)1L; }

    static final int SERVICE_AUTO_START() { return (int)2L; }

    static final int SERVICE_DEMAND_START() { return (int)3L; }

    static final int SERVICE_DISABLED() { return (int)4L; }

    static final int SERVICE_ERROR_IGNORE() { return (int)0L; }

    static final int SERVICE_ERROR_NORMAL() { return (int)1L; }

    static final int SERVICE_ERROR_SEVERE() { return (int)2L; }

    static final int SERVICE_ERROR_CRITICAL() { return (int)3L; }

    static final int CM_SERVICE_NETWORK_BOOT_LOAD() { return (int)1L; }

    static final int CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD() { return (int)2L; }

    static final int CM_SERVICE_USB_DISK_BOOT_LOAD() { return (int)4L; }

    static final int CM_SERVICE_SD_DISK_BOOT_LOAD() { return (int)8L; }

    static final int CM_SERVICE_USB3_DISK_BOOT_LOAD() { return (int)16L; }

    static final int CM_SERVICE_MEASURED_BOOT_LOAD() { return (int)32L; }

    static final int CM_SERVICE_VERIFIER_BOOT_LOAD() { return (int)64L; }

    static final int CM_SERVICE_WINPE_BOOT_LOAD() { return (int)128L; }

    static final int CM_SERVICE_RAM_DISK_BOOT_LOAD() { return (int)256L; }

    static final int TAPE_DRIVE_FIXED() { return (int)1L; }

    static final int TAPE_DRIVE_SELECT() { return (int)2L; }

    static final int TAPE_DRIVE_INITIATOR() { return (int)4L; }

    static final int TAPE_DRIVE_ERASE_SHORT() { return (int)16L; }

    static final int TAPE_DRIVE_ERASE_LONG() { return (int)32L; }

    static final int TAPE_DRIVE_ERASE_BOP_ONLY() { return (int)64L; }

    static final int TAPE_DRIVE_ERASE_IMMEDIATE() { return (int)128L; }

    static final int TAPE_DRIVE_TAPE_CAPACITY() { return (int)256L; }

    static final int TAPE_DRIVE_TAPE_REMAINING() { return (int)512L; }

    static final int TAPE_DRIVE_FIXED_BLOCK() { return (int)1024L; }

    static final int TAPE_DRIVE_VARIABLE_BLOCK() { return (int)2048L; }

    static final int TAPE_DRIVE_WRITE_PROTECT() { return (int)4096L; }

    static final int TAPE_DRIVE_EOT_WZ_SIZE() { return (int)8192L; }

    static final int TAPE_DRIVE_ECC() { return (int)65536L; }

    static final int TAPE_DRIVE_COMPRESSION() { return (int)131072L; }

    static final int TAPE_DRIVE_PADDING() { return (int)262144L; }

    static final int TAPE_DRIVE_REPORT_SMKS() { return (int)524288L; }

    static final int TAPE_DRIVE_GET_ABSOLUTE_BLK() { return (int)1048576L; }

    static final int TAPE_DRIVE_GET_LOGICAL_BLK() { return (int)2097152L; }

    static final int TAPE_DRIVE_SET_EOT_WZ_SIZE() { return (int)4194304L; }

    static final int TAPE_DRIVE_EJECT_MEDIA() { return (int)16777216L; }

    static final int TAPE_DRIVE_CLEAN_REQUESTS() { return (int)33554432L; }

    static final int TAPE_DRIVE_SET_CMP_BOP_ONLY() { return (int)67108864L; }

    static final MemoryLayout _PROCESSOR_NUMBER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Group"),
        C_CHAR.withName("Number"),
        C_CHAR.withName("Reserved")
    ).withName("_PROCESSOR_NUMBER");
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_NUMBER$struct$LAYOUT() { return _PROCESSOR_NUMBER$struct$LAYOUT_; }

    static final MemoryLayout _PROCESSOR_NUMBER$Group$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_NUMBER$Group$LAYOUT() { return _PROCESSOR_NUMBER$Group$LAYOUT_; }

    static final VarHandle _PROCESSOR_NUMBER$Group$VH_ = _PROCESSOR_NUMBER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Group"));
    static final java.lang.invoke.VarHandle _PROCESSOR_NUMBER$Group$VH() { return _PROCESSOR_NUMBER$Group$VH_; }

    static final MemoryLayout _PROCESSOR_NUMBER$Number$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_NUMBER$Number$LAYOUT() { return _PROCESSOR_NUMBER$Number$LAYOUT_; }

    static final VarHandle _PROCESSOR_NUMBER$Number$VH_ = _PROCESSOR_NUMBER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Number"));
    static final java.lang.invoke.VarHandle _PROCESSOR_NUMBER$Number$VH() { return _PROCESSOR_NUMBER$Number$VH_; }

    static final MemoryLayout _PROCESSOR_NUMBER$Reserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_NUMBER$Reserved$LAYOUT() { return _PROCESSOR_NUMBER$Reserved$LAYOUT_; }

    static final VarHandle _PROCESSOR_NUMBER$Reserved$VH_ = _PROCESSOR_NUMBER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _PROCESSOR_NUMBER$Reserved$VH() { return _PROCESSOR_NUMBER$Reserved$VH_; }

    static final MemoryLayout _GROUP_AFFINITY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Mask"),
        C_SHORT.withName("Group"),
        MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
    ).withName("_GROUP_AFFINITY");
    static final jdk.incubator.foreign.MemoryLayout _GROUP_AFFINITY$struct$LAYOUT() { return _GROUP_AFFINITY$struct$LAYOUT_; }

    static final MemoryLayout _GROUP_AFFINITY$Mask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _GROUP_AFFINITY$Mask$LAYOUT() { return _GROUP_AFFINITY$Mask$LAYOUT_; }

    static final VarHandle _GROUP_AFFINITY$Mask$VH_ = _GROUP_AFFINITY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _GROUP_AFFINITY$Mask$VH() { return _GROUP_AFFINITY$Mask$VH_; }

    static final MemoryLayout _GROUP_AFFINITY$Group$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GROUP_AFFINITY$Group$LAYOUT() { return _GROUP_AFFINITY$Group$LAYOUT_; }

    static final VarHandle _GROUP_AFFINITY$Group$VH_ = _GROUP_AFFINITY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Group"));
    static final java.lang.invoke.VarHandle _GROUP_AFFINITY$Group$VH() { return _GROUP_AFFINITY$Group$VH_; }

    static final int UNSPECIFIED_COMPARTMENT_ID() { return (int)0L; }

    static final int DEFAULT_COMPARTMENT_ID() { return (int)1L; }

    static final MemoryLayout _FLOAT128$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("LowPart"),
        C_LONGLONG.withName("HighPart")
    ).withName("_FLOAT128");
    static final jdk.incubator.foreign.MemoryLayout _FLOAT128$struct$LAYOUT() { return _FLOAT128$struct$LAYOUT_; }

    static final MemoryLayout _FLOAT128$LowPart$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FLOAT128$LowPart$LAYOUT() { return _FLOAT128$LowPart$LAYOUT_; }

    static final VarHandle _FLOAT128$LowPart$VH_ = _FLOAT128$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle _FLOAT128$LowPart$VH() { return _FLOAT128$LowPart$VH_; }

    static final MemoryLayout _FLOAT128$HighPart$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FLOAT128$HighPart$LAYOUT() { return _FLOAT128$HighPart$LAYOUT_; }

    static final VarHandle _FLOAT128$HighPart$VH_ = _FLOAT128$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle _FLOAT128$HighPart$VH() { return _FLOAT128$HighPart$VH_; }

    static final MemoryLayout _LARGE_INTEGER$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_LONG.withName("LowPart"),
        C_LONG.withName("HighPart"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("u"),
        C_LONGLONG.withName("QuadPart")
    ).withName("_LARGE_INTEGER");
    static final jdk.incubator.foreign.MemoryLayout _LARGE_INTEGER$union$LAYOUT() { return _LARGE_INTEGER$union$LAYOUT_; }

    static final MemoryLayout _LARGE_INTEGER$LowPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LARGE_INTEGER$LowPart$LAYOUT() { return _LARGE_INTEGER$LowPart$LAYOUT_; }

    static final VarHandle _LARGE_INTEGER$LowPart$VH_ = _LARGE_INTEGER$union$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle _LARGE_INTEGER$LowPart$VH() { return _LARGE_INTEGER$LowPart$VH_; }

    static final MemoryLayout _LARGE_INTEGER$HighPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LARGE_INTEGER$HighPart$LAYOUT() { return _LARGE_INTEGER$HighPart$LAYOUT_; }

    static final VarHandle _LARGE_INTEGER$HighPart$VH_ = _LARGE_INTEGER$union$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle _LARGE_INTEGER$HighPart$VH() { return _LARGE_INTEGER$HighPart$VH_; }

    static final MemoryLayout _LARGE_INTEGER$u$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("LowPart"),
        C_LONG.withName("HighPart")
    );
    static final jdk.incubator.foreign.MemoryLayout _LARGE_INTEGER$u$struct$LAYOUT() { return _LARGE_INTEGER$u$struct$LAYOUT_; }

    static final MemoryLayout _LARGE_INTEGER$u$LowPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LARGE_INTEGER$u$LowPart$LAYOUT() { return _LARGE_INTEGER$u$LowPart$LAYOUT_; }

    static final VarHandle _LARGE_INTEGER$u$LowPart$VH_ = _LARGE_INTEGER$u$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle _LARGE_INTEGER$u$LowPart$VH() { return _LARGE_INTEGER$u$LowPart$VH_; }

    static final MemoryLayout _LARGE_INTEGER$u$HighPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LARGE_INTEGER$u$HighPart$LAYOUT() { return _LARGE_INTEGER$u$HighPart$LAYOUT_; }

    static final VarHandle _LARGE_INTEGER$u$HighPart$VH_ = _LARGE_INTEGER$u$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle _LARGE_INTEGER$u$HighPart$VH() { return _LARGE_INTEGER$u$HighPart$VH_; }

    static final MemoryLayout _LARGE_INTEGER$QuadPart$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _LARGE_INTEGER$QuadPart$LAYOUT() { return _LARGE_INTEGER$QuadPart$LAYOUT_; }

    static final VarHandle _LARGE_INTEGER$QuadPart$VH_ = _LARGE_INTEGER$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QuadPart"));
    static final java.lang.invoke.VarHandle _LARGE_INTEGER$QuadPart$VH() { return _LARGE_INTEGER$QuadPart$VH_; }

    static final MemoryLayout _ULARGE_INTEGER$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_LONG.withName("LowPart"),
        C_LONG.withName("HighPart"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("u"),
        C_LONGLONG.withName("QuadPart")
    ).withName("_ULARGE_INTEGER");
    static final jdk.incubator.foreign.MemoryLayout _ULARGE_INTEGER$union$LAYOUT() { return _ULARGE_INTEGER$union$LAYOUT_; }

    static final MemoryLayout _ULARGE_INTEGER$LowPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ULARGE_INTEGER$LowPart$LAYOUT() { return _ULARGE_INTEGER$LowPart$LAYOUT_; }

    static final VarHandle _ULARGE_INTEGER$LowPart$VH_ = _ULARGE_INTEGER$union$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle _ULARGE_INTEGER$LowPart$VH() { return _ULARGE_INTEGER$LowPart$VH_; }

    static final MemoryLayout _ULARGE_INTEGER$HighPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ULARGE_INTEGER$HighPart$LAYOUT() { return _ULARGE_INTEGER$HighPart$LAYOUT_; }

    static final VarHandle _ULARGE_INTEGER$HighPart$VH_ = _ULARGE_INTEGER$union$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle _ULARGE_INTEGER$HighPart$VH() { return _ULARGE_INTEGER$HighPart$VH_; }

    static final MemoryLayout _ULARGE_INTEGER$u$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("LowPart"),
        C_LONG.withName("HighPart")
    );
    static final jdk.incubator.foreign.MemoryLayout _ULARGE_INTEGER$u$struct$LAYOUT() { return _ULARGE_INTEGER$u$struct$LAYOUT_; }

    static final MemoryLayout _ULARGE_INTEGER$u$LowPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ULARGE_INTEGER$u$LowPart$LAYOUT() { return _ULARGE_INTEGER$u$LowPart$LAYOUT_; }

    static final VarHandle _ULARGE_INTEGER$u$LowPart$VH_ = _ULARGE_INTEGER$u$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle _ULARGE_INTEGER$u$LowPart$VH() { return _ULARGE_INTEGER$u$LowPart$VH_; }

    static final MemoryLayout _ULARGE_INTEGER$u$HighPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ULARGE_INTEGER$u$HighPart$LAYOUT() { return _ULARGE_INTEGER$u$HighPart$LAYOUT_; }

    static final VarHandle _ULARGE_INTEGER$u$HighPart$VH_ = _ULARGE_INTEGER$u$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle _ULARGE_INTEGER$u$HighPart$VH() { return _ULARGE_INTEGER$u$HighPart$VH_; }

    static final MemoryLayout _ULARGE_INTEGER$QuadPart$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _ULARGE_INTEGER$QuadPart$LAYOUT() { return _ULARGE_INTEGER$QuadPart$LAYOUT_; }

    static final VarHandle _ULARGE_INTEGER$QuadPart$VH_ = _ULARGE_INTEGER$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QuadPart"));
    static final java.lang.invoke.VarHandle _ULARGE_INTEGER$QuadPart$VH() { return _ULARGE_INTEGER$QuadPart$VH_; }

    static final MemoryLayout _LUID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("LowPart"),
        C_LONG.withName("HighPart")
    ).withName("_LUID");
    static final jdk.incubator.foreign.MemoryLayout _LUID$struct$LAYOUT() { return _LUID$struct$LAYOUT_; }

    static final MemoryLayout _LUID$LowPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LUID$LowPart$LAYOUT() { return _LUID$LowPart$LAYOUT_; }

    static final VarHandle _LUID$LowPart$VH_ = _LUID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle _LUID$LowPart$VH() { return _LUID$LowPart$VH_; }

    static final MemoryLayout _LUID$HighPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LUID$HighPart$LAYOUT() { return _LUID$HighPart$LAYOUT_; }

    static final VarHandle _LUID$HighPart$VH_ = _LUID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle _LUID$HighPart$VH() { return _LUID$HighPart$VH_; }

    static final FunctionDescriptor _rotl8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_CHAR,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotl8$FUNC() { return _rotl8$FUNC_; }

    static final MethodHandle _rotl8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotl8",
        "(BB)B",
        _rotl8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotl8$MH() { return _rotl8$MH_; }

    static final FunctionDescriptor _rotl16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotl16$FUNC() { return _rotl16$FUNC_; }

    static final MethodHandle _rotl16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotl16",
        "(SB)S",
        _rotl16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotl16$MH() { return _rotl16$MH_; }

    static final FunctionDescriptor _rotr8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_CHAR,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotr8$FUNC() { return _rotr8$FUNC_; }

    static final MethodHandle _rotr8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotr8",
        "(BB)B",
        _rotr8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotr8$MH() { return _rotr8$MH_; }

    static final FunctionDescriptor _rotr16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotr16$FUNC() { return _rotr16$FUNC_; }

    static final MethodHandle _rotr16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotr16",
        "(SB)S",
        _rotr16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotr16$MH() { return _rotr16$MH_; }

    static final FunctionDescriptor _rotl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotl$FUNC() { return _rotl$FUNC_; }

    static final MethodHandle _rotl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotl",
        "(II)I",
        _rotl$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotl$MH() { return _rotl$MH_; }

    static final FunctionDescriptor _rotl64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotl64$FUNC() { return _rotl64$FUNC_; }

    static final MethodHandle _rotl64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotl64",
        "(JI)J",
        _rotl64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotl64$MH() { return _rotl64$MH_; }

    static final FunctionDescriptor _rotr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotr$FUNC() { return _rotr$FUNC_; }

    static final MethodHandle _rotr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotr",
        "(II)I",
        _rotr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotr$MH() { return _rotr$MH_; }

    static final FunctionDescriptor _rotr64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotr64$FUNC() { return _rotr64$FUNC_; }

    static final MethodHandle _rotr64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotr64",
        "(JI)J",
        _rotr64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotr64$MH() { return _rotr64$MH_; }

    static final MemoryLayout _LIST_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Flink"),
        C_POINTER.withName("Blink")
    ).withName("_LIST_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _LIST_ENTRY$struct$LAYOUT() { return _LIST_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _LIST_ENTRY$Flink$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _LIST_ENTRY$Flink$LAYOUT() { return _LIST_ENTRY$Flink$LAYOUT_; }

    static final VarHandle _LIST_ENTRY$Flink$VH_ = MemoryHandles.asAddressVarHandle(_LIST_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Flink")));
    static final java.lang.invoke.VarHandle _LIST_ENTRY$Flink$VH() { return _LIST_ENTRY$Flink$VH_; }

    static final MemoryLayout _LIST_ENTRY$Blink$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _LIST_ENTRY$Blink$LAYOUT() { return _LIST_ENTRY$Blink$LAYOUT_; }

    static final VarHandle _LIST_ENTRY$Blink$VH_ = MemoryHandles.asAddressVarHandle(_LIST_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Blink")));
    static final java.lang.invoke.VarHandle _LIST_ENTRY$Blink$VH() { return _LIST_ENTRY$Blink$VH_; }

    static final MemoryLayout _SINGLE_LIST_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Next")
    ).withName("_SINGLE_LIST_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _SINGLE_LIST_ENTRY$struct$LAYOUT() { return _SINGLE_LIST_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _SINGLE_LIST_ENTRY$Next$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SINGLE_LIST_ENTRY$Next$LAYOUT() { return _SINGLE_LIST_ENTRY$Next$LAYOUT_; }

    static final VarHandle _SINGLE_LIST_ENTRY$Next$VH_ = MemoryHandles.asAddressVarHandle(_SINGLE_LIST_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Next")));
    static final java.lang.invoke.VarHandle _SINGLE_LIST_ENTRY$Next$VH() { return _SINGLE_LIST_ENTRY$Next$VH_; }

    static final MemoryLayout LIST_ENTRY32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flink"),
        C_LONG.withName("Blink")
    ).withName("LIST_ENTRY32");
    static final jdk.incubator.foreign.MemoryLayout LIST_ENTRY32$struct$LAYOUT() { return LIST_ENTRY32$struct$LAYOUT_; }

    static final MemoryLayout LIST_ENTRY32$Flink$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout LIST_ENTRY32$Flink$LAYOUT() { return LIST_ENTRY32$Flink$LAYOUT_; }

    static final VarHandle LIST_ENTRY32$Flink$VH_ = LIST_ENTRY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flink"));
    static final java.lang.invoke.VarHandle LIST_ENTRY32$Flink$VH() { return LIST_ENTRY32$Flink$VH_; }

    static final MemoryLayout LIST_ENTRY32$Blink$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout LIST_ENTRY32$Blink$LAYOUT() { return LIST_ENTRY32$Blink$LAYOUT_; }

    static final VarHandle LIST_ENTRY32$Blink$VH_ = LIST_ENTRY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Blink"));
    static final java.lang.invoke.VarHandle LIST_ENTRY32$Blink$VH() { return LIST_ENTRY32$Blink$VH_; }

    static final MemoryLayout LIST_ENTRY64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Flink"),
        C_LONGLONG.withName("Blink")
    ).withName("LIST_ENTRY64");
    static final jdk.incubator.foreign.MemoryLayout LIST_ENTRY64$struct$LAYOUT() { return LIST_ENTRY64$struct$LAYOUT_; }

    static final MemoryLayout LIST_ENTRY64$Flink$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout LIST_ENTRY64$Flink$LAYOUT() { return LIST_ENTRY64$Flink$LAYOUT_; }

    static final VarHandle LIST_ENTRY64$Flink$VH_ = LIST_ENTRY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Flink"));
    static final java.lang.invoke.VarHandle LIST_ENTRY64$Flink$VH() { return LIST_ENTRY64$Flink$VH_; }

    static final MemoryLayout LIST_ENTRY64$Blink$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout LIST_ENTRY64$Blink$LAYOUT() { return LIST_ENTRY64$Blink$LAYOUT_; }

    static final VarHandle LIST_ENTRY64$Blink$VH_ = LIST_ENTRY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Blink"));
    static final java.lang.invoke.VarHandle LIST_ENTRY64$Blink$VH() { return LIST_ENTRY64$Blink$VH_; }

    static final MemoryLayout _OBJECTID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("Lineage"),
        C_LONG.withName("Uniquifier")
    ).withName("_OBJECTID");
    static final jdk.incubator.foreign.MemoryLayout _OBJECTID$struct$LAYOUT() { return _OBJECTID$struct$LAYOUT_; }

    static final MemoryLayout _OBJECTID$Uniquifier$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OBJECTID$Uniquifier$LAYOUT() { return _OBJECTID$Uniquifier$LAYOUT_; }

    static final VarHandle _OBJECTID$Uniquifier$VH_ = _OBJECTID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Uniquifier"));
    static final java.lang.invoke.VarHandle _OBJECTID$Uniquifier$VH() { return _OBJECTID$Uniquifier$VH_; }

    static final MemoryLayout _M128A$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Low"),
        C_LONGLONG.withName("High")
    ).withName("_M128A");
    static final jdk.incubator.foreign.MemoryLayout _M128A$struct$LAYOUT() { return _M128A$struct$LAYOUT_; }

    static final MemoryLayout _M128A$Low$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _M128A$Low$LAYOUT() { return _M128A$Low$LAYOUT_; }

    static final VarHandle _M128A$Low$VH_ = _M128A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Low"));
    static final java.lang.invoke.VarHandle _M128A$Low$VH() { return _M128A$Low$VH_; }

    static final MemoryLayout _M128A$High$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _M128A$High$LAYOUT() { return _M128A$High$LAYOUT_; }

    static final VarHandle _M128A$High$VH_ = _M128A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("High"));
    static final java.lang.invoke.VarHandle _M128A$High$VH() { return _M128A$High$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("ControlWord"),
        C_SHORT.withName("StatusWord"),
        C_CHAR.withName("TagWord"),
        C_CHAR.withName("Reserved1"),
        C_SHORT.withName("ErrorOpcode"),
        C_LONG.withName("ErrorOffset"),
        C_SHORT.withName("ErrorSelector"),
        C_SHORT.withName("Reserved2"),
        C_LONG.withName("DataOffset"),
        C_SHORT.withName("DataSelector"),
        C_SHORT.withName("Reserved3"),
        C_LONG.withName("MxCsr"),
        C_LONG.withName("MxCsr_Mask"),
        MemoryLayout.ofSequence(8, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("_M128A")).withName("FloatRegisters"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("_M128A")).withName("XmmRegisters"),
        MemoryLayout.ofSequence(96, C_CHAR).withName("Reserved4")
    ).withName("_XSAVE_FORMAT");
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$struct$LAYOUT() { return _XSAVE_FORMAT$struct$LAYOUT_; }

    static final MemoryLayout _XSAVE_FORMAT$ControlWord$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$ControlWord$LAYOUT() { return _XSAVE_FORMAT$ControlWord$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$ControlWord$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ControlWord"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$ControlWord$VH() { return _XSAVE_FORMAT$ControlWord$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$StatusWord$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$StatusWord$LAYOUT() { return _XSAVE_FORMAT$StatusWord$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$StatusWord$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("StatusWord"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$StatusWord$VH() { return _XSAVE_FORMAT$StatusWord$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$TagWord$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$TagWord$LAYOUT() { return _XSAVE_FORMAT$TagWord$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$TagWord$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("TagWord"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$TagWord$VH() { return _XSAVE_FORMAT$TagWord$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$Reserved1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$Reserved1$LAYOUT() { return _XSAVE_FORMAT$Reserved1$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$Reserved1$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$Reserved1$VH() { return _XSAVE_FORMAT$Reserved1$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$ErrorOpcode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$ErrorOpcode$LAYOUT() { return _XSAVE_FORMAT$ErrorOpcode$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$ErrorOpcode$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ErrorOpcode"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$ErrorOpcode$VH() { return _XSAVE_FORMAT$ErrorOpcode$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$ErrorOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$ErrorOffset$LAYOUT() { return _XSAVE_FORMAT$ErrorOffset$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$ErrorOffset$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ErrorOffset"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$ErrorOffset$VH() { return _XSAVE_FORMAT$ErrorOffset$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$ErrorSelector$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$ErrorSelector$LAYOUT() { return _XSAVE_FORMAT$ErrorSelector$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$ErrorSelector$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ErrorSelector"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$ErrorSelector$VH() { return _XSAVE_FORMAT$ErrorSelector$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$Reserved2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$Reserved2$LAYOUT() { return _XSAVE_FORMAT$Reserved2$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$Reserved2$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$Reserved2$VH() { return _XSAVE_FORMAT$Reserved2$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$DataOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$DataOffset$LAYOUT() { return _XSAVE_FORMAT$DataOffset$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$DataOffset$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataOffset"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$DataOffset$VH() { return _XSAVE_FORMAT$DataOffset$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$DataSelector$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$DataSelector$LAYOUT() { return _XSAVE_FORMAT$DataSelector$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$DataSelector$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DataSelector"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$DataSelector$VH() { return _XSAVE_FORMAT$DataSelector$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$Reserved3$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$Reserved3$LAYOUT() { return _XSAVE_FORMAT$Reserved3$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$Reserved3$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved3"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$Reserved3$VH() { return _XSAVE_FORMAT$Reserved3$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$MxCsr$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$MxCsr$LAYOUT() { return _XSAVE_FORMAT$MxCsr$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$MxCsr$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MxCsr"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$MxCsr$VH() { return _XSAVE_FORMAT$MxCsr$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$MxCsr_Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$MxCsr_Mask$LAYOUT() { return _XSAVE_FORMAT$MxCsr_Mask$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$MxCsr_Mask$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MxCsr_Mask"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$MxCsr_Mask$VH() { return _XSAVE_FORMAT$MxCsr_Mask$VH_; }

    static final MemoryLayout _XSAVE_CET_U_FORMAT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Ia32CetUMsr"),
        C_LONGLONG.withName("Ia32Pl3SspMsr")
    ).withName("_XSAVE_CET_U_FORMAT");
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_CET_U_FORMAT$struct$LAYOUT() { return _XSAVE_CET_U_FORMAT$struct$LAYOUT_; }

    static final MemoryLayout _XSAVE_CET_U_FORMAT$Ia32CetUMsr$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_CET_U_FORMAT$Ia32CetUMsr$LAYOUT() { return _XSAVE_CET_U_FORMAT$Ia32CetUMsr$LAYOUT_; }

    static final VarHandle _XSAVE_CET_U_FORMAT$Ia32CetUMsr$VH_ = _XSAVE_CET_U_FORMAT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Ia32CetUMsr"));
    static final java.lang.invoke.VarHandle _XSAVE_CET_U_FORMAT$Ia32CetUMsr$VH() { return _XSAVE_CET_U_FORMAT$Ia32CetUMsr$VH_; }

    static final MemoryLayout _XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$LAYOUT() { return _XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$LAYOUT_; }

    static final VarHandle _XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$VH_ = _XSAVE_CET_U_FORMAT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Ia32Pl3SspMsr"));
    static final java.lang.invoke.VarHandle _XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$VH() { return _XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$VH_; }

    static final MemoryLayout _XSAVE_AREA_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Mask"),
        C_LONGLONG.withName("CompactionMask"),
        MemoryLayout.ofSequence(6, C_LONGLONG).withName("Reserved2")
    ).withName("_XSAVE_AREA_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_AREA_HEADER$struct$LAYOUT() { return _XSAVE_AREA_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _XSAVE_AREA_HEADER$Mask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_AREA_HEADER$Mask$LAYOUT() { return _XSAVE_AREA_HEADER$Mask$LAYOUT_; }

    static final VarHandle _XSAVE_AREA_HEADER$Mask$VH_ = _XSAVE_AREA_HEADER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _XSAVE_AREA_HEADER$Mask$VH() { return _XSAVE_AREA_HEADER$Mask$VH_; }

    static final MemoryLayout _XSAVE_AREA_HEADER$CompactionMask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_AREA_HEADER$CompactionMask$LAYOUT() { return _XSAVE_AREA_HEADER$CompactionMask$LAYOUT_; }

    static final VarHandle _XSAVE_AREA_HEADER$CompactionMask$VH_ = _XSAVE_AREA_HEADER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompactionMask"));
    static final java.lang.invoke.VarHandle _XSAVE_AREA_HEADER$CompactionMask$VH() { return _XSAVE_AREA_HEADER$CompactionMask$VH_; }

    static final MemoryLayout _XSAVE_AREA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_SHORT.withName("ControlWord"),
            C_SHORT.withName("StatusWord"),
            C_CHAR.withName("TagWord"),
            C_CHAR.withName("Reserved1"),
            C_SHORT.withName("ErrorOpcode"),
            C_LONG.withName("ErrorOffset"),
            C_SHORT.withName("ErrorSelector"),
            C_SHORT.withName("Reserved2"),
            C_LONG.withName("DataOffset"),
            C_SHORT.withName("DataSelector"),
            C_SHORT.withName("Reserved3"),
            C_LONG.withName("MxCsr"),
            C_LONG.withName("MxCsr_Mask"),
            MemoryLayout.ofSequence(8, MemoryLayout.ofStruct(
                C_LONGLONG.withName("Low"),
                C_LONGLONG.withName("High")
            ).withName("_M128A")).withName("FloatRegisters"),
            MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
                C_LONGLONG.withName("Low"),
                C_LONGLONG.withName("High")
            ).withName("_M128A")).withName("XmmRegisters"),
            MemoryLayout.ofSequence(96, C_CHAR).withName("Reserved4")
        ).withName("LegacyState"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Mask"),
            C_LONGLONG.withName("CompactionMask"),
            MemoryLayout.ofSequence(6, C_LONGLONG).withName("Reserved2")
        ).withName("Header")
    ).withName("_XSAVE_AREA");
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_AREA$struct$LAYOUT() { return _XSAVE_AREA$struct$LAYOUT_; }

    static final MemoryLayout _XSTATE_CONTEXT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Mask"),
        C_LONG.withName("Length"),
        C_LONG.withName("Reserved1"),
        C_POINTER.withName("Area"),
        C_POINTER.withName("Buffer")
    ).withName("_XSTATE_CONTEXT");
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONTEXT$struct$LAYOUT() { return _XSTATE_CONTEXT$struct$LAYOUT_; }

    static final MemoryLayout _XSTATE_CONTEXT$Mask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONTEXT$Mask$LAYOUT() { return _XSTATE_CONTEXT$Mask$LAYOUT_; }

    static final VarHandle _XSTATE_CONTEXT$Mask$VH_ = _XSTATE_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _XSTATE_CONTEXT$Mask$VH() { return _XSTATE_CONTEXT$Mask$VH_; }

    static final MemoryLayout _XSTATE_CONTEXT$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONTEXT$Length$LAYOUT() { return _XSTATE_CONTEXT$Length$LAYOUT_; }

    static final VarHandle _XSTATE_CONTEXT$Length$VH_ = _XSTATE_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _XSTATE_CONTEXT$Length$VH() { return _XSTATE_CONTEXT$Length$VH_; }

    static final MemoryLayout _XSTATE_CONTEXT$Reserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONTEXT$Reserved1$LAYOUT() { return _XSTATE_CONTEXT$Reserved1$LAYOUT_; }

    static final VarHandle _XSTATE_CONTEXT$Reserved1$VH_ = _XSTATE_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle _XSTATE_CONTEXT$Reserved1$VH() { return _XSTATE_CONTEXT$Reserved1$VH_; }

    static final MemoryLayout _XSTATE_CONTEXT$Area$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONTEXT$Area$LAYOUT() { return _XSTATE_CONTEXT$Area$LAYOUT_; }

    static final VarHandle _XSTATE_CONTEXT$Area$VH_ = MemoryHandles.asAddressVarHandle(_XSTATE_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Area")));
    static final java.lang.invoke.VarHandle _XSTATE_CONTEXT$Area$VH() { return _XSTATE_CONTEXT$Area$VH_; }

    static final MemoryLayout _XSTATE_CONTEXT$Buffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONTEXT$Buffer$LAYOUT() { return _XSTATE_CONTEXT$Buffer$LAYOUT_; }

    static final VarHandle _XSTATE_CONTEXT$Buffer$VH_ = MemoryHandles.asAddressVarHandle(_XSTATE_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Buffer")));
    static final java.lang.invoke.VarHandle _XSTATE_CONTEXT$Buffer$VH() { return _XSTATE_CONTEXT$Buffer$VH_; }

    static final MemoryLayout _SCOPE_TABLE_AMD64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Count"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("BeginAddress"),
            C_LONG.withName("EndAddress"),
            C_LONG.withName("HandlerAddress"),
            C_LONG.withName("JumpTarget")
        )).withName("ScopeRecord")
    ).withName("_SCOPE_TABLE_AMD64");
    static final jdk.incubator.foreign.MemoryLayout _SCOPE_TABLE_AMD64$struct$LAYOUT() { return _SCOPE_TABLE_AMD64$struct$LAYOUT_; }

    static final MemoryLayout _SCOPE_TABLE_AMD64$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCOPE_TABLE_AMD64$Count$LAYOUT() { return _SCOPE_TABLE_AMD64$Count$LAYOUT_; }

    static final VarHandle _SCOPE_TABLE_AMD64$Count$VH_ = _SCOPE_TABLE_AMD64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle _SCOPE_TABLE_AMD64$Count$VH() { return _SCOPE_TABLE_AMD64$Count$VH_; }

    static final FunctionDescriptor _bittest$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittest$FUNC() { return _bittest$FUNC_; }

    static final MethodHandle _bittest$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittest",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _bittest$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittest$MH() { return _bittest$MH_; }

    static final FunctionDescriptor _bittestandcomplement$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittestandcomplement$FUNC() { return _bittestandcomplement$FUNC_; }

    static final MethodHandle _bittestandcomplement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittestandcomplement",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _bittestandcomplement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittestandcomplement$MH() { return _bittestandcomplement$MH_; }

    static final FunctionDescriptor _bittestandset$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittestandset$FUNC() { return _bittestandset$FUNC_; }

    static final MethodHandle _bittestandset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittestandset",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _bittestandset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittestandset$MH() { return _bittestandset$MH_; }

    static final FunctionDescriptor _bittestandreset$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittestandreset$FUNC() { return _bittestandreset$FUNC_; }

    static final MethodHandle _bittestandreset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittestandreset",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _bittestandreset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittestandreset$MH() { return _bittestandreset$MH_; }

    static final FunctionDescriptor _interlockedbittestandset$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _interlockedbittestandset$FUNC() { return _interlockedbittestandset$FUNC_; }

    static final MethodHandle _interlockedbittestandset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_interlockedbittestandset",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _interlockedbittestandset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _interlockedbittestandset$MH() { return _interlockedbittestandset$MH_; }

    static final FunctionDescriptor _interlockedbittestandreset$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _interlockedbittestandreset$FUNC() { return _interlockedbittestandreset$FUNC_; }

    static final MethodHandle _interlockedbittestandreset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_interlockedbittestandreset",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _interlockedbittestandreset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _interlockedbittestandreset$MH() { return _interlockedbittestandreset$MH_; }

    static final FunctionDescriptor _bittest64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittest64$FUNC() { return _bittest64$FUNC_; }

    static final MethodHandle _bittest64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittest64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _bittest64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittest64$MH() { return _bittest64$MH_; }

    static final FunctionDescriptor _bittestandcomplement64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittestandcomplement64$FUNC() { return _bittestandcomplement64$FUNC_; }

    static final MethodHandle _bittestandcomplement64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittestandcomplement64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _bittestandcomplement64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittestandcomplement64$MH() { return _bittestandcomplement64$MH_; }

    static final FunctionDescriptor _bittestandset64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittestandset64$FUNC() { return _bittestandset64$FUNC_; }

    static final MethodHandle _bittestandset64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittestandset64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _bittestandset64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittestandset64$MH() { return _bittestandset64$MH_; }

    static final FunctionDescriptor _bittestandreset64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittestandreset64$FUNC() { return _bittestandreset64$FUNC_; }

    static final MethodHandle _bittestandreset64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittestandreset64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _bittestandreset64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittestandreset64$MH() { return _bittestandreset64$MH_; }

    static final FunctionDescriptor _interlockedbittestandset64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _interlockedbittestandset64$FUNC() { return _interlockedbittestandset64$FUNC_; }

    static final MethodHandle _interlockedbittestandset64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_interlockedbittestandset64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _interlockedbittestandset64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _interlockedbittestandset64$MH() { return _interlockedbittestandset64$MH_; }

    static final FunctionDescriptor _interlockedbittestandreset64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _interlockedbittestandreset64$FUNC() { return _interlockedbittestandreset64$FUNC_; }

    static final MethodHandle _interlockedbittestandreset64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_interlockedbittestandreset64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _interlockedbittestandreset64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _interlockedbittestandreset64$MH() { return _interlockedbittestandreset64$MH_; }

    static final FunctionDescriptor _BitScanForward$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _BitScanForward$FUNC() { return _BitScanForward$FUNC_; }

    static final MethodHandle _BitScanForward$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_BitScanForward",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _BitScanForward$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _BitScanForward$MH() { return _BitScanForward$MH_; }

    static final FunctionDescriptor _BitScanReverse$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _BitScanReverse$FUNC() { return _BitScanReverse$FUNC_; }

    static final MethodHandle _BitScanReverse$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_BitScanReverse",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _BitScanReverse$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _BitScanReverse$MH() { return _BitScanReverse$MH_; }

    static final FunctionDescriptor _BitScanForward64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _BitScanForward64$FUNC() { return _BitScanForward64$FUNC_; }

    static final MethodHandle _BitScanForward64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_BitScanForward64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _BitScanForward64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _BitScanForward64$MH() { return _BitScanForward64$MH_; }

    static final FunctionDescriptor _BitScanReverse64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _BitScanReverse64$FUNC() { return _BitScanReverse64$FUNC_; }

    static final MethodHandle _BitScanReverse64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_BitScanReverse64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _BitScanReverse64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _BitScanReverse64$MH() { return _BitScanReverse64$MH_; }

    static final FunctionDescriptor _InterlockedIncrement16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedIncrement16$FUNC() { return _InterlockedIncrement16$FUNC_; }

    static final MethodHandle _InterlockedIncrement16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedIncrement16",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        _InterlockedIncrement16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedIncrement16$MH() { return _InterlockedIncrement16$MH_; }

    static final FunctionDescriptor _InterlockedDecrement16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedDecrement16$FUNC() { return _InterlockedDecrement16$FUNC_; }

    static final MethodHandle _InterlockedDecrement16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedDecrement16",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        _InterlockedDecrement16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedDecrement16$MH() { return _InterlockedDecrement16$MH_; }

    static final FunctionDescriptor _InterlockedCompareExchange16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_SHORT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedCompareExchange16$FUNC() { return _InterlockedCompareExchange16$FUNC_; }

    static final MethodHandle _InterlockedCompareExchange16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedCompareExchange16",
        "(Ljdk/incubator/foreign/MemoryAddress;SS)S",
        _InterlockedCompareExchange16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedCompareExchange16$MH() { return _InterlockedCompareExchange16$MH_; }

    static final FunctionDescriptor _InterlockedAnd$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedAnd$FUNC() { return _InterlockedAnd$FUNC_; }

    static final MethodHandle _InterlockedAnd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedAnd",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _InterlockedAnd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedAnd$MH() { return _InterlockedAnd$MH_; }

    static final FunctionDescriptor _InterlockedOr$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedOr$FUNC() { return _InterlockedOr$FUNC_; }

    static final MethodHandle _InterlockedOr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedOr",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _InterlockedOr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedOr$MH() { return _InterlockedOr$MH_; }

    static final FunctionDescriptor _InterlockedXor$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedXor$FUNC() { return _InterlockedXor$FUNC_; }

    static final MethodHandle _InterlockedXor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedXor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _InterlockedXor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedXor$MH() { return _InterlockedXor$MH_; }

    static final FunctionDescriptor _InterlockedAnd64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedAnd64$FUNC() { return _InterlockedAnd64$FUNC_; }

    static final MethodHandle _InterlockedAnd64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedAnd64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        _InterlockedAnd64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedAnd64$MH() { return _InterlockedAnd64$MH_; }

    static final FunctionDescriptor _InterlockedOr64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedOr64$FUNC() { return _InterlockedOr64$FUNC_; }

    static final MethodHandle _InterlockedOr64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedOr64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        _InterlockedOr64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedOr64$MH() { return _InterlockedOr64$MH_; }

    static final FunctionDescriptor _InterlockedXor64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedXor64$FUNC() { return _InterlockedXor64$FUNC_; }

    static final MethodHandle _InterlockedXor64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedXor64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        _InterlockedXor64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedXor64$MH() { return _InterlockedXor64$MH_; }

    static final FunctionDescriptor _InterlockedIncrement$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedIncrement$FUNC() { return _InterlockedIncrement$FUNC_; }

    static final MethodHandle _InterlockedIncrement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedIncrement",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        _InterlockedIncrement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedIncrement$MH() { return _InterlockedIncrement$MH_; }

    static final FunctionDescriptor _InterlockedDecrement$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedDecrement$FUNC() { return _InterlockedDecrement$FUNC_; }

    static final MethodHandle _InterlockedDecrement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedDecrement",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        _InterlockedDecrement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedDecrement$MH() { return _InterlockedDecrement$MH_; }

    static final FunctionDescriptor _InterlockedExchange$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchange$FUNC() { return _InterlockedExchange$FUNC_; }

    static final MethodHandle _InterlockedExchange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchange",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _InterlockedExchange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchange$MH() { return _InterlockedExchange$MH_; }

    static final FunctionDescriptor _InterlockedExchangeAdd$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchangeAdd$FUNC() { return _InterlockedExchangeAdd$FUNC_; }

    static final MethodHandle _InterlockedExchangeAdd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchangeAdd",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _InterlockedExchangeAdd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchangeAdd$MH() { return _InterlockedExchangeAdd$MH_; }

    static final FunctionDescriptor _InlineInterlockedAdd$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InlineInterlockedAdd$FUNC() { return _InlineInterlockedAdd$FUNC_; }

    static final MethodHandle _InlineInterlockedAdd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InlineInterlockedAdd",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _InlineInterlockedAdd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InlineInterlockedAdd$MH() { return _InlineInterlockedAdd$MH_; }

    static final FunctionDescriptor _InterlockedCompareExchange$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedCompareExchange$FUNC() { return _InterlockedCompareExchange$FUNC_; }

    static final MethodHandle _InterlockedCompareExchange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedCompareExchange",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        _InterlockedCompareExchange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedCompareExchange$MH() { return _InterlockedCompareExchange$MH_; }

    static final FunctionDescriptor _InterlockedIncrement64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedIncrement64$FUNC() { return _InterlockedIncrement64$FUNC_; }

    static final MethodHandle _InterlockedIncrement64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedIncrement64",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        _InterlockedIncrement64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedIncrement64$MH() { return _InterlockedIncrement64$MH_; }

    static final FunctionDescriptor _InterlockedDecrement64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedDecrement64$FUNC() { return _InterlockedDecrement64$FUNC_; }

    static final MethodHandle _InterlockedDecrement64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedDecrement64",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        _InterlockedDecrement64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedDecrement64$MH() { return _InterlockedDecrement64$MH_; }

    static final FunctionDescriptor _InterlockedExchange64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchange64$FUNC() { return _InterlockedExchange64$FUNC_; }

    static final MethodHandle _InterlockedExchange64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchange64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        _InterlockedExchange64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchange64$MH() { return _InterlockedExchange64$MH_; }

    static final FunctionDescriptor _InterlockedExchangeAdd64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchangeAdd64$FUNC() { return _InterlockedExchangeAdd64$FUNC_; }

    static final MethodHandle _InterlockedExchangeAdd64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchangeAdd64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        _InterlockedExchangeAdd64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchangeAdd64$MH() { return _InterlockedExchangeAdd64$MH_; }

    static final FunctionDescriptor _InlineInterlockedAdd64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InlineInterlockedAdd64$FUNC() { return _InlineInterlockedAdd64$FUNC_; }

    static final MethodHandle _InlineInterlockedAdd64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InlineInterlockedAdd64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        _InlineInterlockedAdd64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InlineInterlockedAdd64$MH() { return _InlineInterlockedAdd64$MH_; }

    static final FunctionDescriptor _InterlockedCompareExchange64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedCompareExchange64$FUNC() { return _InterlockedCompareExchange64$FUNC_; }

    static final MethodHandle _InterlockedCompareExchange64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedCompareExchange64",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)J",
        _InterlockedCompareExchange64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedCompareExchange64$MH() { return _InterlockedCompareExchange64$MH_; }

    static final FunctionDescriptor _InterlockedCompareExchange128$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedCompareExchange128$FUNC() { return _InterlockedCompareExchange128$FUNC_; }

    static final MethodHandle _InterlockedCompareExchange128$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedCompareExchange128",
        "(Ljdk/incubator/foreign/MemoryAddress;JJLjdk/incubator/foreign/MemoryAddress;)B",
        _InterlockedCompareExchange128$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedCompareExchange128$MH() { return _InterlockedCompareExchange128$MH_; }

    static final FunctionDescriptor _InterlockedCompareExchangePointer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedCompareExchangePointer$FUNC() { return _InterlockedCompareExchangePointer$FUNC_; }

    static final MethodHandle _InterlockedCompareExchangePointer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedCompareExchangePointer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _InterlockedCompareExchangePointer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedCompareExchangePointer$MH() { return _InterlockedCompareExchangePointer$MH_; }

    static final FunctionDescriptor _InterlockedExchangePointer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchangePointer$FUNC() { return _InterlockedExchangePointer$FUNC_; }

    static final MethodHandle _InterlockedExchangePointer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchangePointer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _InterlockedExchangePointer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchangePointer$MH() { return _InterlockedExchangePointer$MH_; }

    static final FunctionDescriptor _InterlockedExchange8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchange8$FUNC() { return _InterlockedExchange8$FUNC_; }

    static final MethodHandle _InterlockedExchange8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchange8",
        "(Ljdk/incubator/foreign/MemoryAddress;B)B",
        _InterlockedExchange8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchange8$MH() { return _InterlockedExchange8$MH_; }

    static final FunctionDescriptor _InterlockedExchange16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchange16$FUNC() { return _InterlockedExchange16$FUNC_; }

    static final MethodHandle _InterlockedExchange16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchange16",
        "(Ljdk/incubator/foreign/MemoryAddress;S)S",
        _InterlockedExchange16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchange16$MH() { return _InterlockedExchange16$MH_; }

    static final FunctionDescriptor _InterlockedExchangeAdd8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchangeAdd8$FUNC() { return _InterlockedExchangeAdd8$FUNC_; }

    static final MethodHandle _InterlockedExchangeAdd8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchangeAdd8",
        "(Ljdk/incubator/foreign/MemoryAddress;B)B",
        _InterlockedExchangeAdd8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchangeAdd8$MH() { return _InterlockedExchangeAdd8$MH_; }

    static final FunctionDescriptor _InterlockedAnd8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedAnd8$FUNC() { return _InterlockedAnd8$FUNC_; }

    static final MethodHandle _InterlockedAnd8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedAnd8",
        "(Ljdk/incubator/foreign/MemoryAddress;B)B",
        _InterlockedAnd8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedAnd8$MH() { return _InterlockedAnd8$MH_; }

    static final FunctionDescriptor _InterlockedOr8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedOr8$FUNC() { return _InterlockedOr8$FUNC_; }

    static final MethodHandle _InterlockedOr8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedOr8",
        "(Ljdk/incubator/foreign/MemoryAddress;B)B",
        _InterlockedOr8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedOr8$MH() { return _InterlockedOr8$MH_; }

    static final FunctionDescriptor _InterlockedXor8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedXor8$FUNC() { return _InterlockedXor8$FUNC_; }

    static final MethodHandle _InterlockedXor8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedXor8",
        "(Ljdk/incubator/foreign/MemoryAddress;B)B",
        _InterlockedXor8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedXor8$MH() { return _InterlockedXor8$MH_; }

    static final FunctionDescriptor _InterlockedAnd16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedAnd16$FUNC() { return _InterlockedAnd16$FUNC_; }

    static final MethodHandle _InterlockedAnd16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedAnd16",
        "(Ljdk/incubator/foreign/MemoryAddress;S)S",
        _InterlockedAnd16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedAnd16$MH() { return _InterlockedAnd16$MH_; }

    static final FunctionDescriptor _InterlockedOr16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedOr16$FUNC() { return _InterlockedOr16$FUNC_; }

    static final MethodHandle _InterlockedOr16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedOr16",
        "(Ljdk/incubator/foreign/MemoryAddress;S)S",
        _InterlockedOr16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedOr16$MH() { return _InterlockedOr16$MH_; }

    static final FunctionDescriptor _InterlockedXor16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedXor16$FUNC() { return _InterlockedXor16$FUNC_; }

    static final MethodHandle _InterlockedXor16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedXor16",
        "(Ljdk/incubator/foreign/MemoryAddress;S)S",
        _InterlockedXor16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedXor16$MH() { return _InterlockedXor16$MH_; }

    static final FunctionDescriptor __cpuidex$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __cpuidex$FUNC() { return __cpuidex$FUNC_; }

    static final MethodHandle __cpuidex$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__cpuidex",
        "(Ljdk/incubator/foreign/MemoryAddress;II)V",
        __cpuidex$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __cpuidex$MH() { return __cpuidex$MH_; }

    static final FunctionDescriptor _mm_clflush$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _mm_clflush$FUNC() { return _mm_clflush$FUNC_; }

    static final MethodHandle _mm_clflush$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_mm_clflush",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        _mm_clflush$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _mm_clflush$MH() { return _mm_clflush$MH_; }

    static final FunctionDescriptor _ReadWriteBarrier$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor _ReadWriteBarrier$FUNC() { return _ReadWriteBarrier$FUNC_; }

    static final MethodHandle _ReadWriteBarrier$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_ReadWriteBarrier",
        "()V",
        _ReadWriteBarrier$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _ReadWriteBarrier$MH() { return _ReadWriteBarrier$MH_; }

    static final FunctionDescriptor __faststorefence$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor __faststorefence$FUNC() { return __faststorefence$FUNC_; }

    static final MethodHandle __faststorefence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__faststorefence",
        "()V",
        __faststorefence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __faststorefence$MH() { return __faststorefence$MH_; }

    static final FunctionDescriptor _mm_lfence$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor _mm_lfence$FUNC() { return _mm_lfence$FUNC_; }

    static final MethodHandle _mm_lfence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_mm_lfence",
        "()V",
        _mm_lfence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _mm_lfence$MH() { return _mm_lfence$MH_; }

    static final FunctionDescriptor _mm_mfence$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor _mm_mfence$FUNC() { return _mm_mfence$FUNC_; }

    static final MethodHandle _mm_mfence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_mm_mfence",
        "()V",
        _mm_mfence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _mm_mfence$MH() { return _mm_mfence$MH_; }

    static final FunctionDescriptor _mm_sfence$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor _mm_sfence$FUNC() { return _mm_sfence$FUNC_; }

    static final MethodHandle _mm_sfence$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_mm_sfence",
        "()V",
        _mm_sfence$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _mm_sfence$MH() { return _mm_sfence$MH_; }

    static final FunctionDescriptor _mm_pause$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor _mm_pause$FUNC() { return _mm_pause$FUNC_; }

    static final MethodHandle _mm_pause$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_mm_pause",
        "()V",
        _mm_pause$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _mm_pause$MH() { return _mm_pause$MH_; }

    static final FunctionDescriptor _mm_prefetch$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _mm_prefetch$FUNC() { return _mm_prefetch$FUNC_; }

    static final MethodHandle _mm_prefetch$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_mm_prefetch",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        _mm_prefetch$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _mm_prefetch$MH() { return _mm_prefetch$MH_; }

    static final FunctionDescriptor _m_prefetchw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _m_prefetchw$FUNC() { return _m_prefetchw$FUNC_; }

    static final MethodHandle _m_prefetchw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_m_prefetchw",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        _m_prefetchw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _m_prefetchw$MH() { return _m_prefetchw$MH_; }

    static final FunctionDescriptor _mm_getcsr$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor _mm_getcsr$FUNC() { return _mm_getcsr$FUNC_; }

    static final MethodHandle _mm_getcsr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_mm_getcsr",
        "()I",
        _mm_getcsr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _mm_getcsr$MH() { return _mm_getcsr$MH_; }

    static final FunctionDescriptor _mm_setcsr$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _mm_setcsr$FUNC() { return _mm_setcsr$FUNC_; }

    static final MethodHandle _mm_setcsr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_mm_setcsr",
        "(I)V",
        _mm_setcsr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _mm_setcsr$MH() { return _mm_setcsr$MH_; }

    static final FunctionDescriptor __getcallerseflags$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor __getcallerseflags$FUNC() { return __getcallerseflags$FUNC_; }

    static final MethodHandle __getcallerseflags$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__getcallerseflags",
        "()I",
        __getcallerseflags$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __getcallerseflags$MH() { return __getcallerseflags$MH_; }

    static final FunctionDescriptor __segmentlimit$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __segmentlimit$FUNC() { return __segmentlimit$FUNC_; }

    static final MethodHandle __segmentlimit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__segmentlimit",
        "(I)I",
        __segmentlimit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __segmentlimit$MH() { return __segmentlimit$MH_; }

    static final FunctionDescriptor __readpmc$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __readpmc$FUNC() { return __readpmc$FUNC_; }

    static final MethodHandle __readpmc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__readpmc",
        "(I)J",
        __readpmc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __readpmc$MH() { return __readpmc$MH_; }

    static final FunctionDescriptor __rdtsc$FUNC_ = FunctionDescriptor.of(C_LONGLONG);
    static final jdk.incubator.foreign.FunctionDescriptor __rdtsc$FUNC() { return __rdtsc$FUNC_; }

    static final MethodHandle __rdtsc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__rdtsc",
        "()J",
        __rdtsc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __rdtsc$MH() { return __rdtsc$MH_; }

    static final FunctionDescriptor __movsb$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __movsb$FUNC() { return __movsb$FUNC_; }

    static final MethodHandle __movsb$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__movsb",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        __movsb$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __movsb$MH() { return __movsb$MH_; }

    static final FunctionDescriptor __movsw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __movsw$FUNC() { return __movsw$FUNC_; }

    static final MethodHandle __movsw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__movsw",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        __movsw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __movsw$MH() { return __movsw$MH_; }

    static final FunctionDescriptor __movsd$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __movsd$FUNC() { return __movsd$FUNC_; }

    static final MethodHandle __movsd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__movsd",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        __movsd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __movsd$MH() { return __movsd$MH_; }

    static final FunctionDescriptor __movsq$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __movsq$FUNC() { return __movsq$FUNC_; }

    static final MethodHandle __movsq$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__movsq",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        __movsq$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __movsq$MH() { return __movsq$MH_; }

    static final FunctionDescriptor __stosb$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_CHAR,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __stosb$FUNC() { return __stosb$FUNC_; }

    static final MethodHandle __stosb$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__stosb",
        "(Ljdk/incubator/foreign/MemoryAddress;BJ)V",
        __stosb$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __stosb$MH() { return __stosb$MH_; }

    static final FunctionDescriptor __stosw$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_SHORT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __stosw$FUNC() { return __stosw$FUNC_; }

    static final MethodHandle __stosw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__stosw",
        "(Ljdk/incubator/foreign/MemoryAddress;SJ)V",
        __stosw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __stosw$MH() { return __stosw$MH_; }

    static final FunctionDescriptor __stosd$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __stosd$FUNC() { return __stosd$FUNC_; }

    static final MethodHandle __stosd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__stosd",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)V",
        __stosd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __stosd$MH() { return __stosd$MH_; }

    static final FunctionDescriptor __stosq$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __stosq$FUNC() { return __stosq$FUNC_; }

    static final MethodHandle __stosq$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__stosq",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)V",
        __stosq$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __stosq$MH() { return __stosq$MH_; }

    static final FunctionDescriptor __mulh$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __mulh$FUNC() { return __mulh$FUNC_; }

    static final MethodHandle __mulh$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__mulh",
        "(JJ)J",
        __mulh$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __mulh$MH() { return __mulh$MH_; }

    static final FunctionDescriptor __umulh$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __umulh$FUNC() { return __umulh$FUNC_; }

    static final MethodHandle __umulh$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__umulh",
        "(JJ)J",
        __umulh$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __umulh$MH() { return __umulh$MH_; }

    static final FunctionDescriptor __popcnt64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __popcnt64$FUNC() { return __popcnt64$FUNC_; }

    static final MethodHandle __popcnt64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__popcnt64",
        "(J)J",
        __popcnt64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __popcnt64$MH() { return __popcnt64$MH_; }

    static final FunctionDescriptor __shiftleft128$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_LONGLONG,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor __shiftleft128$FUNC() { return __shiftleft128$FUNC_; }

    static final MethodHandle __shiftleft128$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__shiftleft128",
        "(JJB)J",
        __shiftleft128$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __shiftleft128$MH() { return __shiftleft128$MH_; }

    static final FunctionDescriptor __shiftright128$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_LONGLONG,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor __shiftright128$FUNC() { return __shiftright128$FUNC_; }

    static final MethodHandle __shiftright128$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__shiftright128",
        "(JJB)J",
        __shiftright128$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __shiftright128$MH() { return __shiftright128$MH_; }

    static final FunctionDescriptor _mul128$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _mul128$FUNC() { return _mul128$FUNC_; }

    static final MethodHandle _mul128$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_mul128",
        "(JJLjdk/incubator/foreign/MemoryAddress;)J",
        _mul128$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _mul128$MH() { return _mul128$MH_; }

    static final FunctionDescriptor _umul128$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _umul128$FUNC() { return _umul128$FUNC_; }

    static final MethodHandle _umul128$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_umul128",
        "(JJLjdk/incubator/foreign/MemoryAddress;)J",
        _umul128$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _umul128$MH() { return _umul128$MH_; }

    static final FunctionDescriptor MultiplyExtract128$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_LONGLONG,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor MultiplyExtract128$FUNC() { return MultiplyExtract128$FUNC_; }

    static final MethodHandle MultiplyExtract128$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MultiplyExtract128",
        "(JJB)J",
        MultiplyExtract128$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MultiplyExtract128$MH() { return MultiplyExtract128$MH_; }

    static final FunctionDescriptor UnsignedMultiplyExtract128$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_LONGLONG,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor UnsignedMultiplyExtract128$FUNC() { return UnsignedMultiplyExtract128$FUNC_; }

    static final MethodHandle UnsignedMultiplyExtract128$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnsignedMultiplyExtract128",
        "(JJB)J",
        UnsignedMultiplyExtract128$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UnsignedMultiplyExtract128$MH() { return UnsignedMultiplyExtract128$MH_; }

    static final FunctionDescriptor __readgsbyte$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __readgsbyte$FUNC() { return __readgsbyte$FUNC_; }

    static final MethodHandle __readgsbyte$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__readgsbyte",
        "(I)B",
        __readgsbyte$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __readgsbyte$MH() { return __readgsbyte$MH_; }

    static final FunctionDescriptor __readgsword$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __readgsword$FUNC() { return __readgsword$FUNC_; }

    static final MethodHandle __readgsword$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__readgsword",
        "(I)S",
        __readgsword$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __readgsword$MH() { return __readgsword$MH_; }

    static final FunctionDescriptor __readgsdword$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __readgsdword$FUNC() { return __readgsdword$FUNC_; }

    static final MethodHandle __readgsdword$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__readgsdword",
        "(I)I",
        __readgsdword$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __readgsdword$MH() { return __readgsdword$MH_; }

    static final FunctionDescriptor __readgsqword$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __readgsqword$FUNC() { return __readgsqword$FUNC_; }

    static final MethodHandle __readgsqword$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__readgsqword",
        "(I)J",
        __readgsqword$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __readgsqword$MH() { return __readgsqword$MH_; }

    static final FunctionDescriptor __writegsbyte$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor __writegsbyte$FUNC() { return __writegsbyte$FUNC_; }

    static final MethodHandle __writegsbyte$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__writegsbyte",
        "(IB)V",
        __writegsbyte$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __writegsbyte$MH() { return __writegsbyte$MH_; }

    static final FunctionDescriptor __writegsword$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __writegsword$FUNC() { return __writegsword$FUNC_; }

    static final MethodHandle __writegsword$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__writegsword",
        "(IS)V",
        __writegsword$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __writegsword$MH() { return __writegsword$MH_; }

    static final FunctionDescriptor __writegsdword$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __writegsdword$FUNC() { return __writegsdword$FUNC_; }

    static final MethodHandle __writegsdword$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__writegsdword",
        "(II)V",
        __writegsdword$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __writegsdword$MH() { return __writegsdword$MH_; }

    static final FunctionDescriptor __writegsqword$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __writegsqword$FUNC() { return __writegsqword$FUNC_; }

    static final MethodHandle __writegsqword$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__writegsqword",
        "(IJ)V",
        __writegsqword$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __writegsqword$MH() { return __writegsqword$MH_; }

    static final FunctionDescriptor __incgsbyte$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __incgsbyte$FUNC() { return __incgsbyte$FUNC_; }

    static final MethodHandle __incgsbyte$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__incgsbyte",
        "(I)V",
        __incgsbyte$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __incgsbyte$MH() { return __incgsbyte$MH_; }

    static final FunctionDescriptor __addgsbyte$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor __addgsbyte$FUNC() { return __addgsbyte$FUNC_; }

    static final MethodHandle __addgsbyte$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__addgsbyte",
        "(IB)V",
        __addgsbyte$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __addgsbyte$MH() { return __addgsbyte$MH_; }

    static final FunctionDescriptor __incgsword$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __incgsword$FUNC() { return __incgsword$FUNC_; }

    static final MethodHandle __incgsword$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__incgsword",
        "(I)V",
        __incgsword$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __incgsword$MH() { return __incgsword$MH_; }

    static final FunctionDescriptor __addgsword$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __addgsword$FUNC() { return __addgsword$FUNC_; }

    static final MethodHandle __addgsword$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__addgsword",
        "(IS)V",
        __addgsword$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __addgsword$MH() { return __addgsword$MH_; }

    static final FunctionDescriptor __incgsdword$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __incgsdword$FUNC() { return __incgsdword$FUNC_; }

    static final MethodHandle __incgsdword$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__incgsdword",
        "(I)V",
        __incgsdword$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __incgsdword$MH() { return __incgsdword$MH_; }

    static final FunctionDescriptor __addgsdword$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __addgsdword$FUNC() { return __addgsdword$FUNC_; }

    static final MethodHandle __addgsdword$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__addgsdword",
        "(II)V",
        __addgsdword$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __addgsdword$MH() { return __addgsdword$MH_; }

    static final FunctionDescriptor __incgsqword$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __incgsqword$FUNC() { return __incgsqword$FUNC_; }

    static final MethodHandle __incgsqword$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__incgsqword",
        "(I)V",
        __incgsqword$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __incgsqword$MH() { return __incgsqword$MH_; }

    static final FunctionDescriptor __addgsqword$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __addgsqword$FUNC() { return __addgsqword$FUNC_; }

    static final MethodHandle __addgsqword$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__addgsqword",
        "(IJ)V",
        __addgsqword$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __addgsqword$MH() { return __addgsqword$MH_; }

    static final MemoryLayout _CONTEXT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("P1Home"),
        C_LONGLONG.withName("P2Home"),
        C_LONGLONG.withName("P3Home"),
        C_LONGLONG.withName("P4Home"),
        C_LONGLONG.withName("P5Home"),
        C_LONGLONG.withName("P6Home"),
        C_LONG.withName("ContextFlags"),
        C_LONG.withName("MxCsr"),
        C_SHORT.withName("SegCs"),
        C_SHORT.withName("SegDs"),
        C_SHORT.withName("SegEs"),
        C_SHORT.withName("SegFs"),
        C_SHORT.withName("SegGs"),
        C_SHORT.withName("SegSs"),
        C_LONG.withName("EFlags"),
        C_LONGLONG.withName("Dr0"),
        C_LONGLONG.withName("Dr1"),
        C_LONGLONG.withName("Dr2"),
        C_LONGLONG.withName("Dr3"),
        C_LONGLONG.withName("Dr6"),
        C_LONGLONG.withName("Dr7"),
        C_LONGLONG.withName("Rax"),
        C_LONGLONG.withName("Rcx"),
        C_LONGLONG.withName("Rdx"),
        C_LONGLONG.withName("Rbx"),
        C_LONGLONG.withName("Rsp"),
        C_LONGLONG.withName("Rbp"),
        C_LONGLONG.withName("Rsi"),
        C_LONGLONG.withName("Rdi"),
        C_LONGLONG.withName("R8"),
        C_LONGLONG.withName("R9"),
        C_LONGLONG.withName("R10"),
        C_LONGLONG.withName("R11"),
        C_LONGLONG.withName("R12"),
        C_LONGLONG.withName("R13"),
        C_LONGLONG.withName("R14"),
        C_LONGLONG.withName("R15"),
        C_LONGLONG.withName("Rip"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("ControlWord"),
            C_SHORT.withName("StatusWord"),
            C_CHAR.withName("TagWord"),
            C_CHAR.withName("Reserved1"),
            C_SHORT.withName("ErrorOpcode"),
            C_LONG.withName("ErrorOffset"),
            C_SHORT.withName("ErrorSelector"),
            C_SHORT.withName("Reserved2"),
            C_LONG.withName("DataOffset"),
            C_SHORT.withName("DataSelector"),
            C_SHORT.withName("Reserved3"),
            C_LONG.withName("MxCsr"),
            C_LONG.withName("MxCsr_Mask"),
            MemoryLayout.ofSequence(8, MemoryLayout.ofStruct(
                C_LONGLONG.withName("Low"),
                C_LONGLONG.withName("High")
            ).withName("_M128A")).withName("FloatRegisters"),
            MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
                C_LONGLONG.withName("Low"),
                C_LONGLONG.withName("High")
            ).withName("_M128A")).withName("XmmRegisters"),
            MemoryLayout.ofSequence(96, C_CHAR).withName("Reserved4")
        ).withName("FltSave"),
        MemoryLayout.ofSequence(2, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("_M128A")).withName("Header"),
        MemoryLayout.ofSequence(8, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("_M128A")).withName("Legacy"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm0"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm1"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm2"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm3"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm4"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm5"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm6"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm7"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm8"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm9"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm10"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm11"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm12"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm13"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm14"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("Xmm15"),
        MemoryLayout.ofSequence(26, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("_M128A")).withName("VectorRegister"),
        C_LONGLONG.withName("VectorControl"),
        C_LONGLONG.withName("DebugControl"),
        C_LONGLONG.withName("LastBranchToRip"),
        C_LONGLONG.withName("LastBranchFromRip"),
        C_LONGLONG.withName("LastExceptionToRip"),
        C_LONGLONG.withName("LastExceptionFromRip")
    ).withName("_CONTEXT");
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$struct$LAYOUT() { return _CONTEXT$struct$LAYOUT_; }

    static final MemoryLayout _CONTEXT$P1Home$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$P1Home$LAYOUT() { return _CONTEXT$P1Home$LAYOUT_; }

    static final VarHandle _CONTEXT$P1Home$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("P1Home"));
    static final java.lang.invoke.VarHandle _CONTEXT$P1Home$VH() { return _CONTEXT$P1Home$VH_; }

    static final MemoryLayout _CONTEXT$P2Home$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$P2Home$LAYOUT() { return _CONTEXT$P2Home$LAYOUT_; }

    static final VarHandle _CONTEXT$P2Home$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("P2Home"));
    static final java.lang.invoke.VarHandle _CONTEXT$P2Home$VH() { return _CONTEXT$P2Home$VH_; }

    static final MemoryLayout _CONTEXT$P3Home$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$P3Home$LAYOUT() { return _CONTEXT$P3Home$LAYOUT_; }

    static final VarHandle _CONTEXT$P3Home$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("P3Home"));
    static final java.lang.invoke.VarHandle _CONTEXT$P3Home$VH() { return _CONTEXT$P3Home$VH_; }

    static final MemoryLayout _CONTEXT$P4Home$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$P4Home$LAYOUT() { return _CONTEXT$P4Home$LAYOUT_; }

    static final VarHandle _CONTEXT$P4Home$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("P4Home"));
    static final java.lang.invoke.VarHandle _CONTEXT$P4Home$VH() { return _CONTEXT$P4Home$VH_; }

    static final MemoryLayout _CONTEXT$P5Home$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$P5Home$LAYOUT() { return _CONTEXT$P5Home$LAYOUT_; }

    static final VarHandle _CONTEXT$P5Home$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("P5Home"));
    static final java.lang.invoke.VarHandle _CONTEXT$P5Home$VH() { return _CONTEXT$P5Home$VH_; }

    static final MemoryLayout _CONTEXT$P6Home$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$P6Home$LAYOUT() { return _CONTEXT$P6Home$LAYOUT_; }

    static final VarHandle _CONTEXT$P6Home$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("P6Home"));
    static final java.lang.invoke.VarHandle _CONTEXT$P6Home$VH() { return _CONTEXT$P6Home$VH_; }

    static final MemoryLayout _CONTEXT$ContextFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$ContextFlags$LAYOUT() { return _CONTEXT$ContextFlags$LAYOUT_; }

    static final VarHandle _CONTEXT$ContextFlags$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ContextFlags"));
    static final java.lang.invoke.VarHandle _CONTEXT$ContextFlags$VH() { return _CONTEXT$ContextFlags$VH_; }

    static final MemoryLayout _CONTEXT$MxCsr$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$MxCsr$LAYOUT() { return _CONTEXT$MxCsr$LAYOUT_; }

    static final VarHandle _CONTEXT$MxCsr$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MxCsr"));
    static final java.lang.invoke.VarHandle _CONTEXT$MxCsr$VH() { return _CONTEXT$MxCsr$VH_; }

    static final MemoryLayout _CONTEXT$SegCs$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$SegCs$LAYOUT() { return _CONTEXT$SegCs$LAYOUT_; }

    static final VarHandle _CONTEXT$SegCs$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SegCs"));
    static final java.lang.invoke.VarHandle _CONTEXT$SegCs$VH() { return _CONTEXT$SegCs$VH_; }

    static final MemoryLayout _CONTEXT$SegDs$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$SegDs$LAYOUT() { return _CONTEXT$SegDs$LAYOUT_; }

    static final VarHandle _CONTEXT$SegDs$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SegDs"));
    static final java.lang.invoke.VarHandle _CONTEXT$SegDs$VH() { return _CONTEXT$SegDs$VH_; }

    static final MemoryLayout _CONTEXT$SegEs$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$SegEs$LAYOUT() { return _CONTEXT$SegEs$LAYOUT_; }

    static final VarHandle _CONTEXT$SegEs$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SegEs"));
    static final java.lang.invoke.VarHandle _CONTEXT$SegEs$VH() { return _CONTEXT$SegEs$VH_; }

    static final MemoryLayout _CONTEXT$SegFs$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$SegFs$LAYOUT() { return _CONTEXT$SegFs$LAYOUT_; }

    static final VarHandle _CONTEXT$SegFs$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SegFs"));
    static final java.lang.invoke.VarHandle _CONTEXT$SegFs$VH() { return _CONTEXT$SegFs$VH_; }

    static final MemoryLayout _CONTEXT$SegGs$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$SegGs$LAYOUT() { return _CONTEXT$SegGs$LAYOUT_; }

    static final VarHandle _CONTEXT$SegGs$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SegGs"));
    static final java.lang.invoke.VarHandle _CONTEXT$SegGs$VH() { return _CONTEXT$SegGs$VH_; }

    static final MemoryLayout _CONTEXT$SegSs$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$SegSs$LAYOUT() { return _CONTEXT$SegSs$LAYOUT_; }

    static final VarHandle _CONTEXT$SegSs$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SegSs"));
    static final java.lang.invoke.VarHandle _CONTEXT$SegSs$VH() { return _CONTEXT$SegSs$VH_; }

    static final MemoryLayout _CONTEXT$EFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$EFlags$LAYOUT() { return _CONTEXT$EFlags$LAYOUT_; }

    static final VarHandle _CONTEXT$EFlags$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EFlags"));
    static final java.lang.invoke.VarHandle _CONTEXT$EFlags$VH() { return _CONTEXT$EFlags$VH_; }

    static final MemoryLayout _CONTEXT$Dr0$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Dr0$LAYOUT() { return _CONTEXT$Dr0$LAYOUT_; }

    static final VarHandle _CONTEXT$Dr0$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Dr0"));
    static final java.lang.invoke.VarHandle _CONTEXT$Dr0$VH() { return _CONTEXT$Dr0$VH_; }

    static final MemoryLayout _CONTEXT$Dr1$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Dr1$LAYOUT() { return _CONTEXT$Dr1$LAYOUT_; }

    static final VarHandle _CONTEXT$Dr1$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Dr1"));
    static final java.lang.invoke.VarHandle _CONTEXT$Dr1$VH() { return _CONTEXT$Dr1$VH_; }

    static final MemoryLayout _CONTEXT$Dr2$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Dr2$LAYOUT() { return _CONTEXT$Dr2$LAYOUT_; }

    static final VarHandle _CONTEXT$Dr2$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Dr2"));
    static final java.lang.invoke.VarHandle _CONTEXT$Dr2$VH() { return _CONTEXT$Dr2$VH_; }

    static final MemoryLayout _CONTEXT$Dr3$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Dr3$LAYOUT() { return _CONTEXT$Dr3$LAYOUT_; }

    static final VarHandle _CONTEXT$Dr3$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Dr3"));
    static final java.lang.invoke.VarHandle _CONTEXT$Dr3$VH() { return _CONTEXT$Dr3$VH_; }

    static final MemoryLayout _CONTEXT$Dr6$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Dr6$LAYOUT() { return _CONTEXT$Dr6$LAYOUT_; }

    static final VarHandle _CONTEXT$Dr6$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Dr6"));
    static final java.lang.invoke.VarHandle _CONTEXT$Dr6$VH() { return _CONTEXT$Dr6$VH_; }

    static final MemoryLayout _CONTEXT$Dr7$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Dr7$LAYOUT() { return _CONTEXT$Dr7$LAYOUT_; }

    static final VarHandle _CONTEXT$Dr7$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Dr7"));
    static final java.lang.invoke.VarHandle _CONTEXT$Dr7$VH() { return _CONTEXT$Dr7$VH_; }

    static final MemoryLayout _CONTEXT$Rax$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Rax$LAYOUT() { return _CONTEXT$Rax$LAYOUT_; }

    static final VarHandle _CONTEXT$Rax$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rax"));
    static final java.lang.invoke.VarHandle _CONTEXT$Rax$VH() { return _CONTEXT$Rax$VH_; }

    static final MemoryLayout _CONTEXT$Rcx$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Rcx$LAYOUT() { return _CONTEXT$Rcx$LAYOUT_; }

    static final VarHandle _CONTEXT$Rcx$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rcx"));
    static final java.lang.invoke.VarHandle _CONTEXT$Rcx$VH() { return _CONTEXT$Rcx$VH_; }

    static final MemoryLayout _CONTEXT$Rdx$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Rdx$LAYOUT() { return _CONTEXT$Rdx$LAYOUT_; }

    static final VarHandle _CONTEXT$Rdx$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rdx"));
    static final java.lang.invoke.VarHandle _CONTEXT$Rdx$VH() { return _CONTEXT$Rdx$VH_; }

    static final MemoryLayout _CONTEXT$Rbx$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Rbx$LAYOUT() { return _CONTEXT$Rbx$LAYOUT_; }

    static final VarHandle _CONTEXT$Rbx$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rbx"));
    static final java.lang.invoke.VarHandle _CONTEXT$Rbx$VH() { return _CONTEXT$Rbx$VH_; }

    static final MemoryLayout _CONTEXT$Rsp$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Rsp$LAYOUT() { return _CONTEXT$Rsp$LAYOUT_; }

    static final VarHandle _CONTEXT$Rsp$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rsp"));
    static final java.lang.invoke.VarHandle _CONTEXT$Rsp$VH() { return _CONTEXT$Rsp$VH_; }

    static final MemoryLayout _CONTEXT$Rbp$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Rbp$LAYOUT() { return _CONTEXT$Rbp$LAYOUT_; }

    static final VarHandle _CONTEXT$Rbp$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rbp"));
    static final java.lang.invoke.VarHandle _CONTEXT$Rbp$VH() { return _CONTEXT$Rbp$VH_; }

    static final MemoryLayout _CONTEXT$Rsi$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Rsi$LAYOUT() { return _CONTEXT$Rsi$LAYOUT_; }

    static final VarHandle _CONTEXT$Rsi$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rsi"));
    static final java.lang.invoke.VarHandle _CONTEXT$Rsi$VH() { return _CONTEXT$Rsi$VH_; }

    static final MemoryLayout _CONTEXT$Rdi$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Rdi$LAYOUT() { return _CONTEXT$Rdi$LAYOUT_; }

    static final VarHandle _CONTEXT$Rdi$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rdi"));
    static final java.lang.invoke.VarHandle _CONTEXT$Rdi$VH() { return _CONTEXT$Rdi$VH_; }

    static final MemoryLayout _CONTEXT$R8$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$R8$LAYOUT() { return _CONTEXT$R8$LAYOUT_; }

    static final VarHandle _CONTEXT$R8$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R8"));
    static final java.lang.invoke.VarHandle _CONTEXT$R8$VH() { return _CONTEXT$R8$VH_; }

    static final MemoryLayout _CONTEXT$R9$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$R9$LAYOUT() { return _CONTEXT$R9$LAYOUT_; }

    static final VarHandle _CONTEXT$R9$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R9"));
    static final java.lang.invoke.VarHandle _CONTEXT$R9$VH() { return _CONTEXT$R9$VH_; }

    static final MemoryLayout _CONTEXT$R10$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$R10$LAYOUT() { return _CONTEXT$R10$LAYOUT_; }

    static final VarHandle _CONTEXT$R10$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R10"));
    static final java.lang.invoke.VarHandle _CONTEXT$R10$VH() { return _CONTEXT$R10$VH_; }

    static final MemoryLayout _CONTEXT$R11$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$R11$LAYOUT() { return _CONTEXT$R11$LAYOUT_; }

    static final VarHandle _CONTEXT$R11$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R11"));
    static final java.lang.invoke.VarHandle _CONTEXT$R11$VH() { return _CONTEXT$R11$VH_; }

    static final MemoryLayout _CONTEXT$R12$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$R12$LAYOUT() { return _CONTEXT$R12$LAYOUT_; }

    static final VarHandle _CONTEXT$R12$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R12"));
    static final java.lang.invoke.VarHandle _CONTEXT$R12$VH() { return _CONTEXT$R12$VH_; }

    static final MemoryLayout _CONTEXT$R13$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$R13$LAYOUT() { return _CONTEXT$R13$LAYOUT_; }

    static final VarHandle _CONTEXT$R13$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R13"));
    static final java.lang.invoke.VarHandle _CONTEXT$R13$VH() { return _CONTEXT$R13$VH_; }

    static final MemoryLayout _CONTEXT$R14$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$R14$LAYOUT() { return _CONTEXT$R14$LAYOUT_; }

    static final VarHandle _CONTEXT$R14$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R14"));
    static final java.lang.invoke.VarHandle _CONTEXT$R14$VH() { return _CONTEXT$R14$VH_; }

    static final MemoryLayout _CONTEXT$R15$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$R15$LAYOUT() { return _CONTEXT$R15$LAYOUT_; }

    static final VarHandle _CONTEXT$R15$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("R15"));
    static final java.lang.invoke.VarHandle _CONTEXT$R15$VH() { return _CONTEXT$R15$VH_; }

    static final MemoryLayout _CONTEXT$Rip$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$Rip$LAYOUT() { return _CONTEXT$Rip$LAYOUT_; }

    static final VarHandle _CONTEXT$Rip$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rip"));
    static final java.lang.invoke.VarHandle _CONTEXT$Rip$VH() { return _CONTEXT$Rip$VH_; }

    static final MemoryLayout _CONTEXT$VectorControl$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$VectorControl$LAYOUT() { return _CONTEXT$VectorControl$LAYOUT_; }

    static final VarHandle _CONTEXT$VectorControl$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VectorControl"));
    static final java.lang.invoke.VarHandle _CONTEXT$VectorControl$VH() { return _CONTEXT$VectorControl$VH_; }

    static final MemoryLayout _CONTEXT$DebugControl$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$DebugControl$LAYOUT() { return _CONTEXT$DebugControl$LAYOUT_; }

    static final VarHandle _CONTEXT$DebugControl$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DebugControl"));
    static final java.lang.invoke.VarHandle _CONTEXT$DebugControl$VH() { return _CONTEXT$DebugControl$VH_; }

    static final MemoryLayout _CONTEXT$LastBranchToRip$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$LastBranchToRip$LAYOUT() { return _CONTEXT$LastBranchToRip$LAYOUT_; }

    static final VarHandle _CONTEXT$LastBranchToRip$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LastBranchToRip"));
    static final java.lang.invoke.VarHandle _CONTEXT$LastBranchToRip$VH() { return _CONTEXT$LastBranchToRip$VH_; }

    static final MemoryLayout _CONTEXT$LastBranchFromRip$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$LastBranchFromRip$LAYOUT() { return _CONTEXT$LastBranchFromRip$LAYOUT_; }

    static final VarHandle _CONTEXT$LastBranchFromRip$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LastBranchFromRip"));
    static final java.lang.invoke.VarHandle _CONTEXT$LastBranchFromRip$VH() { return _CONTEXT$LastBranchFromRip$VH_; }

    static final MemoryLayout _CONTEXT$LastExceptionToRip$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$LastExceptionToRip$LAYOUT() { return _CONTEXT$LastExceptionToRip$LAYOUT_; }

    static final VarHandle _CONTEXT$LastExceptionToRip$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LastExceptionToRip"));
    static final java.lang.invoke.VarHandle _CONTEXT$LastExceptionToRip$VH() { return _CONTEXT$LastExceptionToRip$VH_; }

    static final MemoryLayout _CONTEXT$LastExceptionFromRip$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CONTEXT$LastExceptionFromRip$LAYOUT() { return _CONTEXT$LastExceptionFromRip$LAYOUT_; }

    static final VarHandle _CONTEXT$LastExceptionFromRip$VH_ = _CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LastExceptionFromRip"));
    static final java.lang.invoke.VarHandle _CONTEXT$LastExceptionFromRip$VH() { return _CONTEXT$LastExceptionFromRip$VH_; }

    static final MemoryLayout _UNWIND_HISTORY_TABLE_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("ImageBase"),
        C_POINTER.withName("FunctionEntry")
    ).withName("_UNWIND_HISTORY_TABLE_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _UNWIND_HISTORY_TABLE_ENTRY$struct$LAYOUT() { return _UNWIND_HISTORY_TABLE_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _UNWIND_HISTORY_TABLE_ENTRY$ImageBase$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _UNWIND_HISTORY_TABLE_ENTRY$ImageBase$LAYOUT() { return _UNWIND_HISTORY_TABLE_ENTRY$ImageBase$LAYOUT_; }

    static final VarHandle _UNWIND_HISTORY_TABLE_ENTRY$ImageBase$VH_ = _UNWIND_HISTORY_TABLE_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ImageBase"));
    static final java.lang.invoke.VarHandle _UNWIND_HISTORY_TABLE_ENTRY$ImageBase$VH() { return _UNWIND_HISTORY_TABLE_ENTRY$ImageBase$VH_; }

    static final MemoryLayout _UNWIND_HISTORY_TABLE_ENTRY$FunctionEntry$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _UNWIND_HISTORY_TABLE_ENTRY$FunctionEntry$LAYOUT() { return _UNWIND_HISTORY_TABLE_ENTRY$FunctionEntry$LAYOUT_; }

    static final VarHandle _UNWIND_HISTORY_TABLE_ENTRY$FunctionEntry$VH_ = MemoryHandles.asAddressVarHandle(_UNWIND_HISTORY_TABLE_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FunctionEntry")));
    static final java.lang.invoke.VarHandle _UNWIND_HISTORY_TABLE_ENTRY$FunctionEntry$VH() { return _UNWIND_HISTORY_TABLE_ENTRY$FunctionEntry$VH_; }

    static final MemoryLayout _UNWIND_HISTORY_TABLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Count"),
        C_CHAR.withName("LocalHint"),
        C_CHAR.withName("GlobalHint"),
        C_CHAR.withName("Search"),
        C_CHAR.withName("Once"),
        C_LONGLONG.withName("LowAddress"),
        C_LONGLONG.withName("HighAddress"),
        MemoryLayout.ofSequence(12, MemoryLayout.ofStruct(
            C_LONGLONG.withName("ImageBase"),
            C_POINTER.withName("FunctionEntry")
        ).withName("_UNWIND_HISTORY_TABLE_ENTRY")).withName("Entry")
    ).withName("_UNWIND_HISTORY_TABLE");
    static final jdk.incubator.foreign.MemoryLayout _UNWIND_HISTORY_TABLE$struct$LAYOUT() { return _UNWIND_HISTORY_TABLE$struct$LAYOUT_; }

    static final MemoryLayout _UNWIND_HISTORY_TABLE$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _UNWIND_HISTORY_TABLE$Count$LAYOUT() { return _UNWIND_HISTORY_TABLE$Count$LAYOUT_; }

    static final VarHandle _UNWIND_HISTORY_TABLE$Count$VH_ = _UNWIND_HISTORY_TABLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle _UNWIND_HISTORY_TABLE$Count$VH() { return _UNWIND_HISTORY_TABLE$Count$VH_; }

    static final MemoryLayout _UNWIND_HISTORY_TABLE$LocalHint$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _UNWIND_HISTORY_TABLE$LocalHint$LAYOUT() { return _UNWIND_HISTORY_TABLE$LocalHint$LAYOUT_; }

    static final VarHandle _UNWIND_HISTORY_TABLE$LocalHint$VH_ = _UNWIND_HISTORY_TABLE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("LocalHint"));
    static final java.lang.invoke.VarHandle _UNWIND_HISTORY_TABLE$LocalHint$VH() { return _UNWIND_HISTORY_TABLE$LocalHint$VH_; }

    static final MemoryLayout _UNWIND_HISTORY_TABLE$GlobalHint$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _UNWIND_HISTORY_TABLE$GlobalHint$LAYOUT() { return _UNWIND_HISTORY_TABLE$GlobalHint$LAYOUT_; }

    static final VarHandle _UNWIND_HISTORY_TABLE$GlobalHint$VH_ = _UNWIND_HISTORY_TABLE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("GlobalHint"));
    static final java.lang.invoke.VarHandle _UNWIND_HISTORY_TABLE$GlobalHint$VH() { return _UNWIND_HISTORY_TABLE$GlobalHint$VH_; }

    static final MemoryLayout _UNWIND_HISTORY_TABLE$Search$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _UNWIND_HISTORY_TABLE$Search$LAYOUT() { return _UNWIND_HISTORY_TABLE$Search$LAYOUT_; }

    static final VarHandle _UNWIND_HISTORY_TABLE$Search$VH_ = _UNWIND_HISTORY_TABLE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Search"));
    static final java.lang.invoke.VarHandle _UNWIND_HISTORY_TABLE$Search$VH() { return _UNWIND_HISTORY_TABLE$Search$VH_; }

    static final MemoryLayout _UNWIND_HISTORY_TABLE$Once$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _UNWIND_HISTORY_TABLE$Once$LAYOUT() { return _UNWIND_HISTORY_TABLE$Once$LAYOUT_; }

    static final VarHandle _UNWIND_HISTORY_TABLE$Once$VH_ = _UNWIND_HISTORY_TABLE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Once"));
    static final java.lang.invoke.VarHandle _UNWIND_HISTORY_TABLE$Once$VH() { return _UNWIND_HISTORY_TABLE$Once$VH_; }

    static final MemoryLayout _UNWIND_HISTORY_TABLE$LowAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _UNWIND_HISTORY_TABLE$LowAddress$LAYOUT() { return _UNWIND_HISTORY_TABLE$LowAddress$LAYOUT_; }

    static final VarHandle _UNWIND_HISTORY_TABLE$LowAddress$VH_ = _UNWIND_HISTORY_TABLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowAddress"));
    static final java.lang.invoke.VarHandle _UNWIND_HISTORY_TABLE$LowAddress$VH() { return _UNWIND_HISTORY_TABLE$LowAddress$VH_; }

    static final MemoryLayout _UNWIND_HISTORY_TABLE$HighAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _UNWIND_HISTORY_TABLE$HighAddress$LAYOUT() { return _UNWIND_HISTORY_TABLE$HighAddress$LAYOUT_; }

    static final VarHandle _UNWIND_HISTORY_TABLE$HighAddress$VH_ = _UNWIND_HISTORY_TABLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HighAddress"));
    static final java.lang.invoke.VarHandle _UNWIND_HISTORY_TABLE$HighAddress$VH() { return _UNWIND_HISTORY_TABLE$HighAddress$VH_; }

    static final MemoryLayout _DISPATCHER_CONTEXT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("ControlPc"),
        C_LONGLONG.withName("ImageBase"),
        C_POINTER.withName("FunctionEntry"),
        C_LONGLONG.withName("EstablisherFrame"),
        C_LONGLONG.withName("TargetIp"),
        C_POINTER.withName("ContextRecord"),
        C_POINTER.withName("LanguageHandler"),
        C_POINTER.withName("HandlerData"),
        C_POINTER.withName("HistoryTable"),
        C_LONG.withName("ScopeIndex"),
        C_LONG.withName("Fill0")
    ).withName("_DISPATCHER_CONTEXT");
    static final jdk.incubator.foreign.MemoryLayout _DISPATCHER_CONTEXT$struct$LAYOUT() { return _DISPATCHER_CONTEXT$struct$LAYOUT_; }

    static final MemoryLayout _DISPATCHER_CONTEXT$ControlPc$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _DISPATCHER_CONTEXT$ControlPc$LAYOUT() { return _DISPATCHER_CONTEXT$ControlPc$LAYOUT_; }

    static final VarHandle _DISPATCHER_CONTEXT$ControlPc$VH_ = _DISPATCHER_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ControlPc"));
    static final java.lang.invoke.VarHandle _DISPATCHER_CONTEXT$ControlPc$VH() { return _DISPATCHER_CONTEXT$ControlPc$VH_; }

    static final MemoryLayout _DISPATCHER_CONTEXT$ImageBase$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _DISPATCHER_CONTEXT$ImageBase$LAYOUT() { return _DISPATCHER_CONTEXT$ImageBase$LAYOUT_; }

    static final VarHandle _DISPATCHER_CONTEXT$ImageBase$VH_ = _DISPATCHER_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ImageBase"));
    static final java.lang.invoke.VarHandle _DISPATCHER_CONTEXT$ImageBase$VH() { return _DISPATCHER_CONTEXT$ImageBase$VH_; }

    static final MemoryLayout _DISPATCHER_CONTEXT$FunctionEntry$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DISPATCHER_CONTEXT$FunctionEntry$LAYOUT() { return _DISPATCHER_CONTEXT$FunctionEntry$LAYOUT_; }

    static final VarHandle _DISPATCHER_CONTEXT$FunctionEntry$VH_ = MemoryHandles.asAddressVarHandle(_DISPATCHER_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FunctionEntry")));
    static final java.lang.invoke.VarHandle _DISPATCHER_CONTEXT$FunctionEntry$VH() { return _DISPATCHER_CONTEXT$FunctionEntry$VH_; }

    static final MemoryLayout _DISPATCHER_CONTEXT$EstablisherFrame$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _DISPATCHER_CONTEXT$EstablisherFrame$LAYOUT() { return _DISPATCHER_CONTEXT$EstablisherFrame$LAYOUT_; }

    static final VarHandle _DISPATCHER_CONTEXT$EstablisherFrame$VH_ = _DISPATCHER_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EstablisherFrame"));
    static final java.lang.invoke.VarHandle _DISPATCHER_CONTEXT$EstablisherFrame$VH() { return _DISPATCHER_CONTEXT$EstablisherFrame$VH_; }

    static final MemoryLayout _DISPATCHER_CONTEXT$TargetIp$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _DISPATCHER_CONTEXT$TargetIp$LAYOUT() { return _DISPATCHER_CONTEXT$TargetIp$LAYOUT_; }

    static final VarHandle _DISPATCHER_CONTEXT$TargetIp$VH_ = _DISPATCHER_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TargetIp"));
    static final java.lang.invoke.VarHandle _DISPATCHER_CONTEXT$TargetIp$VH() { return _DISPATCHER_CONTEXT$TargetIp$VH_; }

    static final MemoryLayout _DISPATCHER_CONTEXT$ContextRecord$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DISPATCHER_CONTEXT$ContextRecord$LAYOUT() { return _DISPATCHER_CONTEXT$ContextRecord$LAYOUT_; }

    static final VarHandle _DISPATCHER_CONTEXT$ContextRecord$VH_ = MemoryHandles.asAddressVarHandle(_DISPATCHER_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ContextRecord")));
    static final java.lang.invoke.VarHandle _DISPATCHER_CONTEXT$ContextRecord$VH() { return _DISPATCHER_CONTEXT$ContextRecord$VH_; }

    static final MemoryLayout _DISPATCHER_CONTEXT$LanguageHandler$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DISPATCHER_CONTEXT$LanguageHandler$LAYOUT() { return _DISPATCHER_CONTEXT$LanguageHandler$LAYOUT_; }

    static final VarHandle _DISPATCHER_CONTEXT$LanguageHandler$VH_ = MemoryHandles.asAddressVarHandle(_DISPATCHER_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LanguageHandler")));
    static final java.lang.invoke.VarHandle _DISPATCHER_CONTEXT$LanguageHandler$VH() { return _DISPATCHER_CONTEXT$LanguageHandler$VH_; }

    static final MemoryLayout _DISPATCHER_CONTEXT$HandlerData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DISPATCHER_CONTEXT$HandlerData$LAYOUT() { return _DISPATCHER_CONTEXT$HandlerData$LAYOUT_; }

    static final VarHandle _DISPATCHER_CONTEXT$HandlerData$VH_ = MemoryHandles.asAddressVarHandle(_DISPATCHER_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HandlerData")));
    static final java.lang.invoke.VarHandle _DISPATCHER_CONTEXT$HandlerData$VH() { return _DISPATCHER_CONTEXT$HandlerData$VH_; }

    static final MemoryLayout _DISPATCHER_CONTEXT$HistoryTable$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DISPATCHER_CONTEXT$HistoryTable$LAYOUT() { return _DISPATCHER_CONTEXT$HistoryTable$LAYOUT_; }

    static final VarHandle _DISPATCHER_CONTEXT$HistoryTable$VH_ = MemoryHandles.asAddressVarHandle(_DISPATCHER_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HistoryTable")));
    static final java.lang.invoke.VarHandle _DISPATCHER_CONTEXT$HistoryTable$VH() { return _DISPATCHER_CONTEXT$HistoryTable$VH_; }

    static final MemoryLayout _DISPATCHER_CONTEXT$ScopeIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISPATCHER_CONTEXT$ScopeIndex$LAYOUT() { return _DISPATCHER_CONTEXT$ScopeIndex$LAYOUT_; }

    static final VarHandle _DISPATCHER_CONTEXT$ScopeIndex$VH_ = _DISPATCHER_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ScopeIndex"));
    static final java.lang.invoke.VarHandle _DISPATCHER_CONTEXT$ScopeIndex$VH() { return _DISPATCHER_CONTEXT$ScopeIndex$VH_; }

    static final MemoryLayout _DISPATCHER_CONTEXT$Fill0$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISPATCHER_CONTEXT$Fill0$LAYOUT() { return _DISPATCHER_CONTEXT$Fill0$LAYOUT_; }

    static final VarHandle _DISPATCHER_CONTEXT$Fill0$VH_ = _DISPATCHER_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Fill0"));
    static final java.lang.invoke.VarHandle _DISPATCHER_CONTEXT$Fill0$VH() { return _DISPATCHER_CONTEXT$Fill0$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(16, C_POINTER).withName("FloatingContext"),
        C_POINTER.withName("Xmm0"),
        C_POINTER.withName("Xmm1"),
        C_POINTER.withName("Xmm2"),
        C_POINTER.withName("Xmm3"),
        C_POINTER.withName("Xmm4"),
        C_POINTER.withName("Xmm5"),
        C_POINTER.withName("Xmm6"),
        C_POINTER.withName("Xmm7"),
        C_POINTER.withName("Xmm8"),
        C_POINTER.withName("Xmm9"),
        C_POINTER.withName("Xmm10"),
        C_POINTER.withName("Xmm11"),
        C_POINTER.withName("Xmm12"),
        C_POINTER.withName("Xmm13"),
        C_POINTER.withName("Xmm14"),
        C_POINTER.withName("Xmm15"),
        MemoryLayout.ofSequence(16, C_POINTER).withName("IntegerContext"),
        C_POINTER.withName("Rax"),
        C_POINTER.withName("Rcx"),
        C_POINTER.withName("Rdx"),
        C_POINTER.withName("Rbx"),
        C_POINTER.withName("Rsp"),
        C_POINTER.withName("Rbp"),
        C_POINTER.withName("Rsi"),
        C_POINTER.withName("Rdi"),
        C_POINTER.withName("R8"),
        C_POINTER.withName("R9"),
        C_POINTER.withName("R10"),
        C_POINTER.withName("R11"),
        C_POINTER.withName("R12"),
        C_POINTER.withName("R13"),
        C_POINTER.withName("R14"),
        C_POINTER.withName("R15")
    ).withName("_KNONVOLATILE_CONTEXT_POINTERS");
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm0$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm0$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm0$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm0$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm0")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm0$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm0$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm1$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm1$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm1$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm1$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm1")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm1$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm1$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm2$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm2$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm2$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm2$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm2")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm2$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm2$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm3$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm3$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm3$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm3$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm3")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm3$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm3$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm4$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm4$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm4$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm4$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm4")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm4$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm4$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm5$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm5$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm5$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm5$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm5")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm5$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm5$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm6$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm6$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm6$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm6$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm6")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm6$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm6$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm7$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm7$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm7$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm7$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm7")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm7$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm7$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm8$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm8$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm8$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm8$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm8")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm8$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm8$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm9$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm9$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm9$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm9$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm9")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm9$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm9$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm10$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm10$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm10$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm10$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm10")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm10$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm10$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm11$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm11$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm11$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm11$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm11")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm11$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm11$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm12$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm12$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm12$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm12$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm12")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm12$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm12$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm13$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm13$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm13$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm13$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm13")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm13$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm13$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm14$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm14$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm14$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm14$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm14")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm14$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm14$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm15$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Xmm15$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm15$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm15$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Xmm15")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Xmm15$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Xmm15$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rax$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rax$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Rax$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rax$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rax")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rax$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Rax$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rcx$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rcx$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Rcx$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rcx$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rcx")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rcx$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Rcx$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rdx$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rdx$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Rdx$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rdx$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rdx")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rdx$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Rdx$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rbx$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rbx$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Rbx$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rbx$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rbx")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rbx$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Rbx$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rsp$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rsp$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Rsp$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rsp$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rsp")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rsp$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Rsp$VH_; }

    static final MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rbp$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _KNONVOLATILE_CONTEXT_POINTERS$Rbp$LAYOUT() { return _KNONVOLATILE_CONTEXT_POINTERS$Rbp$LAYOUT_; }

    static final VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rbp$VH_ = MemoryHandles.asAddressVarHandle(_KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Rbp")));
    static final java.lang.invoke.VarHandle _KNONVOLATILE_CONTEXT_POINTERS$Rbp$VH() { return _KNONVOLATILE_CONTEXT_POINTERS$Rbp$VH_; }

}

