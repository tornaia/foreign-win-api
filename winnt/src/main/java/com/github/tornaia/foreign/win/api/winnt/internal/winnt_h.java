// Generated by jextract

package com.github.tornaia.foreign.win.api.winnt.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
public final class winnt_h extends winnt_h$3 {

    /* package-private */ winnt_h() {}
    public static @C("int") int ANYSIZE_ARRAY() {
        return winnt_h$constants$0.ANYSIZE_ARRAY();
    }
    public static @C("int") int MEMORY_ALLOCATION_ALIGNMENT() {
        return winnt_h$constants$0.MEMORY_ALLOCATION_ALIGNMENT();
    }
    public static @C("int") int SYSTEM_CACHE_ALIGNMENT_SIZE() {
        return winnt_h$constants$0.SYSTEM_CACHE_ALIGNMENT_SIZE();
    }
    public static @C("int") int PRAGMA_DEPRECATED_DDK() {
        return winnt_h$constants$0.PRAGMA_DEPRECATED_DDK();
    }
    public static @C("int") int ALL_PROCESSOR_GROUPS() {
        return winnt_h$constants$0.ALL_PROCESSOR_GROUPS();
    }
    public static @C("int") int MAXIMUM_PROC_PER_GROUP() {
        return winnt_h$constants$0.MAXIMUM_PROC_PER_GROUP();
    }
    public static @C("int") int APPLICATION_ERROR_MASK() {
        return winnt_h$constants$0.APPLICATION_ERROR_MASK();
    }
    public static @C("int") int ERROR_SEVERITY_SUCCESS() {
        return winnt_h$constants$0.ERROR_SEVERITY_SUCCESS();
    }
    public static @C("int") int ERROR_SEVERITY_INFORMATIONAL() {
        return winnt_h$constants$0.ERROR_SEVERITY_INFORMATIONAL();
    }
    public static @C("int") int MINCHAR() {
        return winnt_h$constants$0.MINCHAR();
    }
    public static @C("int") int MAXCHAR() {
        return winnt_h$constants$0.MAXCHAR();
    }
    public static @C("int") int MINSHORT() {
        return winnt_h$constants$0.MINSHORT();
    }
    public static @C("int") int MAXSHORT() {
        return winnt_h$constants$0.MAXSHORT();
    }
    public static @C("int") int MAXLONG() {
        return winnt_h$constants$0.MAXLONG();
    }
    public static @C("int") int MAXBYTE() {
        return winnt_h$constants$0.MAXBYTE();
    }
    public static @C("int") int MAXWORD() {
        return winnt_h$constants$0.MAXWORD();
    }
    public static @C("int") int ENCLAVE_SHORT_ID_LENGTH() {
        return winnt_h$constants$0.ENCLAVE_SHORT_ID_LENGTH();
    }
    public static @C("int") int ENCLAVE_LONG_ID_LENGTH() {
        return winnt_h$constants$0.ENCLAVE_LONG_ID_LENGTH();
    }
    public static @C("int") int VER_WORKSTATION_NT() {
        return winnt_h$constants$0.VER_WORKSTATION_NT();
    }
    public static @C("int") int VER_SUITE_SMALLBUSINESS() {
        return winnt_h$constants$0.VER_SUITE_SMALLBUSINESS();
    }
    public static @C("int") int VER_SUITE_ENTERPRISE() {
        return winnt_h$constants$0.VER_SUITE_ENTERPRISE();
    }
    public static @C("int") int VER_SUITE_BACKOFFICE() {
        return winnt_h$constants$0.VER_SUITE_BACKOFFICE();
    }
    public static @C("int") int VER_SUITE_COMMUNICATIONS() {
        return winnt_h$constants$0.VER_SUITE_COMMUNICATIONS();
    }
    public static @C("int") int VER_SUITE_TERMINAL() {
        return winnt_h$constants$0.VER_SUITE_TERMINAL();
    }
    public static @C("int") int VER_SUITE_SMALLBUSINESS_RESTRICTED() {
        return winnt_h$constants$0.VER_SUITE_SMALLBUSINESS_RESTRICTED();
    }
    public static @C("int") int VER_SUITE_EMBEDDEDNT() {
        return winnt_h$constants$0.VER_SUITE_EMBEDDEDNT();
    }
    public static @C("int") int VER_SUITE_DATACENTER() {
        return winnt_h$constants$0.VER_SUITE_DATACENTER();
    }
    public static @C("int") int VER_SUITE_SINGLEUSERTS() {
        return winnt_h$constants$0.VER_SUITE_SINGLEUSERTS();
    }
    public static @C("int") int VER_SUITE_PERSONAL() {
        return winnt_h$constants$0.VER_SUITE_PERSONAL();
    }
    public static @C("int") int VER_SUITE_BLADE() {
        return winnt_h$constants$0.VER_SUITE_BLADE();
    }
    public static @C("int") int VER_SUITE_EMBEDDED_RESTRICTED() {
        return winnt_h$constants$0.VER_SUITE_EMBEDDED_RESTRICTED();
    }
    public static @C("int") int VER_SUITE_SECURITY_APPLIANCE() {
        return winnt_h$constants$0.VER_SUITE_SECURITY_APPLIANCE();
    }
    public static @C("int") int VER_SUITE_STORAGE_SERVER() {
        return winnt_h$constants$0.VER_SUITE_STORAGE_SERVER();
    }
    public static @C("int") int VER_SUITE_COMPUTE_SERVER() {
        return winnt_h$constants$0.VER_SUITE_COMPUTE_SERVER();
    }
    public static @C("int") int VER_SUITE_WH_SERVER() {
        return winnt_h$constants$0.VER_SUITE_WH_SERVER();
    }
    public static @C("int") int VER_SUITE_MULTIUSERTS() {
        return winnt_h$constants$0.VER_SUITE_MULTIUSERTS();
    }
    public static @C("int") int PRODUCT_UNDEFINED() {
        return winnt_h$constants$0.PRODUCT_UNDEFINED();
    }
    public static @C("int") int PRODUCT_ULTIMATE() {
        return winnt_h$constants$0.PRODUCT_ULTIMATE();
    }
    public static @C("int") int PRODUCT_HOME_BASIC() {
        return winnt_h$constants$0.PRODUCT_HOME_BASIC();
    }
    public static @C("int") int PRODUCT_HOME_PREMIUM() {
        return winnt_h$constants$0.PRODUCT_HOME_PREMIUM();
    }
    public static @C("int") int PRODUCT_ENTERPRISE() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE();
    }
    public static @C("int") int PRODUCT_HOME_BASIC_N() {
        return winnt_h$constants$0.PRODUCT_HOME_BASIC_N();
    }
    public static @C("int") int PRODUCT_BUSINESS() {
        return winnt_h$constants$0.PRODUCT_BUSINESS();
    }
    public static @C("int") int PRODUCT_STANDARD_SERVER() {
        return winnt_h$constants$0.PRODUCT_STANDARD_SERVER();
    }
    public static @C("int") int PRODUCT_DATACENTER_SERVER() {
        return winnt_h$constants$0.PRODUCT_DATACENTER_SERVER();
    }
    public static @C("int") int PRODUCT_SMALLBUSINESS_SERVER() {
        return winnt_h$constants$0.PRODUCT_SMALLBUSINESS_SERVER();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_SERVER() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_SERVER();
    }
    public static @C("int") int PRODUCT_STARTER() {
        return winnt_h$constants$0.PRODUCT_STARTER();
    }
    public static @C("int") int PRODUCT_DATACENTER_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_DATACENTER_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_STANDARD_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_STANDARD_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_SERVER_IA64() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_SERVER_IA64();
    }
    public static @C("int") int PRODUCT_BUSINESS_N() {
        return winnt_h$constants$0.PRODUCT_BUSINESS_N();
    }
    public static @C("int") int PRODUCT_WEB_SERVER() {
        return winnt_h$constants$0.PRODUCT_WEB_SERVER();
    }
    public static @C("int") int PRODUCT_CLUSTER_SERVER() {
        return winnt_h$constants$0.PRODUCT_CLUSTER_SERVER();
    }
    public static @C("int") int PRODUCT_HOME_SERVER() {
        return winnt_h$constants$0.PRODUCT_HOME_SERVER();
    }
    public static @C("int") int PRODUCT_STORAGE_EXPRESS_SERVER() {
        return winnt_h$constants$0.PRODUCT_STORAGE_EXPRESS_SERVER();
    }
    public static @C("int") int PRODUCT_STORAGE_STANDARD_SERVER() {
        return winnt_h$constants$0.PRODUCT_STORAGE_STANDARD_SERVER();
    }
    public static @C("int") int PRODUCT_STORAGE_WORKGROUP_SERVER() {
        return winnt_h$constants$0.PRODUCT_STORAGE_WORKGROUP_SERVER();
    }
    public static @C("int") int PRODUCT_STORAGE_ENTERPRISE_SERVER() {
        return winnt_h$constants$0.PRODUCT_STORAGE_ENTERPRISE_SERVER();
    }
    public static @C("int") int PRODUCT_SERVER_FOR_SMALLBUSINESS() {
        return winnt_h$constants$0.PRODUCT_SERVER_FOR_SMALLBUSINESS();
    }
    public static @C("int") int PRODUCT_SMALLBUSINESS_SERVER_PREMIUM() {
        return winnt_h$constants$0.PRODUCT_SMALLBUSINESS_SERVER_PREMIUM();
    }
    public static @C("int") int PRODUCT_HOME_PREMIUM_N() {
        return winnt_h$constants$0.PRODUCT_HOME_PREMIUM_N();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_N() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_N();
    }
    public static @C("int") int PRODUCT_ULTIMATE_N() {
        return winnt_h$constants$0.PRODUCT_ULTIMATE_N();
    }
    public static @C("int") int PRODUCT_WEB_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_WEB_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT() {
        return winnt_h$constants$0.PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT();
    }
    public static @C("int") int PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY() {
        return winnt_h$constants$0.PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY();
    }
    public static @C("int") int PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING() {
        return winnt_h$constants$0.PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING();
    }
    public static @C("int") int PRODUCT_SERVER_FOUNDATION() {
        return winnt_h$constants$0.PRODUCT_SERVER_FOUNDATION();
    }
    public static @C("int") int PRODUCT_HOME_PREMIUM_SERVER() {
        return winnt_h$constants$0.PRODUCT_HOME_PREMIUM_SERVER();
    }
    public static @C("int") int PRODUCT_SERVER_FOR_SMALLBUSINESS_V() {
        return winnt_h$constants$0.PRODUCT_SERVER_FOR_SMALLBUSINESS_V();
    }
    public static @C("int") int PRODUCT_STANDARD_SERVER_V() {
        return winnt_h$constants$0.PRODUCT_STANDARD_SERVER_V();
    }
    public static @C("int") int PRODUCT_DATACENTER_SERVER_V() {
        return winnt_h$constants$0.PRODUCT_DATACENTER_SERVER_V();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_SERVER_V() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_SERVER_V();
    }
    public static @C("int") int PRODUCT_DATACENTER_SERVER_CORE_V() {
        return winnt_h$constants$0.PRODUCT_DATACENTER_SERVER_CORE_V();
    }
    public static @C("int") int PRODUCT_STANDARD_SERVER_CORE_V() {
        return winnt_h$constants$0.PRODUCT_STANDARD_SERVER_CORE_V();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_SERVER_CORE_V() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_SERVER_CORE_V();
    }
    public static @C("int") int PRODUCT_HYPERV() {
        return winnt_h$constants$0.PRODUCT_HYPERV();
    }
    public static @C("int") int PRODUCT_STORAGE_EXPRESS_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_STORAGE_EXPRESS_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_STORAGE_STANDARD_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_STORAGE_STANDARD_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_STORAGE_WORKGROUP_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_STORAGE_WORKGROUP_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_STARTER_N() {
        return winnt_h$constants$0.PRODUCT_STARTER_N();
    }
    public static @C("int") int PRODUCT_PROFESSIONAL() {
        return winnt_h$constants$0.PRODUCT_PROFESSIONAL();
    }
    public static @C("int") int PRODUCT_PROFESSIONAL_N() {
        return winnt_h$constants$0.PRODUCT_PROFESSIONAL_N();
    }
    public static @C("int") int PRODUCT_SB_SOLUTION_SERVER() {
        return winnt_h$constants$0.PRODUCT_SB_SOLUTION_SERVER();
    }
    public static @C("int") int PRODUCT_SERVER_FOR_SB_SOLUTIONS() {
        return winnt_h$constants$0.PRODUCT_SERVER_FOR_SB_SOLUTIONS();
    }
    public static @C("int") int PRODUCT_STANDARD_SERVER_SOLUTIONS() {
        return winnt_h$constants$0.PRODUCT_STANDARD_SERVER_SOLUTIONS();
    }
    public static @C("int") int PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE() {
        return winnt_h$constants$0.PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE();
    }
    public static @C("int") int PRODUCT_SB_SOLUTION_SERVER_EM() {
        return winnt_h$constants$0.PRODUCT_SB_SOLUTION_SERVER_EM();
    }
    public static @C("int") int PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM() {
        return winnt_h$constants$0.PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM();
    }
    public static @C("int") int PRODUCT_SOLUTION_EMBEDDEDSERVER() {
        return winnt_h$constants$0.PRODUCT_SOLUTION_EMBEDDEDSERVER();
    }
    public static @C("int") int PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE();
    }
    public static @C("int") int PRODUCT_PROFESSIONAL_EMBEDDED() {
        return winnt_h$constants$0.PRODUCT_PROFESSIONAL_EMBEDDED();
    }
    public static @C("int") int PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT() {
        return winnt_h$constants$0.PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT();
    }
    public static @C("int") int PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL() {
        return winnt_h$constants$0.PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL();
    }
    public static @C("int") int PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC() {
        return winnt_h$constants$0.PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC();
    }
    public static @C("int") int PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC() {
        return winnt_h$constants$0.PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC();
    }
    public static @C("int") int PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE() {
        return winnt_h$constants$0.PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE();
    }
    public static @C("int") int PRODUCT_CLUSTER_SERVER_V() {
        return winnt_h$constants$0.PRODUCT_CLUSTER_SERVER_V();
    }
    public static @C("int") int PRODUCT_EMBEDDED() {
        return winnt_h$constants$0.PRODUCT_EMBEDDED();
    }
    public static @C("int") int PRODUCT_STARTER_E() {
        return winnt_h$constants$0.PRODUCT_STARTER_E();
    }
    public static @C("int") int PRODUCT_HOME_BASIC_E() {
        return winnt_h$constants$0.PRODUCT_HOME_BASIC_E();
    }
    public static @C("int") int PRODUCT_HOME_PREMIUM_E() {
        return winnt_h$constants$0.PRODUCT_HOME_PREMIUM_E();
    }
    public static @C("int") int PRODUCT_PROFESSIONAL_E() {
        return winnt_h$constants$0.PRODUCT_PROFESSIONAL_E();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_E() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_E();
    }
    public static @C("int") int PRODUCT_ULTIMATE_E() {
        return winnt_h$constants$0.PRODUCT_ULTIMATE_E();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_EVALUATION() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_EVALUATION();
    }
    public static @C("int") int PRODUCT_MULTIPOINT_STANDARD_SERVER() {
        return winnt_h$constants$0.PRODUCT_MULTIPOINT_STANDARD_SERVER();
    }
    public static @C("int") int PRODUCT_MULTIPOINT_PREMIUM_SERVER() {
        return winnt_h$constants$0.PRODUCT_MULTIPOINT_PREMIUM_SERVER();
    }
    public static @C("int") int PRODUCT_STANDARD_EVALUATION_SERVER() {
        return winnt_h$constants$0.PRODUCT_STANDARD_EVALUATION_SERVER();
    }
    public static @C("int") int PRODUCT_DATACENTER_EVALUATION_SERVER() {
        return winnt_h$constants$0.PRODUCT_DATACENTER_EVALUATION_SERVER();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_N_EVALUATION() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_N_EVALUATION();
    }
    public static @C("int") int PRODUCT_EMBEDDED_AUTOMOTIVE() {
        return winnt_h$constants$0.PRODUCT_EMBEDDED_AUTOMOTIVE();
    }
    public static @C("int") int PRODUCT_EMBEDDED_INDUSTRY_A() {
        return winnt_h$constants$0.PRODUCT_EMBEDDED_INDUSTRY_A();
    }
    public static @C("int") int PRODUCT_THINPC() {
        return winnt_h$constants$0.PRODUCT_THINPC();
    }
    public static @C("int") int PRODUCT_EMBEDDED_A() {
        return winnt_h$constants$0.PRODUCT_EMBEDDED_A();
    }
    public static @C("int") int PRODUCT_EMBEDDED_INDUSTRY() {
        return winnt_h$constants$0.PRODUCT_EMBEDDED_INDUSTRY();
    }
    public static @C("int") int PRODUCT_EMBEDDED_E() {
        return winnt_h$constants$0.PRODUCT_EMBEDDED_E();
    }
    public static @C("int") int PRODUCT_EMBEDDED_INDUSTRY_E() {
        return winnt_h$constants$0.PRODUCT_EMBEDDED_INDUSTRY_E();
    }
    public static @C("int") int PRODUCT_EMBEDDED_INDUSTRY_A_E() {
        return winnt_h$constants$0.PRODUCT_EMBEDDED_INDUSTRY_A_E();
    }
    public static @C("int") int PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER() {
        return winnt_h$constants$0.PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER();
    }
    public static @C("int") int PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER() {
        return winnt_h$constants$0.PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER();
    }
    public static @C("int") int PRODUCT_CORE_ARM() {
        return winnt_h$constants$0.PRODUCT_CORE_ARM();
    }
    public static @C("int") int PRODUCT_CORE_N() {
        return winnt_h$constants$0.PRODUCT_CORE_N();
    }
    public static @C("int") int PRODUCT_CORE_COUNTRYSPECIFIC() {
        return winnt_h$constants$0.PRODUCT_CORE_COUNTRYSPECIFIC();
    }
    public static @C("int") int PRODUCT_CORE_SINGLELANGUAGE() {
        return winnt_h$constants$0.PRODUCT_CORE_SINGLELANGUAGE();
    }
    public static @C("int") int PRODUCT_CORE() {
        return winnt_h$constants$0.PRODUCT_CORE();
    }
    public static @C("int") int PRODUCT_PROFESSIONAL_WMC() {
        return winnt_h$constants$0.PRODUCT_PROFESSIONAL_WMC();
    }
    public static @C("int") int PRODUCT_EMBEDDED_INDUSTRY_EVAL() {
        return winnt_h$constants$0.PRODUCT_EMBEDDED_INDUSTRY_EVAL();
    }
    public static @C("int") int PRODUCT_EMBEDDED_INDUSTRY_E_EVAL() {
        return winnt_h$constants$0.PRODUCT_EMBEDDED_INDUSTRY_E_EVAL();
    }
    public static @C("int") int PRODUCT_EMBEDDED_EVAL() {
        return winnt_h$constants$0.PRODUCT_EMBEDDED_EVAL();
    }
    public static @C("int") int PRODUCT_EMBEDDED_E_EVAL() {
        return winnt_h$constants$0.PRODUCT_EMBEDDED_E_EVAL();
    }
    public static @C("int") int PRODUCT_NANO_SERVER() {
        return winnt_h$constants$0.PRODUCT_NANO_SERVER();
    }
    public static @C("int") int PRODUCT_CLOUD_STORAGE_SERVER() {
        return winnt_h$constants$0.PRODUCT_CLOUD_STORAGE_SERVER();
    }
    public static @C("int") int PRODUCT_CORE_CONNECTED() {
        return winnt_h$constants$0.PRODUCT_CORE_CONNECTED();
    }
    public static @C("int") int PRODUCT_PROFESSIONAL_STUDENT() {
        return winnt_h$constants$0.PRODUCT_PROFESSIONAL_STUDENT();
    }
    public static @C("int") int PRODUCT_CORE_CONNECTED_N() {
        return winnt_h$constants$0.PRODUCT_CORE_CONNECTED_N();
    }
    public static @C("int") int PRODUCT_PROFESSIONAL_STUDENT_N() {
        return winnt_h$constants$0.PRODUCT_PROFESSIONAL_STUDENT_N();
    }
    public static @C("int") int PRODUCT_CORE_CONNECTED_SINGLELANGUAGE() {
        return winnt_h$constants$0.PRODUCT_CORE_CONNECTED_SINGLELANGUAGE();
    }
    public static @C("int") int PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC() {
        return winnt_h$constants$0.PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC();
    }
    public static @C("int") int PRODUCT_CONNECTED_CAR() {
        return winnt_h$constants$0.PRODUCT_CONNECTED_CAR();
    }
    public static @C("int") int PRODUCT_INDUSTRY_HANDHELD() {
        return winnt_h$constants$0.PRODUCT_INDUSTRY_HANDHELD();
    }
    public static @C("int") int PRODUCT_PPI_PRO() {
        return winnt_h$constants$0.PRODUCT_PPI_PRO();
    }
    public static @C("int") int PRODUCT_ARM64_SERVER() {
        return winnt_h$constants$0.PRODUCT_ARM64_SERVER();
    }
    public static @C("int") int PRODUCT_EDUCATION() {
        return winnt_h$constants$0.PRODUCT_EDUCATION();
    }
    public static @C("int") int PRODUCT_EDUCATION_N() {
        return winnt_h$constants$0.PRODUCT_EDUCATION_N();
    }
    public static @C("int") int PRODUCT_IOTUAP() {
        return winnt_h$constants$0.PRODUCT_IOTUAP();
    }
    public static @C("int") int PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER() {
        return winnt_h$constants$0.PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_S() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_S();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_S_N() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_S_N();
    }
    public static @C("int") int PRODUCT_PROFESSIONAL_S() {
        return winnt_h$constants$0.PRODUCT_PROFESSIONAL_S();
    }
    public static @C("int") int PRODUCT_PROFESSIONAL_S_N() {
        return winnt_h$constants$0.PRODUCT_PROFESSIONAL_S_N();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_S_EVALUATION() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_S_EVALUATION();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_S_N_EVALUATION() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_S_N_EVALUATION();
    }
    public static @C("int") int PRODUCT_HOLOGRAPHIC() {
        return winnt_h$constants$0.PRODUCT_HOLOGRAPHIC();
    }
    public static @C("int") int PRODUCT_HOLOGRAPHIC_BUSINESS() {
        return winnt_h$constants$0.PRODUCT_HOLOGRAPHIC_BUSINESS();
    }
    public static @C("int") int PRODUCT_PRO_SINGLE_LANGUAGE() {
        return winnt_h$constants$0.PRODUCT_PRO_SINGLE_LANGUAGE();
    }
    public static @C("int") int PRODUCT_PRO_CHINA() {
        return winnt_h$constants$0.PRODUCT_PRO_CHINA();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_SUBSCRIPTION() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_SUBSCRIPTION();
    }
    public static @C("int") int PRODUCT_ENTERPRISE_SUBSCRIPTION_N() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISE_SUBSCRIPTION_N();
    }
    public static @C("int") int PRODUCT_DATACENTER_NANO_SERVER() {
        return winnt_h$constants$0.PRODUCT_DATACENTER_NANO_SERVER();
    }
    public static @C("int") int PRODUCT_STANDARD_NANO_SERVER() {
        return winnt_h$constants$0.PRODUCT_STANDARD_NANO_SERVER();
    }
    public static @C("int") int PRODUCT_DATACENTER_A_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_DATACENTER_A_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_STANDARD_A_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_STANDARD_A_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_DATACENTER_WS_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_DATACENTER_WS_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_STANDARD_WS_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_STANDARD_WS_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_UTILITY_VM() {
        return winnt_h$constants$0.PRODUCT_UTILITY_VM();
    }
    public static @C("int") int PRODUCT_DATACENTER_EVALUATION_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_DATACENTER_EVALUATION_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_STANDARD_EVALUATION_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_STANDARD_EVALUATION_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_PRO_WORKSTATION() {
        return winnt_h$constants$0.PRODUCT_PRO_WORKSTATION();
    }
    public static @C("int") int PRODUCT_PRO_WORKSTATION_N() {
        return winnt_h$constants$0.PRODUCT_PRO_WORKSTATION_N();
    }
    public static @C("int") int PRODUCT_PRO_FOR_EDUCATION() {
        return winnt_h$constants$0.PRODUCT_PRO_FOR_EDUCATION();
    }
    public static @C("int") int PRODUCT_PRO_FOR_EDUCATION_N() {
        return winnt_h$constants$0.PRODUCT_PRO_FOR_EDUCATION_N();
    }
    public static @C("int") int PRODUCT_AZURE_SERVER_CORE() {
        return winnt_h$constants$0.PRODUCT_AZURE_SERVER_CORE();
    }
    public static @C("int") int PRODUCT_AZURE_NANO_SERVER() {
        return winnt_h$constants$0.PRODUCT_AZURE_NANO_SERVER();
    }
    public static @C("int") int PRODUCT_ENTERPRISEG() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISEG();
    }
    public static @C("int") int PRODUCT_ENTERPRISEGN() {
        return winnt_h$constants$0.PRODUCT_ENTERPRISEGN();
    }
    public static @C("int") int PRODUCT_SERVERRDSH() {
        return winnt_h$constants$0.PRODUCT_SERVERRDSH();
    }
    public static @C("int") int PRODUCT_CLOUD() {
        return winnt_h$constants$0.PRODUCT_CLOUD();
    }
    public static @C("int") int PRODUCT_CLOUDN() {
        return winnt_h$constants$0.PRODUCT_CLOUDN();
    }
    public static @C("int") int PRODUCT_HUBOS() {
        return winnt_h$constants$0.PRODUCT_HUBOS();
    }
    public static @C("int") int PRODUCT_ONECOREUPDATEOS() {
        return winnt_h$constants$0.PRODUCT_ONECOREUPDATEOS();
    }
    public static @C("int") int PRODUCT_CLOUDE() {
        return winnt_h$constants$0.PRODUCT_CLOUDE();
    }
    public static @C("int") int PRODUCT_ANDROMEDA() {
        return winnt_h$constants$0.PRODUCT_ANDROMEDA();
    }
    public static @C("int") int PRODUCT_IOTOS() {
        return winnt_h$constants$0.PRODUCT_IOTOS();
    }
    public static @C("int") int PRODUCT_CLOUDEN() {
        return winnt_h$constants$0.PRODUCT_CLOUDEN();
    }
    public static @C("int") int PRODUCT_IOTEDGEOS() {
        return winnt_h$constants$0.PRODUCT_IOTEDGEOS();
    }
    public static @C("int") int PRODUCT_IOTENTERPRISE() {
        return winnt_h$constants$0.PRODUCT_IOTENTERPRISE();
    }
    public static @C("int") int PRODUCT_LITE() {
        return winnt_h$constants$0.PRODUCT_LITE();
    }
    public static @C("int") int PRODUCT_IOTENTERPRISES() {
        return winnt_h$constants$0.PRODUCT_IOTENTERPRISES();
    }
    public static @C("int") int PRODUCT_XBOX_SYSTEMOS() {
        return winnt_h$constants$0.PRODUCT_XBOX_SYSTEMOS();
    }
    public static @C("int") int PRODUCT_XBOX_NATIVEOS() {
        return winnt_h$constants$0.PRODUCT_XBOX_NATIVEOS();
    }
    public static @C("int") int PRODUCT_XBOX_GAMEOS() {
        return winnt_h$constants$0.PRODUCT_XBOX_GAMEOS();
    }
    public static @C("int") int PRODUCT_XBOX_ERAOS() {
        return winnt_h$constants$0.PRODUCT_XBOX_ERAOS();
    }
    public static @C("int") int PRODUCT_XBOX_DURANGOHOSTOS() {
        return winnt_h$constants$0.PRODUCT_XBOX_DURANGOHOSTOS();
    }
    public static @C("int") int PRODUCT_XBOX_SCARLETTHOSTOS() {
        return winnt_h$constants$0.PRODUCT_XBOX_SCARLETTHOSTOS();
    }
    public static @C("int") int LANG_NEUTRAL() {
        return winnt_h$constants$0.LANG_NEUTRAL();
    }
    public static @C("int") int LANG_INVARIANT() {
        return winnt_h$constants$0.LANG_INVARIANT();
    }
    public static @C("int") int LANG_AFRIKAANS() {
        return winnt_h$constants$0.LANG_AFRIKAANS();
    }
    public static @C("int") int LANG_ALBANIAN() {
        return winnt_h$constants$0.LANG_ALBANIAN();
    }
    public static @C("int") int LANG_ALSATIAN() {
        return winnt_h$constants$0.LANG_ALSATIAN();
    }
    public static @C("int") int LANG_AMHARIC() {
        return winnt_h$constants$0.LANG_AMHARIC();
    }
    public static @C("int") int LANG_ARABIC() {
        return winnt_h$constants$0.LANG_ARABIC();
    }
    public static @C("int") int LANG_ARMENIAN() {
        return winnt_h$constants$0.LANG_ARMENIAN();
    }
    public static @C("int") int LANG_ASSAMESE() {
        return winnt_h$constants$0.LANG_ASSAMESE();
    }
    public static @C("int") int LANG_AZERI() {
        return winnt_h$constants$0.LANG_AZERI();
    }
    public static @C("int") int LANG_AZERBAIJANI() {
        return winnt_h$constants$0.LANG_AZERBAIJANI();
    }
    public static @C("int") int LANG_BANGLA() {
        return winnt_h$constants$0.LANG_BANGLA();
    }
    public static @C("int") int LANG_BASHKIR() {
        return winnt_h$constants$0.LANG_BASHKIR();
    }
    public static @C("int") int LANG_BASQUE() {
        return winnt_h$constants$0.LANG_BASQUE();
    }
    public static @C("int") int LANG_BELARUSIAN() {
        return winnt_h$constants$0.LANG_BELARUSIAN();
    }
    public static @C("int") int LANG_BENGALI() {
        return winnt_h$constants$0.LANG_BENGALI();
    }
    public static @C("int") int LANG_BRETON() {
        return winnt_h$constants$0.LANG_BRETON();
    }
    public static @C("int") int LANG_BOSNIAN() {
        return winnt_h$constants$0.LANG_BOSNIAN();
    }
    public static @C("int") int LANG_BOSNIAN_NEUTRAL() {
        return winnt_h$constants$0.LANG_BOSNIAN_NEUTRAL();
    }
    public static @C("int") int LANG_BULGARIAN() {
        return winnt_h$constants$0.LANG_BULGARIAN();
    }
    public static @C("int") int LANG_CATALAN() {
        return winnt_h$constants$0.LANG_CATALAN();
    }
    public static @C("int") int LANG_CENTRAL_KURDISH() {
        return winnt_h$constants$0.LANG_CENTRAL_KURDISH();
    }
    public static @C("int") int LANG_CHEROKEE() {
        return winnt_h$constants$0.LANG_CHEROKEE();
    }
    public static @C("int") int LANG_CHINESE() {
        return winnt_h$constants$0.LANG_CHINESE();
    }
    public static @C("int") int LANG_CHINESE_SIMPLIFIED() {
        return winnt_h$constants$0.LANG_CHINESE_SIMPLIFIED();
    }
    public static @C("int") int LANG_CHINESE_TRADITIONAL() {
        return winnt_h$constants$0.LANG_CHINESE_TRADITIONAL();
    }
    public static @C("int") int LANG_CORSICAN() {
        return winnt_h$constants$0.LANG_CORSICAN();
    }
    public static @C("int") int LANG_CROATIAN() {
        return winnt_h$constants$0.LANG_CROATIAN();
    }
    public static @C("int") int LANG_CZECH() {
        return winnt_h$constants$0.LANG_CZECH();
    }
    public static @C("int") int LANG_DANISH() {
        return winnt_h$constants$0.LANG_DANISH();
    }
    public static @C("int") int LANG_DARI() {
        return winnt_h$constants$0.LANG_DARI();
    }
    public static @C("int") int LANG_DIVEHI() {
        return winnt_h$constants$0.LANG_DIVEHI();
    }
    public static @C("int") int LANG_DUTCH() {
        return winnt_h$constants$0.LANG_DUTCH();
    }
    public static @C("int") int LANG_ENGLISH() {
        return winnt_h$constants$0.LANG_ENGLISH();
    }
    public static @C("int") int LANG_ESTONIAN() {
        return winnt_h$constants$0.LANG_ESTONIAN();
    }
    public static @C("int") int LANG_FAEROESE() {
        return winnt_h$constants$0.LANG_FAEROESE();
    }
    public static @C("int") int LANG_FARSI() {
        return winnt_h$constants$0.LANG_FARSI();
    }
    public static @C("int") int LANG_FILIPINO() {
        return winnt_h$constants$0.LANG_FILIPINO();
    }
    public static @C("int") int LANG_FINNISH() {
        return winnt_h$constants$0.LANG_FINNISH();
    }
    public static @C("int") int LANG_FRENCH() {
        return winnt_h$constants$0.LANG_FRENCH();
    }
    public static @C("int") int LANG_FRISIAN() {
        return winnt_h$constants$0.LANG_FRISIAN();
    }
    public static @C("int") int LANG_FULAH() {
        return winnt_h$constants$0.LANG_FULAH();
    }
    public static @C("int") int LANG_GALICIAN() {
        return winnt_h$constants$0.LANG_GALICIAN();
    }
    public static @C("int") int LANG_GEORGIAN() {
        return winnt_h$constants$0.LANG_GEORGIAN();
    }
    public static @C("int") int LANG_GERMAN() {
        return winnt_h$constants$0.LANG_GERMAN();
    }
    public static @C("int") int LANG_GREEK() {
        return winnt_h$constants$0.LANG_GREEK();
    }
    public static @C("int") int LANG_GREENLANDIC() {
        return winnt_h$constants$0.LANG_GREENLANDIC();
    }
    public static @C("int") int LANG_GUJARATI() {
        return winnt_h$constants$0.LANG_GUJARATI();
    }
    public static @C("int") int LANG_HAUSA() {
        return winnt_h$constants$0.LANG_HAUSA();
    }
    public static @C("int") int LANG_HAWAIIAN() {
        return winnt_h$constants$0.LANG_HAWAIIAN();
    }
    public static @C("int") int LANG_HEBREW() {
        return winnt_h$constants$0.LANG_HEBREW();
    }
    public static @C("int") int LANG_HINDI() {
        return winnt_h$constants$0.LANG_HINDI();
    }
    public static @C("int") int LANG_HUNGARIAN() {
        return winnt_h$constants$0.LANG_HUNGARIAN();
    }
    public static @C("int") int LANG_ICELANDIC() {
        return winnt_h$constants$0.LANG_ICELANDIC();
    }
    public static @C("int") int LANG_IGBO() {
        return winnt_h$constants$0.LANG_IGBO();
    }
    public static @C("int") int LANG_INDONESIAN() {
        return winnt_h$constants$0.LANG_INDONESIAN();
    }
    public static @C("int") int LANG_INUKTITUT() {
        return winnt_h$constants$0.LANG_INUKTITUT();
    }
    public static @C("int") int LANG_IRISH() {
        return winnt_h$constants$0.LANG_IRISH();
    }
    public static @C("int") int LANG_ITALIAN() {
        return winnt_h$constants$0.LANG_ITALIAN();
    }
    public static @C("int") int LANG_JAPANESE() {
        return winnt_h$constants$0.LANG_JAPANESE();
    }
    public static @C("int") int LANG_KANNADA() {
        return winnt_h$constants$0.LANG_KANNADA();
    }
    public static @C("int") int LANG_KASHMIRI() {
        return winnt_h$constants$0.LANG_KASHMIRI();
    }
    public static @C("int") int LANG_KAZAK() {
        return winnt_h$constants$0.LANG_KAZAK();
    }
    public static @C("int") int LANG_KHMER() {
        return winnt_h$constants$0.LANG_KHMER();
    }
    public static @C("int") int LANG_KICHE() {
        return winnt_h$constants$0.LANG_KICHE();
    }
    public static @C("int") int LANG_KINYARWANDA() {
        return winnt_h$constants$0.LANG_KINYARWANDA();
    }
    public static @C("int") int LANG_KONKANI() {
        return winnt_h$constants$0.LANG_KONKANI();
    }
    public static @C("int") int LANG_KOREAN() {
        return winnt_h$constants$0.LANG_KOREAN();
    }
    public static @C("int") int LANG_KYRGYZ() {
        return winnt_h$constants$0.LANG_KYRGYZ();
    }
    public static @C("int") int LANG_LAO() {
        return winnt_h$constants$0.LANG_LAO();
    }
    public static @C("int") int LANG_LATVIAN() {
        return winnt_h$constants$0.LANG_LATVIAN();
    }
    public static @C("int") int LANG_LITHUANIAN() {
        return winnt_h$constants$0.LANG_LITHUANIAN();
    }
    public static @C("int") int LANG_LOWER_SORBIAN() {
        return winnt_h$constants$0.LANG_LOWER_SORBIAN();
    }
    public static @C("int") int LANG_LUXEMBOURGISH() {
        return winnt_h$constants$0.LANG_LUXEMBOURGISH();
    }
    public static @C("int") int LANG_MACEDONIAN() {
        return winnt_h$constants$0.LANG_MACEDONIAN();
    }
    public static @C("int") int LANG_MALAY() {
        return winnt_h$constants$0.LANG_MALAY();
    }
    public static @C("int") int LANG_MALAYALAM() {
        return winnt_h$constants$0.LANG_MALAYALAM();
    }
    public static @C("int") int LANG_MALTESE() {
        return winnt_h$constants$0.LANG_MALTESE();
    }
    public static @C("int") int LANG_MANIPURI() {
        return winnt_h$constants$0.LANG_MANIPURI();
    }
    public static @C("int") int LANG_MAORI() {
        return winnt_h$constants$0.LANG_MAORI();
    }
    public static @C("int") int LANG_MAPUDUNGUN() {
        return winnt_h$constants$0.LANG_MAPUDUNGUN();
    }
    public static @C("int") int LANG_MARATHI() {
        return winnt_h$constants$0.LANG_MARATHI();
    }
    public static @C("int") int LANG_MOHAWK() {
        return winnt_h$constants$0.LANG_MOHAWK();
    }
    public static @C("int") int LANG_MONGOLIAN() {
        return winnt_h$constants$0.LANG_MONGOLIAN();
    }
    public static @C("int") int LANG_NEPALI() {
        return winnt_h$constants$0.LANG_NEPALI();
    }
    public static @C("int") int LANG_NORWEGIAN() {
        return winnt_h$constants$0.LANG_NORWEGIAN();
    }
    public static @C("int") int LANG_OCCITAN() {
        return winnt_h$constants$0.LANG_OCCITAN();
    }
    public static @C("int") int LANG_ODIA() {
        return winnt_h$constants$0.LANG_ODIA();
    }
    public static @C("int") int LANG_ORIYA() {
        return winnt_h$constants$0.LANG_ORIYA();
    }
    public static @C("int") int LANG_PASHTO() {
        return winnt_h$constants$0.LANG_PASHTO();
    }
    public static @C("int") int LANG_PERSIAN() {
        return winnt_h$constants$0.LANG_PERSIAN();
    }
    public static @C("int") int LANG_POLISH() {
        return winnt_h$constants$0.LANG_POLISH();
    }
    public static @C("int") int LANG_PORTUGUESE() {
        return winnt_h$constants$0.LANG_PORTUGUESE();
    }
    public static @C("int") int LANG_PULAR() {
        return winnt_h$constants$0.LANG_PULAR();
    }
    public static @C("int") int LANG_PUNJABI() {
        return winnt_h$constants$0.LANG_PUNJABI();
    }
    public static @C("int") int LANG_QUECHUA() {
        return winnt_h$constants$0.LANG_QUECHUA();
    }
    public static @C("int") int LANG_ROMANIAN() {
        return winnt_h$constants$0.LANG_ROMANIAN();
    }
    public static @C("int") int LANG_ROMANSH() {
        return winnt_h$constants$0.LANG_ROMANSH();
    }
    public static @C("int") int LANG_RUSSIAN() {
        return winnt_h$constants$0.LANG_RUSSIAN();
    }
    public static @C("int") int LANG_SAKHA() {
        return winnt_h$constants$0.LANG_SAKHA();
    }
    public static @C("int") int LANG_SAMI() {
        return winnt_h$constants$0.LANG_SAMI();
    }
    public static @C("int") int LANG_SANSKRIT() {
        return winnt_h$constants$0.LANG_SANSKRIT();
    }
    public static @C("int") int LANG_SCOTTISH_GAELIC() {
        return winnt_h$constants$0.LANG_SCOTTISH_GAELIC();
    }
    public static @C("int") int LANG_SERBIAN() {
        return winnt_h$constants$0.LANG_SERBIAN();
    }
    public static @C("int") int LANG_SERBIAN_NEUTRAL() {
        return winnt_h$constants$0.LANG_SERBIAN_NEUTRAL();
    }
    public static @C("int") int LANG_SINDHI() {
        return winnt_h$constants$0.LANG_SINDHI();
    }
    public static @C("int") int LANG_SINHALESE() {
        return winnt_h$constants$0.LANG_SINHALESE();
    }
    public static @C("int") int LANG_SLOVAK() {
        return winnt_h$constants$0.LANG_SLOVAK();
    }
    public static @C("int") int LANG_SLOVENIAN() {
        return winnt_h$constants$0.LANG_SLOVENIAN();
    }
    public static @C("int") int LANG_SOTHO() {
        return winnt_h$constants$0.LANG_SOTHO();
    }
    public static @C("int") int LANG_SPANISH() {
        return winnt_h$constants$0.LANG_SPANISH();
    }
    public static @C("int") int LANG_SWAHILI() {
        return winnt_h$constants$0.LANG_SWAHILI();
    }
    public static @C("int") int LANG_SWEDISH() {
        return winnt_h$constants$0.LANG_SWEDISH();
    }
    public static @C("int") int LANG_SYRIAC() {
        return winnt_h$constants$0.LANG_SYRIAC();
    }
    public static @C("int") int LANG_TAJIK() {
        return winnt_h$constants$0.LANG_TAJIK();
    }
    public static @C("int") int LANG_TAMAZIGHT() {
        return winnt_h$constants$0.LANG_TAMAZIGHT();
    }
    public static @C("int") int LANG_TAMIL() {
        return winnt_h$constants$0.LANG_TAMIL();
    }
    public static @C("int") int LANG_TATAR() {
        return winnt_h$constants$0.LANG_TATAR();
    }
    public static @C("int") int LANG_TELUGU() {
        return winnt_h$constants$0.LANG_TELUGU();
    }
    public static @C("int") int LANG_THAI() {
        return winnt_h$constants$0.LANG_THAI();
    }
    public static @C("int") int LANG_TIBETAN() {
        return winnt_h$constants$0.LANG_TIBETAN();
    }
    public static @C("int") int LANG_TIGRIGNA() {
        return winnt_h$constants$0.LANG_TIGRIGNA();
    }
    public static @C("int") int LANG_TIGRINYA() {
        return winnt_h$constants$0.LANG_TIGRINYA();
    }
    public static @C("int") int LANG_TSWANA() {
        return winnt_h$constants$0.LANG_TSWANA();
    }
    public static @C("int") int LANG_TURKISH() {
        return winnt_h$constants$0.LANG_TURKISH();
    }
    public static @C("int") int LANG_TURKMEN() {
        return winnt_h$constants$0.LANG_TURKMEN();
    }
    public static @C("int") int LANG_UIGHUR() {
        return winnt_h$constants$0.LANG_UIGHUR();
    }
    public static @C("int") int LANG_UKRAINIAN() {
        return winnt_h$constants$0.LANG_UKRAINIAN();
    }
    public static @C("int") int LANG_UPPER_SORBIAN() {
        return winnt_h$constants$0.LANG_UPPER_SORBIAN();
    }
    public static @C("int") int LANG_URDU() {
        return winnt_h$constants$0.LANG_URDU();
    }
    public static @C("int") int LANG_UZBEK() {
        return winnt_h$constants$0.LANG_UZBEK();
    }
    public static @C("int") int LANG_VALENCIAN() {
        return winnt_h$constants$0.LANG_VALENCIAN();
    }
    public static @C("int") int LANG_VIETNAMESE() {
        return winnt_h$constants$0.LANG_VIETNAMESE();
    }
    public static @C("int") int LANG_WELSH() {
        return winnt_h$constants$0.LANG_WELSH();
    }
    public static @C("int") int LANG_WOLOF() {
        return winnt_h$constants$0.LANG_WOLOF();
    }
    public static @C("int") int LANG_XHOSA() {
        return winnt_h$constants$0.LANG_XHOSA();
    }
    public static @C("int") int LANG_YAKUT() {
        return winnt_h$constants$0.LANG_YAKUT();
    }
    public static @C("int") int LANG_YI() {
        return winnt_h$constants$0.LANG_YI();
    }
    public static @C("int") int LANG_YORUBA() {
        return winnt_h$constants$0.LANG_YORUBA();
    }
    public static @C("int") int LANG_ZULU() {
        return winnt_h$constants$0.LANG_ZULU();
    }
    public static @C("int") int SUBLANG_NEUTRAL() {
        return winnt_h$constants$0.SUBLANG_NEUTRAL();
    }
    public static @C("int") int SUBLANG_DEFAULT() {
        return winnt_h$constants$0.SUBLANG_DEFAULT();
    }
    public static @C("int") int SUBLANG_SYS_DEFAULT() {
        return winnt_h$constants$0.SUBLANG_SYS_DEFAULT();
    }
    public static @C("int") int SUBLANG_CUSTOM_DEFAULT() {
        return winnt_h$constants$0.SUBLANG_CUSTOM_DEFAULT();
    }
    public static @C("int") int SUBLANG_CUSTOM_UNSPECIFIED() {
        return winnt_h$constants$0.SUBLANG_CUSTOM_UNSPECIFIED();
    }
    public static @C("int") int SUBLANG_UI_CUSTOM_DEFAULT() {
        return winnt_h$constants$0.SUBLANG_UI_CUSTOM_DEFAULT();
    }
    public static @C("int") int SUBLANG_AFRIKAANS_SOUTH_AFRICA() {
        return winnt_h$constants$0.SUBLANG_AFRIKAANS_SOUTH_AFRICA();
    }
    public static @C("int") int SUBLANG_ALBANIAN_ALBANIA() {
        return winnt_h$constants$0.SUBLANG_ALBANIAN_ALBANIA();
    }
    public static @C("int") int SUBLANG_ALSATIAN_FRANCE() {
        return winnt_h$constants$0.SUBLANG_ALSATIAN_FRANCE();
    }
    public static @C("int") int SUBLANG_AMHARIC_ETHIOPIA() {
        return winnt_h$constants$0.SUBLANG_AMHARIC_ETHIOPIA();
    }
    public static @C("int") int SUBLANG_ARABIC_SAUDI_ARABIA() {
        return winnt_h$constants$0.SUBLANG_ARABIC_SAUDI_ARABIA();
    }
    public static @C("int") int SUBLANG_ARABIC_IRAQ() {
        return winnt_h$constants$0.SUBLANG_ARABIC_IRAQ();
    }
    public static @C("int") int SUBLANG_ARABIC_EGYPT() {
        return winnt_h$constants$0.SUBLANG_ARABIC_EGYPT();
    }
    public static @C("int") int SUBLANG_ARABIC_LIBYA() {
        return winnt_h$constants$0.SUBLANG_ARABIC_LIBYA();
    }
    public static @C("int") int SUBLANG_ARABIC_ALGERIA() {
        return winnt_h$constants$0.SUBLANG_ARABIC_ALGERIA();
    }
    public static @C("int") int SUBLANG_ARABIC_MOROCCO() {
        return winnt_h$constants$0.SUBLANG_ARABIC_MOROCCO();
    }
    public static @C("int") int SUBLANG_ARABIC_TUNISIA() {
        return winnt_h$constants$0.SUBLANG_ARABIC_TUNISIA();
    }
    public static @C("int") int SUBLANG_ARABIC_OMAN() {
        return winnt_h$constants$0.SUBLANG_ARABIC_OMAN();
    }
    public static @C("int") int SUBLANG_ARABIC_YEMEN() {
        return winnt_h$constants$0.SUBLANG_ARABIC_YEMEN();
    }
    public static @C("int") int SUBLANG_ARABIC_SYRIA() {
        return winnt_h$constants$0.SUBLANG_ARABIC_SYRIA();
    }
    public static @C("int") int SUBLANG_ARABIC_JORDAN() {
        return winnt_h$constants$0.SUBLANG_ARABIC_JORDAN();
    }
    public static @C("int") int SUBLANG_ARABIC_LEBANON() {
        return winnt_h$constants$0.SUBLANG_ARABIC_LEBANON();
    }
    public static @C("int") int SUBLANG_ARABIC_KUWAIT() {
        return winnt_h$constants$0.SUBLANG_ARABIC_KUWAIT();
    }
    public static @C("int") int SUBLANG_ARABIC_UAE() {
        return winnt_h$constants$0.SUBLANG_ARABIC_UAE();
    }
    public static @C("int") int SUBLANG_ARABIC_BAHRAIN() {
        return winnt_h$constants$0.SUBLANG_ARABIC_BAHRAIN();
    }
    public static @C("int") int SUBLANG_ARABIC_QATAR() {
        return winnt_h$constants$0.SUBLANG_ARABIC_QATAR();
    }
    public static @C("int") int SUBLANG_ARMENIAN_ARMENIA() {
        return winnt_h$constants$0.SUBLANG_ARMENIAN_ARMENIA();
    }
    public static @C("int") int SUBLANG_ASSAMESE_INDIA() {
        return winnt_h$constants$0.SUBLANG_ASSAMESE_INDIA();
    }
    public static @C("int") int SUBLANG_AZERI_LATIN() {
        return winnt_h$constants$0.SUBLANG_AZERI_LATIN();
    }
    public static @C("int") int SUBLANG_AZERI_CYRILLIC() {
        return winnt_h$constants$0.SUBLANG_AZERI_CYRILLIC();
    }
    public static @C("int") int SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN() {
        return winnt_h$constants$0.SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN();
    }
    public static @C("int") int SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC() {
        return winnt_h$constants$0.SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC();
    }
    public static @C("int") int SUBLANG_BANGLA_INDIA() {
        return winnt_h$constants$0.SUBLANG_BANGLA_INDIA();
    }
    public static @C("int") int SUBLANG_BANGLA_BANGLADESH() {
        return winnt_h$constants$0.SUBLANG_BANGLA_BANGLADESH();
    }
    public static @C("int") int SUBLANG_BASHKIR_RUSSIA() {
        return winnt_h$constants$0.SUBLANG_BASHKIR_RUSSIA();
    }
    public static @C("int") int SUBLANG_BASQUE_BASQUE() {
        return winnt_h$constants$0.SUBLANG_BASQUE_BASQUE();
    }
    public static @C("int") int SUBLANG_BELARUSIAN_BELARUS() {
        return winnt_h$constants$0.SUBLANG_BELARUSIAN_BELARUS();
    }
    public static @C("int") int SUBLANG_BENGALI_INDIA() {
        return winnt_h$constants$0.SUBLANG_BENGALI_INDIA();
    }
    public static @C("int") int SUBLANG_BENGALI_BANGLADESH() {
        return winnt_h$constants$0.SUBLANG_BENGALI_BANGLADESH();
    }
    public static @C("int") int SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN() {
        return winnt_h$constants$0.SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN();
    }
    public static @C("int") int SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC() {
        return winnt_h$constants$0.SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC();
    }
    public static @C("int") int SUBLANG_BRETON_FRANCE() {
        return winnt_h$constants$0.SUBLANG_BRETON_FRANCE();
    }
    public static @C("int") int SUBLANG_BULGARIAN_BULGARIA() {
        return winnt_h$constants$0.SUBLANG_BULGARIAN_BULGARIA();
    }
    public static @C("int") int SUBLANG_CATALAN_CATALAN() {
        return winnt_h$constants$0.SUBLANG_CATALAN_CATALAN();
    }
    public static @C("int") int SUBLANG_CENTRAL_KURDISH_IRAQ() {
        return winnt_h$constants$0.SUBLANG_CENTRAL_KURDISH_IRAQ();
    }
    public static @C("int") int SUBLANG_CHEROKEE_CHEROKEE() {
        return winnt_h$constants$0.SUBLANG_CHEROKEE_CHEROKEE();
    }
    public static @C("int") int SUBLANG_CHINESE_TRADITIONAL() {
        return winnt_h$constants$0.SUBLANG_CHINESE_TRADITIONAL();
    }
    public static @C("int") int SUBLANG_CHINESE_SIMPLIFIED() {
        return winnt_h$constants$0.SUBLANG_CHINESE_SIMPLIFIED();
    }
    public static @C("int") int SUBLANG_CHINESE_HONGKONG() {
        return winnt_h$constants$0.SUBLANG_CHINESE_HONGKONG();
    }
    public static @C("int") int SUBLANG_CHINESE_SINGAPORE() {
        return winnt_h$constants$0.SUBLANG_CHINESE_SINGAPORE();
    }
    public static @C("int") int SUBLANG_CHINESE_MACAU() {
        return winnt_h$constants$0.SUBLANG_CHINESE_MACAU();
    }
    public static @C("int") int SUBLANG_CORSICAN_FRANCE() {
        return winnt_h$constants$0.SUBLANG_CORSICAN_FRANCE();
    }
    public static @C("int") int SUBLANG_CZECH_CZECH_REPUBLIC() {
        return winnt_h$constants$0.SUBLANG_CZECH_CZECH_REPUBLIC();
    }
    public static @C("int") int SUBLANG_CROATIAN_CROATIA() {
        return winnt_h$constants$0.SUBLANG_CROATIAN_CROATIA();
    }
    public static @C("int") int SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN() {
        return winnt_h$constants$0.SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN();
    }
    public static @C("int") int SUBLANG_DANISH_DENMARK() {
        return winnt_h$constants$0.SUBLANG_DANISH_DENMARK();
    }
    public static @C("int") int SUBLANG_DARI_AFGHANISTAN() {
        return winnt_h$constants$0.SUBLANG_DARI_AFGHANISTAN();
    }
    public static @C("int") int SUBLANG_DIVEHI_MALDIVES() {
        return winnt_h$constants$0.SUBLANG_DIVEHI_MALDIVES();
    }
    public static @C("int") int SUBLANG_DUTCH() {
        return winnt_h$constants$0.SUBLANG_DUTCH();
    }
    public static @C("int") int SUBLANG_DUTCH_BELGIAN() {
        return winnt_h$constants$0.SUBLANG_DUTCH_BELGIAN();
    }
    public static @C("int") int SUBLANG_ENGLISH_US() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_US();
    }
    public static @C("int") int SUBLANG_ENGLISH_UK() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_UK();
    }
    public static @C("int") int SUBLANG_ENGLISH_AUS() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_AUS();
    }
    public static @C("int") int SUBLANG_ENGLISH_CAN() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_CAN();
    }
    public static @C("int") int SUBLANG_ENGLISH_NZ() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_NZ();
    }
    public static @C("int") int SUBLANG_ENGLISH_EIRE() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_EIRE();
    }
    public static @C("int") int SUBLANG_ENGLISH_SOUTH_AFRICA() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_SOUTH_AFRICA();
    }
    public static @C("int") int SUBLANG_ENGLISH_JAMAICA() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_JAMAICA();
    }
    public static @C("int") int SUBLANG_ENGLISH_CARIBBEAN() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_CARIBBEAN();
    }
    public static @C("int") int SUBLANG_ENGLISH_BELIZE() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_BELIZE();
    }
    public static @C("int") int SUBLANG_ENGLISH_TRINIDAD() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_TRINIDAD();
    }
    public static @C("int") int SUBLANG_ENGLISH_ZIMBABWE() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_ZIMBABWE();
    }
    public static @C("int") int SUBLANG_ENGLISH_PHILIPPINES() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_PHILIPPINES();
    }
    public static @C("int") int SUBLANG_ENGLISH_INDIA() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_INDIA();
    }
    public static @C("int") int SUBLANG_ENGLISH_MALAYSIA() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_MALAYSIA();
    }
    public static @C("int") int SUBLANG_ENGLISH_SINGAPORE() {
        return winnt_h$constants$0.SUBLANG_ENGLISH_SINGAPORE();
    }
    public static @C("int") int SUBLANG_ESTONIAN_ESTONIA() {
        return winnt_h$constants$0.SUBLANG_ESTONIAN_ESTONIA();
    }
    public static @C("int") int SUBLANG_FAEROESE_FAROE_ISLANDS() {
        return winnt_h$constants$0.SUBLANG_FAEROESE_FAROE_ISLANDS();
    }
    public static @C("int") int SUBLANG_FILIPINO_PHILIPPINES() {
        return winnt_h$constants$0.SUBLANG_FILIPINO_PHILIPPINES();
    }
    public static @C("int") int SUBLANG_FINNISH_FINLAND() {
        return winnt_h$constants$0.SUBLANG_FINNISH_FINLAND();
    }
    public static @C("int") int SUBLANG_FRENCH() {
        return winnt_h$constants$0.SUBLANG_FRENCH();
    }
    public static @C("int") int SUBLANG_FRENCH_BELGIAN() {
        return winnt_h$constants$0.SUBLANG_FRENCH_BELGIAN();
    }
    public static @C("int") int SUBLANG_FRENCH_CANADIAN() {
        return winnt_h$constants$0.SUBLANG_FRENCH_CANADIAN();
    }
    public static @C("int") int SUBLANG_FRENCH_SWISS() {
        return winnt_h$constants$0.SUBLANG_FRENCH_SWISS();
    }
    public static @C("int") int SUBLANG_FRENCH_LUXEMBOURG() {
        return winnt_h$constants$0.SUBLANG_FRENCH_LUXEMBOURG();
    }
    public static @C("int") int SUBLANG_FRENCH_MONACO() {
        return winnt_h$constants$0.SUBLANG_FRENCH_MONACO();
    }
    public static @C("int") int SUBLANG_FRISIAN_NETHERLANDS() {
        return winnt_h$constants$0.SUBLANG_FRISIAN_NETHERLANDS();
    }
    public static @C("int") int SUBLANG_FULAH_SENEGAL() {
        return winnt_h$constants$0.SUBLANG_FULAH_SENEGAL();
    }
    public static @C("int") int SUBLANG_GALICIAN_GALICIAN() {
        return winnt_h$constants$0.SUBLANG_GALICIAN_GALICIAN();
    }
    public static @C("int") int SUBLANG_GEORGIAN_GEORGIA() {
        return winnt_h$constants$0.SUBLANG_GEORGIAN_GEORGIA();
    }
    public static @C("int") int SUBLANG_GERMAN() {
        return winnt_h$constants$0.SUBLANG_GERMAN();
    }
    public static @C("int") int SUBLANG_GERMAN_SWISS() {
        return winnt_h$constants$0.SUBLANG_GERMAN_SWISS();
    }
    public static @C("int") int SUBLANG_GERMAN_AUSTRIAN() {
        return winnt_h$constants$0.SUBLANG_GERMAN_AUSTRIAN();
    }
    public static @C("int") int SUBLANG_GERMAN_LUXEMBOURG() {
        return winnt_h$constants$0.SUBLANG_GERMAN_LUXEMBOURG();
    }
    public static @C("int") int SUBLANG_GERMAN_LIECHTENSTEIN() {
        return winnt_h$constants$0.SUBLANG_GERMAN_LIECHTENSTEIN();
    }
    public static @C("int") int SUBLANG_GREEK_GREECE() {
        return winnt_h$constants$0.SUBLANG_GREEK_GREECE();
    }
    public static @C("int") int SUBLANG_GREENLANDIC_GREENLAND() {
        return winnt_h$constants$0.SUBLANG_GREENLANDIC_GREENLAND();
    }
    public static @C("int") int SUBLANG_GUJARATI_INDIA() {
        return winnt_h$constants$0.SUBLANG_GUJARATI_INDIA();
    }
    public static @C("int") int SUBLANG_HAUSA_NIGERIA_LATIN() {
        return winnt_h$constants$0.SUBLANG_HAUSA_NIGERIA_LATIN();
    }
    public static @C("int") int SUBLANG_HAWAIIAN_US() {
        return winnt_h$constants$0.SUBLANG_HAWAIIAN_US();
    }
    public static @C("int") int SUBLANG_HEBREW_ISRAEL() {
        return winnt_h$constants$0.SUBLANG_HEBREW_ISRAEL();
    }
    public static @C("int") int SUBLANG_HINDI_INDIA() {
        return winnt_h$constants$0.SUBLANG_HINDI_INDIA();
    }
    public static @C("int") int SUBLANG_HUNGARIAN_HUNGARY() {
        return winnt_h$constants$0.SUBLANG_HUNGARIAN_HUNGARY();
    }
    public static @C("int") int SUBLANG_ICELANDIC_ICELAND() {
        return winnt_h$constants$0.SUBLANG_ICELANDIC_ICELAND();
    }
    public static @C("int") int SUBLANG_IGBO_NIGERIA() {
        return winnt_h$constants$0.SUBLANG_IGBO_NIGERIA();
    }
    public static @C("int") int SUBLANG_INDONESIAN_INDONESIA() {
        return winnt_h$constants$0.SUBLANG_INDONESIAN_INDONESIA();
    }
    public static @C("int") int SUBLANG_INUKTITUT_CANADA() {
        return winnt_h$constants$0.SUBLANG_INUKTITUT_CANADA();
    }
    public static @C("int") int SUBLANG_INUKTITUT_CANADA_LATIN() {
        return winnt_h$constants$0.SUBLANG_INUKTITUT_CANADA_LATIN();
    }
    public static @C("int") int SUBLANG_IRISH_IRELAND() {
        return winnt_h$constants$0.SUBLANG_IRISH_IRELAND();
    }
    public static @C("int") int SUBLANG_ITALIAN() {
        return winnt_h$constants$0.SUBLANG_ITALIAN();
    }
    public static @C("int") int SUBLANG_ITALIAN_SWISS() {
        return winnt_h$constants$0.SUBLANG_ITALIAN_SWISS();
    }
    public static @C("int") int SUBLANG_JAPANESE_JAPAN() {
        return winnt_h$constants$0.SUBLANG_JAPANESE_JAPAN();
    }
    public static @C("int") int SUBLANG_KANNADA_INDIA() {
        return winnt_h$constants$0.SUBLANG_KANNADA_INDIA();
    }
    public static @C("int") int SUBLANG_KASHMIRI_SASIA() {
        return winnt_h$constants$0.SUBLANG_KASHMIRI_SASIA();
    }
    public static @C("int") int SUBLANG_KASHMIRI_INDIA() {
        return winnt_h$constants$0.SUBLANG_KASHMIRI_INDIA();
    }
    public static @C("int") int SUBLANG_KAZAK_KAZAKHSTAN() {
        return winnt_h$constants$0.SUBLANG_KAZAK_KAZAKHSTAN();
    }
    public static @C("int") int SUBLANG_KHMER_CAMBODIA() {
        return winnt_h$constants$0.SUBLANG_KHMER_CAMBODIA();
    }
    public static @C("int") int SUBLANG_KICHE_GUATEMALA() {
        return winnt_h$constants$0.SUBLANG_KICHE_GUATEMALA();
    }
    public static @C("int") int SUBLANG_KINYARWANDA_RWANDA() {
        return winnt_h$constants$0.SUBLANG_KINYARWANDA_RWANDA();
    }
    public static @C("int") int SUBLANG_KONKANI_INDIA() {
        return winnt_h$constants$0.SUBLANG_KONKANI_INDIA();
    }
    public static @C("int") int SUBLANG_KOREAN() {
        return winnt_h$constants$0.SUBLANG_KOREAN();
    }
    public static @C("int") int SUBLANG_KYRGYZ_KYRGYZSTAN() {
        return winnt_h$constants$0.SUBLANG_KYRGYZ_KYRGYZSTAN();
    }
    public static @C("int") int SUBLANG_LAO_LAO() {
        return winnt_h$constants$0.SUBLANG_LAO_LAO();
    }
    public static @C("int") int SUBLANG_LATVIAN_LATVIA() {
        return winnt_h$constants$0.SUBLANG_LATVIAN_LATVIA();
    }
    public static @C("int") int SUBLANG_LITHUANIAN() {
        return winnt_h$constants$0.SUBLANG_LITHUANIAN();
    }
    public static @C("int") int SUBLANG_LOWER_SORBIAN_GERMANY() {
        return winnt_h$constants$0.SUBLANG_LOWER_SORBIAN_GERMANY();
    }
    public static @C("int") int SUBLANG_LUXEMBOURGISH_LUXEMBOURG() {
        return winnt_h$constants$0.SUBLANG_LUXEMBOURGISH_LUXEMBOURG();
    }
    public static @C("int") int SUBLANG_MACEDONIAN_MACEDONIA() {
        return winnt_h$constants$0.SUBLANG_MACEDONIAN_MACEDONIA();
    }
    public static @C("int") int SUBLANG_MALAY_MALAYSIA() {
        return winnt_h$constants$0.SUBLANG_MALAY_MALAYSIA();
    }
    public static @C("int") int SUBLANG_MALAY_BRUNEI_DARUSSALAM() {
        return winnt_h$constants$0.SUBLANG_MALAY_BRUNEI_DARUSSALAM();
    }
    public static @C("int") int SUBLANG_MALAYALAM_INDIA() {
        return winnt_h$constants$0.SUBLANG_MALAYALAM_INDIA();
    }
    public static @C("int") int SUBLANG_MALTESE_MALTA() {
        return winnt_h$constants$0.SUBLANG_MALTESE_MALTA();
    }
    public static @C("int") int SUBLANG_MAORI_NEW_ZEALAND() {
        return winnt_h$constants$0.SUBLANG_MAORI_NEW_ZEALAND();
    }
    public static @C("int") int SUBLANG_MAPUDUNGUN_CHILE() {
        return winnt_h$constants$0.SUBLANG_MAPUDUNGUN_CHILE();
    }
    public static @C("int") int SUBLANG_MARATHI_INDIA() {
        return winnt_h$constants$0.SUBLANG_MARATHI_INDIA();
    }
    public static @C("int") int SUBLANG_MOHAWK_MOHAWK() {
        return winnt_h$constants$0.SUBLANG_MOHAWK_MOHAWK();
    }
    public static @C("int") int SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA() {
        return winnt_h$constants$0.SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA();
    }
    public static @C("int") int SUBLANG_MONGOLIAN_PRC() {
        return winnt_h$constants$0.SUBLANG_MONGOLIAN_PRC();
    }
    public static @C("int") int SUBLANG_NEPALI_INDIA() {
        return winnt_h$constants$0.SUBLANG_NEPALI_INDIA();
    }
    public static @C("int") int SUBLANG_NEPALI_NEPAL() {
        return winnt_h$constants$0.SUBLANG_NEPALI_NEPAL();
    }
    public static @C("int") int SUBLANG_NORWEGIAN_BOKMAL() {
        return winnt_h$constants$0.SUBLANG_NORWEGIAN_BOKMAL();
    }
    public static @C("int") int SUBLANG_NORWEGIAN_NYNORSK() {
        return winnt_h$constants$0.SUBLANG_NORWEGIAN_NYNORSK();
    }
    public static @C("int") int SUBLANG_OCCITAN_FRANCE() {
        return winnt_h$constants$0.SUBLANG_OCCITAN_FRANCE();
    }
    public static @C("int") int SUBLANG_ODIA_INDIA() {
        return winnt_h$constants$0.SUBLANG_ODIA_INDIA();
    }
    public static @C("int") int SUBLANG_ORIYA_INDIA() {
        return winnt_h$constants$0.SUBLANG_ORIYA_INDIA();
    }
    public static @C("int") int SUBLANG_PASHTO_AFGHANISTAN() {
        return winnt_h$constants$0.SUBLANG_PASHTO_AFGHANISTAN();
    }
    public static @C("int") int SUBLANG_PERSIAN_IRAN() {
        return winnt_h$constants$0.SUBLANG_PERSIAN_IRAN();
    }
    public static @C("int") int SUBLANG_POLISH_POLAND() {
        return winnt_h$constants$0.SUBLANG_POLISH_POLAND();
    }
    public static @C("int") int SUBLANG_PORTUGUESE() {
        return winnt_h$constants$0.SUBLANG_PORTUGUESE();
    }
    public static @C("int") int SUBLANG_PORTUGUESE_BRAZILIAN() {
        return winnt_h$constants$0.SUBLANG_PORTUGUESE_BRAZILIAN();
    }
    public static @C("int") int SUBLANG_PULAR_SENEGAL() {
        return winnt_h$constants$0.SUBLANG_PULAR_SENEGAL();
    }
    public static @C("int") int SUBLANG_PUNJABI_INDIA() {
        return winnt_h$constants$0.SUBLANG_PUNJABI_INDIA();
    }
    public static @C("int") int SUBLANG_PUNJABI_PAKISTAN() {
        return winnt_h$constants$0.SUBLANG_PUNJABI_PAKISTAN();
    }
    public static @C("int") int SUBLANG_QUECHUA_BOLIVIA() {
        return winnt_h$constants$0.SUBLANG_QUECHUA_BOLIVIA();
    }
    public static @C("int") int SUBLANG_QUECHUA_ECUADOR() {
        return winnt_h$constants$0.SUBLANG_QUECHUA_ECUADOR();
    }
    public static @C("int") int SUBLANG_QUECHUA_PERU() {
        return winnt_h$constants$0.SUBLANG_QUECHUA_PERU();
    }
    public static @C("int") int SUBLANG_ROMANIAN_ROMANIA() {
        return winnt_h$constants$0.SUBLANG_ROMANIAN_ROMANIA();
    }
    public static @C("int") int SUBLANG_ROMANSH_SWITZERLAND() {
        return winnt_h$constants$0.SUBLANG_ROMANSH_SWITZERLAND();
    }
    public static @C("int") int SUBLANG_RUSSIAN_RUSSIA() {
        return winnt_h$constants$0.SUBLANG_RUSSIAN_RUSSIA();
    }
    public static @C("int") int SUBLANG_SAKHA_RUSSIA() {
        return winnt_h$constants$0.SUBLANG_SAKHA_RUSSIA();
    }
    public static @C("int") int SUBLANG_SAMI_NORTHERN_NORWAY() {
        return winnt_h$constants$0.SUBLANG_SAMI_NORTHERN_NORWAY();
    }
    public static @C("int") int SUBLANG_SAMI_NORTHERN_SWEDEN() {
        return winnt_h$constants$0.SUBLANG_SAMI_NORTHERN_SWEDEN();
    }
    public static @C("int") int SUBLANG_SAMI_NORTHERN_FINLAND() {
        return winnt_h$constants$0.SUBLANG_SAMI_NORTHERN_FINLAND();
    }
    public static @C("int") int SUBLANG_SAMI_LULE_NORWAY() {
        return winnt_h$constants$0.SUBLANG_SAMI_LULE_NORWAY();
    }
    public static @C("int") int SUBLANG_SAMI_LULE_SWEDEN() {
        return winnt_h$constants$0.SUBLANG_SAMI_LULE_SWEDEN();
    }
    public static @C("int") int SUBLANG_SAMI_SOUTHERN_NORWAY() {
        return winnt_h$constants$0.SUBLANG_SAMI_SOUTHERN_NORWAY();
    }
    public static @C("int") int SUBLANG_SAMI_SOUTHERN_SWEDEN() {
        return winnt_h$constants$0.SUBLANG_SAMI_SOUTHERN_SWEDEN();
    }
    public static @C("int") int SUBLANG_SAMI_SKOLT_FINLAND() {
        return winnt_h$constants$0.SUBLANG_SAMI_SKOLT_FINLAND();
    }
    public static @C("int") int SUBLANG_SAMI_INARI_FINLAND() {
        return winnt_h$constants$0.SUBLANG_SAMI_INARI_FINLAND();
    }
    public static @C("int") int SUBLANG_SANSKRIT_INDIA() {
        return winnt_h$constants$0.SUBLANG_SANSKRIT_INDIA();
    }
    public static @C("int") int SUBLANG_SCOTTISH_GAELIC() {
        return winnt_h$constants$0.SUBLANG_SCOTTISH_GAELIC();
    }
    public static @C("int") int SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN() {
        return winnt_h$constants$0.SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN();
    }
    public static @C("int") int SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC() {
        return winnt_h$constants$0.SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC();
    }
    public static @C("int") int SUBLANG_SERBIAN_MONTENEGRO_LATIN() {
        return winnt_h$constants$0.SUBLANG_SERBIAN_MONTENEGRO_LATIN();
    }
    public static @C("int") int SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC() {
        return winnt_h$constants$0.SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC();
    }
    public static @C("int") int SUBLANG_SERBIAN_SERBIA_LATIN() {
        return winnt_h$constants$0.SUBLANG_SERBIAN_SERBIA_LATIN();
    }
    public static @C("int") int SUBLANG_SERBIAN_SERBIA_CYRILLIC() {
        return winnt_h$constants$0.SUBLANG_SERBIAN_SERBIA_CYRILLIC();
    }
    public static @C("int") int SUBLANG_SERBIAN_CROATIA() {
        return winnt_h$constants$0.SUBLANG_SERBIAN_CROATIA();
    }
    public static @C("int") int SUBLANG_SERBIAN_LATIN() {
        return winnt_h$constants$0.SUBLANG_SERBIAN_LATIN();
    }
    public static @C("int") int SUBLANG_SERBIAN_CYRILLIC() {
        return winnt_h$constants$0.SUBLANG_SERBIAN_CYRILLIC();
    }
    public static @C("int") int SUBLANG_SINDHI_INDIA() {
        return winnt_h$constants$0.SUBLANG_SINDHI_INDIA();
    }
    public static @C("int") int SUBLANG_SINDHI_PAKISTAN() {
        return winnt_h$constants$0.SUBLANG_SINDHI_PAKISTAN();
    }
    public static @C("int") int SUBLANG_SINDHI_AFGHANISTAN() {
        return winnt_h$constants$0.SUBLANG_SINDHI_AFGHANISTAN();
    }
    public static @C("int") int SUBLANG_SINHALESE_SRI_LANKA() {
        return winnt_h$constants$0.SUBLANG_SINHALESE_SRI_LANKA();
    }
    public static @C("int") int SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA() {
        return winnt_h$constants$0.SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA();
    }
    public static @C("int") int SUBLANG_SLOVAK_SLOVAKIA() {
        return winnt_h$constants$0.SUBLANG_SLOVAK_SLOVAKIA();
    }
    public static @C("int") int SUBLANG_SLOVENIAN_SLOVENIA() {
        return winnt_h$constants$0.SUBLANG_SLOVENIAN_SLOVENIA();
    }
    public static @C("int") int SUBLANG_SPANISH() {
        return winnt_h$constants$0.SUBLANG_SPANISH();
    }
    public static @C("int") int SUBLANG_SPANISH_MEXICAN() {
        return winnt_h$constants$0.SUBLANG_SPANISH_MEXICAN();
    }
    public static @C("int") int SUBLANG_SPANISH_MODERN() {
        return winnt_h$constants$0.SUBLANG_SPANISH_MODERN();
    }
    public static @C("int") int SUBLANG_SPANISH_GUATEMALA() {
        return winnt_h$constants$0.SUBLANG_SPANISH_GUATEMALA();
    }
    public static @C("int") int SUBLANG_SPANISH_COSTA_RICA() {
        return winnt_h$constants$0.SUBLANG_SPANISH_COSTA_RICA();
    }
    public static @C("int") int SUBLANG_SPANISH_PANAMA() {
        return winnt_h$constants$0.SUBLANG_SPANISH_PANAMA();
    }
    public static @C("int") int SUBLANG_SPANISH_DOMINICAN_REPUBLIC() {
        return winnt_h$constants$0.SUBLANG_SPANISH_DOMINICAN_REPUBLIC();
    }
    public static @C("int") int SUBLANG_SPANISH_VENEZUELA() {
        return winnt_h$constants$0.SUBLANG_SPANISH_VENEZUELA();
    }
    public static @C("int") int SUBLANG_SPANISH_COLOMBIA() {
        return winnt_h$constants$0.SUBLANG_SPANISH_COLOMBIA();
    }
    public static @C("int") int SUBLANG_SPANISH_PERU() {
        return winnt_h$constants$0.SUBLANG_SPANISH_PERU();
    }
    public static @C("int") int SUBLANG_SPANISH_ARGENTINA() {
        return winnt_h$constants$0.SUBLANG_SPANISH_ARGENTINA();
    }
    public static @C("int") int SUBLANG_SPANISH_ECUADOR() {
        return winnt_h$constants$0.SUBLANG_SPANISH_ECUADOR();
    }
    public static @C("int") int SUBLANG_SPANISH_CHILE() {
        return winnt_h$constants$0.SUBLANG_SPANISH_CHILE();
    }
    public static @C("int") int SUBLANG_SPANISH_URUGUAY() {
        return winnt_h$constants$0.SUBLANG_SPANISH_URUGUAY();
    }
    public static @C("int") int SUBLANG_SPANISH_PARAGUAY() {
        return winnt_h$constants$0.SUBLANG_SPANISH_PARAGUAY();
    }
    public static @C("int") int SUBLANG_SPANISH_BOLIVIA() {
        return winnt_h$constants$0.SUBLANG_SPANISH_BOLIVIA();
    }
    public static @C("int") int SUBLANG_SPANISH_EL_SALVADOR() {
        return winnt_h$constants$0.SUBLANG_SPANISH_EL_SALVADOR();
    }
    public static @C("int") int SUBLANG_SPANISH_HONDURAS() {
        return winnt_h$constants$0.SUBLANG_SPANISH_HONDURAS();
    }
    public static @C("int") int SUBLANG_SPANISH_NICARAGUA() {
        return winnt_h$constants$0.SUBLANG_SPANISH_NICARAGUA();
    }
    public static @C("int") int SUBLANG_SPANISH_PUERTO_RICO() {
        return winnt_h$constants$0.SUBLANG_SPANISH_PUERTO_RICO();
    }
    public static @C("int") int SUBLANG_SPANISH_US() {
        return winnt_h$constants$0.SUBLANG_SPANISH_US();
    }
    public static @C("int") int SUBLANG_SWAHILI_KENYA() {
        return winnt_h$constants$0.SUBLANG_SWAHILI_KENYA();
    }
    public static @C("int") int SUBLANG_SWEDISH() {
        return winnt_h$constants$0.SUBLANG_SWEDISH();
    }
    public static @C("int") int SUBLANG_SWEDISH_FINLAND() {
        return winnt_h$constants$0.SUBLANG_SWEDISH_FINLAND();
    }
    public static @C("int") int SUBLANG_SYRIAC_SYRIA() {
        return winnt_h$constants$0.SUBLANG_SYRIAC_SYRIA();
    }
    public static @C("int") int SUBLANG_TAJIK_TAJIKISTAN() {
        return winnt_h$constants$0.SUBLANG_TAJIK_TAJIKISTAN();
    }
    public static @C("int") int SUBLANG_TAMAZIGHT_ALGERIA_LATIN() {
        return winnt_h$constants$0.SUBLANG_TAMAZIGHT_ALGERIA_LATIN();
    }
    public static @C("int") int SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH() {
        return winnt_h$constants$0.SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH();
    }
    public static @C("int") int SUBLANG_TAMIL_INDIA() {
        return winnt_h$constants$0.SUBLANG_TAMIL_INDIA();
    }
    public static @C("int") int SUBLANG_TAMIL_SRI_LANKA() {
        return winnt_h$constants$0.SUBLANG_TAMIL_SRI_LANKA();
    }
    public static @C("int") int SUBLANG_TATAR_RUSSIA() {
        return winnt_h$constants$0.SUBLANG_TATAR_RUSSIA();
    }
    public static @C("int") int SUBLANG_TELUGU_INDIA() {
        return winnt_h$constants$0.SUBLANG_TELUGU_INDIA();
    }
    public static @C("int") int SUBLANG_THAI_THAILAND() {
        return winnt_h$constants$0.SUBLANG_THAI_THAILAND();
    }
    public static @C("int") int SUBLANG_TIBETAN_PRC() {
        return winnt_h$constants$0.SUBLANG_TIBETAN_PRC();
    }
    public static @C("int") int SUBLANG_TIGRIGNA_ERITREA() {
        return winnt_h$constants$0.SUBLANG_TIGRIGNA_ERITREA();
    }
    public static @C("int") int SUBLANG_TIGRINYA_ERITREA() {
        return winnt_h$constants$0.SUBLANG_TIGRINYA_ERITREA();
    }
    public static @C("int") int SUBLANG_TIGRINYA_ETHIOPIA() {
        return winnt_h$constants$0.SUBLANG_TIGRINYA_ETHIOPIA();
    }
    public static @C("int") int SUBLANG_TSWANA_BOTSWANA() {
        return winnt_h$constants$0.SUBLANG_TSWANA_BOTSWANA();
    }
    public static @C("int") int SUBLANG_TSWANA_SOUTH_AFRICA() {
        return winnt_h$constants$0.SUBLANG_TSWANA_SOUTH_AFRICA();
    }
    public static @C("int") int SUBLANG_TURKISH_TURKEY() {
        return winnt_h$constants$0.SUBLANG_TURKISH_TURKEY();
    }
    public static @C("int") int SUBLANG_TURKMEN_TURKMENISTAN() {
        return winnt_h$constants$0.SUBLANG_TURKMEN_TURKMENISTAN();
    }
    public static @C("int") int SUBLANG_UIGHUR_PRC() {
        return winnt_h$constants$0.SUBLANG_UIGHUR_PRC();
    }
    public static @C("int") int SUBLANG_UKRAINIAN_UKRAINE() {
        return winnt_h$constants$0.SUBLANG_UKRAINIAN_UKRAINE();
    }
    public static @C("int") int SUBLANG_UPPER_SORBIAN_GERMANY() {
        return winnt_h$constants$0.SUBLANG_UPPER_SORBIAN_GERMANY();
    }
    public static @C("int") int SUBLANG_URDU_PAKISTAN() {
        return winnt_h$constants$0.SUBLANG_URDU_PAKISTAN();
    }
    public static @C("int") int SUBLANG_URDU_INDIA() {
        return winnt_h$constants$0.SUBLANG_URDU_INDIA();
    }
    public static @C("int") int SUBLANG_UZBEK_LATIN() {
        return winnt_h$constants$0.SUBLANG_UZBEK_LATIN();
    }
    public static @C("int") int SUBLANG_UZBEK_CYRILLIC() {
        return winnt_h$constants$0.SUBLANG_UZBEK_CYRILLIC();
    }
    public static @C("int") int SUBLANG_VALENCIAN_VALENCIA() {
        return winnt_h$constants$0.SUBLANG_VALENCIAN_VALENCIA();
    }
    public static @C("int") int SUBLANG_VIETNAMESE_VIETNAM() {
        return winnt_h$constants$0.SUBLANG_VIETNAMESE_VIETNAM();
    }
    public static @C("int") int SUBLANG_WELSH_UNITED_KINGDOM() {
        return winnt_h$constants$0.SUBLANG_WELSH_UNITED_KINGDOM();
    }
    public static @C("int") int SUBLANG_WOLOF_SENEGAL() {
        return winnt_h$constants$0.SUBLANG_WOLOF_SENEGAL();
    }
    public static @C("int") int SUBLANG_XHOSA_SOUTH_AFRICA() {
        return winnt_h$constants$0.SUBLANG_XHOSA_SOUTH_AFRICA();
    }
    public static @C("int") int SUBLANG_YAKUT_RUSSIA() {
        return winnt_h$constants$0.SUBLANG_YAKUT_RUSSIA();
    }
    public static @C("int") int SUBLANG_YI_PRC() {
        return winnt_h$constants$0.SUBLANG_YI_PRC();
    }
    public static @C("int") int SUBLANG_YORUBA_NIGERIA() {
        return winnt_h$constants$0.SUBLANG_YORUBA_NIGERIA();
    }
    public static @C("int") int SUBLANG_ZULU_SOUTH_AFRICA() {
        return winnt_h$constants$0.SUBLANG_ZULU_SOUTH_AFRICA();
    }
    public static @C("int") int SORT_DEFAULT() {
        return winnt_h$constants$0.SORT_DEFAULT();
    }
    public static @C("int") int SORT_INVARIANT_MATH() {
        return winnt_h$constants$0.SORT_INVARIANT_MATH();
    }
    public static @C("int") int SORT_JAPANESE_XJIS() {
        return winnt_h$constants$0.SORT_JAPANESE_XJIS();
    }
    public static @C("int") int SORT_JAPANESE_UNICODE() {
        return winnt_h$constants$0.SORT_JAPANESE_UNICODE();
    }
    public static @C("int") int SORT_JAPANESE_RADICALSTROKE() {
        return winnt_h$constants$0.SORT_JAPANESE_RADICALSTROKE();
    }
    public static @C("int") int SORT_CHINESE_BIG5() {
        return winnt_h$constants$0.SORT_CHINESE_BIG5();
    }
    public static @C("int") int SORT_CHINESE_PRCP() {
        return winnt_h$constants$0.SORT_CHINESE_PRCP();
    }
    public static @C("int") int SORT_CHINESE_UNICODE() {
        return winnt_h$constants$0.SORT_CHINESE_UNICODE();
    }
    public static @C("int") int SORT_CHINESE_PRC() {
        return winnt_h$constants$0.SORT_CHINESE_PRC();
    }
    public static @C("int") int SORT_CHINESE_BOPOMOFO() {
        return winnt_h$constants$0.SORT_CHINESE_BOPOMOFO();
    }
    public static @C("int") int SORT_CHINESE_RADICALSTROKE() {
        return winnt_h$constants$0.SORT_CHINESE_RADICALSTROKE();
    }
    public static @C("int") int SORT_KOREAN_KSC() {
        return winnt_h$constants$0.SORT_KOREAN_KSC();
    }
    public static @C("int") int SORT_KOREAN_UNICODE() {
        return winnt_h$constants$0.SORT_KOREAN_UNICODE();
    }
    public static @C("int") int SORT_GERMAN_PHONE_BOOK() {
        return winnt_h$constants$0.SORT_GERMAN_PHONE_BOOK();
    }
    public static @C("int") int SORT_HUNGARIAN_DEFAULT() {
        return winnt_h$constants$0.SORT_HUNGARIAN_DEFAULT();
    }
    public static @C("int") int SORT_HUNGARIAN_TECHNICAL() {
        return winnt_h$constants$0.SORT_HUNGARIAN_TECHNICAL();
    }
    public static @C("int") int SORT_GEORGIAN_TRADITIONAL() {
        return winnt_h$constants$0.SORT_GEORGIAN_TRADITIONAL();
    }
    public static @C("int") int SORT_GEORGIAN_MODERN() {
        return winnt_h$constants$0.SORT_GEORGIAN_MODERN();
    }
    public static @C("int") int NLS_VALID_LOCALE_MASK() {
        return winnt_h$constants$0.NLS_VALID_LOCALE_MASK();
    }
    public static @C("int") int LOCALE_NAME_MAX_LENGTH() {
        return winnt_h$constants$0.LOCALE_NAME_MAX_LENGTH();
    }
    public static @C("int") int LOCALE_TRANSIENT_KEYBOARD1() {
        return winnt_h$constants$0.LOCALE_TRANSIENT_KEYBOARD1();
    }
    public static @C("int") int LOCALE_TRANSIENT_KEYBOARD2() {
        return winnt_h$constants$0.LOCALE_TRANSIENT_KEYBOARD2();
    }
    public static @C("int") int LOCALE_TRANSIENT_KEYBOARD3() {
        return winnt_h$constants$0.LOCALE_TRANSIENT_KEYBOARD3();
    }
    public static @C("int") int LOCALE_TRANSIENT_KEYBOARD4() {
        return winnt_h$constants$0.LOCALE_TRANSIENT_KEYBOARD4();
    }
    public static @C("int") int MAXIMUM_WAIT_OBJECTS() {
        return winnt_h$constants$0.MAXIMUM_WAIT_OBJECTS();
    }
    public static @C("int") int _MM_HINT_T0() {
        return winnt_h$constants$0._MM_HINT_T0();
    }
    public static @C("int") int _MM_HINT_T1() {
        return winnt_h$constants$0._MM_HINT_T1();
    }
    public static @C("int") int _MM_HINT_T2() {
        return winnt_h$constants$0._MM_HINT_T2();
    }
    public static @C("int") int _MM_HINT_NTA() {
        return winnt_h$constants$0._MM_HINT_NTA();
    }
    public static @C("int") int EXCEPTION_READ_FAULT() {
        return winnt_h$constants$0.EXCEPTION_READ_FAULT();
    }
    public static @C("int") int EXCEPTION_WRITE_FAULT() {
        return winnt_h$constants$0.EXCEPTION_WRITE_FAULT();
    }
    public static @C("int") int EXCEPTION_EXECUTE_FAULT() {
        return winnt_h$constants$0.EXCEPTION_EXECUTE_FAULT();
    }
    public static @C("int") int INITIAL_MXCSR() {
        return winnt_h$constants$0.INITIAL_MXCSR();
    }
    public static @C("int") int INITIAL_FPCSR() {
        return winnt_h$constants$0.INITIAL_FPCSR();
    }
    public static @C("int") int RUNTIME_FUNCTION_INDIRECT() {
        return winnt_h$constants$0.RUNTIME_FUNCTION_INDIRECT();
    }
    public static @C("int") int UNW_FLAG_NHANDLER() {
        return winnt_h$constants$0.UNW_FLAG_NHANDLER();
    }
    public static @C("int") int UNW_FLAG_EHANDLER() {
        return winnt_h$constants$0.UNW_FLAG_EHANDLER();
    }
    public static @C("int") int UNW_FLAG_UHANDLER() {
        return winnt_h$constants$0.UNW_FLAG_UHANDLER();
    }
    public static @C("int") int UNW_FLAG_CHAININFO() {
        return winnt_h$constants$0.UNW_FLAG_CHAININFO();
    }
    public static @C("int") int UNWIND_CHAIN_LIMIT() {
        return winnt_h$constants$0.UNWIND_CHAIN_LIMIT();
    }
    public static @C("int") int UNWIND_HISTORY_TABLE_SIZE() {
        return winnt_h$constants$0.UNWIND_HISTORY_TABLE_SIZE();
    }
    public static @C("int") int WOW64_CONTEXT_i386() {
        return winnt_h$constants$0.WOW64_CONTEXT_i386();
    }
    public static @C("int") int WOW64_CONTEXT_i486() {
        return winnt_h$constants$0.WOW64_CONTEXT_i486();
    }
    public static @C("int") int WOW64_CONTEXT_EXCEPTION_ACTIVE() {
        return winnt_h$constants$0.WOW64_CONTEXT_EXCEPTION_ACTIVE();
    }
    public static @C("int") int WOW64_CONTEXT_SERVICE_ACTIVE() {
        return winnt_h$constants$0.WOW64_CONTEXT_SERVICE_ACTIVE();
    }
    public static @C("int") int WOW64_CONTEXT_EXCEPTION_REQUEST() {
        return winnt_h$constants$0.WOW64_CONTEXT_EXCEPTION_REQUEST();
    }
    public static @C("int") int WOW64_SIZE_OF_80387_REGISTERS() {
        return winnt_h$constants$0.WOW64_SIZE_OF_80387_REGISTERS();
    }
    public static @C("int") int WOW64_MAXIMUM_SUPPORTED_EXTENSION() {
        return winnt_h$constants$0.WOW64_MAXIMUM_SUPPORTED_EXTENSION();
    }
    public static @C("int") int EXCEPTION_NONCONTINUABLE() {
        return winnt_h$constants$0.EXCEPTION_NONCONTINUABLE();
    }
    public static @C("int") int EXCEPTION_UNWINDING() {
        return winnt_h$constants$0.EXCEPTION_UNWINDING();
    }
    public static @C("int") int EXCEPTION_EXIT_UNWIND() {
        return winnt_h$constants$0.EXCEPTION_EXIT_UNWIND();
    }
    public static @C("int") int EXCEPTION_STACK_INVALID() {
        return winnt_h$constants$0.EXCEPTION_STACK_INVALID();
    }
    public static @C("int") int EXCEPTION_NESTED_CALL() {
        return winnt_h$constants$0.EXCEPTION_NESTED_CALL();
    }
    public static @C("int") int EXCEPTION_TARGET_UNWIND() {
        return winnt_h$constants$0.EXCEPTION_TARGET_UNWIND();
    }
    public static @C("int") int EXCEPTION_COLLIDED_UNWIND() {
        return winnt_h$constants$0.EXCEPTION_COLLIDED_UNWIND();
    }
    public static @C("int") int EXCEPTION_MAXIMUM_PARAMETERS() {
        return winnt_h$constants$0.EXCEPTION_MAXIMUM_PARAMETERS();
    }
    public static @C("int") int SID_HASH_SIZE() {
        return winnt_h$constants$0.SID_HASH_SIZE();
    }
    public static @C("int") int SECURITY_TRUSTED_INSTALLER_RID1() {
        return winnt_h$constants$0.SECURITY_TRUSTED_INSTALLER_RID1();
    }
    public static @C("int") int SECURITY_TRUSTED_INSTALLER_RID3() {
        return winnt_h$constants$0.SECURITY_TRUSTED_INSTALLER_RID3();
    }
    public static @C("int") int SECURITY_TRUSTED_INSTALLER_RID4() {
        return winnt_h$constants$0.SECURITY_TRUSTED_INSTALLER_RID4();
    }
    public static @C("int") int SYSTEM_MANDATORY_LABEL_NO_WRITE_UP() {
        return winnt_h$constants$0.SYSTEM_MANDATORY_LABEL_NO_WRITE_UP();
    }
    public static @C("int") int SYSTEM_MANDATORY_LABEL_NO_READ_UP() {
        return winnt_h$constants$0.SYSTEM_MANDATORY_LABEL_NO_READ_UP();
    }
    public static @C("int") int SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP() {
        return winnt_h$constants$0.SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP();
    }
    public static @C("int") int SYSTEM_PROCESS_TRUST_LABEL_VALID_MASK() {
        return winnt_h$constants$0.SYSTEM_PROCESS_TRUST_LABEL_VALID_MASK();
    }
    public static @C("int") int SYSTEM_ACCESS_FILTER_VALID_MASK() {
        return winnt_h$constants$0.SYSTEM_ACCESS_FILTER_VALID_MASK();
    }
    public static @C("int") int ACE_OBJECT_TYPE_PRESENT() {
        return winnt_h$constants$0.ACE_OBJECT_TYPE_PRESENT();
    }
    public static @C("int") int ACE_INHERITED_OBJECT_TYPE_PRESENT() {
        return winnt_h$constants$0.ACE_INHERITED_OBJECT_TYPE_PRESENT();
    }
    public static @C("int") int ACCESS_OBJECT_GUID() {
        return winnt_h$constants$0.ACCESS_OBJECT_GUID();
    }
    public static @C("int") int ACCESS_PROPERTY_SET_GUID() {
        return winnt_h$constants$0.ACCESS_PROPERTY_SET_GUID();
    }
    public static @C("int") int ACCESS_PROPERTY_GUID() {
        return winnt_h$constants$0.ACCESS_PROPERTY_GUID();
    }
    public static @C("int") int ACCESS_MAX_LEVEL() {
        return winnt_h$constants$0.ACCESS_MAX_LEVEL();
    }
    public static @C("int") int AUDIT_ALLOW_NO_PRIVILEGE() {
        return winnt_h$constants$0.AUDIT_ALLOW_NO_PRIVILEGE();
    }
    public static @C("int") int ACCESS_REASON_TYPE_MASK() {
        return winnt_h$constants$0.ACCESS_REASON_TYPE_MASK();
    }
    public static @C("int") int ACCESS_REASON_DATA_MASK() {
        return winnt_h$constants$0.ACCESS_REASON_DATA_MASK();
    }
    public static @C("int") int ACCESS_REASON_EXDATA_MASK() {
        return winnt_h$constants$0.ACCESS_REASON_EXDATA_MASK();
    }
    public static @C("int") int SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE() {
        return winnt_h$constants$0.SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE();
    }
    public static @C("int") int SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE() {
        return winnt_h$constants$0.SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE();
    }
    public static @C("int") int SE_SECURITY_DESCRIPTOR_FLAG_NO_ACCESS_FILTER_ACE() {
        return winnt_h$constants$0.SE_SECURITY_DESCRIPTOR_FLAG_NO_ACCESS_FILTER_ACE();
    }
    public static @C("int") int SE_SECURITY_DESCRIPTOR_VALID_FLAGS() {
        return winnt_h$constants$0.SE_SECURITY_DESCRIPTOR_VALID_FLAGS();
    }
    public static @C("int") int SE_ACCESS_CHECK_FLAG_NO_LEARNING_MODE_LOGGING() {
        return winnt_h$constants$0.SE_ACCESS_CHECK_FLAG_NO_LEARNING_MODE_LOGGING();
    }
    public static @C("int") int SE_ACCESS_CHECK_VALID_FLAGS() {
        return winnt_h$constants$0.SE_ACCESS_CHECK_VALID_FLAGS();
    }
    public static @C("int") int TOKEN_MANDATORY_POLICY_OFF() {
        return winnt_h$constants$0.TOKEN_MANDATORY_POLICY_OFF();
    }
    public static @C("int") int TOKEN_MANDATORY_POLICY_NO_WRITE_UP() {
        return winnt_h$constants$0.TOKEN_MANDATORY_POLICY_NO_WRITE_UP();
    }
    public static @C("int") int TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN() {
        return winnt_h$constants$0.TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN();
    }
    public static @C("int") int TOKEN_SOURCE_LENGTH() {
        return winnt_h$constants$0.TOKEN_SOURCE_LENGTH();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_TYPE_SID() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_TYPE_SID();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_DISABLED() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_DISABLED();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTE_MANDATORY() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTE_MANDATORY();
    }
    public static @C("int") int CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1() {
        return winnt_h$constants$0.CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1();
    }
    public static @C("int") int DISABLE_MAX_PRIVILEGE() {
        return winnt_h$constants$0.DISABLE_MAX_PRIVILEGE();
    }
    public static @C("int") int SANDBOX_INERT() {
        return winnt_h$constants$0.SANDBOX_INERT();
    }
    public static @C("int") int LUA_TOKEN() {
        return winnt_h$constants$0.LUA_TOKEN();
    }
    public static @C("int") int WRITE_RESTRICTED() {
        return winnt_h$constants$0.WRITE_RESTRICTED();
    }
    public static @C("int") int SE_SIGNING_LEVEL_UNCHECKED() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_UNCHECKED();
    }
    public static @C("int") int SE_SIGNING_LEVEL_UNSIGNED() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_UNSIGNED();
    }
    public static @C("int") int SE_SIGNING_LEVEL_ENTERPRISE() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_ENTERPRISE();
    }
    public static @C("int") int SE_SIGNING_LEVEL_CUSTOM_1() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_CUSTOM_1();
    }
    public static @C("int") int SE_SIGNING_LEVEL_AUTHENTICODE() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_AUTHENTICODE();
    }
    public static @C("int") int SE_SIGNING_LEVEL_CUSTOM_2() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_CUSTOM_2();
    }
    public static @C("int") int SE_SIGNING_LEVEL_STORE() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_STORE();
    }
    public static @C("int") int SE_SIGNING_LEVEL_CUSTOM_3() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_CUSTOM_3();
    }
    public static @C("int") int SE_SIGNING_LEVEL_MICROSOFT() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_MICROSOFT();
    }
    public static @C("int") int SE_SIGNING_LEVEL_CUSTOM_4() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_CUSTOM_4();
    }
    public static @C("int") int SE_SIGNING_LEVEL_CUSTOM_5() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_CUSTOM_5();
    }
    public static @C("int") int SE_SIGNING_LEVEL_DYNAMIC_CODEGEN() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_DYNAMIC_CODEGEN();
    }
    public static @C("int") int SE_SIGNING_LEVEL_WINDOWS() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_WINDOWS();
    }
    public static @C("int") int SE_SIGNING_LEVEL_CUSTOM_7() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_CUSTOM_7();
    }
    public static @C("int") int SE_SIGNING_LEVEL_WINDOWS_TCB() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_WINDOWS_TCB();
    }
    public static @C("int") int SE_SIGNING_LEVEL_CUSTOM_6() {
        return winnt_h$constants$0.SE_SIGNING_LEVEL_CUSTOM_6();
    }
    public static @C("int") int SE_LEARNING_MODE_FLAG_PERMISSIVE() {
        return winnt_h$constants$0.SE_LEARNING_MODE_FLAG_PERMISSIVE();
    }
    public static @C("int") int FLS_MAXIMUM_AVAILABLE() {
        return winnt_h$constants$0.FLS_MAXIMUM_AVAILABLE();
    }
    public static @C("int") int TLS_MINIMUM_AVAILABLE() {
        return winnt_h$constants$0.TLS_MINIMUM_AVAILABLE();
    }
    public static @C("int") int THREAD_DYNAMIC_CODE_ALLOW() {
        return winnt_h$constants$0.THREAD_DYNAMIC_CODE_ALLOW();
    }
    public static @C("int") int THREAD_BASE_PRIORITY_LOWRT() {
        return winnt_h$constants$0.THREAD_BASE_PRIORITY_LOWRT();
    }
    public static @C("int") int THREAD_BASE_PRIORITY_MAX() {
        return winnt_h$constants$0.THREAD_BASE_PRIORITY_MAX();
    }
    public static @C("int") int MEMORY_PRIORITY_LOWEST() {
        return winnt_h$constants$0.MEMORY_PRIORITY_LOWEST();
    }
    public static @C("int") int MEMORY_PRIORITY_VERY_LOW() {
        return winnt_h$constants$0.MEMORY_PRIORITY_VERY_LOW();
    }
    public static @C("int") int MEMORY_PRIORITY_LOW() {
        return winnt_h$constants$0.MEMORY_PRIORITY_LOW();
    }
    public static @C("int") int MEMORY_PRIORITY_MEDIUM() {
        return winnt_h$constants$0.MEMORY_PRIORITY_MEDIUM();
    }
    public static @C("int") int MEMORY_PRIORITY_BELOW_NORMAL() {
        return winnt_h$constants$0.MEMORY_PRIORITY_BELOW_NORMAL();
    }
    public static @C("int") int MEMORY_PRIORITY_NORMAL() {
        return winnt_h$constants$0.MEMORY_PRIORITY_NORMAL();
    }
    public static @C("int") int QUOTA_LIMITS_HARDWS_MIN_ENABLE() {
        return winnt_h$constants$0.QUOTA_LIMITS_HARDWS_MIN_ENABLE();
    }
    public static @C("int") int QUOTA_LIMITS_HARDWS_MIN_DISABLE() {
        return winnt_h$constants$0.QUOTA_LIMITS_HARDWS_MIN_DISABLE();
    }
    public static @C("int") int QUOTA_LIMITS_HARDWS_MAX_ENABLE() {
        return winnt_h$constants$0.QUOTA_LIMITS_HARDWS_MAX_ENABLE();
    }
    public static @C("int") int QUOTA_LIMITS_HARDWS_MAX_DISABLE() {
        return winnt_h$constants$0.QUOTA_LIMITS_HARDWS_MAX_DISABLE();
    }
    public static @C("int") int QUOTA_LIMITS_USE_DEFAULT_LIMITS() {
        return winnt_h$constants$0.QUOTA_LIMITS_USE_DEFAULT_LIMITS();
    }
    public static @C("int") int MAX_HW_COUNTERS() {
        return winnt_h$constants$0.MAX_HW_COUNTERS();
    }
    public static @C("int") int THREAD_PROFILING_FLAG_DISPATCH() {
        return winnt_h$constants$0.THREAD_PROFILING_FLAG_DISPATCH();
    }
    public static @C("int") int JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG() {
        return winnt_h$constants$0.JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG();
    }
    public static @C("int") int JOB_OBJECT_TERMINATE_AT_END_OF_JOB() {
        return winnt_h$constants$0.JOB_OBJECT_TERMINATE_AT_END_OF_JOB();
    }
    public static @C("int") int JOB_OBJECT_POST_AT_END_OF_JOB() {
        return winnt_h$constants$0.JOB_OBJECT_POST_AT_END_OF_JOB();
    }
    public static @C("int") int JOB_OBJECT_MSG_END_OF_JOB_TIME() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_END_OF_JOB_TIME();
    }
    public static @C("int") int JOB_OBJECT_MSG_END_OF_PROCESS_TIME() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_END_OF_PROCESS_TIME();
    }
    public static @C("int") int JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT();
    }
    public static @C("int") int JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO();
    }
    public static @C("int") int JOB_OBJECT_MSG_NEW_PROCESS() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_NEW_PROCESS();
    }
    public static @C("int") int JOB_OBJECT_MSG_EXIT_PROCESS() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_EXIT_PROCESS();
    }
    public static @C("int") int JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS();
    }
    public static @C("int") int JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT();
    }
    public static @C("int") int JOB_OBJECT_MSG_JOB_MEMORY_LIMIT() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_JOB_MEMORY_LIMIT();
    }
    public static @C("int") int JOB_OBJECT_MSG_NOTIFICATION_LIMIT() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_NOTIFICATION_LIMIT();
    }
    public static @C("int") int JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT();
    }
    public static @C("int") int JOB_OBJECT_MSG_SILO_TERMINATED() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_SILO_TERMINATED();
    }
    public static @C("int") int JOB_OBJECT_MSG_MINIMUM() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_MINIMUM();
    }
    public static @C("int") int JOB_OBJECT_MSG_MAXIMUM() {
        return winnt_h$constants$0.JOB_OBJECT_MSG_MAXIMUM();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_WORKINGSET() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_WORKINGSET();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_PROCESS_TIME() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_PROCESS_TIME();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_JOB_TIME() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_JOB_TIME();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_ACTIVE_PROCESS() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_ACTIVE_PROCESS();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_AFFINITY() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_AFFINITY();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_PRIORITY_CLASS() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_PRIORITY_CLASS();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_SCHEDULING_CLASS() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_SCHEDULING_CLASS();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_PROCESS_MEMORY() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_PROCESS_MEMORY();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_JOB_MEMORY() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_JOB_MEMORY();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_BREAKAWAY_OK() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_BREAKAWAY_OK();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_SUBSET_AFFINITY() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_SUBSET_AFFINITY();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_JOB_MEMORY_LOW() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_JOB_MEMORY_LOW();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_JOB_READ_BYTES() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_JOB_READ_BYTES();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_JOB_WRITE_BYTES() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_JOB_WRITE_BYTES();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_RATE_CONTROL() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_RATE_CONTROL();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_IO_RATE_CONTROL() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_IO_RATE_CONTROL();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_NET_RATE_CONTROL() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_NET_RATE_CONTROL();
    }
    public static @C("int") int JOB_OBJECT_LIMIT_VALID_FLAGS() {
        return winnt_h$constants$0.JOB_OBJECT_LIMIT_VALID_FLAGS();
    }
    public static @C("int") int JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS() {
        return winnt_h$constants$0.JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS();
    }
    public static @C("int") int JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS() {
        return winnt_h$constants$0.JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS();
    }
    public static @C("int") int JOB_OBJECT_UILIMIT_NONE() {
        return winnt_h$constants$0.JOB_OBJECT_UILIMIT_NONE();
    }
    public static @C("int") int JOB_OBJECT_UILIMIT_HANDLES() {
        return winnt_h$constants$0.JOB_OBJECT_UILIMIT_HANDLES();
    }
    public static @C("int") int JOB_OBJECT_UILIMIT_READCLIPBOARD() {
        return winnt_h$constants$0.JOB_OBJECT_UILIMIT_READCLIPBOARD();
    }
    public static @C("int") int JOB_OBJECT_UILIMIT_WRITECLIPBOARD() {
        return winnt_h$constants$0.JOB_OBJECT_UILIMIT_WRITECLIPBOARD();
    }
    public static @C("int") int JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS() {
        return winnt_h$constants$0.JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS();
    }
    public static @C("int") int JOB_OBJECT_UILIMIT_DISPLAYSETTINGS() {
        return winnt_h$constants$0.JOB_OBJECT_UILIMIT_DISPLAYSETTINGS();
    }
    public static @C("int") int JOB_OBJECT_UILIMIT_GLOBALATOMS() {
        return winnt_h$constants$0.JOB_OBJECT_UILIMIT_GLOBALATOMS();
    }
    public static @C("int") int JOB_OBJECT_UILIMIT_DESKTOP() {
        return winnt_h$constants$0.JOB_OBJECT_UILIMIT_DESKTOP();
    }
    public static @C("int") int JOB_OBJECT_UILIMIT_EXITWINDOWS() {
        return winnt_h$constants$0.JOB_OBJECT_UILIMIT_EXITWINDOWS();
    }
    public static @C("int") int JOB_OBJECT_UILIMIT_ALL() {
        return winnt_h$constants$0.JOB_OBJECT_UILIMIT_ALL();
    }
    public static @C("int") int JOB_OBJECT_UI_VALID_FLAGS() {
        return winnt_h$constants$0.JOB_OBJECT_UI_VALID_FLAGS();
    }
    public static @C("int") int JOB_OBJECT_SECURITY_NO_ADMIN() {
        return winnt_h$constants$0.JOB_OBJECT_SECURITY_NO_ADMIN();
    }
    public static @C("int") int JOB_OBJECT_SECURITY_RESTRICTED_TOKEN() {
        return winnt_h$constants$0.JOB_OBJECT_SECURITY_RESTRICTED_TOKEN();
    }
    public static @C("int") int JOB_OBJECT_SECURITY_ONLY_TOKEN() {
        return winnt_h$constants$0.JOB_OBJECT_SECURITY_ONLY_TOKEN();
    }
    public static @C("int") int JOB_OBJECT_SECURITY_FILTER_TOKENS() {
        return winnt_h$constants$0.JOB_OBJECT_SECURITY_FILTER_TOKENS();
    }
    public static @C("int") int JOB_OBJECT_SECURITY_VALID_FLAGS() {
        return winnt_h$constants$0.JOB_OBJECT_SECURITY_VALID_FLAGS();
    }
    public static @C("int") int JOB_OBJECT_CPU_RATE_CONTROL_ENABLE() {
        return winnt_h$constants$0.JOB_OBJECT_CPU_RATE_CONTROL_ENABLE();
    }
    public static @C("int") int JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED() {
        return winnt_h$constants$0.JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED();
    }
    public static @C("int") int JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP() {
        return winnt_h$constants$0.JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP();
    }
    public static @C("int") int JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY() {
        return winnt_h$constants$0.JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY();
    }
    public static @C("int") int JOB_OBJECT_CPU_RATE_CONTROL_MIN_MAX_RATE() {
        return winnt_h$constants$0.JOB_OBJECT_CPU_RATE_CONTROL_MIN_MAX_RATE();
    }
    public static @C("int") int JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS() {
        return winnt_h$constants$0.JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS();
    }
    public static @C("int") int EVENT_MODIFY_STATE() {
        return winnt_h$constants$0.EVENT_MODIFY_STATE();
    }
    public static @C("int") int MUTANT_QUERY_STATE() {
        return winnt_h$constants$0.MUTANT_QUERY_STATE();
    }
    public static @C("int") int SEMAPHORE_MODIFY_STATE() {
        return winnt_h$constants$0.SEMAPHORE_MODIFY_STATE();
    }
    public static @C("int") int TIMER_QUERY_STATE() {
        return winnt_h$constants$0.TIMER_QUERY_STATE();
    }
    public static @C("int") int TIMER_MODIFY_STATE() {
        return winnt_h$constants$0.TIMER_MODIFY_STATE();
    }
    public static @C("int") int TIME_ZONE_ID_UNKNOWN() {
        return winnt_h$constants$0.TIME_ZONE_ID_UNKNOWN();
    }
    public static @C("int") int TIME_ZONE_ID_STANDARD() {
        return winnt_h$constants$0.TIME_ZONE_ID_STANDARD();
    }
    public static @C("int") int TIME_ZONE_ID_DAYLIGHT() {
        return winnt_h$constants$0.TIME_ZONE_ID_DAYLIGHT();
    }
    public static @C("int") int LTP_PC_SMT() {
        return winnt_h$constants$0.LTP_PC_SMT();
    }
    public static @C("int") int CACHE_FULLY_ASSOCIATIVE() {
        return winnt_h$constants$0.CACHE_FULLY_ASSOCIATIVE();
    }
    public static @C("int") int SYSTEM_CPU_SET_INFORMATION_PARKED() {
        return winnt_h$constants$0.SYSTEM_CPU_SET_INFORMATION_PARKED();
    }
    public static @C("int") int SYSTEM_CPU_SET_INFORMATION_ALLOCATED() {
        return winnt_h$constants$0.SYSTEM_CPU_SET_INFORMATION_ALLOCATED();
    }
    public static @C("int") int SYSTEM_CPU_SET_INFORMATION_ALLOCATED_TO_TARGET_PROCESS() {
        return winnt_h$constants$0.SYSTEM_CPU_SET_INFORMATION_ALLOCATED_TO_TARGET_PROCESS();
    }
    public static @C("int") int SYSTEM_CPU_SET_INFORMATION_REALTIME() {
        return winnt_h$constants$0.SYSTEM_CPU_SET_INFORMATION_REALTIME();
    }
    public static @C("int") int PROCESSOR_INTEL_386() {
        return winnt_h$constants$0.PROCESSOR_INTEL_386();
    }
    public static @C("int") int PROCESSOR_INTEL_486() {
        return winnt_h$constants$0.PROCESSOR_INTEL_486();
    }
    public static @C("int") int PROCESSOR_INTEL_PENTIUM() {
        return winnt_h$constants$0.PROCESSOR_INTEL_PENTIUM();
    }
    public static @C("int") int PROCESSOR_INTEL_IA64() {
        return winnt_h$constants$0.PROCESSOR_INTEL_IA64();
    }
    public static @C("int") int PROCESSOR_AMD_X8664() {
        return winnt_h$constants$0.PROCESSOR_AMD_X8664();
    }
    public static @C("int") int PROCESSOR_MIPS_R4000() {
        return winnt_h$constants$0.PROCESSOR_MIPS_R4000();
    }
    public static @C("int") int PROCESSOR_ALPHA_21064() {
        return winnt_h$constants$0.PROCESSOR_ALPHA_21064();
    }
    public static @C("int") int PROCESSOR_PPC_601() {
        return winnt_h$constants$0.PROCESSOR_PPC_601();
    }
    public static @C("int") int PROCESSOR_PPC_603() {
        return winnt_h$constants$0.PROCESSOR_PPC_603();
    }
    public static @C("int") int PROCESSOR_PPC_604() {
        return winnt_h$constants$0.PROCESSOR_PPC_604();
    }
    public static @C("int") int PROCESSOR_PPC_620() {
        return winnt_h$constants$0.PROCESSOR_PPC_620();
    }
    public static @C("int") int PROCESSOR_HITACHI_SH3() {
        return winnt_h$constants$0.PROCESSOR_HITACHI_SH3();
    }
    public static @C("int") int PROCESSOR_HITACHI_SH3E() {
        return winnt_h$constants$0.PROCESSOR_HITACHI_SH3E();
    }
    public static @C("int") int PROCESSOR_HITACHI_SH4() {
        return winnt_h$constants$0.PROCESSOR_HITACHI_SH4();
    }
    public static @C("int") int PROCESSOR_MOTOROLA_821() {
        return winnt_h$constants$0.PROCESSOR_MOTOROLA_821();
    }
    public static @C("int") int PROCESSOR_SHx_SH3() {
        return winnt_h$constants$0.PROCESSOR_SHx_SH3();
    }
    public static @C("int") int PROCESSOR_SHx_SH4() {
        return winnt_h$constants$0.PROCESSOR_SHx_SH4();
    }
    public static @C("int") int PROCESSOR_STRONGARM() {
        return winnt_h$constants$0.PROCESSOR_STRONGARM();
    }
    public static @C("int") int PROCESSOR_ARM720() {
        return winnt_h$constants$0.PROCESSOR_ARM720();
    }
    public static @C("int") int PROCESSOR_ARM820() {
        return winnt_h$constants$0.PROCESSOR_ARM820();
    }
    public static @C("int") int PROCESSOR_ARM920() {
        return winnt_h$constants$0.PROCESSOR_ARM920();
    }
    public static @C("int") int PROCESSOR_ARM_7TDMI() {
        return winnt_h$constants$0.PROCESSOR_ARM_7TDMI();
    }
    public static @C("int") int PROCESSOR_OPTIL() {
        return winnt_h$constants$0.PROCESSOR_OPTIL();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_INTEL() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_INTEL();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_MIPS() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_MIPS();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_ALPHA() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_ALPHA();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_PPC() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_PPC();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_SHX() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_SHX();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_ARM() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_ARM();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_IA64() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_IA64();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_ALPHA64() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_ALPHA64();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_MSIL() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_MSIL();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_AMD64() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_AMD64();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_IA32_ON_WIN64() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_IA32_ON_WIN64();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_NEUTRAL() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_NEUTRAL();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_ARM64() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_ARM64();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_IA32_ON_ARM64() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_IA32_ON_ARM64();
    }
    public static @C("int") int PROCESSOR_ARCHITECTURE_UNKNOWN() {
        return winnt_h$constants$0.PROCESSOR_ARCHITECTURE_UNKNOWN();
    }
    public static @C("int") int PF_FLOATING_POINT_PRECISION_ERRATA() {
        return winnt_h$constants$0.PF_FLOATING_POINT_PRECISION_ERRATA();
    }
    public static @C("int") int PF_FLOATING_POINT_EMULATED() {
        return winnt_h$constants$0.PF_FLOATING_POINT_EMULATED();
    }
    public static @C("int") int PF_COMPARE_EXCHANGE_DOUBLE() {
        return winnt_h$constants$0.PF_COMPARE_EXCHANGE_DOUBLE();
    }
    public static @C("int") int PF_MMX_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_MMX_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_PPC_MOVEMEM_64BIT_OK() {
        return winnt_h$constants$0.PF_PPC_MOVEMEM_64BIT_OK();
    }
    public static @C("int") int PF_ALPHA_BYTE_INSTRUCTIONS() {
        return winnt_h$constants$0.PF_ALPHA_BYTE_INSTRUCTIONS();
    }
    public static @C("int") int PF_XMMI_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_XMMI_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_3DNOW_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_3DNOW_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_RDTSC_INSTRUCTION_AVAILABLE() {
        return winnt_h$constants$0.PF_RDTSC_INSTRUCTION_AVAILABLE();
    }
    public static @C("int") int PF_PAE_ENABLED() {
        return winnt_h$constants$0.PF_PAE_ENABLED();
    }
    public static @C("int") int PF_XMMI64_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_XMMI64_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_SSE_DAZ_MODE_AVAILABLE() {
        return winnt_h$constants$0.PF_SSE_DAZ_MODE_AVAILABLE();
    }
    public static @C("int") int PF_NX_ENABLED() {
        return winnt_h$constants$0.PF_NX_ENABLED();
    }
    public static @C("int") int PF_SSE3_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_SSE3_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_COMPARE_EXCHANGE128() {
        return winnt_h$constants$0.PF_COMPARE_EXCHANGE128();
    }
    public static @C("int") int PF_COMPARE64_EXCHANGE128() {
        return winnt_h$constants$0.PF_COMPARE64_EXCHANGE128();
    }
    public static @C("int") int PF_CHANNELS_ENABLED() {
        return winnt_h$constants$0.PF_CHANNELS_ENABLED();
    }
    public static @C("int") int PF_XSAVE_ENABLED() {
        return winnt_h$constants$0.PF_XSAVE_ENABLED();
    }
    public static @C("int") int PF_ARM_VFP_32_REGISTERS_AVAILABLE() {
        return winnt_h$constants$0.PF_ARM_VFP_32_REGISTERS_AVAILABLE();
    }
    public static @C("int") int PF_ARM_NEON_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_ARM_NEON_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_SECOND_LEVEL_ADDRESS_TRANSLATION() {
        return winnt_h$constants$0.PF_SECOND_LEVEL_ADDRESS_TRANSLATION();
    }
    public static @C("int") int PF_VIRT_FIRMWARE_ENABLED() {
        return winnt_h$constants$0.PF_VIRT_FIRMWARE_ENABLED();
    }
    public static @C("int") int PF_RDWRFSGSBASE_AVAILABLE() {
        return winnt_h$constants$0.PF_RDWRFSGSBASE_AVAILABLE();
    }
    public static @C("int") int PF_FASTFAIL_AVAILABLE() {
        return winnt_h$constants$0.PF_FASTFAIL_AVAILABLE();
    }
    public static @C("int") int PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE() {
        return winnt_h$constants$0.PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE();
    }
    public static @C("int") int PF_ARM_64BIT_LOADSTORE_ATOMIC() {
        return winnt_h$constants$0.PF_ARM_64BIT_LOADSTORE_ATOMIC();
    }
    public static @C("int") int PF_ARM_EXTERNAL_CACHE_AVAILABLE() {
        return winnt_h$constants$0.PF_ARM_EXTERNAL_CACHE_AVAILABLE();
    }
    public static @C("int") int PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_RDRAND_INSTRUCTION_AVAILABLE() {
        return winnt_h$constants$0.PF_RDRAND_INSTRUCTION_AVAILABLE();
    }
    public static @C("int") int PF_ARM_V8_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_ARM_V8_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_RDTSCP_INSTRUCTION_AVAILABLE() {
        return winnt_h$constants$0.PF_RDTSCP_INSTRUCTION_AVAILABLE();
    }
    public static @C("int") int PF_RDPID_INSTRUCTION_AVAILABLE() {
        return winnt_h$constants$0.PF_RDPID_INSTRUCTION_AVAILABLE();
    }
    public static @C("int") int PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_MONITORX_INSTRUCTION_AVAILABLE() {
        return winnt_h$constants$0.PF_MONITORX_INSTRUCTION_AVAILABLE();
    }
    public static @C("int") int PF_SSSE3_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_SSSE3_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_SSE4_1_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_SSE4_1_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_SSE4_2_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_SSE4_2_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_AVX_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_AVX_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_AVX2_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_AVX2_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int PF_AVX512F_INSTRUCTIONS_AVAILABLE() {
        return winnt_h$constants$0.PF_AVX512F_INSTRUCTIONS_AVAILABLE();
    }
    public static @C("int") int SECTION_QUERY() {
        return winnt_h$constants$0.SECTION_QUERY();
    }
    public static @C("int") int SECTION_MAP_WRITE() {
        return winnt_h$constants$0.SECTION_MAP_WRITE();
    }
    public static @C("int") int SECTION_MAP_READ() {
        return winnt_h$constants$0.SECTION_MAP_READ();
    }
    public static @C("int") int SECTION_MAP_EXECUTE() {
        return winnt_h$constants$0.SECTION_MAP_EXECUTE();
    }
    public static @C("int") int SECTION_EXTEND_SIZE() {
        return winnt_h$constants$0.SECTION_EXTEND_SIZE();
    }
    public static @C("int") int SECTION_MAP_EXECUTE_EXPLICIT() {
        return winnt_h$constants$0.SECTION_MAP_EXECUTE_EXPLICIT();
    }
    public static @C("int") int SESSION_QUERY_ACCESS() {
        return winnt_h$constants$0.SESSION_QUERY_ACCESS();
    }
    public static @C("int") int SESSION_MODIFY_ACCESS() {
        return winnt_h$constants$0.SESSION_MODIFY_ACCESS();
    }
    public static @C("int") int PAGE_NOACCESS() {
        return winnt_h$constants$0.PAGE_NOACCESS();
    }
    public static @C("int") int PAGE_READONLY() {
        return winnt_h$constants$0.PAGE_READONLY();
    }
    public static @C("int") int PAGE_READWRITE() {
        return winnt_h$constants$0.PAGE_READWRITE();
    }
    public static @C("int") int PAGE_WRITECOPY() {
        return winnt_h$constants$0.PAGE_WRITECOPY();
    }
    public static @C("int") int PAGE_EXECUTE() {
        return winnt_h$constants$0.PAGE_EXECUTE();
    }
    public static @C("int") int PAGE_EXECUTE_READ() {
        return winnt_h$constants$0.PAGE_EXECUTE_READ();
    }
    public static @C("int") int PAGE_EXECUTE_READWRITE() {
        return winnt_h$constants$0.PAGE_EXECUTE_READWRITE();
    }
    public static @C("int") int PAGE_EXECUTE_WRITECOPY() {
        return winnt_h$constants$0.PAGE_EXECUTE_WRITECOPY();
    }
    public static @C("int") int PAGE_GUARD() {
        return winnt_h$constants$0.PAGE_GUARD();
    }
    public static @C("int") int PAGE_NOCACHE() {
        return winnt_h$constants$0.PAGE_NOCACHE();
    }
    public static @C("int") int PAGE_WRITECOMBINE() {
        return winnt_h$constants$0.PAGE_WRITECOMBINE();
    }
    public static @C("int") int PAGE_GRAPHICS_NOACCESS() {
        return winnt_h$constants$0.PAGE_GRAPHICS_NOACCESS();
    }
    public static @C("int") int PAGE_GRAPHICS_READONLY() {
        return winnt_h$constants$0.PAGE_GRAPHICS_READONLY();
    }
    public static @C("int") int PAGE_GRAPHICS_READWRITE() {
        return winnt_h$constants$0.PAGE_GRAPHICS_READWRITE();
    }
    public static @C("int") int PAGE_GRAPHICS_EXECUTE() {
        return winnt_h$constants$0.PAGE_GRAPHICS_EXECUTE();
    }
    public static @C("int") int PAGE_GRAPHICS_EXECUTE_READ() {
        return winnt_h$constants$0.PAGE_GRAPHICS_EXECUTE_READ();
    }
    public static @C("int") int PAGE_GRAPHICS_EXECUTE_READWRITE() {
        return winnt_h$constants$0.PAGE_GRAPHICS_EXECUTE_READWRITE();
    }
    public static @C("int") int PAGE_GRAPHICS_COHERENT() {
        return winnt_h$constants$0.PAGE_GRAPHICS_COHERENT();
    }
    public static @C("int") int PAGE_GRAPHICS_NOCACHE() {
        return winnt_h$constants$0.PAGE_GRAPHICS_NOCACHE();
    }
    public static @C("int") int PAGE_TARGETS_NO_UPDATE() {
        return winnt_h$constants$0.PAGE_TARGETS_NO_UPDATE();
    }
    public static @C("int") int PAGE_TARGETS_INVALID() {
        return winnt_h$constants$0.PAGE_TARGETS_INVALID();
    }
    public static @C("int") int PAGE_ENCLAVE_UNVALIDATED() {
        return winnt_h$constants$0.PAGE_ENCLAVE_UNVALIDATED();
    }
    public static @C("int") int PAGE_ENCLAVE_MASK() {
        return winnt_h$constants$0.PAGE_ENCLAVE_MASK();
    }
    public static @C("int") int MEM_COMMIT() {
        return winnt_h$constants$0.MEM_COMMIT();
    }
    public static @C("int") int MEM_RESERVE() {
        return winnt_h$constants$0.MEM_RESERVE();
    }
    public static @C("int") int MEM_REPLACE_PLACEHOLDER() {
        return winnt_h$constants$0.MEM_REPLACE_PLACEHOLDER();
    }
    public static @C("int") int MEM_RESERVE_PLACEHOLDER() {
        return winnt_h$constants$0.MEM_RESERVE_PLACEHOLDER();
    }
    public static @C("int") int MEM_RESET() {
        return winnt_h$constants$0.MEM_RESET();
    }
    public static @C("int") int MEM_TOP_DOWN() {
        return winnt_h$constants$0.MEM_TOP_DOWN();
    }
    public static @C("int") int MEM_WRITE_WATCH() {
        return winnt_h$constants$0.MEM_WRITE_WATCH();
    }
    public static @C("int") int MEM_PHYSICAL() {
        return winnt_h$constants$0.MEM_PHYSICAL();
    }
    public static @C("int") int MEM_ROTATE() {
        return winnt_h$constants$0.MEM_ROTATE();
    }
    public static @C("int") int MEM_DIFFERENT_IMAGE_BASE_OK() {
        return winnt_h$constants$0.MEM_DIFFERENT_IMAGE_BASE_OK();
    }
    public static @C("int") int MEM_RESET_UNDO() {
        return winnt_h$constants$0.MEM_RESET_UNDO();
    }
    public static @C("int") int MEM_LARGE_PAGES() {
        return winnt_h$constants$0.MEM_LARGE_PAGES();
    }
    public static @C("int") int MEM_UNMAP_WITH_TRANSIENT_BOOST() {
        return winnt_h$constants$0.MEM_UNMAP_WITH_TRANSIENT_BOOST();
    }
    public static @C("int") int MEM_COALESCE_PLACEHOLDERS() {
        return winnt_h$constants$0.MEM_COALESCE_PLACEHOLDERS();
    }
    public static @C("int") int MEM_PRESERVE_PLACEHOLDER() {
        return winnt_h$constants$0.MEM_PRESERVE_PLACEHOLDER();
    }
    public static @C("int") int MEM_DECOMMIT() {
        return winnt_h$constants$0.MEM_DECOMMIT();
    }
    public static @C("int") int MEM_RELEASE() {
        return winnt_h$constants$0.MEM_RELEASE();
    }
    public static @C("int") int MEM_FREE() {
        return winnt_h$constants$0.MEM_FREE();
    }
    public static @C("int") int MEM_EXTENDED_PARAMETER_GRAPHICS() {
        return winnt_h$constants$0.MEM_EXTENDED_PARAMETER_GRAPHICS();
    }
    public static @C("int") int MEM_EXTENDED_PARAMETER_NONPAGED() {
        return winnt_h$constants$0.MEM_EXTENDED_PARAMETER_NONPAGED();
    }
    public static @C("int") int MEM_EXTENDED_PARAMETER_ZERO_PAGES_OPTIONAL() {
        return winnt_h$constants$0.MEM_EXTENDED_PARAMETER_ZERO_PAGES_OPTIONAL();
    }
    public static @C("int") int MEM_EXTENDED_PARAMETER_NONPAGED_LARGE() {
        return winnt_h$constants$0.MEM_EXTENDED_PARAMETER_NONPAGED_LARGE();
    }
    public static @C("int") int MEM_EXTENDED_PARAMETER_NONPAGED_HUGE() {
        return winnt_h$constants$0.MEM_EXTENDED_PARAMETER_NONPAGED_HUGE();
    }
    public static @C("int") int MEM_EXTENDED_PARAMETER_SOFT_FAULT_PAGES() {
        return winnt_h$constants$0.MEM_EXTENDED_PARAMETER_SOFT_FAULT_PAGES();
    }
    public static @C("int") int MEM_EXTENDED_PARAMETER_TYPE_BITS() {
        return winnt_h$constants$0.MEM_EXTENDED_PARAMETER_TYPE_BITS();
    }
    public static @C("int") int SEC_PARTITION_OWNER_HANDLE() {
        return winnt_h$constants$0.SEC_PARTITION_OWNER_HANDLE();
    }
    public static @C("int") int SEC_64K_PAGES() {
        return winnt_h$constants$0.SEC_64K_PAGES();
    }
    public static @C("int") int SEC_FILE() {
        return winnt_h$constants$0.SEC_FILE();
    }
    public static @C("int") int SEC_IMAGE() {
        return winnt_h$constants$0.SEC_IMAGE();
    }
    public static @C("int") int SEC_PROTECTED_IMAGE() {
        return winnt_h$constants$0.SEC_PROTECTED_IMAGE();
    }
    public static @C("int") int SEC_RESERVE() {
        return winnt_h$constants$0.SEC_RESERVE();
    }
    public static @C("int") int SEC_COMMIT() {
        return winnt_h$constants$0.SEC_COMMIT();
    }
    public static @C("int") int SEC_NOCACHE() {
        return winnt_h$constants$0.SEC_NOCACHE();
    }
    public static @C("int") int SEC_WRITECOMBINE() {
        return winnt_h$constants$0.SEC_WRITECOMBINE();
    }
    public static @C("int") int MEM_PRIVATE() {
        return winnt_h$constants$0.MEM_PRIVATE();
    }
    public static @C("int") int MEM_MAPPED() {
        return winnt_h$constants$0.MEM_MAPPED();
    }
    public static @C("int") int MEM_IMAGE() {
        return winnt_h$constants$0.MEM_IMAGE();
    }
    public static @C("int") int WRITE_WATCH_FLAG_RESET() {
        return winnt_h$constants$0.WRITE_WATCH_FLAG_RESET();
    }
    public static @C("int") int ENCLAVE_TYPE_SGX() {
        return winnt_h$constants$0.ENCLAVE_TYPE_SGX();
    }
    public static @C("int") int ENCLAVE_TYPE_SGX2() {
        return winnt_h$constants$0.ENCLAVE_TYPE_SGX2();
    }
    public static @C("int") int ENCLAVE_TYPE_VBS() {
        return winnt_h$constants$0.ENCLAVE_TYPE_VBS();
    }
    public static @C("int") int ENCLAVE_VBS_FLAG_DEBUG() {
        return winnt_h$constants$0.ENCLAVE_VBS_FLAG_DEBUG();
    }
    public static @C("int") int ENCLAVE_TYPE_VBS_BASIC() {
        return winnt_h$constants$0.ENCLAVE_TYPE_VBS_BASIC();
    }
    public static @C("int") int VBS_BASIC_PAGE_MEASURED_DATA() {
        return winnt_h$constants$0.VBS_BASIC_PAGE_MEASURED_DATA();
    }
    public static @C("int") int VBS_BASIC_PAGE_UNMEASURED_DATA() {
        return winnt_h$constants$0.VBS_BASIC_PAGE_UNMEASURED_DATA();
    }
    public static @C("int") int VBS_BASIC_PAGE_ZERO_FILL() {
        return winnt_h$constants$0.VBS_BASIC_PAGE_ZERO_FILL();
    }
    public static @C("int") int VBS_BASIC_PAGE_THREAD_DESCRIPTOR() {
        return winnt_h$constants$0.VBS_BASIC_PAGE_THREAD_DESCRIPTOR();
    }
    public static @C("int") int VBS_BASIC_PAGE_SYSTEM_CALL() {
        return winnt_h$constants$0.VBS_BASIC_PAGE_SYSTEM_CALL();
    }
    public static @C("int") int FILE_SHARE_READ() {
        return winnt_h$constants$0.FILE_SHARE_READ();
    }
    public static @C("int") int FILE_SHARE_WRITE() {
        return winnt_h$constants$0.FILE_SHARE_WRITE();
    }
    public static @C("int") int FILE_SHARE_DELETE() {
        return winnt_h$constants$0.FILE_SHARE_DELETE();
    }
    public static @C("int") int FILE_ATTRIBUTE_READONLY() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_READONLY();
    }
    public static @C("int") int FILE_ATTRIBUTE_HIDDEN() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_HIDDEN();
    }
    public static @C("int") int FILE_ATTRIBUTE_SYSTEM() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_SYSTEM();
    }
    public static @C("int") int FILE_ATTRIBUTE_DIRECTORY() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_DIRECTORY();
    }
    public static @C("int") int FILE_ATTRIBUTE_ARCHIVE() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_ARCHIVE();
    }
    public static @C("int") int FILE_ATTRIBUTE_DEVICE() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_DEVICE();
    }
    public static @C("int") int FILE_ATTRIBUTE_NORMAL() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_NORMAL();
    }
    public static @C("int") int FILE_ATTRIBUTE_TEMPORARY() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_TEMPORARY();
    }
    public static @C("int") int FILE_ATTRIBUTE_SPARSE_FILE() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_SPARSE_FILE();
    }
    public static @C("int") int FILE_ATTRIBUTE_REPARSE_POINT() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_REPARSE_POINT();
    }
    public static @C("int") int FILE_ATTRIBUTE_COMPRESSED() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_COMPRESSED();
    }
    public static @C("int") int FILE_ATTRIBUTE_OFFLINE() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_OFFLINE();
    }
    public static @C("int") int FILE_ATTRIBUTE_NOT_CONTENT_INDEXED() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED();
    }
    public static @C("int") int FILE_ATTRIBUTE_ENCRYPTED() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_ENCRYPTED();
    }
    public static @C("int") int FILE_ATTRIBUTE_INTEGRITY_STREAM() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_INTEGRITY_STREAM();
    }
    public static @C("int") int FILE_ATTRIBUTE_VIRTUAL() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_VIRTUAL();
    }
    public static @C("int") int FILE_ATTRIBUTE_NO_SCRUB_DATA() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_NO_SCRUB_DATA();
    }
    public static @C("int") int FILE_ATTRIBUTE_EA() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_EA();
    }
    public static @C("int") int FILE_ATTRIBUTE_PINNED() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_PINNED();
    }
    public static @C("int") int FILE_ATTRIBUTE_UNPINNED() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_UNPINNED();
    }
    public static @C("int") int FILE_ATTRIBUTE_RECALL_ON_OPEN() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_RECALL_ON_OPEN();
    }
    public static @C("int") int FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS();
    }
    public static @C("int") int TREE_CONNECT_ATTRIBUTE_PRIVACY() {
        return winnt_h$constants$0.TREE_CONNECT_ATTRIBUTE_PRIVACY();
    }
    public static @C("int") int TREE_CONNECT_ATTRIBUTE_INTEGRITY() {
        return winnt_h$constants$0.TREE_CONNECT_ATTRIBUTE_INTEGRITY();
    }
    public static @C("int") int TREE_CONNECT_ATTRIBUTE_GLOBAL() {
        return winnt_h$constants$0.TREE_CONNECT_ATTRIBUTE_GLOBAL();
    }
    public static @C("int") int TREE_CONNECT_ATTRIBUTE_PINNED() {
        return winnt_h$constants$0.TREE_CONNECT_ATTRIBUTE_PINNED();
    }
    public static @C("int") int FILE_ATTRIBUTE_STRICTLY_SEQUENTIAL() {
        return winnt_h$constants$0.FILE_ATTRIBUTE_STRICTLY_SEQUENTIAL();
    }
    public static @C("int") int FILE_NOTIFY_CHANGE_FILE_NAME() {
        return winnt_h$constants$0.FILE_NOTIFY_CHANGE_FILE_NAME();
    }
    public static @C("int") int FILE_NOTIFY_CHANGE_DIR_NAME() {
        return winnt_h$constants$0.FILE_NOTIFY_CHANGE_DIR_NAME();
    }
    public static @C("int") int FILE_NOTIFY_CHANGE_ATTRIBUTES() {
        return winnt_h$constants$0.FILE_NOTIFY_CHANGE_ATTRIBUTES();
    }
    public static @C("int") int FILE_NOTIFY_CHANGE_SIZE() {
        return winnt_h$constants$0.FILE_NOTIFY_CHANGE_SIZE();
    }
    public static @C("int") int FILE_NOTIFY_CHANGE_LAST_WRITE() {
        return winnt_h$constants$0.FILE_NOTIFY_CHANGE_LAST_WRITE();
    }
    public static @C("int") int FILE_NOTIFY_CHANGE_LAST_ACCESS() {
        return winnt_h$constants$0.FILE_NOTIFY_CHANGE_LAST_ACCESS();
    }
    public static @C("int") int FILE_NOTIFY_CHANGE_CREATION() {
        return winnt_h$constants$0.FILE_NOTIFY_CHANGE_CREATION();
    }
    public static @C("int") int FILE_NOTIFY_CHANGE_SECURITY() {
        return winnt_h$constants$0.FILE_NOTIFY_CHANGE_SECURITY();
    }
    public static @C("int") int FILE_ACTION_ADDED() {
        return winnt_h$constants$0.FILE_ACTION_ADDED();
    }
    public static @C("int") int FILE_ACTION_REMOVED() {
        return winnt_h$constants$0.FILE_ACTION_REMOVED();
    }
    public static @C("int") int FILE_ACTION_MODIFIED() {
        return winnt_h$constants$0.FILE_ACTION_MODIFIED();
    }
    public static @C("int") int FILE_ACTION_RENAMED_OLD_NAME() {
        return winnt_h$constants$0.FILE_ACTION_RENAMED_OLD_NAME();
    }
    public static @C("int") int FILE_ACTION_RENAMED_NEW_NAME() {
        return winnt_h$constants$0.FILE_ACTION_RENAMED_NEW_NAME();
    }
    @C("struct _PROCESSOR_NUMBER")public static class _PROCESSOR_NUMBER {

        /* package-private */ _PROCESSOR_NUMBER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._PROCESSOR_NUMBER$struct$LAYOUT();
        }
        public static VarHandle Group$VH() {
            return winnt_h$constants$2._PROCESSOR_NUMBER$Group$VH();
        }
        public static  @C("WORD") short Group$get(@C("struct _PROCESSOR_NUMBER") MemorySegment seg) {
            return (short)winnt_h$constants$2._PROCESSOR_NUMBER$Group$VH().get(seg);
        }
        public static  @C("WORD") short Group$get(@C("struct _PROCESSOR_NUMBER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._PROCESSOR_NUMBER$Group$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Group$set(@C("struct _PROCESSOR_NUMBER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._PROCESSOR_NUMBER$Group$VH().set(seg, x);
        }
        public static void Group$set(@C("struct _PROCESSOR_NUMBER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._PROCESSOR_NUMBER$Group$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Number$VH() {
            return winnt_h$constants$2._PROCESSOR_NUMBER$Number$VH();
        }
        public static  @C("BYTE") byte Number$get(@C("struct _PROCESSOR_NUMBER") MemorySegment seg) {
            return (byte)winnt_h$constants$2._PROCESSOR_NUMBER$Number$VH().get(seg);
        }
        public static  @C("BYTE") byte Number$get(@C("struct _PROCESSOR_NUMBER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$2._PROCESSOR_NUMBER$Number$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Number$set(@C("struct _PROCESSOR_NUMBER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$2._PROCESSOR_NUMBER$Number$VH().set(seg, x);
        }
        public static void Number$set(@C("struct _PROCESSOR_NUMBER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$2._PROCESSOR_NUMBER$Number$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$2._PROCESSOR_NUMBER$Reserved$VH();
        }
        public static  @C("BYTE") byte Reserved$get(@C("struct _PROCESSOR_NUMBER") MemorySegment seg) {
            return (byte)winnt_h$constants$2._PROCESSOR_NUMBER$Reserved$VH().get(seg);
        }
        public static  @C("BYTE") byte Reserved$get(@C("struct _PROCESSOR_NUMBER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$2._PROCESSOR_NUMBER$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _PROCESSOR_NUMBER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$2._PROCESSOR_NUMBER$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _PROCESSOR_NUMBER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$2._PROCESSOR_NUMBER$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESSOR_NUMBER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESSOR_NUMBER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESSOR_NUMBER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESSOR_NUMBER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESSOR_NUMBER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESSOR_NUMBER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESSOR_NUMBER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESSOR_NUMBER")public static class PROCESSOR_NUMBER extends _PROCESSOR_NUMBER {

        /* package-private */ PROCESSOR_NUMBER() {}
    }

    @C("struct _GROUP_AFFINITY")public static class _GROUP_AFFINITY {

        /* package-private */ _GROUP_AFFINITY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._GROUP_AFFINITY$struct$LAYOUT();
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$2._GROUP_AFFINITY$Mask$VH();
        }
        public static  @C("KAFFINITY") long Mask$get(@C("struct _GROUP_AFFINITY") MemorySegment seg) {
            return (long)winnt_h$constants$2._GROUP_AFFINITY$Mask$VH().get(seg);
        }
        public static  @C("KAFFINITY") long Mask$get(@C("struct _GROUP_AFFINITY") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._GROUP_AFFINITY$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _GROUP_AFFINITY") MemorySegment seg, @C("KAFFINITY") long x) {
            winnt_h$constants$2._GROUP_AFFINITY$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _GROUP_AFFINITY") MemorySegment seg, long index, @C("KAFFINITY") long x) {
            winnt_h$constants$2._GROUP_AFFINITY$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Group$VH() {
            return winnt_h$constants$2._GROUP_AFFINITY$Group$VH();
        }
        public static  @C("WORD") short Group$get(@C("struct _GROUP_AFFINITY") MemorySegment seg) {
            return (short)winnt_h$constants$2._GROUP_AFFINITY$Group$VH().get(seg);
        }
        public static  @C("WORD") short Group$get(@C("struct _GROUP_AFFINITY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._GROUP_AFFINITY$Group$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Group$set(@C("struct _GROUP_AFFINITY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._GROUP_AFFINITY$Group$VH().set(seg, x);
        }
        public static void Group$set(@C("struct _GROUP_AFFINITY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._GROUP_AFFINITY$Group$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(10, 6));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _GROUP_AFFINITY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _GROUP_AFFINITY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _GROUP_AFFINITY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _GROUP_AFFINITY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _GROUP_AFFINITY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _GROUP_AFFINITY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _GROUP_AFFINITY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _GROUP_AFFINITY")public static class GROUP_AFFINITY extends _GROUP_AFFINITY {

        /* package-private */ GROUP_AFFINITY() {}
    }

    @C("struct _FLOAT128")public static class _FLOAT128 {

        /* package-private */ _FLOAT128() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._FLOAT128$struct$LAYOUT();
        }
        public static VarHandle LowPart$VH() {
            return winnt_h$constants$2._FLOAT128$LowPart$VH();
        }
        public static  @C("long long") long LowPart$get(@C("struct _FLOAT128") MemorySegment seg) {
            return (long)winnt_h$constants$2._FLOAT128$LowPart$VH().get(seg);
        }
        public static  @C("long long") long LowPart$get(@C("struct _FLOAT128") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._FLOAT128$LowPart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LowPart$set(@C("struct _FLOAT128") MemorySegment seg, @C("long long") long x) {
            winnt_h$constants$2._FLOAT128$LowPart$VH().set(seg, x);
        }
        public static void LowPart$set(@C("struct _FLOAT128") MemorySegment seg, long index, @C("long long") long x) {
            winnt_h$constants$2._FLOAT128$LowPart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HighPart$VH() {
            return winnt_h$constants$2._FLOAT128$HighPart$VH();
        }
        public static  @C("long long") long HighPart$get(@C("struct _FLOAT128") MemorySegment seg) {
            return (long)winnt_h$constants$2._FLOAT128$HighPart$VH().get(seg);
        }
        public static  @C("long long") long HighPart$get(@C("struct _FLOAT128") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._FLOAT128$HighPart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HighPart$set(@C("struct _FLOAT128") MemorySegment seg, @C("long long") long x) {
            winnt_h$constants$2._FLOAT128$HighPart$VH().set(seg, x);
        }
        public static void HighPart$set(@C("struct _FLOAT128") MemorySegment seg, long index, @C("long long") long x) {
            winnt_h$constants$2._FLOAT128$HighPart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FLOAT128") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FLOAT128") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FLOAT128[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FLOAT128[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FLOAT128*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FLOAT128*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FLOAT128") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FLOAT128")public static class FLOAT128 extends _FLOAT128 {

        /* package-private */ FLOAT128() {}
    }

    @C("union _LARGE_INTEGER")public static class _LARGE_INTEGER {

        /* package-private */ _LARGE_INTEGER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._LARGE_INTEGER$union$LAYOUT();
        }
        public static VarHandle LowPart$VH() {
            return winnt_h$constants$2._LARGE_INTEGER$LowPart$VH();
        }
        public static  @C("DWORD") int LowPart$get(@C("union _LARGE_INTEGER") MemorySegment seg) {
            return (int)winnt_h$constants$2._LARGE_INTEGER$LowPart$VH().get(seg);
        }
        public static  @C("DWORD") int LowPart$get(@C("union _LARGE_INTEGER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._LARGE_INTEGER$LowPart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LowPart$set(@C("union _LARGE_INTEGER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._LARGE_INTEGER$LowPart$VH().set(seg, x);
        }
        public static void LowPart$set(@C("union _LARGE_INTEGER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._LARGE_INTEGER$LowPart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HighPart$VH() {
            return winnt_h$constants$2._LARGE_INTEGER$HighPart$VH();
        }
        public static  @C("LONG") int HighPart$get(@C("union _LARGE_INTEGER") MemorySegment seg) {
            return (int)winnt_h$constants$2._LARGE_INTEGER$HighPart$VH().get(seg);
        }
        public static  @C("LONG") int HighPart$get(@C("union _LARGE_INTEGER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._LARGE_INTEGER$HighPart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HighPart$set(@C("union _LARGE_INTEGER") MemorySegment seg, @C("LONG") int x) {
            winnt_h$constants$2._LARGE_INTEGER$HighPart$VH().set(seg, x);
        }
        public static void HighPart$set(@C("union _LARGE_INTEGER") MemorySegment seg, long index, @C("LONG") int x) {
            winnt_h$constants$2._LARGE_INTEGER$HighPart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("struct ")public static class u {

            /* package-private */ u() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$2._LARGE_INTEGER$u$struct$LAYOUT();
            }
            public static VarHandle LowPart$VH() {
                return winnt_h$constants$2._LARGE_INTEGER$u$LowPart$VH();
            }
            public static  @C("DWORD") int LowPart$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$2._LARGE_INTEGER$u$LowPart$VH().get(seg);
            }
            public static  @C("DWORD") int LowPart$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$2._LARGE_INTEGER$u$LowPart$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void LowPart$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$2._LARGE_INTEGER$u$LowPart$VH().set(seg, x);
            }
            public static void LowPart$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$2._LARGE_INTEGER$u$LowPart$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle HighPart$VH() {
                return winnt_h$constants$2._LARGE_INTEGER$u$HighPart$VH();
            }
            public static  @C("LONG") int HighPart$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$2._LARGE_INTEGER$u$HighPart$VH().get(seg);
            }
            public static  @C("LONG") int HighPart$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$2._LARGE_INTEGER$u$HighPart$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void HighPart$set(@C("struct ") MemorySegment seg, @C("LONG") int x) {
                winnt_h$constants$2._LARGE_INTEGER$u$HighPart$VH().set(seg, x);
            }
            public static void HighPart$set(@C("struct ") MemorySegment seg, long index, @C("LONG") int x) {
                winnt_h$constants$2._LARGE_INTEGER$u$HighPart$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment u$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static VarHandle QuadPart$VH() {
            return winnt_h$constants$2._LARGE_INTEGER$QuadPart$VH();
        }
        public static  @C("LONGLONG") long QuadPart$get(@C("union _LARGE_INTEGER") MemorySegment seg) {
            return (long)winnt_h$constants$2._LARGE_INTEGER$QuadPart$VH().get(seg);
        }
        public static  @C("LONGLONG") long QuadPart$get(@C("union _LARGE_INTEGER") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._LARGE_INTEGER$QuadPart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void QuadPart$set(@C("union _LARGE_INTEGER") MemorySegment seg, @C("LONGLONG") long x) {
            winnt_h$constants$2._LARGE_INTEGER$QuadPart$VH().set(seg, x);
        }
        public static void QuadPart$set(@C("union _LARGE_INTEGER") MemorySegment seg, long index, @C("LONGLONG") long x) {
            winnt_h$constants$2._LARGE_INTEGER$QuadPart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union _LARGE_INTEGER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union _LARGE_INTEGER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union _LARGE_INTEGER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union _LARGE_INTEGER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union _LARGE_INTEGER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union _LARGE_INTEGER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union _LARGE_INTEGER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("union _LARGE_INTEGER")public static class LARGE_INTEGER extends _LARGE_INTEGER {

        /* package-private */ LARGE_INTEGER() {}
    }

    @C("union _ULARGE_INTEGER")public static class _ULARGE_INTEGER {

        /* package-private */ _ULARGE_INTEGER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._ULARGE_INTEGER$union$LAYOUT();
        }
        public static VarHandle LowPart$VH() {
            return winnt_h$constants$2._ULARGE_INTEGER$LowPart$VH();
        }
        public static  @C("DWORD") int LowPart$get(@C("union _ULARGE_INTEGER") MemorySegment seg) {
            return (int)winnt_h$constants$2._ULARGE_INTEGER$LowPart$VH().get(seg);
        }
        public static  @C("DWORD") int LowPart$get(@C("union _ULARGE_INTEGER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._ULARGE_INTEGER$LowPart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LowPart$set(@C("union _ULARGE_INTEGER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._ULARGE_INTEGER$LowPart$VH().set(seg, x);
        }
        public static void LowPart$set(@C("union _ULARGE_INTEGER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._ULARGE_INTEGER$LowPart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HighPart$VH() {
            return winnt_h$constants$2._ULARGE_INTEGER$HighPart$VH();
        }
        public static  @C("DWORD") int HighPart$get(@C("union _ULARGE_INTEGER") MemorySegment seg) {
            return (int)winnt_h$constants$2._ULARGE_INTEGER$HighPart$VH().get(seg);
        }
        public static  @C("DWORD") int HighPart$get(@C("union _ULARGE_INTEGER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._ULARGE_INTEGER$HighPart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HighPart$set(@C("union _ULARGE_INTEGER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._ULARGE_INTEGER$HighPart$VH().set(seg, x);
        }
        public static void HighPart$set(@C("union _ULARGE_INTEGER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._ULARGE_INTEGER$HighPart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("struct ")public static class u {

            /* package-private */ u() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$2._ULARGE_INTEGER$u$struct$LAYOUT();
            }
            public static VarHandle LowPart$VH() {
                return winnt_h$constants$2._ULARGE_INTEGER$u$LowPart$VH();
            }
            public static  @C("DWORD") int LowPart$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$2._ULARGE_INTEGER$u$LowPart$VH().get(seg);
            }
            public static  @C("DWORD") int LowPart$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$2._ULARGE_INTEGER$u$LowPart$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void LowPart$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$2._ULARGE_INTEGER$u$LowPart$VH().set(seg, x);
            }
            public static void LowPart$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$2._ULARGE_INTEGER$u$LowPart$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle HighPart$VH() {
                return winnt_h$constants$2._ULARGE_INTEGER$u$HighPart$VH();
            }
            public static  @C("DWORD") int HighPart$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$2._ULARGE_INTEGER$u$HighPart$VH().get(seg);
            }
            public static  @C("DWORD") int HighPart$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$2._ULARGE_INTEGER$u$HighPart$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void HighPart$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$2._ULARGE_INTEGER$u$HighPart$VH().set(seg, x);
            }
            public static void HighPart$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$2._ULARGE_INTEGER$u$HighPart$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment u$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static VarHandle QuadPart$VH() {
            return winnt_h$constants$2._ULARGE_INTEGER$QuadPart$VH();
        }
        public static  @C("ULONGLONG") long QuadPart$get(@C("union _ULARGE_INTEGER") MemorySegment seg) {
            return (long)winnt_h$constants$2._ULARGE_INTEGER$QuadPart$VH().get(seg);
        }
        public static  @C("ULONGLONG") long QuadPart$get(@C("union _ULARGE_INTEGER") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._ULARGE_INTEGER$QuadPart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void QuadPart$set(@C("union _ULARGE_INTEGER") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$2._ULARGE_INTEGER$QuadPart$VH().set(seg, x);
        }
        public static void QuadPart$set(@C("union _ULARGE_INTEGER") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$2._ULARGE_INTEGER$QuadPart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union _ULARGE_INTEGER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union _ULARGE_INTEGER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union _ULARGE_INTEGER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union _ULARGE_INTEGER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union _ULARGE_INTEGER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union _ULARGE_INTEGER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union _ULARGE_INTEGER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("union _ULARGE_INTEGER")public static class ULARGE_INTEGER extends _ULARGE_INTEGER {

        /* package-private */ ULARGE_INTEGER() {}
    }

    @C("struct _LUID")public static class _LUID {

        /* package-private */ _LUID() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._LUID$struct$LAYOUT();
        }
        public static VarHandle LowPart$VH() {
            return winnt_h$constants$2._LUID$LowPart$VH();
        }
        public static  @C("DWORD") int LowPart$get(@C("struct _LUID") MemorySegment seg) {
            return (int)winnt_h$constants$2._LUID$LowPart$VH().get(seg);
        }
        public static  @C("DWORD") int LowPart$get(@C("struct _LUID") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._LUID$LowPart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LowPart$set(@C("struct _LUID") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._LUID$LowPart$VH().set(seg, x);
        }
        public static void LowPart$set(@C("struct _LUID") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._LUID$LowPart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HighPart$VH() {
            return winnt_h$constants$2._LUID$HighPart$VH();
        }
        public static  @C("LONG") int HighPart$get(@C("struct _LUID") MemorySegment seg) {
            return (int)winnt_h$constants$2._LUID$HighPart$VH().get(seg);
        }
        public static  @C("LONG") int HighPart$get(@C("struct _LUID") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._LUID$HighPart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HighPart$set(@C("struct _LUID") MemorySegment seg, @C("LONG") int x) {
            winnt_h$constants$2._LUID$HighPart$VH().set(seg, x);
        }
        public static void HighPart$set(@C("struct _LUID") MemorySegment seg, long index, @C("LONG") int x) {
            winnt_h$constants$2._LUID$HighPart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _LUID") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _LUID") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _LUID[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _LUID[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _LUID*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _LUID*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _LUID") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _LUID")public static class LUID extends _LUID {

        /* package-private */ LUID() {}
    }

    @C("struct _LIST_ENTRY")public static class _LIST_ENTRY {

        /* package-private */ _LIST_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._LIST_ENTRY$struct$LAYOUT();
        }
        public static VarHandle Flink$VH() {
            return winnt_h$constants$2._LIST_ENTRY$Flink$VH();
        }
        public static  @C("struct _LIST_ENTRY*") MemoryAddress Flink$get(@C("struct _LIST_ENTRY") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._LIST_ENTRY$Flink$VH().get(seg);
        }
        public static  @C("struct _LIST_ENTRY*") MemoryAddress Flink$get(@C("struct _LIST_ENTRY") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._LIST_ENTRY$Flink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flink$set(@C("struct _LIST_ENTRY") MemorySegment seg, @C("struct _LIST_ENTRY*") MemoryAddress x) {
            winnt_h$constants$2._LIST_ENTRY$Flink$VH().set(seg, x);
        }
        public static void Flink$set(@C("struct _LIST_ENTRY") MemorySegment seg, long index, @C("struct _LIST_ENTRY*") MemoryAddress x) {
            winnt_h$constants$2._LIST_ENTRY$Flink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Blink$VH() {
            return winnt_h$constants$2._LIST_ENTRY$Blink$VH();
        }
        public static  @C("struct _LIST_ENTRY*") MemoryAddress Blink$get(@C("struct _LIST_ENTRY") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._LIST_ENTRY$Blink$VH().get(seg);
        }
        public static  @C("struct _LIST_ENTRY*") MemoryAddress Blink$get(@C("struct _LIST_ENTRY") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._LIST_ENTRY$Blink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Blink$set(@C("struct _LIST_ENTRY") MemorySegment seg, @C("struct _LIST_ENTRY*") MemoryAddress x) {
            winnt_h$constants$2._LIST_ENTRY$Blink$VH().set(seg, x);
        }
        public static void Blink$set(@C("struct _LIST_ENTRY") MemorySegment seg, long index, @C("struct _LIST_ENTRY*") MemoryAddress x) {
            winnt_h$constants$2._LIST_ENTRY$Blink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _LIST_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _LIST_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _LIST_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _LIST_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _LIST_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _LIST_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _LIST_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _LIST_ENTRY")public static class LIST_ENTRY extends _LIST_ENTRY {

        /* package-private */ LIST_ENTRY() {}
    }

    @C("struct _SINGLE_LIST_ENTRY")public static class _SINGLE_LIST_ENTRY {

        /* package-private */ _SINGLE_LIST_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._SINGLE_LIST_ENTRY$struct$LAYOUT();
        }
        public static VarHandle Next$VH() {
            return winnt_h$constants$2._SINGLE_LIST_ENTRY$Next$VH();
        }
        public static  @C("struct _SINGLE_LIST_ENTRY*") MemoryAddress Next$get(@C("struct _SINGLE_LIST_ENTRY") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._SINGLE_LIST_ENTRY$Next$VH().get(seg);
        }
        public static  @C("struct _SINGLE_LIST_ENTRY*") MemoryAddress Next$get(@C("struct _SINGLE_LIST_ENTRY") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._SINGLE_LIST_ENTRY$Next$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Next$set(@C("struct _SINGLE_LIST_ENTRY") MemorySegment seg, @C("struct _SINGLE_LIST_ENTRY*") MemoryAddress x) {
            winnt_h$constants$2._SINGLE_LIST_ENTRY$Next$VH().set(seg, x);
        }
        public static void Next$set(@C("struct _SINGLE_LIST_ENTRY") MemorySegment seg, long index, @C("struct _SINGLE_LIST_ENTRY*") MemoryAddress x) {
            winnt_h$constants$2._SINGLE_LIST_ENTRY$Next$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SINGLE_LIST_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SINGLE_LIST_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SINGLE_LIST_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SINGLE_LIST_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SINGLE_LIST_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SINGLE_LIST_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SINGLE_LIST_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SINGLE_LIST_ENTRY")public static class SINGLE_LIST_ENTRY extends _SINGLE_LIST_ENTRY {

        /* package-private */ SINGLE_LIST_ENTRY() {}
    }

    @C("struct LIST_ENTRY32")public static class LIST_ENTRY32 {

        /* package-private */ LIST_ENTRY32() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2.LIST_ENTRY32$struct$LAYOUT();
        }
        public static VarHandle Flink$VH() {
            return winnt_h$constants$2.LIST_ENTRY32$Flink$VH();
        }
        public static  @C("DWORD") int Flink$get(@C("struct LIST_ENTRY32") MemorySegment seg) {
            return (int)winnt_h$constants$2.LIST_ENTRY32$Flink$VH().get(seg);
        }
        public static  @C("DWORD") int Flink$get(@C("struct LIST_ENTRY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2.LIST_ENTRY32$Flink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flink$set(@C("struct LIST_ENTRY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2.LIST_ENTRY32$Flink$VH().set(seg, x);
        }
        public static void Flink$set(@C("struct LIST_ENTRY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2.LIST_ENTRY32$Flink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Blink$VH() {
            return winnt_h$constants$2.LIST_ENTRY32$Blink$VH();
        }
        public static  @C("DWORD") int Blink$get(@C("struct LIST_ENTRY32") MemorySegment seg) {
            return (int)winnt_h$constants$2.LIST_ENTRY32$Blink$VH().get(seg);
        }
        public static  @C("DWORD") int Blink$get(@C("struct LIST_ENTRY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2.LIST_ENTRY32$Blink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Blink$set(@C("struct LIST_ENTRY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2.LIST_ENTRY32$Blink$VH().set(seg, x);
        }
        public static void Blink$set(@C("struct LIST_ENTRY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2.LIST_ENTRY32$Blink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct LIST_ENTRY32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct LIST_ENTRY32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct LIST_ENTRY32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct LIST_ENTRY32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct LIST_ENTRY32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct LIST_ENTRY32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct LIST_ENTRY32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct LIST_ENTRY64")public static class LIST_ENTRY64 {

        /* package-private */ LIST_ENTRY64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2.LIST_ENTRY64$struct$LAYOUT();
        }
        public static VarHandle Flink$VH() {
            return winnt_h$constants$2.LIST_ENTRY64$Flink$VH();
        }
        public static  @C("ULONGLONG") long Flink$get(@C("struct LIST_ENTRY64") MemorySegment seg) {
            return (long)winnt_h$constants$2.LIST_ENTRY64$Flink$VH().get(seg);
        }
        public static  @C("ULONGLONG") long Flink$get(@C("struct LIST_ENTRY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2.LIST_ENTRY64$Flink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flink$set(@C("struct LIST_ENTRY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$2.LIST_ENTRY64$Flink$VH().set(seg, x);
        }
        public static void Flink$set(@C("struct LIST_ENTRY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$2.LIST_ENTRY64$Flink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Blink$VH() {
            return winnt_h$constants$2.LIST_ENTRY64$Blink$VH();
        }
        public static  @C("ULONGLONG") long Blink$get(@C("struct LIST_ENTRY64") MemorySegment seg) {
            return (long)winnt_h$constants$2.LIST_ENTRY64$Blink$VH().get(seg);
        }
        public static  @C("ULONGLONG") long Blink$get(@C("struct LIST_ENTRY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2.LIST_ENTRY64$Blink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Blink$set(@C("struct LIST_ENTRY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$2.LIST_ENTRY64$Blink$VH().set(seg, x);
        }
        public static void Blink$set(@C("struct LIST_ENTRY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$2.LIST_ENTRY64$Blink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct LIST_ENTRY64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct LIST_ENTRY64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct LIST_ENTRY64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct LIST_ENTRY64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct LIST_ENTRY64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct LIST_ENTRY64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct LIST_ENTRY64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _OBJECTID")public static class _OBJECTID {

        /* package-private */ _OBJECTID() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._OBJECTID$struct$LAYOUT();
        }
        public static MemorySegment Lineage$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle Uniquifier$VH() {
            return winnt_h$constants$2._OBJECTID$Uniquifier$VH();
        }
        public static  @C("DWORD") int Uniquifier$get(@C("struct _OBJECTID") MemorySegment seg) {
            return (int)winnt_h$constants$2._OBJECTID$Uniquifier$VH().get(seg);
        }
        public static  @C("DWORD") int Uniquifier$get(@C("struct _OBJECTID") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._OBJECTID$Uniquifier$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Uniquifier$set(@C("struct _OBJECTID") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._OBJECTID$Uniquifier$VH().set(seg, x);
        }
        public static void Uniquifier$set(@C("struct _OBJECTID") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._OBJECTID$Uniquifier$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _OBJECTID") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _OBJECTID") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _OBJECTID[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _OBJECTID[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _OBJECTID*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _OBJECTID*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _OBJECTID") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _OBJECTID")public static class OBJECTID extends _OBJECTID {

        /* package-private */ OBJECTID() {}
    }

    @C("struct _M128A")public static class _M128A {

        /* package-private */ _M128A() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._M128A$struct$LAYOUT();
        }
        public static VarHandle Low$VH() {
            return winnt_h$constants$2._M128A$Low$VH();
        }
        public static  @C("ULONGLONG") long Low$get(@C("struct _M128A") MemorySegment seg) {
            return (long)winnt_h$constants$2._M128A$Low$VH().get(seg);
        }
        public static  @C("ULONGLONG") long Low$get(@C("struct _M128A") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._M128A$Low$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Low$set(@C("struct _M128A") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$2._M128A$Low$VH().set(seg, x);
        }
        public static void Low$set(@C("struct _M128A") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$2._M128A$Low$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle High$VH() {
            return winnt_h$constants$2._M128A$High$VH();
        }
        public static  @C("LONGLONG") long High$get(@C("struct _M128A") MemorySegment seg) {
            return (long)winnt_h$constants$2._M128A$High$VH().get(seg);
        }
        public static  @C("LONGLONG") long High$get(@C("struct _M128A") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._M128A$High$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void High$set(@C("struct _M128A") MemorySegment seg, @C("LONGLONG") long x) {
            winnt_h$constants$2._M128A$High$VH().set(seg, x);
        }
        public static void High$set(@C("struct _M128A") MemorySegment seg, long index, @C("LONGLONG") long x) {
            winnt_h$constants$2._M128A$High$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _M128A") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _M128A") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _M128A[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _M128A[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _M128A*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _M128A*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _M128A") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _M128A")public static class M128A extends _M128A {

        /* package-private */ M128A() {}
    }

    @C("struct _XSAVE_FORMAT")public static class _XSAVE_FORMAT {

        /* package-private */ _XSAVE_FORMAT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._XSAVE_FORMAT$struct$LAYOUT();
        }
        public static VarHandle ControlWord$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$ControlWord$VH();
        }
        public static  @C("WORD") short ControlWord$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$ControlWord$VH().get(seg);
        }
        public static  @C("WORD") short ControlWord$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$ControlWord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ControlWord$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$ControlWord$VH().set(seg, x);
        }
        public static void ControlWord$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$ControlWord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StatusWord$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$StatusWord$VH();
        }
        public static  @C("WORD") short StatusWord$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$StatusWord$VH().get(seg);
        }
        public static  @C("WORD") short StatusWord$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$StatusWord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StatusWord$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$StatusWord$VH().set(seg, x);
        }
        public static void StatusWord$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$StatusWord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TagWord$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$TagWord$VH();
        }
        public static  @C("BYTE") byte TagWord$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (byte)winnt_h$constants$2._XSAVE_FORMAT$TagWord$VH().get(seg);
        }
        public static  @C("BYTE") byte TagWord$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$2._XSAVE_FORMAT$TagWord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TagWord$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$2._XSAVE_FORMAT$TagWord$VH().set(seg, x);
        }
        public static void TagWord$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$2._XSAVE_FORMAT$TagWord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved1$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$Reserved1$VH();
        }
        public static  @C("BYTE") byte Reserved1$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (byte)winnt_h$constants$2._XSAVE_FORMAT$Reserved1$VH().get(seg);
        }
        public static  @C("BYTE") byte Reserved1$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$2._XSAVE_FORMAT$Reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved1$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$2._XSAVE_FORMAT$Reserved1$VH().set(seg, x);
        }
        public static void Reserved1$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$2._XSAVE_FORMAT$Reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ErrorOpcode$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$ErrorOpcode$VH();
        }
        public static  @C("WORD") short ErrorOpcode$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$ErrorOpcode$VH().get(seg);
        }
        public static  @C("WORD") short ErrorOpcode$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$ErrorOpcode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ErrorOpcode$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$ErrorOpcode$VH().set(seg, x);
        }
        public static void ErrorOpcode$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$ErrorOpcode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ErrorOffset$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$ErrorOffset$VH();
        }
        public static  @C("DWORD") int ErrorOffset$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (int)winnt_h$constants$2._XSAVE_FORMAT$ErrorOffset$VH().get(seg);
        }
        public static  @C("DWORD") int ErrorOffset$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._XSAVE_FORMAT$ErrorOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ErrorOffset$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._XSAVE_FORMAT$ErrorOffset$VH().set(seg, x);
        }
        public static void ErrorOffset$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._XSAVE_FORMAT$ErrorOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ErrorSelector$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$ErrorSelector$VH();
        }
        public static  @C("WORD") short ErrorSelector$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$ErrorSelector$VH().get(seg);
        }
        public static  @C("WORD") short ErrorSelector$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$ErrorSelector$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ErrorSelector$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$ErrorSelector$VH().set(seg, x);
        }
        public static void ErrorSelector$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$ErrorSelector$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved2$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$Reserved2$VH();
        }
        public static  @C("WORD") short Reserved2$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$Reserved2$VH().get(seg);
        }
        public static  @C("WORD") short Reserved2$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$Reserved2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved2$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$Reserved2$VH().set(seg, x);
        }
        public static void Reserved2$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$Reserved2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DataOffset$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$DataOffset$VH();
        }
        public static  @C("DWORD") int DataOffset$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (int)winnt_h$constants$2._XSAVE_FORMAT$DataOffset$VH().get(seg);
        }
        public static  @C("DWORD") int DataOffset$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._XSAVE_FORMAT$DataOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DataOffset$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._XSAVE_FORMAT$DataOffset$VH().set(seg, x);
        }
        public static void DataOffset$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._XSAVE_FORMAT$DataOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DataSelector$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$DataSelector$VH();
        }
        public static  @C("WORD") short DataSelector$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$DataSelector$VH().get(seg);
        }
        public static  @C("WORD") short DataSelector$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$DataSelector$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DataSelector$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$DataSelector$VH().set(seg, x);
        }
        public static void DataSelector$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$DataSelector$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved3$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$Reserved3$VH();
        }
        public static  @C("WORD") short Reserved3$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$Reserved3$VH().get(seg);
        }
        public static  @C("WORD") short Reserved3$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._XSAVE_FORMAT$Reserved3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved3$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$Reserved3$VH().set(seg, x);
        }
        public static void Reserved3$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._XSAVE_FORMAT$Reserved3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MxCsr$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$MxCsr$VH();
        }
        public static  @C("DWORD") int MxCsr$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (int)winnt_h$constants$2._XSAVE_FORMAT$MxCsr$VH().get(seg);
        }
        public static  @C("DWORD") int MxCsr$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._XSAVE_FORMAT$MxCsr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MxCsr$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._XSAVE_FORMAT$MxCsr$VH().set(seg, x);
        }
        public static void MxCsr$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._XSAVE_FORMAT$MxCsr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MxCsr_Mask$VH() {
            return winnt_h$constants$2._XSAVE_FORMAT$MxCsr_Mask$VH();
        }
        public static  @C("DWORD") int MxCsr_Mask$get(@C("struct _XSAVE_FORMAT") MemorySegment seg) {
            return (int)winnt_h$constants$2._XSAVE_FORMAT$MxCsr_Mask$VH().get(seg);
        }
        public static  @C("DWORD") int MxCsr_Mask$get(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._XSAVE_FORMAT$MxCsr_Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MxCsr_Mask$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._XSAVE_FORMAT$MxCsr_Mask$VH().set(seg, x);
        }
        public static void MxCsr_Mask$set(@C("struct _XSAVE_FORMAT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._XSAVE_FORMAT$MxCsr_Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FloatRegisters$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 128));
        }
        public static MemorySegment XmmRegisters$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(160, 256));
        }
        public static MemorySegment Reserved4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(416, 96));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _XSAVE_FORMAT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _XSAVE_FORMAT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _XSAVE_FORMAT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _XSAVE_FORMAT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _XSAVE_FORMAT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _XSAVE_FORMAT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _XSAVE_FORMAT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _XSAVE_FORMAT")public static class XSAVE_FORMAT extends _XSAVE_FORMAT {

        /* package-private */ XSAVE_FORMAT() {}
    }

    @C("struct _XSAVE_CET_U_FORMAT")public static class _XSAVE_CET_U_FORMAT {

        /* package-private */ _XSAVE_CET_U_FORMAT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._XSAVE_CET_U_FORMAT$struct$LAYOUT();
        }
        public static VarHandle Ia32CetUMsr$VH() {
            return winnt_h$constants$2._XSAVE_CET_U_FORMAT$Ia32CetUMsr$VH();
        }
        public static  @C("DWORD64") long Ia32CetUMsr$get(@C("struct _XSAVE_CET_U_FORMAT") MemorySegment seg) {
            return (long)winnt_h$constants$2._XSAVE_CET_U_FORMAT$Ia32CetUMsr$VH().get(seg);
        }
        public static  @C("DWORD64") long Ia32CetUMsr$get(@C("struct _XSAVE_CET_U_FORMAT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._XSAVE_CET_U_FORMAT$Ia32CetUMsr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Ia32CetUMsr$set(@C("struct _XSAVE_CET_U_FORMAT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._XSAVE_CET_U_FORMAT$Ia32CetUMsr$VH().set(seg, x);
        }
        public static void Ia32CetUMsr$set(@C("struct _XSAVE_CET_U_FORMAT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._XSAVE_CET_U_FORMAT$Ia32CetUMsr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Ia32Pl3SspMsr$VH() {
            return winnt_h$constants$2._XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$VH();
        }
        public static  @C("DWORD64") long Ia32Pl3SspMsr$get(@C("struct _XSAVE_CET_U_FORMAT") MemorySegment seg) {
            return (long)winnt_h$constants$2._XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$VH().get(seg);
        }
        public static  @C("DWORD64") long Ia32Pl3SspMsr$get(@C("struct _XSAVE_CET_U_FORMAT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Ia32Pl3SspMsr$set(@C("struct _XSAVE_CET_U_FORMAT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$VH().set(seg, x);
        }
        public static void Ia32Pl3SspMsr$set(@C("struct _XSAVE_CET_U_FORMAT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _XSAVE_CET_U_FORMAT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _XSAVE_CET_U_FORMAT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _XSAVE_CET_U_FORMAT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _XSAVE_CET_U_FORMAT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _XSAVE_CET_U_FORMAT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _XSAVE_CET_U_FORMAT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _XSAVE_CET_U_FORMAT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _XSAVE_CET_U_FORMAT")public static class XSAVE_CET_U_FORMAT extends _XSAVE_CET_U_FORMAT {

        /* package-private */ XSAVE_CET_U_FORMAT() {}
    }

    @C("struct _XSAVE_AREA_HEADER")public static class _XSAVE_AREA_HEADER {

        /* package-private */ _XSAVE_AREA_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._XSAVE_AREA_HEADER$struct$LAYOUT();
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$2._XSAVE_AREA_HEADER$Mask$VH();
        }
        public static  @C("DWORD64") long Mask$get(@C("struct _XSAVE_AREA_HEADER") MemorySegment seg) {
            return (long)winnt_h$constants$2._XSAVE_AREA_HEADER$Mask$VH().get(seg);
        }
        public static  @C("DWORD64") long Mask$get(@C("struct _XSAVE_AREA_HEADER") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._XSAVE_AREA_HEADER$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _XSAVE_AREA_HEADER") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._XSAVE_AREA_HEADER$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _XSAVE_AREA_HEADER") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._XSAVE_AREA_HEADER$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CompactionMask$VH() {
            return winnt_h$constants$2._XSAVE_AREA_HEADER$CompactionMask$VH();
        }
        public static  @C("DWORD64") long CompactionMask$get(@C("struct _XSAVE_AREA_HEADER") MemorySegment seg) {
            return (long)winnt_h$constants$2._XSAVE_AREA_HEADER$CompactionMask$VH().get(seg);
        }
        public static  @C("DWORD64") long CompactionMask$get(@C("struct _XSAVE_AREA_HEADER") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._XSAVE_AREA_HEADER$CompactionMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CompactionMask$set(@C("struct _XSAVE_AREA_HEADER") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._XSAVE_AREA_HEADER$CompactionMask$VH().set(seg, x);
        }
        public static void CompactionMask$set(@C("struct _XSAVE_AREA_HEADER") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._XSAVE_AREA_HEADER$CompactionMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 48));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _XSAVE_AREA_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _XSAVE_AREA_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _XSAVE_AREA_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _XSAVE_AREA_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _XSAVE_AREA_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _XSAVE_AREA_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _XSAVE_AREA_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _XSAVE_AREA_HEADER")public static class XSAVE_AREA_HEADER extends _XSAVE_AREA_HEADER {

        /* package-private */ XSAVE_AREA_HEADER() {}
    }

    @C("struct _XSAVE_AREA")public static class _XSAVE_AREA {

        /* package-private */ _XSAVE_AREA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._XSAVE_AREA$struct$LAYOUT();
        }
        public static MemorySegment LegacyState$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 512));
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(512, 64));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _XSAVE_AREA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _XSAVE_AREA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _XSAVE_AREA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _XSAVE_AREA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _XSAVE_AREA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _XSAVE_AREA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _XSAVE_AREA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _XSAVE_AREA")public static class XSAVE_AREA extends _XSAVE_AREA {

        /* package-private */ XSAVE_AREA() {}
    }

    @C("struct _XSTATE_CONTEXT")public static class _XSTATE_CONTEXT {

        /* package-private */ _XSTATE_CONTEXT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._XSTATE_CONTEXT$struct$LAYOUT();
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$2._XSTATE_CONTEXT$Mask$VH();
        }
        public static  @C("DWORD64") long Mask$get(@C("struct _XSTATE_CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._XSTATE_CONTEXT$Mask$VH().get(seg);
        }
        public static  @C("DWORD64") long Mask$get(@C("struct _XSTATE_CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._XSTATE_CONTEXT$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _XSTATE_CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._XSTATE_CONTEXT$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _XSTATE_CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._XSTATE_CONTEXT$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$2._XSTATE_CONTEXT$Length$VH();
        }
        public static  @C("DWORD") int Length$get(@C("struct _XSTATE_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$2._XSTATE_CONTEXT$Length$VH().get(seg);
        }
        public static  @C("DWORD") int Length$get(@C("struct _XSTATE_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._XSTATE_CONTEXT$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _XSTATE_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._XSTATE_CONTEXT$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _XSTATE_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._XSTATE_CONTEXT$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved1$VH() {
            return winnt_h$constants$2._XSTATE_CONTEXT$Reserved1$VH();
        }
        public static  @C("DWORD") int Reserved1$get(@C("struct _XSTATE_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$2._XSTATE_CONTEXT$Reserved1$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved1$get(@C("struct _XSTATE_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._XSTATE_CONTEXT$Reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved1$set(@C("struct _XSTATE_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._XSTATE_CONTEXT$Reserved1$VH().set(seg, x);
        }
        public static void Reserved1$set(@C("struct _XSTATE_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._XSTATE_CONTEXT$Reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Area$VH() {
            return winnt_h$constants$2._XSTATE_CONTEXT$Area$VH();
        }
        public static  @C("PXSAVE_AREA") MemoryAddress Area$get(@C("struct _XSTATE_CONTEXT") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._XSTATE_CONTEXT$Area$VH().get(seg);
        }
        public static  @C("PXSAVE_AREA") MemoryAddress Area$get(@C("struct _XSTATE_CONTEXT") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._XSTATE_CONTEXT$Area$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Area$set(@C("struct _XSTATE_CONTEXT") MemorySegment seg, @C("PXSAVE_AREA") MemoryAddress x) {
            winnt_h$constants$2._XSTATE_CONTEXT$Area$VH().set(seg, x);
        }
        public static void Area$set(@C("struct _XSTATE_CONTEXT") MemorySegment seg, long index, @C("PXSAVE_AREA") MemoryAddress x) {
            winnt_h$constants$2._XSTATE_CONTEXT$Area$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Buffer$VH() {
            return winnt_h$constants$2._XSTATE_CONTEXT$Buffer$VH();
        }
        public static  @C("PVOID") MemoryAddress Buffer$get(@C("struct _XSTATE_CONTEXT") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._XSTATE_CONTEXT$Buffer$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress Buffer$get(@C("struct _XSTATE_CONTEXT") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._XSTATE_CONTEXT$Buffer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Buffer$set(@C("struct _XSTATE_CONTEXT") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$2._XSTATE_CONTEXT$Buffer$VH().set(seg, x);
        }
        public static void Buffer$set(@C("struct _XSTATE_CONTEXT") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$2._XSTATE_CONTEXT$Buffer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _XSTATE_CONTEXT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _XSTATE_CONTEXT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _XSTATE_CONTEXT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _XSTATE_CONTEXT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _XSTATE_CONTEXT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _XSTATE_CONTEXT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _XSTATE_CONTEXT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _XSTATE_CONTEXT")public static class XSTATE_CONTEXT extends _XSTATE_CONTEXT {

        /* package-private */ XSTATE_CONTEXT() {}
    }

    @C("struct _SCOPE_TABLE_AMD64")public static class _SCOPE_TABLE_AMD64 {

        /* package-private */ _SCOPE_TABLE_AMD64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._SCOPE_TABLE_AMD64$struct$LAYOUT();
        }
        public static VarHandle Count$VH() {
            return winnt_h$constants$2._SCOPE_TABLE_AMD64$Count$VH();
        }
        public static  @C("DWORD") int Count$get(@C("struct _SCOPE_TABLE_AMD64") MemorySegment seg) {
            return (int)winnt_h$constants$2._SCOPE_TABLE_AMD64$Count$VH().get(seg);
        }
        public static  @C("DWORD") int Count$get(@C("struct _SCOPE_TABLE_AMD64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._SCOPE_TABLE_AMD64$Count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Count$set(@C("struct _SCOPE_TABLE_AMD64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._SCOPE_TABLE_AMD64$Count$VH().set(seg, x);
        }
        public static void Count$set(@C("struct _SCOPE_TABLE_AMD64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._SCOPE_TABLE_AMD64$Count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ScopeRecord$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SCOPE_TABLE_AMD64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SCOPE_TABLE_AMD64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SCOPE_TABLE_AMD64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SCOPE_TABLE_AMD64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SCOPE_TABLE_AMD64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SCOPE_TABLE_AMD64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SCOPE_TABLE_AMD64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SCOPE_TABLE_AMD64")public static class SCOPE_TABLE_AMD64 extends _SCOPE_TABLE_AMD64 {

        /* package-private */ SCOPE_TABLE_AMD64() {}
    }

    @C("struct _XSAVE_FORMAT")public static class XMM_SAVE_AREA32 extends _XSAVE_FORMAT {

        /* package-private */ XMM_SAVE_AREA32() {}
    }

    @C("struct _CONTEXT")public static class _CONTEXT {

        /* package-private */ _CONTEXT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._CONTEXT$struct$LAYOUT();
        }
        public static VarHandle P1Home$VH() {
            return winnt_h$constants$2._CONTEXT$P1Home$VH();
        }
        public static  @C("DWORD64") long P1Home$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$P1Home$VH().get(seg);
        }
        public static  @C("DWORD64") long P1Home$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$P1Home$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void P1Home$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$P1Home$VH().set(seg, x);
        }
        public static void P1Home$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$P1Home$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle P2Home$VH() {
            return winnt_h$constants$2._CONTEXT$P2Home$VH();
        }
        public static  @C("DWORD64") long P2Home$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$P2Home$VH().get(seg);
        }
        public static  @C("DWORD64") long P2Home$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$P2Home$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void P2Home$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$P2Home$VH().set(seg, x);
        }
        public static void P2Home$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$P2Home$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle P3Home$VH() {
            return winnt_h$constants$2._CONTEXT$P3Home$VH();
        }
        public static  @C("DWORD64") long P3Home$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$P3Home$VH().get(seg);
        }
        public static  @C("DWORD64") long P3Home$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$P3Home$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void P3Home$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$P3Home$VH().set(seg, x);
        }
        public static void P3Home$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$P3Home$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle P4Home$VH() {
            return winnt_h$constants$2._CONTEXT$P4Home$VH();
        }
        public static  @C("DWORD64") long P4Home$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$P4Home$VH().get(seg);
        }
        public static  @C("DWORD64") long P4Home$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$P4Home$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void P4Home$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$P4Home$VH().set(seg, x);
        }
        public static void P4Home$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$P4Home$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle P5Home$VH() {
            return winnt_h$constants$2._CONTEXT$P5Home$VH();
        }
        public static  @C("DWORD64") long P5Home$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$P5Home$VH().get(seg);
        }
        public static  @C("DWORD64") long P5Home$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$P5Home$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void P5Home$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$P5Home$VH().set(seg, x);
        }
        public static void P5Home$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$P5Home$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle P6Home$VH() {
            return winnt_h$constants$2._CONTEXT$P6Home$VH();
        }
        public static  @C("DWORD64") long P6Home$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$P6Home$VH().get(seg);
        }
        public static  @C("DWORD64") long P6Home$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$P6Home$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void P6Home$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$P6Home$VH().set(seg, x);
        }
        public static void P6Home$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$P6Home$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ContextFlags$VH() {
            return winnt_h$constants$2._CONTEXT$ContextFlags$VH();
        }
        public static  @C("DWORD") int ContextFlags$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$2._CONTEXT$ContextFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ContextFlags$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._CONTEXT$ContextFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ContextFlags$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._CONTEXT$ContextFlags$VH().set(seg, x);
        }
        public static void ContextFlags$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._CONTEXT$ContextFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MxCsr$VH() {
            return winnt_h$constants$2._CONTEXT$MxCsr$VH();
        }
        public static  @C("DWORD") int MxCsr$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$2._CONTEXT$MxCsr$VH().get(seg);
        }
        public static  @C("DWORD") int MxCsr$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._CONTEXT$MxCsr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MxCsr$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._CONTEXT$MxCsr$VH().set(seg, x);
        }
        public static void MxCsr$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._CONTEXT$MxCsr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SegCs$VH() {
            return winnt_h$constants$2._CONTEXT$SegCs$VH();
        }
        public static  @C("WORD") short SegCs$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (short)winnt_h$constants$2._CONTEXT$SegCs$VH().get(seg);
        }
        public static  @C("WORD") short SegCs$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._CONTEXT$SegCs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SegCs$set(@C("struct _CONTEXT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._CONTEXT$SegCs$VH().set(seg, x);
        }
        public static void SegCs$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._CONTEXT$SegCs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SegDs$VH() {
            return winnt_h$constants$2._CONTEXT$SegDs$VH();
        }
        public static  @C("WORD") short SegDs$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (short)winnt_h$constants$2._CONTEXT$SegDs$VH().get(seg);
        }
        public static  @C("WORD") short SegDs$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._CONTEXT$SegDs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SegDs$set(@C("struct _CONTEXT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._CONTEXT$SegDs$VH().set(seg, x);
        }
        public static void SegDs$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._CONTEXT$SegDs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SegEs$VH() {
            return winnt_h$constants$2._CONTEXT$SegEs$VH();
        }
        public static  @C("WORD") short SegEs$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (short)winnt_h$constants$2._CONTEXT$SegEs$VH().get(seg);
        }
        public static  @C("WORD") short SegEs$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._CONTEXT$SegEs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SegEs$set(@C("struct _CONTEXT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._CONTEXT$SegEs$VH().set(seg, x);
        }
        public static void SegEs$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._CONTEXT$SegEs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SegFs$VH() {
            return winnt_h$constants$2._CONTEXT$SegFs$VH();
        }
        public static  @C("WORD") short SegFs$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (short)winnt_h$constants$2._CONTEXT$SegFs$VH().get(seg);
        }
        public static  @C("WORD") short SegFs$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._CONTEXT$SegFs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SegFs$set(@C("struct _CONTEXT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._CONTEXT$SegFs$VH().set(seg, x);
        }
        public static void SegFs$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._CONTEXT$SegFs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SegGs$VH() {
            return winnt_h$constants$2._CONTEXT$SegGs$VH();
        }
        public static  @C("WORD") short SegGs$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (short)winnt_h$constants$2._CONTEXT$SegGs$VH().get(seg);
        }
        public static  @C("WORD") short SegGs$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._CONTEXT$SegGs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SegGs$set(@C("struct _CONTEXT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._CONTEXT$SegGs$VH().set(seg, x);
        }
        public static void SegGs$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._CONTEXT$SegGs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SegSs$VH() {
            return winnt_h$constants$2._CONTEXT$SegSs$VH();
        }
        public static  @C("WORD") short SegSs$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (short)winnt_h$constants$2._CONTEXT$SegSs$VH().get(seg);
        }
        public static  @C("WORD") short SegSs$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$2._CONTEXT$SegSs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SegSs$set(@C("struct _CONTEXT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$2._CONTEXT$SegSs$VH().set(seg, x);
        }
        public static void SegSs$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$2._CONTEXT$SegSs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EFlags$VH() {
            return winnt_h$constants$2._CONTEXT$EFlags$VH();
        }
        public static  @C("DWORD") int EFlags$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$2._CONTEXT$EFlags$VH().get(seg);
        }
        public static  @C("DWORD") int EFlags$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._CONTEXT$EFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EFlags$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._CONTEXT$EFlags$VH().set(seg, x);
        }
        public static void EFlags$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._CONTEXT$EFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dr0$VH() {
            return winnt_h$constants$2._CONTEXT$Dr0$VH();
        }
        public static  @C("DWORD64") long Dr0$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Dr0$VH().get(seg);
        }
        public static  @C("DWORD64") long Dr0$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Dr0$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dr0$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Dr0$VH().set(seg, x);
        }
        public static void Dr0$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Dr0$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dr1$VH() {
            return winnt_h$constants$2._CONTEXT$Dr1$VH();
        }
        public static  @C("DWORD64") long Dr1$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Dr1$VH().get(seg);
        }
        public static  @C("DWORD64") long Dr1$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Dr1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dr1$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Dr1$VH().set(seg, x);
        }
        public static void Dr1$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Dr1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dr2$VH() {
            return winnt_h$constants$2._CONTEXT$Dr2$VH();
        }
        public static  @C("DWORD64") long Dr2$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Dr2$VH().get(seg);
        }
        public static  @C("DWORD64") long Dr2$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Dr2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dr2$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Dr2$VH().set(seg, x);
        }
        public static void Dr2$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Dr2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dr3$VH() {
            return winnt_h$constants$2._CONTEXT$Dr3$VH();
        }
        public static  @C("DWORD64") long Dr3$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Dr3$VH().get(seg);
        }
        public static  @C("DWORD64") long Dr3$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Dr3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dr3$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Dr3$VH().set(seg, x);
        }
        public static void Dr3$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Dr3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dr6$VH() {
            return winnt_h$constants$2._CONTEXT$Dr6$VH();
        }
        public static  @C("DWORD64") long Dr6$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Dr6$VH().get(seg);
        }
        public static  @C("DWORD64") long Dr6$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Dr6$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dr6$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Dr6$VH().set(seg, x);
        }
        public static void Dr6$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Dr6$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dr7$VH() {
            return winnt_h$constants$2._CONTEXT$Dr7$VH();
        }
        public static  @C("DWORD64") long Dr7$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Dr7$VH().get(seg);
        }
        public static  @C("DWORD64") long Dr7$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Dr7$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dr7$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Dr7$VH().set(seg, x);
        }
        public static void Dr7$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Dr7$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rax$VH() {
            return winnt_h$constants$2._CONTEXT$Rax$VH();
        }
        public static  @C("DWORD64") long Rax$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Rax$VH().get(seg);
        }
        public static  @C("DWORD64") long Rax$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Rax$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rax$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rax$VH().set(seg, x);
        }
        public static void Rax$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rax$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rcx$VH() {
            return winnt_h$constants$2._CONTEXT$Rcx$VH();
        }
        public static  @C("DWORD64") long Rcx$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Rcx$VH().get(seg);
        }
        public static  @C("DWORD64") long Rcx$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Rcx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rcx$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rcx$VH().set(seg, x);
        }
        public static void Rcx$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rcx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rdx$VH() {
            return winnt_h$constants$2._CONTEXT$Rdx$VH();
        }
        public static  @C("DWORD64") long Rdx$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Rdx$VH().get(seg);
        }
        public static  @C("DWORD64") long Rdx$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Rdx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rdx$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rdx$VH().set(seg, x);
        }
        public static void Rdx$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rdx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rbx$VH() {
            return winnt_h$constants$2._CONTEXT$Rbx$VH();
        }
        public static  @C("DWORD64") long Rbx$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Rbx$VH().get(seg);
        }
        public static  @C("DWORD64") long Rbx$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Rbx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rbx$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rbx$VH().set(seg, x);
        }
        public static void Rbx$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rbx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rsp$VH() {
            return winnt_h$constants$2._CONTEXT$Rsp$VH();
        }
        public static  @C("DWORD64") long Rsp$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Rsp$VH().get(seg);
        }
        public static  @C("DWORD64") long Rsp$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Rsp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rsp$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rsp$VH().set(seg, x);
        }
        public static void Rsp$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rsp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rbp$VH() {
            return winnt_h$constants$2._CONTEXT$Rbp$VH();
        }
        public static  @C("DWORD64") long Rbp$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Rbp$VH().get(seg);
        }
        public static  @C("DWORD64") long Rbp$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Rbp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rbp$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rbp$VH().set(seg, x);
        }
        public static void Rbp$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rbp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rsi$VH() {
            return winnt_h$constants$2._CONTEXT$Rsi$VH();
        }
        public static  @C("DWORD64") long Rsi$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Rsi$VH().get(seg);
        }
        public static  @C("DWORD64") long Rsi$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Rsi$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rsi$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rsi$VH().set(seg, x);
        }
        public static void Rsi$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rsi$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rdi$VH() {
            return winnt_h$constants$2._CONTEXT$Rdi$VH();
        }
        public static  @C("DWORD64") long Rdi$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Rdi$VH().get(seg);
        }
        public static  @C("DWORD64") long Rdi$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Rdi$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rdi$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rdi$VH().set(seg, x);
        }
        public static void Rdi$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rdi$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R8$VH() {
            return winnt_h$constants$2._CONTEXT$R8$VH();
        }
        public static  @C("DWORD64") long R8$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$R8$VH().get(seg);
        }
        public static  @C("DWORD64") long R8$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$R8$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R8$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R8$VH().set(seg, x);
        }
        public static void R8$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R8$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R9$VH() {
            return winnt_h$constants$2._CONTEXT$R9$VH();
        }
        public static  @C("DWORD64") long R9$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$R9$VH().get(seg);
        }
        public static  @C("DWORD64") long R9$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$R9$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R9$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R9$VH().set(seg, x);
        }
        public static void R9$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R9$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R10$VH() {
            return winnt_h$constants$2._CONTEXT$R10$VH();
        }
        public static  @C("DWORD64") long R10$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$R10$VH().get(seg);
        }
        public static  @C("DWORD64") long R10$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$R10$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R10$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R10$VH().set(seg, x);
        }
        public static void R10$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R10$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R11$VH() {
            return winnt_h$constants$2._CONTEXT$R11$VH();
        }
        public static  @C("DWORD64") long R11$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$R11$VH().get(seg);
        }
        public static  @C("DWORD64") long R11$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$R11$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R11$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R11$VH().set(seg, x);
        }
        public static void R11$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R11$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R12$VH() {
            return winnt_h$constants$2._CONTEXT$R12$VH();
        }
        public static  @C("DWORD64") long R12$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$R12$VH().get(seg);
        }
        public static  @C("DWORD64") long R12$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$R12$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R12$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R12$VH().set(seg, x);
        }
        public static void R12$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R12$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R13$VH() {
            return winnt_h$constants$2._CONTEXT$R13$VH();
        }
        public static  @C("DWORD64") long R13$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$R13$VH().get(seg);
        }
        public static  @C("DWORD64") long R13$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$R13$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R13$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R13$VH().set(seg, x);
        }
        public static void R13$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R13$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R14$VH() {
            return winnt_h$constants$2._CONTEXT$R14$VH();
        }
        public static  @C("DWORD64") long R14$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$R14$VH().get(seg);
        }
        public static  @C("DWORD64") long R14$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$R14$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R14$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R14$VH().set(seg, x);
        }
        public static void R14$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R14$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R15$VH() {
            return winnt_h$constants$2._CONTEXT$R15$VH();
        }
        public static  @C("DWORD64") long R15$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$R15$VH().get(seg);
        }
        public static  @C("DWORD64") long R15$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$R15$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R15$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R15$VH().set(seg, x);
        }
        public static void R15$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$R15$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rip$VH() {
            return winnt_h$constants$2._CONTEXT$Rip$VH();
        }
        public static  @C("DWORD64") long Rip$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$Rip$VH().get(seg);
        }
        public static  @C("DWORD64") long Rip$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$Rip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rip$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rip$VH().set(seg, x);
        }
        public static void Rip$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$Rip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FltSave$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(256, 512));
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(768, 32));
        }
        public static MemorySegment Legacy$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(800, 128));
        }
        public static MemorySegment Xmm0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(928, 16));
        }
        public static MemorySegment Xmm1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(944, 16));
        }
        public static MemorySegment Xmm2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(960, 16));
        }
        public static MemorySegment Xmm3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(976, 16));
        }
        public static MemorySegment Xmm4$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(992, 16));
        }
        public static MemorySegment Xmm5$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1008, 16));
        }
        public static MemorySegment Xmm6$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1024, 16));
        }
        public static MemorySegment Xmm7$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1040, 16));
        }
        public static MemorySegment Xmm8$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1056, 16));
        }
        public static MemorySegment Xmm9$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1072, 16));
        }
        public static MemorySegment Xmm10$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1088, 16));
        }
        public static MemorySegment Xmm11$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1104, 16));
        }
        public static MemorySegment Xmm12$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1120, 16));
        }
        public static MemorySegment Xmm13$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1136, 16));
        }
        public static MemorySegment Xmm14$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1152, 16));
        }
        public static MemorySegment Xmm15$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1168, 16));
        }
        public static MemorySegment VectorRegister$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1184, 416));
        }
        public static VarHandle VectorControl$VH() {
            return winnt_h$constants$2._CONTEXT$VectorControl$VH();
        }
        public static  @C("DWORD64") long VectorControl$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$VectorControl$VH().get(seg);
        }
        public static  @C("DWORD64") long VectorControl$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$VectorControl$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VectorControl$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$VectorControl$VH().set(seg, x);
        }
        public static void VectorControl$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$VectorControl$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DebugControl$VH() {
            return winnt_h$constants$2._CONTEXT$DebugControl$VH();
        }
        public static  @C("DWORD64") long DebugControl$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$DebugControl$VH().get(seg);
        }
        public static  @C("DWORD64") long DebugControl$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$DebugControl$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DebugControl$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$DebugControl$VH().set(seg, x);
        }
        public static void DebugControl$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$DebugControl$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LastBranchToRip$VH() {
            return winnt_h$constants$2._CONTEXT$LastBranchToRip$VH();
        }
        public static  @C("DWORD64") long LastBranchToRip$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$LastBranchToRip$VH().get(seg);
        }
        public static  @C("DWORD64") long LastBranchToRip$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$LastBranchToRip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LastBranchToRip$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$LastBranchToRip$VH().set(seg, x);
        }
        public static void LastBranchToRip$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$LastBranchToRip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LastBranchFromRip$VH() {
            return winnt_h$constants$2._CONTEXT$LastBranchFromRip$VH();
        }
        public static  @C("DWORD64") long LastBranchFromRip$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$LastBranchFromRip$VH().get(seg);
        }
        public static  @C("DWORD64") long LastBranchFromRip$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$LastBranchFromRip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LastBranchFromRip$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$LastBranchFromRip$VH().set(seg, x);
        }
        public static void LastBranchFromRip$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$LastBranchFromRip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LastExceptionToRip$VH() {
            return winnt_h$constants$2._CONTEXT$LastExceptionToRip$VH();
        }
        public static  @C("DWORD64") long LastExceptionToRip$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$LastExceptionToRip$VH().get(seg);
        }
        public static  @C("DWORD64") long LastExceptionToRip$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$LastExceptionToRip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LastExceptionToRip$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$LastExceptionToRip$VH().set(seg, x);
        }
        public static void LastExceptionToRip$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$LastExceptionToRip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LastExceptionFromRip$VH() {
            return winnt_h$constants$2._CONTEXT$LastExceptionFromRip$VH();
        }
        public static  @C("DWORD64") long LastExceptionFromRip$get(@C("struct _CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._CONTEXT$LastExceptionFromRip$VH().get(seg);
        }
        public static  @C("DWORD64") long LastExceptionFromRip$get(@C("struct _CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._CONTEXT$LastExceptionFromRip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LastExceptionFromRip$set(@C("struct _CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$LastExceptionFromRip$VH().set(seg, x);
        }
        public static void LastExceptionFromRip$set(@C("struct _CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._CONTEXT$LastExceptionFromRip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _CONTEXT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _CONTEXT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _CONTEXT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _CONTEXT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _CONTEXT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _CONTEXT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _CONTEXT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _CONTEXT")public static class CONTEXT extends _CONTEXT {

        /* package-private */ CONTEXT() {}
    }

    @C("struct _SCOPE_TABLE_AMD64")public static class SCOPE_TABLE extends _SCOPE_TABLE_AMD64 {

        /* package-private */ SCOPE_TABLE() {}
    }

    @C("struct _UNWIND_HISTORY_TABLE_ENTRY")public static class _UNWIND_HISTORY_TABLE_ENTRY {

        /* package-private */ _UNWIND_HISTORY_TABLE_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._UNWIND_HISTORY_TABLE_ENTRY$struct$LAYOUT();
        }
        public static VarHandle ImageBase$VH() {
            return winnt_h$constants$2._UNWIND_HISTORY_TABLE_ENTRY$ImageBase$VH();
        }
        public static  @C("DWORD64") long ImageBase$get(@C("struct _UNWIND_HISTORY_TABLE_ENTRY") MemorySegment seg) {
            return (long)winnt_h$constants$2._UNWIND_HISTORY_TABLE_ENTRY$ImageBase$VH().get(seg);
        }
        public static  @C("DWORD64") long ImageBase$get(@C("struct _UNWIND_HISTORY_TABLE_ENTRY") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._UNWIND_HISTORY_TABLE_ENTRY$ImageBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImageBase$set(@C("struct _UNWIND_HISTORY_TABLE_ENTRY") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE_ENTRY$ImageBase$VH().set(seg, x);
        }
        public static void ImageBase$set(@C("struct _UNWIND_HISTORY_TABLE_ENTRY") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE_ENTRY$ImageBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FunctionEntry$VH() {
            return winnt_h$constants$2._UNWIND_HISTORY_TABLE_ENTRY$FunctionEntry$VH();
        }
        public static  @C("PRUNTIME_FUNCTION") MemoryAddress FunctionEntry$get(@C("struct _UNWIND_HISTORY_TABLE_ENTRY") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._UNWIND_HISTORY_TABLE_ENTRY$FunctionEntry$VH().get(seg);
        }
        public static  @C("PRUNTIME_FUNCTION") MemoryAddress FunctionEntry$get(@C("struct _UNWIND_HISTORY_TABLE_ENTRY") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._UNWIND_HISTORY_TABLE_ENTRY$FunctionEntry$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FunctionEntry$set(@C("struct _UNWIND_HISTORY_TABLE_ENTRY") MemorySegment seg, @C("PRUNTIME_FUNCTION") MemoryAddress x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE_ENTRY$FunctionEntry$VH().set(seg, x);
        }
        public static void FunctionEntry$set(@C("struct _UNWIND_HISTORY_TABLE_ENTRY") MemorySegment seg, long index, @C("PRUNTIME_FUNCTION") MemoryAddress x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE_ENTRY$FunctionEntry$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _UNWIND_HISTORY_TABLE_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _UNWIND_HISTORY_TABLE_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _UNWIND_HISTORY_TABLE_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _UNWIND_HISTORY_TABLE_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _UNWIND_HISTORY_TABLE_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _UNWIND_HISTORY_TABLE_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _UNWIND_HISTORY_TABLE_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _UNWIND_HISTORY_TABLE_ENTRY")public static class UNWIND_HISTORY_TABLE_ENTRY extends _UNWIND_HISTORY_TABLE_ENTRY {

        /* package-private */ UNWIND_HISTORY_TABLE_ENTRY() {}
    }

    @C("struct _UNWIND_HISTORY_TABLE")public static class _UNWIND_HISTORY_TABLE {

        /* package-private */ _UNWIND_HISTORY_TABLE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._UNWIND_HISTORY_TABLE$struct$LAYOUT();
        }
        public static VarHandle Count$VH() {
            return winnt_h$constants$2._UNWIND_HISTORY_TABLE$Count$VH();
        }
        public static  @C("DWORD") int Count$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg) {
            return (int)winnt_h$constants$2._UNWIND_HISTORY_TABLE$Count$VH().get(seg);
        }
        public static  @C("DWORD") int Count$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._UNWIND_HISTORY_TABLE$Count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Count$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$Count$VH().set(seg, x);
        }
        public static void Count$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$Count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LocalHint$VH() {
            return winnt_h$constants$2._UNWIND_HISTORY_TABLE$LocalHint$VH();
        }
        public static  @C("BYTE") byte LocalHint$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg) {
            return (byte)winnt_h$constants$2._UNWIND_HISTORY_TABLE$LocalHint$VH().get(seg);
        }
        public static  @C("BYTE") byte LocalHint$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$2._UNWIND_HISTORY_TABLE$LocalHint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LocalHint$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$LocalHint$VH().set(seg, x);
        }
        public static void LocalHint$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$LocalHint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GlobalHint$VH() {
            return winnt_h$constants$2._UNWIND_HISTORY_TABLE$GlobalHint$VH();
        }
        public static  @C("BYTE") byte GlobalHint$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg) {
            return (byte)winnt_h$constants$2._UNWIND_HISTORY_TABLE$GlobalHint$VH().get(seg);
        }
        public static  @C("BYTE") byte GlobalHint$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$2._UNWIND_HISTORY_TABLE$GlobalHint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GlobalHint$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$GlobalHint$VH().set(seg, x);
        }
        public static void GlobalHint$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$GlobalHint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Search$VH() {
            return winnt_h$constants$2._UNWIND_HISTORY_TABLE$Search$VH();
        }
        public static  @C("BYTE") byte Search$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg) {
            return (byte)winnt_h$constants$2._UNWIND_HISTORY_TABLE$Search$VH().get(seg);
        }
        public static  @C("BYTE") byte Search$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$2._UNWIND_HISTORY_TABLE$Search$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Search$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$Search$VH().set(seg, x);
        }
        public static void Search$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$Search$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Once$VH() {
            return winnt_h$constants$2._UNWIND_HISTORY_TABLE$Once$VH();
        }
        public static  @C("BYTE") byte Once$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg) {
            return (byte)winnt_h$constants$2._UNWIND_HISTORY_TABLE$Once$VH().get(seg);
        }
        public static  @C("BYTE") byte Once$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$2._UNWIND_HISTORY_TABLE$Once$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Once$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$Once$VH().set(seg, x);
        }
        public static void Once$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$Once$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LowAddress$VH() {
            return winnt_h$constants$2._UNWIND_HISTORY_TABLE$LowAddress$VH();
        }
        public static  @C("DWORD64") long LowAddress$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg) {
            return (long)winnt_h$constants$2._UNWIND_HISTORY_TABLE$LowAddress$VH().get(seg);
        }
        public static  @C("DWORD64") long LowAddress$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._UNWIND_HISTORY_TABLE$LowAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LowAddress$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$LowAddress$VH().set(seg, x);
        }
        public static void LowAddress$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$LowAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HighAddress$VH() {
            return winnt_h$constants$2._UNWIND_HISTORY_TABLE$HighAddress$VH();
        }
        public static  @C("DWORD64") long HighAddress$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg) {
            return (long)winnt_h$constants$2._UNWIND_HISTORY_TABLE$HighAddress$VH().get(seg);
        }
        public static  @C("DWORD64") long HighAddress$get(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._UNWIND_HISTORY_TABLE$HighAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HighAddress$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$HighAddress$VH().set(seg, x);
        }
        public static void HighAddress$set(@C("struct _UNWIND_HISTORY_TABLE") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._UNWIND_HISTORY_TABLE$HighAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Entry$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 192));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _UNWIND_HISTORY_TABLE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _UNWIND_HISTORY_TABLE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _UNWIND_HISTORY_TABLE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _UNWIND_HISTORY_TABLE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _UNWIND_HISTORY_TABLE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _UNWIND_HISTORY_TABLE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _UNWIND_HISTORY_TABLE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _UNWIND_HISTORY_TABLE")public static class UNWIND_HISTORY_TABLE extends _UNWIND_HISTORY_TABLE {

        /* package-private */ UNWIND_HISTORY_TABLE() {}
    }

    @C("struct _DISPATCHER_CONTEXT")public static class _DISPATCHER_CONTEXT {

        /* package-private */ _DISPATCHER_CONTEXT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._DISPATCHER_CONTEXT$struct$LAYOUT();
        }
        public static VarHandle ControlPc$VH() {
            return winnt_h$constants$2._DISPATCHER_CONTEXT$ControlPc$VH();
        }
        public static  @C("DWORD64") long ControlPc$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._DISPATCHER_CONTEXT$ControlPc$VH().get(seg);
        }
        public static  @C("DWORD64") long ControlPc$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._DISPATCHER_CONTEXT$ControlPc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ControlPc$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$ControlPc$VH().set(seg, x);
        }
        public static void ControlPc$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$ControlPc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImageBase$VH() {
            return winnt_h$constants$2._DISPATCHER_CONTEXT$ImageBase$VH();
        }
        public static  @C("DWORD64") long ImageBase$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._DISPATCHER_CONTEXT$ImageBase$VH().get(seg);
        }
        public static  @C("DWORD64") long ImageBase$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._DISPATCHER_CONTEXT$ImageBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImageBase$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$ImageBase$VH().set(seg, x);
        }
        public static void ImageBase$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$ImageBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FunctionEntry$VH() {
            return winnt_h$constants$2._DISPATCHER_CONTEXT$FunctionEntry$VH();
        }
        public static  @C("PRUNTIME_FUNCTION") MemoryAddress FunctionEntry$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._DISPATCHER_CONTEXT$FunctionEntry$VH().get(seg);
        }
        public static  @C("PRUNTIME_FUNCTION") MemoryAddress FunctionEntry$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._DISPATCHER_CONTEXT$FunctionEntry$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FunctionEntry$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, @C("PRUNTIME_FUNCTION") MemoryAddress x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$FunctionEntry$VH().set(seg, x);
        }
        public static void FunctionEntry$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index, @C("PRUNTIME_FUNCTION") MemoryAddress x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$FunctionEntry$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EstablisherFrame$VH() {
            return winnt_h$constants$2._DISPATCHER_CONTEXT$EstablisherFrame$VH();
        }
        public static  @C("DWORD64") long EstablisherFrame$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._DISPATCHER_CONTEXT$EstablisherFrame$VH().get(seg);
        }
        public static  @C("DWORD64") long EstablisherFrame$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._DISPATCHER_CONTEXT$EstablisherFrame$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EstablisherFrame$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$EstablisherFrame$VH().set(seg, x);
        }
        public static void EstablisherFrame$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$EstablisherFrame$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TargetIp$VH() {
            return winnt_h$constants$2._DISPATCHER_CONTEXT$TargetIp$VH();
        }
        public static  @C("DWORD64") long TargetIp$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg) {
            return (long)winnt_h$constants$2._DISPATCHER_CONTEXT$TargetIp$VH().get(seg);
        }
        public static  @C("DWORD64") long TargetIp$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$2._DISPATCHER_CONTEXT$TargetIp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TargetIp$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$TargetIp$VH().set(seg, x);
        }
        public static void TargetIp$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$TargetIp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ContextRecord$VH() {
            return winnt_h$constants$2._DISPATCHER_CONTEXT$ContextRecord$VH();
        }
        public static  @C("PCONTEXT") MemoryAddress ContextRecord$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._DISPATCHER_CONTEXT$ContextRecord$VH().get(seg);
        }
        public static  @C("PCONTEXT") MemoryAddress ContextRecord$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._DISPATCHER_CONTEXT$ContextRecord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ContextRecord$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, @C("PCONTEXT") MemoryAddress x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$ContextRecord$VH().set(seg, x);
        }
        public static void ContextRecord$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index, @C("PCONTEXT") MemoryAddress x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$ContextRecord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LanguageHandler$VH() {
            return winnt_h$constants$2._DISPATCHER_CONTEXT$LanguageHandler$VH();
        }
        public static  @C("PEXCEPTION_ROUTINE") MemoryAddress LanguageHandler$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._DISPATCHER_CONTEXT$LanguageHandler$VH().get(seg);
        }
        public static  @C("PEXCEPTION_ROUTINE") MemoryAddress LanguageHandler$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._DISPATCHER_CONTEXT$LanguageHandler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LanguageHandler$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, @C("PEXCEPTION_ROUTINE") MemoryAddress x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$LanguageHandler$VH().set(seg, x);
        }
        public static void LanguageHandler$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index, @C("PEXCEPTION_ROUTINE") MemoryAddress x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$LanguageHandler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HandlerData$VH() {
            return winnt_h$constants$2._DISPATCHER_CONTEXT$HandlerData$VH();
        }
        public static  @C("PVOID") MemoryAddress HandlerData$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._DISPATCHER_CONTEXT$HandlerData$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress HandlerData$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._DISPATCHER_CONTEXT$HandlerData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HandlerData$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$HandlerData$VH().set(seg, x);
        }
        public static void HandlerData$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$HandlerData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HistoryTable$VH() {
            return winnt_h$constants$2._DISPATCHER_CONTEXT$HistoryTable$VH();
        }
        public static  @C("PUNWIND_HISTORY_TABLE") MemoryAddress HistoryTable$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._DISPATCHER_CONTEXT$HistoryTable$VH().get(seg);
        }
        public static  @C("PUNWIND_HISTORY_TABLE") MemoryAddress HistoryTable$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._DISPATCHER_CONTEXT$HistoryTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HistoryTable$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, @C("PUNWIND_HISTORY_TABLE") MemoryAddress x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$HistoryTable$VH().set(seg, x);
        }
        public static void HistoryTable$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index, @C("PUNWIND_HISTORY_TABLE") MemoryAddress x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$HistoryTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ScopeIndex$VH() {
            return winnt_h$constants$2._DISPATCHER_CONTEXT$ScopeIndex$VH();
        }
        public static  @C("DWORD") int ScopeIndex$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$2._DISPATCHER_CONTEXT$ScopeIndex$VH().get(seg);
        }
        public static  @C("DWORD") int ScopeIndex$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._DISPATCHER_CONTEXT$ScopeIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ScopeIndex$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$ScopeIndex$VH().set(seg, x);
        }
        public static void ScopeIndex$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$ScopeIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Fill0$VH() {
            return winnt_h$constants$2._DISPATCHER_CONTEXT$Fill0$VH();
        }
        public static  @C("DWORD") int Fill0$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$2._DISPATCHER_CONTEXT$Fill0$VH().get(seg);
        }
        public static  @C("DWORD") int Fill0$get(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$2._DISPATCHER_CONTEXT$Fill0$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Fill0$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$Fill0$VH().set(seg, x);
        }
        public static void Fill0$set(@C("struct _DISPATCHER_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$2._DISPATCHER_CONTEXT$Fill0$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _DISPATCHER_CONTEXT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _DISPATCHER_CONTEXT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _DISPATCHER_CONTEXT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _DISPATCHER_CONTEXT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _DISPATCHER_CONTEXT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _DISPATCHER_CONTEXT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _DISPATCHER_CONTEXT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _DISPATCHER_CONTEXT")public static class DISPATCHER_CONTEXT extends _DISPATCHER_CONTEXT {

        /* package-private */ DISPATCHER_CONTEXT() {}
    }

    @C("struct _KNONVOLATILE_CONTEXT_POINTERS")public static class _KNONVOLATILE_CONTEXT_POINTERS {

        /* package-private */ _KNONVOLATILE_CONTEXT_POINTERS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$struct$LAYOUT();
        }
        public static MemorySegment FloatingContext$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 128));
        }
        public static VarHandle Xmm0$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm0$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm0$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm0$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm0$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm0$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm0$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm0$VH().set(seg, x);
        }
        public static void Xmm0$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm0$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm1$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm1$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm1$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm1$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm1$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm1$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm1$VH().set(seg, x);
        }
        public static void Xmm1$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm2$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm2$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm2$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm2$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm2$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm2$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm2$VH().set(seg, x);
        }
        public static void Xmm2$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm3$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm3$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm3$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm3$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm3$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm3$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm3$VH().set(seg, x);
        }
        public static void Xmm3$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm4$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm4$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm4$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm4$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm4$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm4$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm4$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm4$VH().set(seg, x);
        }
        public static void Xmm4$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm4$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm5$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm5$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm5$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm5$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm5$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm5$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm5$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm5$VH().set(seg, x);
        }
        public static void Xmm5$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm5$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm6$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm6$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm6$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm6$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm6$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm6$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm6$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm6$VH().set(seg, x);
        }
        public static void Xmm6$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm6$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm7$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm7$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm7$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm7$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm7$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm7$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm7$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm7$VH().set(seg, x);
        }
        public static void Xmm7$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm7$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm8$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm8$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm8$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm8$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm8$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm8$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm8$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm8$VH().set(seg, x);
        }
        public static void Xmm8$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm8$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm9$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm9$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm9$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm9$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm9$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm9$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm9$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm9$VH().set(seg, x);
        }
        public static void Xmm9$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm9$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm10$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm10$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm10$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm10$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm10$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm10$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm10$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm10$VH().set(seg, x);
        }
        public static void Xmm10$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm10$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm11$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm11$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm11$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm11$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm11$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm11$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm11$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm11$VH().set(seg, x);
        }
        public static void Xmm11$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm11$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm12$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm12$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm12$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm12$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm12$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm12$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm12$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm12$VH().set(seg, x);
        }
        public static void Xmm12$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm12$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm13$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm13$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm13$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm13$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm13$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm13$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm13$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm13$VH().set(seg, x);
        }
        public static void Xmm13$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm13$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm14$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm14$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm14$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm14$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm14$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm14$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm14$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm14$VH().set(seg, x);
        }
        public static void Xmm14$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm14$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Xmm15$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm15$VH();
        }
        public static  @C("PM128A") MemoryAddress Xmm15$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm15$VH().get(seg);
        }
        public static  @C("PM128A") MemoryAddress Xmm15$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm15$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Xmm15$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm15$VH().set(seg, x);
        }
        public static void Xmm15$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PM128A") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Xmm15$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment IntegerContext$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(256, 128));
        }
        public static VarHandle Rax$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rax$VH();
        }
        public static  @C("PDWORD64") MemoryAddress Rax$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rax$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress Rax$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rax$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rax$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rax$VH().set(seg, x);
        }
        public static void Rax$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rax$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rcx$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rcx$VH();
        }
        public static  @C("PDWORD64") MemoryAddress Rcx$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rcx$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress Rcx$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rcx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rcx$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rcx$VH().set(seg, x);
        }
        public static void Rcx$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rcx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rdx$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rdx$VH();
        }
        public static  @C("PDWORD64") MemoryAddress Rdx$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rdx$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress Rdx$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rdx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rdx$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rdx$VH().set(seg, x);
        }
        public static void Rdx$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rdx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rbx$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rbx$VH();
        }
        public static  @C("PDWORD64") MemoryAddress Rbx$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rbx$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress Rbx$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rbx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rbx$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rbx$VH().set(seg, x);
        }
        public static void Rbx$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rbx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rsp$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rsp$VH();
        }
        public static  @C("PDWORD64") MemoryAddress Rsp$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rsp$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress Rsp$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rsp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rsp$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rsp$VH().set(seg, x);
        }
        public static void Rsp$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rsp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rbp$VH() {
            return winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rbp$VH();
        }
        public static  @C("PDWORD64") MemoryAddress Rbp$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rbp$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress Rbp$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rbp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rbp$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rbp$VH().set(seg, x);
        }
        public static void Rbp$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$2._KNONVOLATILE_CONTEXT_POINTERS$Rbp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rsi$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$Rsi$VH();
        }
        public static  @C("PDWORD64") MemoryAddress Rsi$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$Rsi$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress Rsi$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$Rsi$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rsi$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$Rsi$VH().set(seg, x);
        }
        public static void Rsi$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$Rsi$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rdi$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$Rdi$VH();
        }
        public static  @C("PDWORD64") MemoryAddress Rdi$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$Rdi$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress Rdi$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$Rdi$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rdi$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$Rdi$VH().set(seg, x);
        }
        public static void Rdi$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$Rdi$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R8$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R8$VH();
        }
        public static  @C("PDWORD64") MemoryAddress R8$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R8$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress R8$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R8$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R8$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R8$VH().set(seg, x);
        }
        public static void R8$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R8$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R9$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R9$VH();
        }
        public static  @C("PDWORD64") MemoryAddress R9$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R9$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress R9$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R9$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R9$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R9$VH().set(seg, x);
        }
        public static void R9$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R9$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R10$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R10$VH();
        }
        public static  @C("PDWORD64") MemoryAddress R10$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R10$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress R10$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R10$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R10$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R10$VH().set(seg, x);
        }
        public static void R10$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R10$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R11$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R11$VH();
        }
        public static  @C("PDWORD64") MemoryAddress R11$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R11$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress R11$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R11$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R11$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R11$VH().set(seg, x);
        }
        public static void R11$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R11$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R12$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R12$VH();
        }
        public static  @C("PDWORD64") MemoryAddress R12$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R12$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress R12$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R12$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R12$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R12$VH().set(seg, x);
        }
        public static void R12$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R12$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R13$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R13$VH();
        }
        public static  @C("PDWORD64") MemoryAddress R13$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R13$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress R13$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R13$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R13$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R13$VH().set(seg, x);
        }
        public static void R13$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R13$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R14$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R14$VH();
        }
        public static  @C("PDWORD64") MemoryAddress R14$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R14$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress R14$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R14$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R14$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R14$VH().set(seg, x);
        }
        public static void R14$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R14$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle R15$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R15$VH();
        }
        public static  @C("PDWORD64") MemoryAddress R15$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R15$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress R15$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R15$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void R15$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R15$VH().set(seg, x);
        }
        public static void R15$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS$R15$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _KNONVOLATILE_CONTEXT_POINTERS")public static class KNONVOLATILE_CONTEXT_POINTERS extends _KNONVOLATILE_CONTEXT_POINTERS {

        /* package-private */ KNONVOLATILE_CONTEXT_POINTERS() {}
    }

    @C("struct _SCOPE_TABLE_ARM")public static class _SCOPE_TABLE_ARM {

        /* package-private */ _SCOPE_TABLE_ARM() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SCOPE_TABLE_ARM$struct$LAYOUT();
        }
        public static VarHandle Count$VH() {
            return winnt_h$constants$3._SCOPE_TABLE_ARM$Count$VH();
        }
        public static  @C("DWORD") int Count$get(@C("struct _SCOPE_TABLE_ARM") MemorySegment seg) {
            return (int)winnt_h$constants$3._SCOPE_TABLE_ARM$Count$VH().get(seg);
        }
        public static  @C("DWORD") int Count$get(@C("struct _SCOPE_TABLE_ARM") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SCOPE_TABLE_ARM$Count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Count$set(@C("struct _SCOPE_TABLE_ARM") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SCOPE_TABLE_ARM$Count$VH().set(seg, x);
        }
        public static void Count$set(@C("struct _SCOPE_TABLE_ARM") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SCOPE_TABLE_ARM$Count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ScopeRecord$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SCOPE_TABLE_ARM") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SCOPE_TABLE_ARM") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SCOPE_TABLE_ARM[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SCOPE_TABLE_ARM[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SCOPE_TABLE_ARM*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SCOPE_TABLE_ARM*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SCOPE_TABLE_ARM") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SCOPE_TABLE_ARM")public static class SCOPE_TABLE_ARM extends _SCOPE_TABLE_ARM {

        /* package-private */ SCOPE_TABLE_ARM() {}
    }

    @C("struct _SCOPE_TABLE_ARM64")public static class _SCOPE_TABLE_ARM64 {

        /* package-private */ _SCOPE_TABLE_ARM64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SCOPE_TABLE_ARM64$struct$LAYOUT();
        }
        public static VarHandle Count$VH() {
            return winnt_h$constants$3._SCOPE_TABLE_ARM64$Count$VH();
        }
        public static  @C("DWORD") int Count$get(@C("struct _SCOPE_TABLE_ARM64") MemorySegment seg) {
            return (int)winnt_h$constants$3._SCOPE_TABLE_ARM64$Count$VH().get(seg);
        }
        public static  @C("DWORD") int Count$get(@C("struct _SCOPE_TABLE_ARM64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SCOPE_TABLE_ARM64$Count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Count$set(@C("struct _SCOPE_TABLE_ARM64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SCOPE_TABLE_ARM64$Count$VH().set(seg, x);
        }
        public static void Count$set(@C("struct _SCOPE_TABLE_ARM64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SCOPE_TABLE_ARM64$Count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ScopeRecord$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SCOPE_TABLE_ARM64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SCOPE_TABLE_ARM64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SCOPE_TABLE_ARM64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SCOPE_TABLE_ARM64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SCOPE_TABLE_ARM64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SCOPE_TABLE_ARM64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SCOPE_TABLE_ARM64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SCOPE_TABLE_ARM64")public static class SCOPE_TABLE_ARM64 extends _SCOPE_TABLE_ARM64 {

        /* package-private */ SCOPE_TABLE_ARM64() {}
    }

    @C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64")public static class _KNONVOLATILE_CONTEXT_POINTERS_ARM64 {

        /* package-private */ _KNONVOLATILE_CONTEXT_POINTERS_ARM64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$struct$LAYOUT();
        }
        public static VarHandle X19$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X19$VH();
        }
        public static  @C("PDWORD64") MemoryAddress X19$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X19$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress X19$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X19$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void X19$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X19$VH().set(seg, x);
        }
        public static void X19$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X19$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle X20$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X20$VH();
        }
        public static  @C("PDWORD64") MemoryAddress X20$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X20$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress X20$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X20$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void X20$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X20$VH().set(seg, x);
        }
        public static void X20$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X20$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle X21$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X21$VH();
        }
        public static  @C("PDWORD64") MemoryAddress X21$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X21$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress X21$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X21$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void X21$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X21$VH().set(seg, x);
        }
        public static void X21$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X21$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle X22$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X22$VH();
        }
        public static  @C("PDWORD64") MemoryAddress X22$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X22$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress X22$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X22$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void X22$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X22$VH().set(seg, x);
        }
        public static void X22$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X22$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle X23$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X23$VH();
        }
        public static  @C("PDWORD64") MemoryAddress X23$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X23$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress X23$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X23$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void X23$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X23$VH().set(seg, x);
        }
        public static void X23$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X23$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle X24$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X24$VH();
        }
        public static  @C("PDWORD64") MemoryAddress X24$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X24$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress X24$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X24$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void X24$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X24$VH().set(seg, x);
        }
        public static void X24$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X24$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle X25$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X25$VH();
        }
        public static  @C("PDWORD64") MemoryAddress X25$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X25$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress X25$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X25$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void X25$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X25$VH().set(seg, x);
        }
        public static void X25$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X25$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle X26$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X26$VH();
        }
        public static  @C("PDWORD64") MemoryAddress X26$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X26$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress X26$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X26$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void X26$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X26$VH().set(seg, x);
        }
        public static void X26$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X26$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle X27$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X27$VH();
        }
        public static  @C("PDWORD64") MemoryAddress X27$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X27$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress X27$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X27$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void X27$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X27$VH().set(seg, x);
        }
        public static void X27$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X27$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle X28$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X28$VH();
        }
        public static  @C("PDWORD64") MemoryAddress X28$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X28$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress X28$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X28$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void X28$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X28$VH().set(seg, x);
        }
        public static void X28$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$X28$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Fp$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$Fp$VH();
        }
        public static  @C("PDWORD64") MemoryAddress Fp$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$Fp$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress Fp$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$Fp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Fp$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$Fp$VH().set(seg, x);
        }
        public static void Fp$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$Fp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Lr$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$Lr$VH();
        }
        public static  @C("PDWORD64") MemoryAddress Lr$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$Lr$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress Lr$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$Lr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Lr$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$Lr$VH().set(seg, x);
        }
        public static void Lr$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$Lr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle D8$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D8$VH();
        }
        public static  @C("PDWORD64") MemoryAddress D8$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D8$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress D8$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D8$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void D8$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D8$VH().set(seg, x);
        }
        public static void D8$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D8$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle D9$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D9$VH();
        }
        public static  @C("PDWORD64") MemoryAddress D9$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D9$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress D9$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D9$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void D9$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D9$VH().set(seg, x);
        }
        public static void D9$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D9$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle D10$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D10$VH();
        }
        public static  @C("PDWORD64") MemoryAddress D10$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D10$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress D10$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D10$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void D10$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D10$VH().set(seg, x);
        }
        public static void D10$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D10$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle D11$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D11$VH();
        }
        public static  @C("PDWORD64") MemoryAddress D11$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D11$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress D11$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D11$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void D11$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D11$VH().set(seg, x);
        }
        public static void D11$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D11$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle D12$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D12$VH();
        }
        public static  @C("PDWORD64") MemoryAddress D12$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D12$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress D12$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D12$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void D12$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D12$VH().set(seg, x);
        }
        public static void D12$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D12$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle D13$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D13$VH();
        }
        public static  @C("PDWORD64") MemoryAddress D13$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D13$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress D13$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D13$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void D13$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D13$VH().set(seg, x);
        }
        public static void D13$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D13$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle D14$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D14$VH();
        }
        public static  @C("PDWORD64") MemoryAddress D14$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D14$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress D14$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D14$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void D14$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D14$VH().set(seg, x);
        }
        public static void D14$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D14$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle D15$VH() {
            return winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D15$VH();
        }
        public static  @C("PDWORD64") MemoryAddress D15$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D15$VH().get(seg);
        }
        public static  @C("PDWORD64") MemoryAddress D15$get(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D15$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void D15$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D15$VH().set(seg, x);
        }
        public static void D15$set(@C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
            winnt_h$constants$3._KNONVOLATILE_CONTEXT_POINTERS_ARM64$D15$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64")public static class KNONVOLATILE_CONTEXT_POINTERS_ARM64 extends _KNONVOLATILE_CONTEXT_POINTERS_ARM64 {

        /* package-private */ KNONVOLATILE_CONTEXT_POINTERS_ARM64() {}
    }

    @C("struct _LDT_ENTRY")public static class _LDT_ENTRY {

        /* package-private */ _LDT_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._LDT_ENTRY$struct$LAYOUT();
        }
        public static VarHandle LimitLow$VH() {
            return winnt_h$constants$3._LDT_ENTRY$LimitLow$VH();
        }
        public static  @C("WORD") short LimitLow$get(@C("struct _LDT_ENTRY") MemorySegment seg) {
            return (short)winnt_h$constants$3._LDT_ENTRY$LimitLow$VH().get(seg);
        }
        public static  @C("WORD") short LimitLow$get(@C("struct _LDT_ENTRY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$3._LDT_ENTRY$LimitLow$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LimitLow$set(@C("struct _LDT_ENTRY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$3._LDT_ENTRY$LimitLow$VH().set(seg, x);
        }
        public static void LimitLow$set(@C("struct _LDT_ENTRY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$3._LDT_ENTRY$LimitLow$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseLow$VH() {
            return winnt_h$constants$3._LDT_ENTRY$BaseLow$VH();
        }
        public static  @C("WORD") short BaseLow$get(@C("struct _LDT_ENTRY") MemorySegment seg) {
            return (short)winnt_h$constants$3._LDT_ENTRY$BaseLow$VH().get(seg);
        }
        public static  @C("WORD") short BaseLow$get(@C("struct _LDT_ENTRY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$3._LDT_ENTRY$BaseLow$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseLow$set(@C("struct _LDT_ENTRY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$3._LDT_ENTRY$BaseLow$VH().set(seg, x);
        }
        public static void BaseLow$set(@C("struct _LDT_ENTRY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$3._LDT_ENTRY$BaseLow$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("union ")public static class HighWord {

            /* package-private */ HighWord() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$3._LDT_ENTRY$HighWord$union$LAYOUT();
            }
            @C("struct ")public static class Bytes {

                /* package-private */ Bytes() {}
                public static MemoryLayout $LAYOUT() {
                    return winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$struct$LAYOUT();
                }
                public static VarHandle BaseMid$VH() {
                    return winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$BaseMid$VH();
                }
                public static  @C("BYTE") byte BaseMid$get(@C("struct ") MemorySegment seg) {
                    return (byte)winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$BaseMid$VH().get(seg);
                }
                public static  @C("BYTE") byte BaseMid$get(@C("struct ") MemorySegment seg, long index) {
                    return (byte)winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$BaseMid$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void BaseMid$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                    winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$BaseMid$VH().set(seg, x);
                }
                public static void BaseMid$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                    winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$BaseMid$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle Flags1$VH() {
                    return winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$Flags1$VH();
                }
                public static  @C("BYTE") byte Flags1$get(@C("struct ") MemorySegment seg) {
                    return (byte)winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$Flags1$VH().get(seg);
                }
                public static  @C("BYTE") byte Flags1$get(@C("struct ") MemorySegment seg, long index) {
                    return (byte)winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$Flags1$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void Flags1$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                    winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$Flags1$VH().set(seg, x);
                }
                public static void Flags1$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                    winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$Flags1$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle Flags2$VH() {
                    return winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$Flags2$VH();
                }
                public static  @C("BYTE") byte Flags2$get(@C("struct ") MemorySegment seg) {
                    return (byte)winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$Flags2$VH().get(seg);
                }
                public static  @C("BYTE") byte Flags2$get(@C("struct ") MemorySegment seg, long index) {
                    return (byte)winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$Flags2$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void Flags2$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                    winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$Flags2$VH().set(seg, x);
                }
                public static void Flags2$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                    winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$Flags2$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle BaseHi$VH() {
                    return winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$BaseHi$VH();
                }
                public static  @C("BYTE") byte BaseHi$get(@C("struct ") MemorySegment seg) {
                    return (byte)winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$BaseHi$VH().get(seg);
                }
                public static  @C("BYTE") byte BaseHi$get(@C("struct ") MemorySegment seg, long index) {
                    return (byte)winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$BaseHi$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void BaseHi$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                    winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$BaseHi$VH().set(seg, x);
                }
                public static void BaseHi$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                    winnt_h$constants$3._LDT_ENTRY$HighWord$Bytes$BaseHi$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment Bytes$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            @C("struct ")public static class Bits {

                /* package-private */ Bits() {}
                public static MemoryLayout $LAYOUT() {
                    return winnt_h$constants$3._LDT_ENTRY$HighWord$Bits$struct$LAYOUT();
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment Bits$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment HighWord$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 4));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _LDT_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _LDT_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _LDT_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _LDT_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _LDT_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _LDT_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _LDT_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _LDT_ENTRY")public static class LDT_ENTRY extends _LDT_ENTRY {

        /* package-private */ LDT_ENTRY() {}
    }

    @C("struct _WOW64_FLOATING_SAVE_AREA")public static class _WOW64_FLOATING_SAVE_AREA {

        /* package-private */ _WOW64_FLOATING_SAVE_AREA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$struct$LAYOUT();
        }
        public static VarHandle ControlWord$VH() {
            return winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ControlWord$VH();
        }
        public static  @C("DWORD") int ControlWord$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ControlWord$VH().get(seg);
        }
        public static  @C("DWORD") int ControlWord$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ControlWord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ControlWord$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ControlWord$VH().set(seg, x);
        }
        public static void ControlWord$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ControlWord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StatusWord$VH() {
            return winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$StatusWord$VH();
        }
        public static  @C("DWORD") int StatusWord$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$StatusWord$VH().get(seg);
        }
        public static  @C("DWORD") int StatusWord$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$StatusWord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StatusWord$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$StatusWord$VH().set(seg, x);
        }
        public static void StatusWord$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$StatusWord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TagWord$VH() {
            return winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$TagWord$VH();
        }
        public static  @C("DWORD") int TagWord$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$TagWord$VH().get(seg);
        }
        public static  @C("DWORD") int TagWord$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$TagWord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TagWord$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$TagWord$VH().set(seg, x);
        }
        public static void TagWord$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$TagWord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ErrorOffset$VH() {
            return winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ErrorOffset$VH();
        }
        public static  @C("DWORD") int ErrorOffset$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ErrorOffset$VH().get(seg);
        }
        public static  @C("DWORD") int ErrorOffset$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ErrorOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ErrorOffset$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ErrorOffset$VH().set(seg, x);
        }
        public static void ErrorOffset$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ErrorOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ErrorSelector$VH() {
            return winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ErrorSelector$VH();
        }
        public static  @C("DWORD") int ErrorSelector$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ErrorSelector$VH().get(seg);
        }
        public static  @C("DWORD") int ErrorSelector$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ErrorSelector$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ErrorSelector$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ErrorSelector$VH().set(seg, x);
        }
        public static void ErrorSelector$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$ErrorSelector$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DataOffset$VH() {
            return winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$DataOffset$VH();
        }
        public static  @C("DWORD") int DataOffset$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$DataOffset$VH().get(seg);
        }
        public static  @C("DWORD") int DataOffset$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$DataOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DataOffset$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$DataOffset$VH().set(seg, x);
        }
        public static void DataOffset$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$DataOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DataSelector$VH() {
            return winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$DataSelector$VH();
        }
        public static  @C("DWORD") int DataSelector$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$DataSelector$VH().get(seg);
        }
        public static  @C("DWORD") int DataSelector$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$DataSelector$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DataSelector$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$DataSelector$VH().set(seg, x);
        }
        public static void DataSelector$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$DataSelector$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment RegisterArea$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 80));
        }
        public static VarHandle Cr0NpxState$VH() {
            return winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$Cr0NpxState$VH();
        }
        public static  @C("DWORD") int Cr0NpxState$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$Cr0NpxState$VH().get(seg);
        }
        public static  @C("DWORD") int Cr0NpxState$get(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$Cr0NpxState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Cr0NpxState$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$Cr0NpxState$VH().set(seg, x);
        }
        public static void Cr0NpxState$set(@C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_FLOATING_SAVE_AREA$Cr0NpxState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _WOW64_FLOATING_SAVE_AREA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _WOW64_FLOATING_SAVE_AREA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _WOW64_FLOATING_SAVE_AREA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _WOW64_FLOATING_SAVE_AREA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _WOW64_FLOATING_SAVE_AREA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _WOW64_FLOATING_SAVE_AREA")public static class WOW64_FLOATING_SAVE_AREA extends _WOW64_FLOATING_SAVE_AREA {

        /* package-private */ WOW64_FLOATING_SAVE_AREA() {}
    }

    @C("struct _WOW64_CONTEXT")public static class _WOW64_CONTEXT {

        /* package-private */ _WOW64_CONTEXT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._WOW64_CONTEXT$struct$LAYOUT();
        }
        public static VarHandle ContextFlags$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$ContextFlags$VH();
        }
        public static  @C("DWORD") int ContextFlags$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$ContextFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ContextFlags$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$ContextFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ContextFlags$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$ContextFlags$VH().set(seg, x);
        }
        public static void ContextFlags$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$ContextFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dr0$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Dr0$VH();
        }
        public static  @C("DWORD") int Dr0$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Dr0$VH().get(seg);
        }
        public static  @C("DWORD") int Dr0$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Dr0$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dr0$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Dr0$VH().set(seg, x);
        }
        public static void Dr0$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Dr0$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dr1$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Dr1$VH();
        }
        public static  @C("DWORD") int Dr1$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Dr1$VH().get(seg);
        }
        public static  @C("DWORD") int Dr1$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Dr1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dr1$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Dr1$VH().set(seg, x);
        }
        public static void Dr1$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Dr1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dr2$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Dr2$VH();
        }
        public static  @C("DWORD") int Dr2$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Dr2$VH().get(seg);
        }
        public static  @C("DWORD") int Dr2$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Dr2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dr2$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Dr2$VH().set(seg, x);
        }
        public static void Dr2$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Dr2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dr3$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Dr3$VH();
        }
        public static  @C("DWORD") int Dr3$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Dr3$VH().get(seg);
        }
        public static  @C("DWORD") int Dr3$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Dr3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dr3$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Dr3$VH().set(seg, x);
        }
        public static void Dr3$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Dr3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dr6$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Dr6$VH();
        }
        public static  @C("DWORD") int Dr6$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Dr6$VH().get(seg);
        }
        public static  @C("DWORD") int Dr6$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Dr6$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dr6$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Dr6$VH().set(seg, x);
        }
        public static void Dr6$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Dr6$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dr7$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Dr7$VH();
        }
        public static  @C("DWORD") int Dr7$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Dr7$VH().get(seg);
        }
        public static  @C("DWORD") int Dr7$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Dr7$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dr7$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Dr7$VH().set(seg, x);
        }
        public static void Dr7$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Dr7$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FloatSave$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 112));
        }
        public static VarHandle SegGs$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$SegGs$VH();
        }
        public static  @C("DWORD") int SegGs$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$SegGs$VH().get(seg);
        }
        public static  @C("DWORD") int SegGs$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$SegGs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SegGs$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$SegGs$VH().set(seg, x);
        }
        public static void SegGs$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$SegGs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SegFs$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$SegFs$VH();
        }
        public static  @C("DWORD") int SegFs$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$SegFs$VH().get(seg);
        }
        public static  @C("DWORD") int SegFs$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$SegFs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SegFs$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$SegFs$VH().set(seg, x);
        }
        public static void SegFs$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$SegFs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SegEs$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$SegEs$VH();
        }
        public static  @C("DWORD") int SegEs$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$SegEs$VH().get(seg);
        }
        public static  @C("DWORD") int SegEs$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$SegEs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SegEs$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$SegEs$VH().set(seg, x);
        }
        public static void SegEs$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$SegEs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SegDs$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$SegDs$VH();
        }
        public static  @C("DWORD") int SegDs$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$SegDs$VH().get(seg);
        }
        public static  @C("DWORD") int SegDs$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$SegDs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SegDs$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$SegDs$VH().set(seg, x);
        }
        public static void SegDs$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$SegDs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Edi$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Edi$VH();
        }
        public static  @C("DWORD") int Edi$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Edi$VH().get(seg);
        }
        public static  @C("DWORD") int Edi$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Edi$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Edi$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Edi$VH().set(seg, x);
        }
        public static void Edi$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Edi$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Esi$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Esi$VH();
        }
        public static  @C("DWORD") int Esi$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Esi$VH().get(seg);
        }
        public static  @C("DWORD") int Esi$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Esi$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Esi$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Esi$VH().set(seg, x);
        }
        public static void Esi$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Esi$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Ebx$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Ebx$VH();
        }
        public static  @C("DWORD") int Ebx$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Ebx$VH().get(seg);
        }
        public static  @C("DWORD") int Ebx$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Ebx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Ebx$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Ebx$VH().set(seg, x);
        }
        public static void Ebx$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Ebx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Edx$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Edx$VH();
        }
        public static  @C("DWORD") int Edx$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Edx$VH().get(seg);
        }
        public static  @C("DWORD") int Edx$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Edx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Edx$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Edx$VH().set(seg, x);
        }
        public static void Edx$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Edx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Ecx$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Ecx$VH();
        }
        public static  @C("DWORD") int Ecx$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Ecx$VH().get(seg);
        }
        public static  @C("DWORD") int Ecx$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Ecx$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Ecx$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Ecx$VH().set(seg, x);
        }
        public static void Ecx$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Ecx$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Eax$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Eax$VH();
        }
        public static  @C("DWORD") int Eax$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Eax$VH().get(seg);
        }
        public static  @C("DWORD") int Eax$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Eax$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Eax$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Eax$VH().set(seg, x);
        }
        public static void Eax$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Eax$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Ebp$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Ebp$VH();
        }
        public static  @C("DWORD") int Ebp$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Ebp$VH().get(seg);
        }
        public static  @C("DWORD") int Ebp$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Ebp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Ebp$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Ebp$VH().set(seg, x);
        }
        public static void Ebp$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Ebp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Eip$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Eip$VH();
        }
        public static  @C("DWORD") int Eip$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Eip$VH().get(seg);
        }
        public static  @C("DWORD") int Eip$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Eip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Eip$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Eip$VH().set(seg, x);
        }
        public static void Eip$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Eip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SegCs$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$SegCs$VH();
        }
        public static  @C("DWORD") int SegCs$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$SegCs$VH().get(seg);
        }
        public static  @C("DWORD") int SegCs$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$SegCs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SegCs$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$SegCs$VH().set(seg, x);
        }
        public static void SegCs$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$SegCs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EFlags$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$EFlags$VH();
        }
        public static  @C("DWORD") int EFlags$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$EFlags$VH().get(seg);
        }
        public static  @C("DWORD") int EFlags$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$EFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EFlags$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$EFlags$VH().set(seg, x);
        }
        public static void EFlags$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$EFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Esp$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$Esp$VH();
        }
        public static  @C("DWORD") int Esp$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Esp$VH().get(seg);
        }
        public static  @C("DWORD") int Esp$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$Esp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Esp$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Esp$VH().set(seg, x);
        }
        public static void Esp$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$Esp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SegSs$VH() {
            return winnt_h$constants$3._WOW64_CONTEXT$SegSs$VH();
        }
        public static  @C("DWORD") int SegSs$get(@C("struct _WOW64_CONTEXT") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$SegSs$VH().get(seg);
        }
        public static  @C("DWORD") int SegSs$get(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_CONTEXT$SegSs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SegSs$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$SegSs$VH().set(seg, x);
        }
        public static void SegSs$set(@C("struct _WOW64_CONTEXT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_CONTEXT$SegSs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ExtendedRegisters$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(204, 512));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _WOW64_CONTEXT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _WOW64_CONTEXT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _WOW64_CONTEXT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _WOW64_CONTEXT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _WOW64_CONTEXT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _WOW64_CONTEXT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _WOW64_CONTEXT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _WOW64_CONTEXT")public static class WOW64_CONTEXT extends _WOW64_CONTEXT {

        /* package-private */ WOW64_CONTEXT() {}
    }

    @C("struct _WOW64_LDT_ENTRY")public static class _WOW64_LDT_ENTRY {

        /* package-private */ _WOW64_LDT_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._WOW64_LDT_ENTRY$struct$LAYOUT();
        }
        public static VarHandle LimitLow$VH() {
            return winnt_h$constants$3._WOW64_LDT_ENTRY$LimitLow$VH();
        }
        public static  @C("WORD") short LimitLow$get(@C("struct _WOW64_LDT_ENTRY") MemorySegment seg) {
            return (short)winnt_h$constants$3._WOW64_LDT_ENTRY$LimitLow$VH().get(seg);
        }
        public static  @C("WORD") short LimitLow$get(@C("struct _WOW64_LDT_ENTRY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$3._WOW64_LDT_ENTRY$LimitLow$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LimitLow$set(@C("struct _WOW64_LDT_ENTRY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$3._WOW64_LDT_ENTRY$LimitLow$VH().set(seg, x);
        }
        public static void LimitLow$set(@C("struct _WOW64_LDT_ENTRY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$3._WOW64_LDT_ENTRY$LimitLow$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseLow$VH() {
            return winnt_h$constants$3._WOW64_LDT_ENTRY$BaseLow$VH();
        }
        public static  @C("WORD") short BaseLow$get(@C("struct _WOW64_LDT_ENTRY") MemorySegment seg) {
            return (short)winnt_h$constants$3._WOW64_LDT_ENTRY$BaseLow$VH().get(seg);
        }
        public static  @C("WORD") short BaseLow$get(@C("struct _WOW64_LDT_ENTRY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$3._WOW64_LDT_ENTRY$BaseLow$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseLow$set(@C("struct _WOW64_LDT_ENTRY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$3._WOW64_LDT_ENTRY$BaseLow$VH().set(seg, x);
        }
        public static void BaseLow$set(@C("struct _WOW64_LDT_ENTRY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$3._WOW64_LDT_ENTRY$BaseLow$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("union ")public static class HighWord {

            /* package-private */ HighWord() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$union$LAYOUT();
            }
            @C("struct ")public static class Bytes {

                /* package-private */ Bytes() {}
                public static MemoryLayout $LAYOUT() {
                    return winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT();
                }
                public static VarHandle BaseMid$VH() {
                    return winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$VH();
                }
                public static  @C("BYTE") byte BaseMid$get(@C("struct ") MemorySegment seg) {
                    return (byte)winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$VH().get(seg);
                }
                public static  @C("BYTE") byte BaseMid$get(@C("struct ") MemorySegment seg, long index) {
                    return (byte)winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void BaseMid$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                    winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$VH().set(seg, x);
                }
                public static void BaseMid$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                    winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle Flags1$VH() {
                    return winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$VH();
                }
                public static  @C("BYTE") byte Flags1$get(@C("struct ") MemorySegment seg) {
                    return (byte)winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$VH().get(seg);
                }
                public static  @C("BYTE") byte Flags1$get(@C("struct ") MemorySegment seg, long index) {
                    return (byte)winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void Flags1$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                    winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$VH().set(seg, x);
                }
                public static void Flags1$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                    winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle Flags2$VH() {
                    return winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$VH();
                }
                public static  @C("BYTE") byte Flags2$get(@C("struct ") MemorySegment seg) {
                    return (byte)winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$VH().get(seg);
                }
                public static  @C("BYTE") byte Flags2$get(@C("struct ") MemorySegment seg, long index) {
                    return (byte)winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void Flags2$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                    winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$VH().set(seg, x);
                }
                public static void Flags2$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                    winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle BaseHi$VH() {
                    return winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$VH();
                }
                public static  @C("BYTE") byte BaseHi$get(@C("struct ") MemorySegment seg) {
                    return (byte)winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$VH().get(seg);
                }
                public static  @C("BYTE") byte BaseHi$get(@C("struct ") MemorySegment seg, long index) {
                    return (byte)winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void BaseHi$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                    winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$VH().set(seg, x);
                }
                public static void BaseHi$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                    winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment Bytes$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            @C("struct ")public static class Bits {

                /* package-private */ Bits() {}
                public static MemoryLayout $LAYOUT() {
                    return winnt_h$constants$3._WOW64_LDT_ENTRY$HighWord$Bits$struct$LAYOUT();
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment Bits$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment HighWord$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 4));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _WOW64_LDT_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _WOW64_LDT_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _WOW64_LDT_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _WOW64_LDT_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _WOW64_LDT_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _WOW64_LDT_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _WOW64_LDT_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _WOW64_LDT_ENTRY")public static class WOW64_LDT_ENTRY extends _WOW64_LDT_ENTRY {

        /* package-private */ WOW64_LDT_ENTRY() {}
    }

    @C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY")public static class _WOW64_DESCRIPTOR_TABLE_ENTRY {

        /* package-private */ _WOW64_DESCRIPTOR_TABLE_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._WOW64_DESCRIPTOR_TABLE_ENTRY$struct$LAYOUT();
        }
        public static VarHandle Selector$VH() {
            return winnt_h$constants$3._WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$VH();
        }
        public static  @C("DWORD") int Selector$get(@C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$3._WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$VH().get(seg);
        }
        public static  @C("DWORD") int Selector$get(@C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Selector$set(@C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$VH().set(seg, x);
        }
        public static void Selector$set(@C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Descriptor$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _WOW64_DESCRIPTOR_TABLE_ENTRY")public static class WOW64_DESCRIPTOR_TABLE_ENTRY extends _WOW64_DESCRIPTOR_TABLE_ENTRY {

        /* package-private */ WOW64_DESCRIPTOR_TABLE_ENTRY() {}
    }

    @C("struct _EXCEPTION_RECORD")public static class _EXCEPTION_RECORD {

        /* package-private */ _EXCEPTION_RECORD() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._EXCEPTION_RECORD$struct$LAYOUT();
        }
        public static VarHandle ExceptionCode$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD$ExceptionCode$VH();
        }
        public static  @C("DWORD") int ExceptionCode$get(@C("struct _EXCEPTION_RECORD") MemorySegment seg) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD$ExceptionCode$VH().get(seg);
        }
        public static  @C("DWORD") int ExceptionCode$get(@C("struct _EXCEPTION_RECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD$ExceptionCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionCode$set(@C("struct _EXCEPTION_RECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD$ExceptionCode$VH().set(seg, x);
        }
        public static void ExceptionCode$set(@C("struct _EXCEPTION_RECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD$ExceptionCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExceptionFlags$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD$ExceptionFlags$VH();
        }
        public static  @C("DWORD") int ExceptionFlags$get(@C("struct _EXCEPTION_RECORD") MemorySegment seg) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD$ExceptionFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ExceptionFlags$get(@C("struct _EXCEPTION_RECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD$ExceptionFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionFlags$set(@C("struct _EXCEPTION_RECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD$ExceptionFlags$VH().set(seg, x);
        }
        public static void ExceptionFlags$set(@C("struct _EXCEPTION_RECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD$ExceptionFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExceptionRecord$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD$ExceptionRecord$VH();
        }
        public static  @C("struct _EXCEPTION_RECORD*") MemoryAddress ExceptionRecord$get(@C("struct _EXCEPTION_RECORD") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._EXCEPTION_RECORD$ExceptionRecord$VH().get(seg);
        }
        public static  @C("struct _EXCEPTION_RECORD*") MemoryAddress ExceptionRecord$get(@C("struct _EXCEPTION_RECORD") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._EXCEPTION_RECORD$ExceptionRecord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionRecord$set(@C("struct _EXCEPTION_RECORD") MemorySegment seg, @C("struct _EXCEPTION_RECORD*") MemoryAddress x) {
            winnt_h$constants$3._EXCEPTION_RECORD$ExceptionRecord$VH().set(seg, x);
        }
        public static void ExceptionRecord$set(@C("struct _EXCEPTION_RECORD") MemorySegment seg, long index, @C("struct _EXCEPTION_RECORD*") MemoryAddress x) {
            winnt_h$constants$3._EXCEPTION_RECORD$ExceptionRecord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExceptionAddress$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD$ExceptionAddress$VH();
        }
        public static  @C("PVOID") MemoryAddress ExceptionAddress$get(@C("struct _EXCEPTION_RECORD") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._EXCEPTION_RECORD$ExceptionAddress$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress ExceptionAddress$get(@C("struct _EXCEPTION_RECORD") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._EXCEPTION_RECORD$ExceptionAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionAddress$set(@C("struct _EXCEPTION_RECORD") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$3._EXCEPTION_RECORD$ExceptionAddress$VH().set(seg, x);
        }
        public static void ExceptionAddress$set(@C("struct _EXCEPTION_RECORD") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$3._EXCEPTION_RECORD$ExceptionAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberParameters$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD$NumberParameters$VH();
        }
        public static  @C("DWORD") int NumberParameters$get(@C("struct _EXCEPTION_RECORD") MemorySegment seg) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD$NumberParameters$VH().get(seg);
        }
        public static  @C("DWORD") int NumberParameters$get(@C("struct _EXCEPTION_RECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD$NumberParameters$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberParameters$set(@C("struct _EXCEPTION_RECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD$NumberParameters$VH().set(seg, x);
        }
        public static void NumberParameters$set(@C("struct _EXCEPTION_RECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD$NumberParameters$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ExceptionInformation$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 120));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _EXCEPTION_RECORD") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _EXCEPTION_RECORD") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _EXCEPTION_RECORD[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _EXCEPTION_RECORD[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _EXCEPTION_RECORD*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _EXCEPTION_RECORD*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _EXCEPTION_RECORD") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _EXCEPTION_RECORD")public static class EXCEPTION_RECORD extends _EXCEPTION_RECORD {

        /* package-private */ EXCEPTION_RECORD() {}
    }

    @C("struct _EXCEPTION_RECORD32")public static class _EXCEPTION_RECORD32 {

        /* package-private */ _EXCEPTION_RECORD32() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._EXCEPTION_RECORD32$struct$LAYOUT();
        }
        public static VarHandle ExceptionCode$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionCode$VH();
        }
        public static  @C("DWORD") int ExceptionCode$get(@C("struct _EXCEPTION_RECORD32") MemorySegment seg) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionCode$VH().get(seg);
        }
        public static  @C("DWORD") int ExceptionCode$get(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionCode$set(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionCode$VH().set(seg, x);
        }
        public static void ExceptionCode$set(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExceptionFlags$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionFlags$VH();
        }
        public static  @C("DWORD") int ExceptionFlags$get(@C("struct _EXCEPTION_RECORD32") MemorySegment seg) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ExceptionFlags$get(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionFlags$set(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionFlags$VH().set(seg, x);
        }
        public static void ExceptionFlags$set(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExceptionRecord$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionRecord$VH();
        }
        public static  @C("DWORD") int ExceptionRecord$get(@C("struct _EXCEPTION_RECORD32") MemorySegment seg) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionRecord$VH().get(seg);
        }
        public static  @C("DWORD") int ExceptionRecord$get(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionRecord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionRecord$set(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionRecord$VH().set(seg, x);
        }
        public static void ExceptionRecord$set(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionRecord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExceptionAddress$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionAddress$VH();
        }
        public static  @C("DWORD") int ExceptionAddress$get(@C("struct _EXCEPTION_RECORD32") MemorySegment seg) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionAddress$VH().get(seg);
        }
        public static  @C("DWORD") int ExceptionAddress$get(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionAddress$set(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionAddress$VH().set(seg, x);
        }
        public static void ExceptionAddress$set(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD32$ExceptionAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberParameters$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD32$NumberParameters$VH();
        }
        public static  @C("DWORD") int NumberParameters$get(@C("struct _EXCEPTION_RECORD32") MemorySegment seg) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD32$NumberParameters$VH().get(seg);
        }
        public static  @C("DWORD") int NumberParameters$get(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD32$NumberParameters$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberParameters$set(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD32$NumberParameters$VH().set(seg, x);
        }
        public static void NumberParameters$set(@C("struct _EXCEPTION_RECORD32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD32$NumberParameters$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ExceptionInformation$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 60));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _EXCEPTION_RECORD32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _EXCEPTION_RECORD32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _EXCEPTION_RECORD32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _EXCEPTION_RECORD32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _EXCEPTION_RECORD32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _EXCEPTION_RECORD32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _EXCEPTION_RECORD32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _EXCEPTION_RECORD32")public static class EXCEPTION_RECORD32 extends _EXCEPTION_RECORD32 {

        /* package-private */ EXCEPTION_RECORD32() {}
    }

    @C("struct _EXCEPTION_RECORD64")public static class _EXCEPTION_RECORD64 {

        /* package-private */ _EXCEPTION_RECORD64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._EXCEPTION_RECORD64$struct$LAYOUT();
        }
        public static VarHandle ExceptionCode$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionCode$VH();
        }
        public static  @C("DWORD") int ExceptionCode$get(@C("struct _EXCEPTION_RECORD64") MemorySegment seg) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionCode$VH().get(seg);
        }
        public static  @C("DWORD") int ExceptionCode$get(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionCode$set(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionCode$VH().set(seg, x);
        }
        public static void ExceptionCode$set(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExceptionFlags$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionFlags$VH();
        }
        public static  @C("DWORD") int ExceptionFlags$get(@C("struct _EXCEPTION_RECORD64") MemorySegment seg) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ExceptionFlags$get(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionFlags$set(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionFlags$VH().set(seg, x);
        }
        public static void ExceptionFlags$set(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExceptionRecord$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionRecord$VH();
        }
        public static  @C("DWORD64") long ExceptionRecord$get(@C("struct _EXCEPTION_RECORD64") MemorySegment seg) {
            return (long)winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionRecord$VH().get(seg);
        }
        public static  @C("DWORD64") long ExceptionRecord$get(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionRecord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionRecord$set(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionRecord$VH().set(seg, x);
        }
        public static void ExceptionRecord$set(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionRecord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExceptionAddress$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionAddress$VH();
        }
        public static  @C("DWORD64") long ExceptionAddress$get(@C("struct _EXCEPTION_RECORD64") MemorySegment seg) {
            return (long)winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionAddress$VH().get(seg);
        }
        public static  @C("DWORD64") long ExceptionAddress$get(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionAddress$set(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionAddress$VH().set(seg, x);
        }
        public static void ExceptionAddress$set(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$3._EXCEPTION_RECORD64$ExceptionAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberParameters$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD64$NumberParameters$VH();
        }
        public static  @C("DWORD") int NumberParameters$get(@C("struct _EXCEPTION_RECORD64") MemorySegment seg) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD64$NumberParameters$VH().get(seg);
        }
        public static  @C("DWORD") int NumberParameters$get(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD64$NumberParameters$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberParameters$set(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD64$NumberParameters$VH().set(seg, x);
        }
        public static void NumberParameters$set(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD64$NumberParameters$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __unusedAlignment$VH() {
            return winnt_h$constants$3._EXCEPTION_RECORD64$__unusedAlignment$VH();
        }
        public static  @C("DWORD") int __unusedAlignment$get(@C("struct _EXCEPTION_RECORD64") MemorySegment seg) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD64$__unusedAlignment$VH().get(seg);
        }
        public static  @C("DWORD") int __unusedAlignment$get(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._EXCEPTION_RECORD64$__unusedAlignment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __unusedAlignment$set(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD64$__unusedAlignment$VH().set(seg, x);
        }
        public static void __unusedAlignment$set(@C("struct _EXCEPTION_RECORD64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._EXCEPTION_RECORD64$__unusedAlignment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ExceptionInformation$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 120));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _EXCEPTION_RECORD64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _EXCEPTION_RECORD64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _EXCEPTION_RECORD64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _EXCEPTION_RECORD64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _EXCEPTION_RECORD64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _EXCEPTION_RECORD64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _EXCEPTION_RECORD64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _EXCEPTION_RECORD64")public static class EXCEPTION_RECORD64 extends _EXCEPTION_RECORD64 {

        /* package-private */ EXCEPTION_RECORD64() {}
    }

    @C("struct _EXCEPTION_POINTERS")public static class _EXCEPTION_POINTERS {

        /* package-private */ _EXCEPTION_POINTERS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._EXCEPTION_POINTERS$struct$LAYOUT();
        }
        public static VarHandle ExceptionRecord$VH() {
            return winnt_h$constants$3._EXCEPTION_POINTERS$ExceptionRecord$VH();
        }
        public static  @C("PEXCEPTION_RECORD") MemoryAddress ExceptionRecord$get(@C("struct _EXCEPTION_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._EXCEPTION_POINTERS$ExceptionRecord$VH().get(seg);
        }
        public static  @C("PEXCEPTION_RECORD") MemoryAddress ExceptionRecord$get(@C("struct _EXCEPTION_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._EXCEPTION_POINTERS$ExceptionRecord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionRecord$set(@C("struct _EXCEPTION_POINTERS") MemorySegment seg, @C("PEXCEPTION_RECORD") MemoryAddress x) {
            winnt_h$constants$3._EXCEPTION_POINTERS$ExceptionRecord$VH().set(seg, x);
        }
        public static void ExceptionRecord$set(@C("struct _EXCEPTION_POINTERS") MemorySegment seg, long index, @C("PEXCEPTION_RECORD") MemoryAddress x) {
            winnt_h$constants$3._EXCEPTION_POINTERS$ExceptionRecord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ContextRecord$VH() {
            return winnt_h$constants$3._EXCEPTION_POINTERS$ContextRecord$VH();
        }
        public static  @C("PCONTEXT") MemoryAddress ContextRecord$get(@C("struct _EXCEPTION_POINTERS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._EXCEPTION_POINTERS$ContextRecord$VH().get(seg);
        }
        public static  @C("PCONTEXT") MemoryAddress ContextRecord$get(@C("struct _EXCEPTION_POINTERS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._EXCEPTION_POINTERS$ContextRecord$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ContextRecord$set(@C("struct _EXCEPTION_POINTERS") MemorySegment seg, @C("PCONTEXT") MemoryAddress x) {
            winnt_h$constants$3._EXCEPTION_POINTERS$ContextRecord$VH().set(seg, x);
        }
        public static void ContextRecord$set(@C("struct _EXCEPTION_POINTERS") MemorySegment seg, long index, @C("PCONTEXT") MemoryAddress x) {
            winnt_h$constants$3._EXCEPTION_POINTERS$ContextRecord$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _EXCEPTION_POINTERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _EXCEPTION_POINTERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _EXCEPTION_POINTERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _EXCEPTION_POINTERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _EXCEPTION_POINTERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _EXCEPTION_POINTERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _EXCEPTION_POINTERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _EXCEPTION_POINTERS")public static class EXCEPTION_POINTERS extends _EXCEPTION_POINTERS {

        /* package-private */ EXCEPTION_POINTERS() {}
    }

    @C("struct _GENERIC_MAPPING")public static class _GENERIC_MAPPING {

        /* package-private */ _GENERIC_MAPPING() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._GENERIC_MAPPING$struct$LAYOUT();
        }
        public static VarHandle GenericRead$VH() {
            return winnt_h$constants$3._GENERIC_MAPPING$GenericRead$VH();
        }
        public static  @C("ACCESS_MASK") int GenericRead$get(@C("struct _GENERIC_MAPPING") MemorySegment seg) {
            return (int)winnt_h$constants$3._GENERIC_MAPPING$GenericRead$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int GenericRead$get(@C("struct _GENERIC_MAPPING") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._GENERIC_MAPPING$GenericRead$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GenericRead$set(@C("struct _GENERIC_MAPPING") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._GENERIC_MAPPING$GenericRead$VH().set(seg, x);
        }
        public static void GenericRead$set(@C("struct _GENERIC_MAPPING") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._GENERIC_MAPPING$GenericRead$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GenericWrite$VH() {
            return winnt_h$constants$3._GENERIC_MAPPING$GenericWrite$VH();
        }
        public static  @C("ACCESS_MASK") int GenericWrite$get(@C("struct _GENERIC_MAPPING") MemorySegment seg) {
            return (int)winnt_h$constants$3._GENERIC_MAPPING$GenericWrite$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int GenericWrite$get(@C("struct _GENERIC_MAPPING") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._GENERIC_MAPPING$GenericWrite$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GenericWrite$set(@C("struct _GENERIC_MAPPING") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._GENERIC_MAPPING$GenericWrite$VH().set(seg, x);
        }
        public static void GenericWrite$set(@C("struct _GENERIC_MAPPING") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._GENERIC_MAPPING$GenericWrite$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GenericExecute$VH() {
            return winnt_h$constants$3._GENERIC_MAPPING$GenericExecute$VH();
        }
        public static  @C("ACCESS_MASK") int GenericExecute$get(@C("struct _GENERIC_MAPPING") MemorySegment seg) {
            return (int)winnt_h$constants$3._GENERIC_MAPPING$GenericExecute$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int GenericExecute$get(@C("struct _GENERIC_MAPPING") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._GENERIC_MAPPING$GenericExecute$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GenericExecute$set(@C("struct _GENERIC_MAPPING") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._GENERIC_MAPPING$GenericExecute$VH().set(seg, x);
        }
        public static void GenericExecute$set(@C("struct _GENERIC_MAPPING") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._GENERIC_MAPPING$GenericExecute$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GenericAll$VH() {
            return winnt_h$constants$3._GENERIC_MAPPING$GenericAll$VH();
        }
        public static  @C("ACCESS_MASK") int GenericAll$get(@C("struct _GENERIC_MAPPING") MemorySegment seg) {
            return (int)winnt_h$constants$3._GENERIC_MAPPING$GenericAll$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int GenericAll$get(@C("struct _GENERIC_MAPPING") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._GENERIC_MAPPING$GenericAll$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GenericAll$set(@C("struct _GENERIC_MAPPING") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._GENERIC_MAPPING$GenericAll$VH().set(seg, x);
        }
        public static void GenericAll$set(@C("struct _GENERIC_MAPPING") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._GENERIC_MAPPING$GenericAll$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _GENERIC_MAPPING") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _GENERIC_MAPPING") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _GENERIC_MAPPING[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _GENERIC_MAPPING[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _GENERIC_MAPPING*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _GENERIC_MAPPING*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _GENERIC_MAPPING") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _GENERIC_MAPPING")public static class GENERIC_MAPPING extends _GENERIC_MAPPING {

        /* package-private */ GENERIC_MAPPING() {}
    }

    @C("struct _LUID_AND_ATTRIBUTES")public static class _LUID_AND_ATTRIBUTES {

        /* package-private */ _LUID_AND_ATTRIBUTES() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._LUID_AND_ATTRIBUTES$struct$LAYOUT();
        }
        public static MemorySegment Luid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static VarHandle Attributes$VH() {
            return winnt_h$constants$3._LUID_AND_ATTRIBUTES$Attributes$VH();
        }
        public static  @C("DWORD") int Attributes$get(@C("struct _LUID_AND_ATTRIBUTES") MemorySegment seg) {
            return (int)winnt_h$constants$3._LUID_AND_ATTRIBUTES$Attributes$VH().get(seg);
        }
        public static  @C("DWORD") int Attributes$get(@C("struct _LUID_AND_ATTRIBUTES") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._LUID_AND_ATTRIBUTES$Attributes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Attributes$set(@C("struct _LUID_AND_ATTRIBUTES") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._LUID_AND_ATTRIBUTES$Attributes$VH().set(seg, x);
        }
        public static void Attributes$set(@C("struct _LUID_AND_ATTRIBUTES") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._LUID_AND_ATTRIBUTES$Attributes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _LUID_AND_ATTRIBUTES") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _LUID_AND_ATTRIBUTES") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _LUID_AND_ATTRIBUTES[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _LUID_AND_ATTRIBUTES[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _LUID_AND_ATTRIBUTES*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _LUID_AND_ATTRIBUTES*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _LUID_AND_ATTRIBUTES") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _LUID_AND_ATTRIBUTES")public static class LUID_AND_ATTRIBUTES extends _LUID_AND_ATTRIBUTES {

        /* package-private */ LUID_AND_ATTRIBUTES() {}
    }

    @C("struct _SID_IDENTIFIER_AUTHORITY")public static class _SID_IDENTIFIER_AUTHORITY {

        /* package-private */ _SID_IDENTIFIER_AUTHORITY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SID_IDENTIFIER_AUTHORITY$struct$LAYOUT();
        }
        public static MemorySegment Value$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 6));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SID_IDENTIFIER_AUTHORITY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SID_IDENTIFIER_AUTHORITY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SID_IDENTIFIER_AUTHORITY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SID_IDENTIFIER_AUTHORITY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SID_IDENTIFIER_AUTHORITY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SID_IDENTIFIER_AUTHORITY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SID_IDENTIFIER_AUTHORITY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SID_IDENTIFIER_AUTHORITY")public static class SID_IDENTIFIER_AUTHORITY extends _SID_IDENTIFIER_AUTHORITY {

        /* package-private */ SID_IDENTIFIER_AUTHORITY() {}
    }

    @C("struct _SID")public static class _SID {

        /* package-private */ _SID() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SID$struct$LAYOUT();
        }
        public static VarHandle Revision$VH() {
            return winnt_h$constants$3._SID$Revision$VH();
        }
        public static  @C("BYTE") byte Revision$get(@C("struct _SID") MemorySegment seg) {
            return (byte)winnt_h$constants$3._SID$Revision$VH().get(seg);
        }
        public static  @C("BYTE") byte Revision$get(@C("struct _SID") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$3._SID$Revision$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Revision$set(@C("struct _SID") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$3._SID$Revision$VH().set(seg, x);
        }
        public static void Revision$set(@C("struct _SID") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$3._SID$Revision$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SubAuthorityCount$VH() {
            return winnt_h$constants$3._SID$SubAuthorityCount$VH();
        }
        public static  @C("BYTE") byte SubAuthorityCount$get(@C("struct _SID") MemorySegment seg) {
            return (byte)winnt_h$constants$3._SID$SubAuthorityCount$VH().get(seg);
        }
        public static  @C("BYTE") byte SubAuthorityCount$get(@C("struct _SID") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$3._SID$SubAuthorityCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SubAuthorityCount$set(@C("struct _SID") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$3._SID$SubAuthorityCount$VH().set(seg, x);
        }
        public static void SubAuthorityCount$set(@C("struct _SID") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$3._SID$SubAuthorityCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment IdentifierAuthority$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2, 6));
        }
        public static MemorySegment SubAuthority$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 4));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SID") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SID") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SID[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SID[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SID*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SID*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SID") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SID")public static class SID extends _SID {

        /* package-private */ SID() {}
    }

    @C("union _SE_SID")public static class _SE_SID {

        /* package-private */ _SE_SID() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SE_SID$union$LAYOUT();
        }
        public static MemorySegment Sid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 12));
        }
        public static MemorySegment Buffer$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 68));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union _SE_SID") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union _SE_SID") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union _SE_SID[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union _SE_SID[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union _SE_SID*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union _SE_SID*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union _SE_SID") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("union _SE_SID")public static class SE_SID extends _SE_SID {

        /* package-private */ SE_SID() {}
    }

    @C("struct _SID_AND_ATTRIBUTES")public static class _SID_AND_ATTRIBUTES {

        /* package-private */ _SID_AND_ATTRIBUTES() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SID_AND_ATTRIBUTES$struct$LAYOUT();
        }
        public static VarHandle Sid$VH() {
            return winnt_h$constants$3._SID_AND_ATTRIBUTES$Sid$VH();
        }
        public static  @C("PSID") MemoryAddress Sid$get(@C("struct _SID_AND_ATTRIBUTES") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._SID_AND_ATTRIBUTES$Sid$VH().get(seg);
        }
        public static  @C("PSID") MemoryAddress Sid$get(@C("struct _SID_AND_ATTRIBUTES") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._SID_AND_ATTRIBUTES$Sid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sid$set(@C("struct _SID_AND_ATTRIBUTES") MemorySegment seg, @C("PSID") MemoryAddress x) {
            winnt_h$constants$3._SID_AND_ATTRIBUTES$Sid$VH().set(seg, x);
        }
        public static void Sid$set(@C("struct _SID_AND_ATTRIBUTES") MemorySegment seg, long index, @C("PSID") MemoryAddress x) {
            winnt_h$constants$3._SID_AND_ATTRIBUTES$Sid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Attributes$VH() {
            return winnt_h$constants$3._SID_AND_ATTRIBUTES$Attributes$VH();
        }
        public static  @C("DWORD") int Attributes$get(@C("struct _SID_AND_ATTRIBUTES") MemorySegment seg) {
            return (int)winnt_h$constants$3._SID_AND_ATTRIBUTES$Attributes$VH().get(seg);
        }
        public static  @C("DWORD") int Attributes$get(@C("struct _SID_AND_ATTRIBUTES") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SID_AND_ATTRIBUTES$Attributes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Attributes$set(@C("struct _SID_AND_ATTRIBUTES") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SID_AND_ATTRIBUTES$Attributes$VH().set(seg, x);
        }
        public static void Attributes$set(@C("struct _SID_AND_ATTRIBUTES") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SID_AND_ATTRIBUTES$Attributes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SID_AND_ATTRIBUTES") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SID_AND_ATTRIBUTES") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SID_AND_ATTRIBUTES[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SID_AND_ATTRIBUTES[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SID_AND_ATTRIBUTES*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SID_AND_ATTRIBUTES*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SID_AND_ATTRIBUTES") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SID_AND_ATTRIBUTES")public static class SID_AND_ATTRIBUTES extends _SID_AND_ATTRIBUTES {

        /* package-private */ SID_AND_ATTRIBUTES() {}
    }

    @C("struct _SID_AND_ATTRIBUTES_HASH")public static class _SID_AND_ATTRIBUTES_HASH {

        /* package-private */ _SID_AND_ATTRIBUTES_HASH() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SID_AND_ATTRIBUTES_HASH$struct$LAYOUT();
        }
        public static VarHandle SidCount$VH() {
            return winnt_h$constants$3._SID_AND_ATTRIBUTES_HASH$SidCount$VH();
        }
        public static  @C("DWORD") int SidCount$get(@C("struct _SID_AND_ATTRIBUTES_HASH") MemorySegment seg) {
            return (int)winnt_h$constants$3._SID_AND_ATTRIBUTES_HASH$SidCount$VH().get(seg);
        }
        public static  @C("DWORD") int SidCount$get(@C("struct _SID_AND_ATTRIBUTES_HASH") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SID_AND_ATTRIBUTES_HASH$SidCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidCount$set(@C("struct _SID_AND_ATTRIBUTES_HASH") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SID_AND_ATTRIBUTES_HASH$SidCount$VH().set(seg, x);
        }
        public static void SidCount$set(@C("struct _SID_AND_ATTRIBUTES_HASH") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SID_AND_ATTRIBUTES_HASH$SidCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidAttr$VH() {
            return winnt_h$constants$3._SID_AND_ATTRIBUTES_HASH$SidAttr$VH();
        }
        public static  @C("PSID_AND_ATTRIBUTES") MemoryAddress SidAttr$get(@C("struct _SID_AND_ATTRIBUTES_HASH") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._SID_AND_ATTRIBUTES_HASH$SidAttr$VH().get(seg);
        }
        public static  @C("PSID_AND_ATTRIBUTES") MemoryAddress SidAttr$get(@C("struct _SID_AND_ATTRIBUTES_HASH") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$3._SID_AND_ATTRIBUTES_HASH$SidAttr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidAttr$set(@C("struct _SID_AND_ATTRIBUTES_HASH") MemorySegment seg, @C("PSID_AND_ATTRIBUTES") MemoryAddress x) {
            winnt_h$constants$3._SID_AND_ATTRIBUTES_HASH$SidAttr$VH().set(seg, x);
        }
        public static void SidAttr$set(@C("struct _SID_AND_ATTRIBUTES_HASH") MemorySegment seg, long index, @C("PSID_AND_ATTRIBUTES") MemoryAddress x) {
            winnt_h$constants$3._SID_AND_ATTRIBUTES_HASH$SidAttr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Hash$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 256));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SID_AND_ATTRIBUTES_HASH") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SID_AND_ATTRIBUTES_HASH") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SID_AND_ATTRIBUTES_HASH[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SID_AND_ATTRIBUTES_HASH[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SID_AND_ATTRIBUTES_HASH*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SID_AND_ATTRIBUTES_HASH*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SID_AND_ATTRIBUTES_HASH") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SID_AND_ATTRIBUTES_HASH")public static class SID_AND_ATTRIBUTES_HASH extends _SID_AND_ATTRIBUTES_HASH {

        /* package-private */ SID_AND_ATTRIBUTES_HASH() {}
    }

    @C("struct _ACL")public static class _ACL {

        /* package-private */ _ACL() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._ACL$struct$LAYOUT();
        }
        public static VarHandle AclRevision$VH() {
            return winnt_h$constants$3._ACL$AclRevision$VH();
        }
        public static  @C("BYTE") byte AclRevision$get(@C("struct _ACL") MemorySegment seg) {
            return (byte)winnt_h$constants$3._ACL$AclRevision$VH().get(seg);
        }
        public static  @C("BYTE") byte AclRevision$get(@C("struct _ACL") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$3._ACL$AclRevision$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AclRevision$set(@C("struct _ACL") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$3._ACL$AclRevision$VH().set(seg, x);
        }
        public static void AclRevision$set(@C("struct _ACL") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$3._ACL$AclRevision$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sbz1$VH() {
            return winnt_h$constants$3._ACL$Sbz1$VH();
        }
        public static  @C("BYTE") byte Sbz1$get(@C("struct _ACL") MemorySegment seg) {
            return (byte)winnt_h$constants$3._ACL$Sbz1$VH().get(seg);
        }
        public static  @C("BYTE") byte Sbz1$get(@C("struct _ACL") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$3._ACL$Sbz1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sbz1$set(@C("struct _ACL") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$3._ACL$Sbz1$VH().set(seg, x);
        }
        public static void Sbz1$set(@C("struct _ACL") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$3._ACL$Sbz1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AclSize$VH() {
            return winnt_h$constants$3._ACL$AclSize$VH();
        }
        public static  @C("WORD") short AclSize$get(@C("struct _ACL") MemorySegment seg) {
            return (short)winnt_h$constants$3._ACL$AclSize$VH().get(seg);
        }
        public static  @C("WORD") short AclSize$get(@C("struct _ACL") MemorySegment seg, long index) {
            return (short)winnt_h$constants$3._ACL$AclSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AclSize$set(@C("struct _ACL") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$3._ACL$AclSize$VH().set(seg, x);
        }
        public static void AclSize$set(@C("struct _ACL") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$3._ACL$AclSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AceCount$VH() {
            return winnt_h$constants$3._ACL$AceCount$VH();
        }
        public static  @C("WORD") short AceCount$get(@C("struct _ACL") MemorySegment seg) {
            return (short)winnt_h$constants$3._ACL$AceCount$VH().get(seg);
        }
        public static  @C("WORD") short AceCount$get(@C("struct _ACL") MemorySegment seg, long index) {
            return (short)winnt_h$constants$3._ACL$AceCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AceCount$set(@C("struct _ACL") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$3._ACL$AceCount$VH().set(seg, x);
        }
        public static void AceCount$set(@C("struct _ACL") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$3._ACL$AceCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sbz2$VH() {
            return winnt_h$constants$3._ACL$Sbz2$VH();
        }
        public static  @C("WORD") short Sbz2$get(@C("struct _ACL") MemorySegment seg) {
            return (short)winnt_h$constants$3._ACL$Sbz2$VH().get(seg);
        }
        public static  @C("WORD") short Sbz2$get(@C("struct _ACL") MemorySegment seg, long index) {
            return (short)winnt_h$constants$3._ACL$Sbz2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sbz2$set(@C("struct _ACL") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$3._ACL$Sbz2$VH().set(seg, x);
        }
        public static void Sbz2$set(@C("struct _ACL") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$3._ACL$Sbz2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACL") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACL") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACL[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACL[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACL*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACL*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACL") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACL")public static class ACL extends _ACL {

        /* package-private */ ACL() {}
    }

    @C("struct _ACE_HEADER")public static class _ACE_HEADER {

        /* package-private */ _ACE_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._ACE_HEADER$struct$LAYOUT();
        }
        public static VarHandle AceType$VH() {
            return winnt_h$constants$3._ACE_HEADER$AceType$VH();
        }
        public static  @C("BYTE") byte AceType$get(@C("struct _ACE_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$3._ACE_HEADER$AceType$VH().get(seg);
        }
        public static  @C("BYTE") byte AceType$get(@C("struct _ACE_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$3._ACE_HEADER$AceType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AceType$set(@C("struct _ACE_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$3._ACE_HEADER$AceType$VH().set(seg, x);
        }
        public static void AceType$set(@C("struct _ACE_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$3._ACE_HEADER$AceType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AceFlags$VH() {
            return winnt_h$constants$3._ACE_HEADER$AceFlags$VH();
        }
        public static  @C("BYTE") byte AceFlags$get(@C("struct _ACE_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$3._ACE_HEADER$AceFlags$VH().get(seg);
        }
        public static  @C("BYTE") byte AceFlags$get(@C("struct _ACE_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$3._ACE_HEADER$AceFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AceFlags$set(@C("struct _ACE_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$3._ACE_HEADER$AceFlags$VH().set(seg, x);
        }
        public static void AceFlags$set(@C("struct _ACE_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$3._ACE_HEADER$AceFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AceSize$VH() {
            return winnt_h$constants$3._ACE_HEADER$AceSize$VH();
        }
        public static  @C("WORD") short AceSize$get(@C("struct _ACE_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$3._ACE_HEADER$AceSize$VH().get(seg);
        }
        public static  @C("WORD") short AceSize$get(@C("struct _ACE_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$3._ACE_HEADER$AceSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AceSize$set(@C("struct _ACE_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$3._ACE_HEADER$AceSize$VH().set(seg, x);
        }
        public static void AceSize$set(@C("struct _ACE_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$3._ACE_HEADER$AceSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACE_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACE_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACE_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACE_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACE_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACE_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACE_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACE_HEADER")public static class ACE_HEADER extends _ACE_HEADER {

        /* package-private */ ACE_HEADER() {}
    }

    @C("struct _ACCESS_ALLOWED_ACE")public static class _ACCESS_ALLOWED_ACE {

        /* package-private */ _ACCESS_ALLOWED_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._ACCESS_ALLOWED_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._ACCESS_ALLOWED_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_ALLOWED_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._ACCESS_ALLOWED_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_ALLOWED_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._ACCESS_ALLOWED_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _ACCESS_ALLOWED_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._ACCESS_ALLOWED_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _ACCESS_ALLOWED_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._ACCESS_ALLOWED_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._ACCESS_ALLOWED_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_ALLOWED_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._ACCESS_ALLOWED_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_ALLOWED_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._ACCESS_ALLOWED_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _ACCESS_ALLOWED_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._ACCESS_ALLOWED_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _ACCESS_ALLOWED_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._ACCESS_ALLOWED_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACCESS_ALLOWED_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACCESS_ALLOWED_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACCESS_ALLOWED_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACCESS_ALLOWED_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACCESS_ALLOWED_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACCESS_ALLOWED_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACCESS_ALLOWED_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACCESS_ALLOWED_ACE")public static class ACCESS_ALLOWED_ACE extends _ACCESS_ALLOWED_ACE {

        /* package-private */ ACCESS_ALLOWED_ACE() {}
    }

    @C("struct _ACCESS_DENIED_ACE")public static class _ACCESS_DENIED_ACE {

        /* package-private */ _ACCESS_DENIED_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._ACCESS_DENIED_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._ACCESS_DENIED_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_DENIED_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._ACCESS_DENIED_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_DENIED_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._ACCESS_DENIED_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _ACCESS_DENIED_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._ACCESS_DENIED_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _ACCESS_DENIED_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._ACCESS_DENIED_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._ACCESS_DENIED_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_DENIED_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._ACCESS_DENIED_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_DENIED_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._ACCESS_DENIED_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _ACCESS_DENIED_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._ACCESS_DENIED_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _ACCESS_DENIED_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._ACCESS_DENIED_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACCESS_DENIED_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACCESS_DENIED_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACCESS_DENIED_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACCESS_DENIED_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACCESS_DENIED_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACCESS_DENIED_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACCESS_DENIED_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACCESS_DENIED_ACE")public static class ACCESS_DENIED_ACE extends _ACCESS_DENIED_ACE {

        /* package-private */ ACCESS_DENIED_ACE() {}
    }

    @C("struct _SYSTEM_AUDIT_ACE")public static class _SYSTEM_AUDIT_ACE {

        /* package-private */ _SYSTEM_AUDIT_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SYSTEM_AUDIT_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._SYSTEM_AUDIT_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_AUDIT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_AUDIT_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_AUDIT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_AUDIT_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_AUDIT_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_AUDIT_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_AUDIT_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_AUDIT_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._SYSTEM_AUDIT_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_AUDIT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_AUDIT_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_AUDIT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_AUDIT_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_AUDIT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_AUDIT_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_AUDIT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_AUDIT_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_AUDIT_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_AUDIT_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_AUDIT_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_AUDIT_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_AUDIT_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_AUDIT_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_AUDIT_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_AUDIT_ACE")public static class SYSTEM_AUDIT_ACE extends _SYSTEM_AUDIT_ACE {

        /* package-private */ SYSTEM_AUDIT_ACE() {}
    }

    @C("struct _SYSTEM_ALARM_ACE")public static class _SYSTEM_ALARM_ACE {

        /* package-private */ _SYSTEM_ALARM_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SYSTEM_ALARM_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._SYSTEM_ALARM_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_ALARM_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_ALARM_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_ALARM_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_ALARM_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_ALARM_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_ALARM_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_ALARM_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_ALARM_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._SYSTEM_ALARM_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_ALARM_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_ALARM_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_ALARM_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_ALARM_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_ALARM_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_ALARM_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_ALARM_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_ALARM_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_ALARM_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_ALARM_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_ALARM_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_ALARM_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_ALARM_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_ALARM_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_ALARM_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_ALARM_ACE")public static class SYSTEM_ALARM_ACE extends _SYSTEM_ALARM_ACE {

        /* package-private */ SYSTEM_ALARM_ACE() {}
    }

    @C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE")public static class _SYSTEM_RESOURCE_ATTRIBUTE_ACE {

        /* package-private */ _SYSTEM_RESOURCE_ATTRIBUTE_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE")public static class SYSTEM_RESOURCE_ATTRIBUTE_ACE extends _SYSTEM_RESOURCE_ATTRIBUTE_ACE {

        /* package-private */ SYSTEM_RESOURCE_ATTRIBUTE_ACE() {}
    }

    @C("struct _SYSTEM_SCOPED_POLICY_ID_ACE")public static class _SYSTEM_SCOPED_POLICY_ID_ACE {

        /* package-private */ _SYSTEM_SCOPED_POLICY_ID_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_SCOPED_POLICY_ID_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_SCOPED_POLICY_ID_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_SCOPED_POLICY_ID_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_SCOPED_POLICY_ID_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_SCOPED_POLICY_ID_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_SCOPED_POLICY_ID_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_SCOPED_POLICY_ID_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_SCOPED_POLICY_ID_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_SCOPED_POLICY_ID_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_SCOPED_POLICY_ID_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_SCOPED_POLICY_ID_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_SCOPED_POLICY_ID_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_SCOPED_POLICY_ID_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_SCOPED_POLICY_ID_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_SCOPED_POLICY_ID_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_SCOPED_POLICY_ID_ACE")public static class SYSTEM_SCOPED_POLICY_ID_ACE extends _SYSTEM_SCOPED_POLICY_ID_ACE {

        /* package-private */ SYSTEM_SCOPED_POLICY_ID_ACE() {}
    }

    @C("struct _SYSTEM_MANDATORY_LABEL_ACE")public static class _SYSTEM_MANDATORY_LABEL_ACE {

        /* package-private */ _SYSTEM_MANDATORY_LABEL_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._SYSTEM_MANDATORY_LABEL_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_MANDATORY_LABEL_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_MANDATORY_LABEL_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_MANDATORY_LABEL_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_MANDATORY_LABEL_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_MANDATORY_LABEL_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_MANDATORY_LABEL_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_MANDATORY_LABEL_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_MANDATORY_LABEL_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_MANDATORY_LABEL_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_MANDATORY_LABEL_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_MANDATORY_LABEL_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_MANDATORY_LABEL_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_MANDATORY_LABEL_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_MANDATORY_LABEL_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_MANDATORY_LABEL_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_MANDATORY_LABEL_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_MANDATORY_LABEL_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_MANDATORY_LABEL_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_MANDATORY_LABEL_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_MANDATORY_LABEL_ACE")public static class SYSTEM_MANDATORY_LABEL_ACE extends _SYSTEM_MANDATORY_LABEL_ACE {

        /* package-private */ SYSTEM_MANDATORY_LABEL_ACE() {}
    }

    @C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE")public static class _SYSTEM_PROCESS_TRUST_LABEL_ACE {

        /* package-private */ _SYSTEM_PROCESS_TRUST_LABEL_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_PROCESS_TRUST_LABEL_ACE")public static class SYSTEM_PROCESS_TRUST_LABEL_ACE extends _SYSTEM_PROCESS_TRUST_LABEL_ACE {

        /* package-private */ SYSTEM_PROCESS_TRUST_LABEL_ACE() {}
    }

    @C("struct _SYSTEM_ACCESS_FILTER_ACE")public static class _SYSTEM_ACCESS_FILTER_ACE {

        /* package-private */ _SYSTEM_ACCESS_FILTER_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._SYSTEM_ACCESS_FILTER_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_ACCESS_FILTER_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_ACCESS_FILTER_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_ACCESS_FILTER_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_ACCESS_FILTER_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_ACCESS_FILTER_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_ACCESS_FILTER_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_ACCESS_FILTER_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_ACCESS_FILTER_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._SYSTEM_ACCESS_FILTER_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_ACCESS_FILTER_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_ACCESS_FILTER_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_ACCESS_FILTER_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_ACCESS_FILTER_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_ACCESS_FILTER_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_ACCESS_FILTER_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_ACCESS_FILTER_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_ACCESS_FILTER_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_ACCESS_FILTER_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_ACCESS_FILTER_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_ACCESS_FILTER_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_ACCESS_FILTER_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_ACCESS_FILTER_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_ACCESS_FILTER_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_ACCESS_FILTER_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_ACCESS_FILTER_ACE")public static class SYSTEM_ACCESS_FILTER_ACE extends _SYSTEM_ACCESS_FILTER_ACE {

        /* package-private */ SYSTEM_ACCESS_FILTER_ACE() {}
    }

    @C("struct _ACCESS_ALLOWED_OBJECT_ACE")public static class _ACCESS_ALLOWED_OBJECT_ACE {

        /* package-private */ _ACCESS_ALLOWED_OBJECT_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 16));
        }
        public static MemorySegment InheritedObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 16));
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACCESS_ALLOWED_OBJECT_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACCESS_ALLOWED_OBJECT_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACCESS_ALLOWED_OBJECT_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACCESS_ALLOWED_OBJECT_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACCESS_ALLOWED_OBJECT_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACCESS_ALLOWED_OBJECT_ACE")public static class ACCESS_ALLOWED_OBJECT_ACE extends _ACCESS_ALLOWED_OBJECT_ACE {

        /* package-private */ ACCESS_ALLOWED_OBJECT_ACE() {}
    }

    @C("struct _ACCESS_DENIED_OBJECT_ACE")public static class _ACCESS_DENIED_OBJECT_ACE {

        /* package-private */ _ACCESS_DENIED_OBJECT_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 16));
        }
        public static MemorySegment InheritedObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 16));
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._ACCESS_DENIED_OBJECT_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACCESS_DENIED_OBJECT_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACCESS_DENIED_OBJECT_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACCESS_DENIED_OBJECT_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACCESS_DENIED_OBJECT_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACCESS_DENIED_OBJECT_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACCESS_DENIED_OBJECT_ACE")public static class ACCESS_DENIED_OBJECT_ACE extends _ACCESS_DENIED_OBJECT_ACE {

        /* package-private */ ACCESS_DENIED_OBJECT_ACE() {}
    }

    @C("struct _SYSTEM_AUDIT_OBJECT_ACE")public static class _SYSTEM_AUDIT_OBJECT_ACE {

        /* package-private */ _SYSTEM_AUDIT_OBJECT_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 16));
        }
        public static MemorySegment InheritedObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 16));
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_AUDIT_OBJECT_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_AUDIT_OBJECT_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_AUDIT_OBJECT_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_AUDIT_OBJECT_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_AUDIT_OBJECT_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_AUDIT_OBJECT_ACE")public static class SYSTEM_AUDIT_OBJECT_ACE extends _SYSTEM_AUDIT_OBJECT_ACE {

        /* package-private */ SYSTEM_AUDIT_OBJECT_ACE() {}
    }

    @C("struct _SYSTEM_ALARM_OBJECT_ACE")public static class _SYSTEM_ALARM_OBJECT_ACE {

        /* package-private */ _SYSTEM_ALARM_OBJECT_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 16));
        }
        public static MemorySegment InheritedObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 16));
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$3._SYSTEM_ALARM_OBJECT_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_ALARM_OBJECT_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_ALARM_OBJECT_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_ALARM_OBJECT_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_ALARM_OBJECT_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_ALARM_OBJECT_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_ALARM_OBJECT_ACE")public static class SYSTEM_ALARM_OBJECT_ACE extends _SYSTEM_ALARM_OBJECT_ACE {

        /* package-private */ SYSTEM_ALARM_OBJECT_ACE() {}
    }

    @C("struct _ACCESS_ALLOWED_CALLBACK_ACE")public static class _ACCESS_ALLOWED_CALLBACK_ACE {

        /* package-private */ _ACCESS_ALLOWED_CALLBACK_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_ALLOWED_CALLBACK_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_ALLOWED_CALLBACK_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _ACCESS_ALLOWED_CALLBACK_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _ACCESS_ALLOWED_CALLBACK_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_ALLOWED_CALLBACK_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_ALLOWED_CALLBACK_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _ACCESS_ALLOWED_CALLBACK_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _ACCESS_ALLOWED_CALLBACK_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACCESS_ALLOWED_CALLBACK_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACCESS_ALLOWED_CALLBACK_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACCESS_ALLOWED_CALLBACK_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACCESS_ALLOWED_CALLBACK_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACCESS_ALLOWED_CALLBACK_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACCESS_ALLOWED_CALLBACK_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACCESS_ALLOWED_CALLBACK_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACCESS_ALLOWED_CALLBACK_ACE")public static class ACCESS_ALLOWED_CALLBACK_ACE extends _ACCESS_ALLOWED_CALLBACK_ACE {

        /* package-private */ ACCESS_ALLOWED_CALLBACK_ACE() {}
    }

    @C("struct _ACCESS_DENIED_CALLBACK_ACE")public static class _ACCESS_DENIED_CALLBACK_ACE {

        /* package-private */ _ACCESS_DENIED_CALLBACK_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$4._ACCESS_DENIED_CALLBACK_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_DENIED_CALLBACK_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACCESS_DENIED_CALLBACK_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_DENIED_CALLBACK_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACCESS_DENIED_CALLBACK_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _ACCESS_DENIED_CALLBACK_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._ACCESS_DENIED_CALLBACK_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _ACCESS_DENIED_CALLBACK_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._ACCESS_DENIED_CALLBACK_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$4._ACCESS_DENIED_CALLBACK_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_DENIED_CALLBACK_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACCESS_DENIED_CALLBACK_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_DENIED_CALLBACK_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACCESS_DENIED_CALLBACK_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _ACCESS_DENIED_CALLBACK_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._ACCESS_DENIED_CALLBACK_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _ACCESS_DENIED_CALLBACK_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._ACCESS_DENIED_CALLBACK_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACCESS_DENIED_CALLBACK_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACCESS_DENIED_CALLBACK_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACCESS_DENIED_CALLBACK_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACCESS_DENIED_CALLBACK_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACCESS_DENIED_CALLBACK_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACCESS_DENIED_CALLBACK_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACCESS_DENIED_CALLBACK_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACCESS_DENIED_CALLBACK_ACE")public static class ACCESS_DENIED_CALLBACK_ACE extends _ACCESS_DENIED_CALLBACK_ACE {

        /* package-private */ ACCESS_DENIED_CALLBACK_ACE() {}
    }

    @C("struct _SYSTEM_AUDIT_CALLBACK_ACE")public static class _SYSTEM_AUDIT_CALLBACK_ACE {

        /* package-private */ _SYSTEM_AUDIT_CALLBACK_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_AUDIT_CALLBACK_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_AUDIT_CALLBACK_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_AUDIT_CALLBACK_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_AUDIT_CALLBACK_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_AUDIT_CALLBACK_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_AUDIT_CALLBACK_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_AUDIT_CALLBACK_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_AUDIT_CALLBACK_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_AUDIT_CALLBACK_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_AUDIT_CALLBACK_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_AUDIT_CALLBACK_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_AUDIT_CALLBACK_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_AUDIT_CALLBACK_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_AUDIT_CALLBACK_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_AUDIT_CALLBACK_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_AUDIT_CALLBACK_ACE")public static class SYSTEM_AUDIT_CALLBACK_ACE extends _SYSTEM_AUDIT_CALLBACK_ACE {

        /* package-private */ SYSTEM_AUDIT_CALLBACK_ACE() {}
    }

    @C("struct _SYSTEM_ALARM_CALLBACK_ACE")public static class _SYSTEM_ALARM_CALLBACK_ACE {

        /* package-private */ _SYSTEM_ALARM_CALLBACK_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_ALARM_CALLBACK_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_ALARM_CALLBACK_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_ALARM_CALLBACK_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_ALARM_CALLBACK_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_ALARM_CALLBACK_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_ALARM_CALLBACK_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_ALARM_CALLBACK_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_ALARM_CALLBACK_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_ALARM_CALLBACK_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_ALARM_CALLBACK_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_ALARM_CALLBACK_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_ALARM_CALLBACK_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_ALARM_CALLBACK_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_ALARM_CALLBACK_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_ALARM_CALLBACK_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_ALARM_CALLBACK_ACE")public static class SYSTEM_ALARM_CALLBACK_ACE extends _SYSTEM_ALARM_CALLBACK_ACE {

        /* package-private */ SYSTEM_ALARM_CALLBACK_ACE() {}
    }

    @C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE")public static class _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {

        /* package-private */ _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 16));
        }
        public static MemorySegment InheritedObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 16));
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE")public static class ACCESS_ALLOWED_CALLBACK_OBJECT_ACE extends _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {

        /* package-private */ ACCESS_ALLOWED_CALLBACK_OBJECT_ACE() {}
    }

    @C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE")public static class _ACCESS_DENIED_CALLBACK_OBJECT_ACE {

        /* package-private */ _ACCESS_DENIED_CALLBACK_OBJECT_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 16));
        }
        public static MemorySegment InheritedObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 16));
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE")public static class ACCESS_DENIED_CALLBACK_OBJECT_ACE extends _ACCESS_DENIED_CALLBACK_OBJECT_ACE {

        /* package-private */ ACCESS_DENIED_CALLBACK_OBJECT_ACE() {}
    }

    @C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE")public static class _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {

        /* package-private */ _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 16));
        }
        public static MemorySegment InheritedObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 16));
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE")public static class SYSTEM_AUDIT_CALLBACK_OBJECT_ACE extends _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {

        /* package-private */ SYSTEM_AUDIT_CALLBACK_OBJECT_ACE() {}
    }

    @C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE")public static class _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {

        /* package-private */ _SYSTEM_ALARM_CALLBACK_OBJECT_ACE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT();
        }
        public static MemorySegment Header$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Mask$VH() {
            return winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH();
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int Mask$get(@C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mask$set(@C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH().set(seg, x);
        }
        public static void Mask$set(@C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 16));
        }
        public static MemorySegment InheritedObjectType$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 16));
        }
        public static VarHandle SidStart$VH() {
            return winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH();
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH().get(seg);
        }
        public static  @C("DWORD") int SidStart$get(@C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidStart$set(@C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH().set(seg, x);
        }
        public static void SidStart$set(@C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE")public static class SYSTEM_ALARM_CALLBACK_OBJECT_ACE extends _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {

        /* package-private */ SYSTEM_ALARM_CALLBACK_OBJECT_ACE() {}
    }

    @C("struct _ACL_REVISION_INFORMATION")public static class _ACL_REVISION_INFORMATION {

        /* package-private */ _ACL_REVISION_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._ACL_REVISION_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle AclRevision$VH() {
            return winnt_h$constants$4._ACL_REVISION_INFORMATION$AclRevision$VH();
        }
        public static  @C("DWORD") int AclRevision$get(@C("struct _ACL_REVISION_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACL_REVISION_INFORMATION$AclRevision$VH().get(seg);
        }
        public static  @C("DWORD") int AclRevision$get(@C("struct _ACL_REVISION_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACL_REVISION_INFORMATION$AclRevision$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AclRevision$set(@C("struct _ACL_REVISION_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._ACL_REVISION_INFORMATION$AclRevision$VH().set(seg, x);
        }
        public static void AclRevision$set(@C("struct _ACL_REVISION_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._ACL_REVISION_INFORMATION$AclRevision$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACL_REVISION_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACL_REVISION_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACL_REVISION_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACL_REVISION_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACL_REVISION_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACL_REVISION_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACL_REVISION_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACL_REVISION_INFORMATION")public static class ACL_REVISION_INFORMATION extends _ACL_REVISION_INFORMATION {

        /* package-private */ ACL_REVISION_INFORMATION() {}
    }

    @C("struct _ACL_SIZE_INFORMATION")public static class _ACL_SIZE_INFORMATION {

        /* package-private */ _ACL_SIZE_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._ACL_SIZE_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle AceCount$VH() {
            return winnt_h$constants$4._ACL_SIZE_INFORMATION$AceCount$VH();
        }
        public static  @C("DWORD") int AceCount$get(@C("struct _ACL_SIZE_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACL_SIZE_INFORMATION$AceCount$VH().get(seg);
        }
        public static  @C("DWORD") int AceCount$get(@C("struct _ACL_SIZE_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACL_SIZE_INFORMATION$AceCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AceCount$set(@C("struct _ACL_SIZE_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._ACL_SIZE_INFORMATION$AceCount$VH().set(seg, x);
        }
        public static void AceCount$set(@C("struct _ACL_SIZE_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._ACL_SIZE_INFORMATION$AceCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AclBytesInUse$VH() {
            return winnt_h$constants$4._ACL_SIZE_INFORMATION$AclBytesInUse$VH();
        }
        public static  @C("DWORD") int AclBytesInUse$get(@C("struct _ACL_SIZE_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACL_SIZE_INFORMATION$AclBytesInUse$VH().get(seg);
        }
        public static  @C("DWORD") int AclBytesInUse$get(@C("struct _ACL_SIZE_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACL_SIZE_INFORMATION$AclBytesInUse$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AclBytesInUse$set(@C("struct _ACL_SIZE_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._ACL_SIZE_INFORMATION$AclBytesInUse$VH().set(seg, x);
        }
        public static void AclBytesInUse$set(@C("struct _ACL_SIZE_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._ACL_SIZE_INFORMATION$AclBytesInUse$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AclBytesFree$VH() {
            return winnt_h$constants$4._ACL_SIZE_INFORMATION$AclBytesFree$VH();
        }
        public static  @C("DWORD") int AclBytesFree$get(@C("struct _ACL_SIZE_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$4._ACL_SIZE_INFORMATION$AclBytesFree$VH().get(seg);
        }
        public static  @C("DWORD") int AclBytesFree$get(@C("struct _ACL_SIZE_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._ACL_SIZE_INFORMATION$AclBytesFree$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AclBytesFree$set(@C("struct _ACL_SIZE_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._ACL_SIZE_INFORMATION$AclBytesFree$VH().set(seg, x);
        }
        public static void AclBytesFree$set(@C("struct _ACL_SIZE_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._ACL_SIZE_INFORMATION$AclBytesFree$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACL_SIZE_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACL_SIZE_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACL_SIZE_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACL_SIZE_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACL_SIZE_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACL_SIZE_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACL_SIZE_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACL_SIZE_INFORMATION")public static class ACL_SIZE_INFORMATION extends _ACL_SIZE_INFORMATION {

        /* package-private */ ACL_SIZE_INFORMATION() {}
    }

    @C("struct _SECURITY_DESCRIPTOR_RELATIVE")public static class _SECURITY_DESCRIPTOR_RELATIVE {

        /* package-private */ _SECURITY_DESCRIPTOR_RELATIVE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT();
        }
        public static VarHandle Revision$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Revision$VH();
        }
        public static  @C("BYTE") byte Revision$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg) {
            return (byte)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Revision$VH().get(seg);
        }
        public static  @C("BYTE") byte Revision$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Revision$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Revision$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Revision$VH().set(seg, x);
        }
        public static void Revision$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Revision$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sbz1$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH();
        }
        public static  @C("BYTE") byte Sbz1$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg) {
            return (byte)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH().get(seg);
        }
        public static  @C("BYTE") byte Sbz1$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sbz1$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH().set(seg, x);
        }
        public static void Sbz1$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Control$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Control$VH();
        }
        public static  @C("SECURITY_DESCRIPTOR_CONTROL") short Control$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg) {
            return (short)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Control$VH().get(seg);
        }
        public static  @C("SECURITY_DESCRIPTOR_CONTROL") short Control$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index) {
            return (short)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Control$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Control$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, @C("SECURITY_DESCRIPTOR_CONTROL") short x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Control$VH().set(seg, x);
        }
        public static void Control$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index, @C("SECURITY_DESCRIPTOR_CONTROL") short x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Control$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Owner$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Owner$VH();
        }
        public static  @C("DWORD") int Owner$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Owner$VH().get(seg);
        }
        public static  @C("DWORD") int Owner$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Owner$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Owner$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Owner$VH().set(seg, x);
        }
        public static void Owner$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Owner$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Group$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Group$VH();
        }
        public static  @C("DWORD") int Group$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Group$VH().get(seg);
        }
        public static  @C("DWORD") int Group$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Group$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Group$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Group$VH().set(seg, x);
        }
        public static void Group$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Group$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sacl$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH();
        }
        public static  @C("DWORD") int Sacl$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH().get(seg);
        }
        public static  @C("DWORD") int Sacl$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sacl$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH().set(seg, x);
        }
        public static void Sacl$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dacl$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH();
        }
        public static  @C("DWORD") int Dacl$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH().get(seg);
        }
        public static  @C("DWORD") int Dacl$get(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dacl$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH().set(seg, x);
        }
        public static void Dacl$set(@C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SECURITY_DESCRIPTOR_RELATIVE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SECURITY_DESCRIPTOR_RELATIVE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SECURITY_DESCRIPTOR_RELATIVE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SECURITY_DESCRIPTOR_RELATIVE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SECURITY_DESCRIPTOR_RELATIVE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SECURITY_DESCRIPTOR_RELATIVE")public static class SECURITY_DESCRIPTOR_RELATIVE extends _SECURITY_DESCRIPTOR_RELATIVE {

        /* package-private */ SECURITY_DESCRIPTOR_RELATIVE() {}
    }

    @C("struct _SECURITY_DESCRIPTOR")public static class _SECURITY_DESCRIPTOR {

        /* package-private */ _SECURITY_DESCRIPTOR() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR$struct$LAYOUT();
        }
        public static VarHandle Revision$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR$Revision$VH();
        }
        public static  @C("BYTE") byte Revision$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg) {
            return (byte)winnt_h$constants$4._SECURITY_DESCRIPTOR$Revision$VH().get(seg);
        }
        public static  @C("BYTE") byte Revision$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$4._SECURITY_DESCRIPTOR$Revision$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Revision$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Revision$VH().set(seg, x);
        }
        public static void Revision$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Revision$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sbz1$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR$Sbz1$VH();
        }
        public static  @C("BYTE") byte Sbz1$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg) {
            return (byte)winnt_h$constants$4._SECURITY_DESCRIPTOR$Sbz1$VH().get(seg);
        }
        public static  @C("BYTE") byte Sbz1$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$4._SECURITY_DESCRIPTOR$Sbz1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sbz1$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Sbz1$VH().set(seg, x);
        }
        public static void Sbz1$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Sbz1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Control$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR$Control$VH();
        }
        public static  @C("SECURITY_DESCRIPTOR_CONTROL") short Control$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg) {
            return (short)winnt_h$constants$4._SECURITY_DESCRIPTOR$Control$VH().get(seg);
        }
        public static  @C("SECURITY_DESCRIPTOR_CONTROL") short Control$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index) {
            return (short)winnt_h$constants$4._SECURITY_DESCRIPTOR$Control$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Control$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, @C("SECURITY_DESCRIPTOR_CONTROL") short x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Control$VH().set(seg, x);
        }
        public static void Control$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index, @C("SECURITY_DESCRIPTOR_CONTROL") short x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Control$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Owner$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR$Owner$VH();
        }
        public static  @C("PSID") MemoryAddress Owner$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SECURITY_DESCRIPTOR$Owner$VH().get(seg);
        }
        public static  @C("PSID") MemoryAddress Owner$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SECURITY_DESCRIPTOR$Owner$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Owner$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Owner$VH().set(seg, x);
        }
        public static void Owner$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Owner$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Group$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR$Group$VH();
        }
        public static  @C("PSID") MemoryAddress Group$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SECURITY_DESCRIPTOR$Group$VH().get(seg);
        }
        public static  @C("PSID") MemoryAddress Group$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SECURITY_DESCRIPTOR$Group$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Group$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Group$VH().set(seg, x);
        }
        public static void Group$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Group$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sacl$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR$Sacl$VH();
        }
        public static  @C("PACL") MemoryAddress Sacl$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SECURITY_DESCRIPTOR$Sacl$VH().get(seg);
        }
        public static  @C("PACL") MemoryAddress Sacl$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SECURITY_DESCRIPTOR$Sacl$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sacl$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, @C("PACL") MemoryAddress x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Sacl$VH().set(seg, x);
        }
        public static void Sacl$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index, @C("PACL") MemoryAddress x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Sacl$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Dacl$VH() {
            return winnt_h$constants$4._SECURITY_DESCRIPTOR$Dacl$VH();
        }
        public static  @C("PACL") MemoryAddress Dacl$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SECURITY_DESCRIPTOR$Dacl$VH().get(seg);
        }
        public static  @C("PACL") MemoryAddress Dacl$get(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SECURITY_DESCRIPTOR$Dacl$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Dacl$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, @C("PACL") MemoryAddress x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Dacl$VH().set(seg, x);
        }
        public static void Dacl$set(@C("struct _SECURITY_DESCRIPTOR") MemorySegment seg, long index, @C("PACL") MemoryAddress x) {
            winnt_h$constants$4._SECURITY_DESCRIPTOR$Dacl$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SECURITY_DESCRIPTOR") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SECURITY_DESCRIPTOR") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SECURITY_DESCRIPTOR[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SECURITY_DESCRIPTOR[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SECURITY_DESCRIPTOR*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SECURITY_DESCRIPTOR*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SECURITY_DESCRIPTOR") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SECURITY_DESCRIPTOR")public static class SECURITY_DESCRIPTOR extends _SECURITY_DESCRIPTOR {

        /* package-private */ SECURITY_DESCRIPTOR() {}
    }

    @C("struct _SECURITY_OBJECT_AI_PARAMS")public static class _SECURITY_OBJECT_AI_PARAMS {

        /* package-private */ _SECURITY_OBJECT_AI_PARAMS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$4._SECURITY_OBJECT_AI_PARAMS$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _SECURITY_OBJECT_AI_PARAMS") MemorySegment seg) {
            return (int)winnt_h$constants$4._SECURITY_OBJECT_AI_PARAMS$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _SECURITY_OBJECT_AI_PARAMS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SECURITY_OBJECT_AI_PARAMS$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _SECURITY_OBJECT_AI_PARAMS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_OBJECT_AI_PARAMS$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _SECURITY_OBJECT_AI_PARAMS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_OBJECT_AI_PARAMS$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ConstraintMask$VH() {
            return winnt_h$constants$4._SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH();
        }
        public static  @C("DWORD") int ConstraintMask$get(@C("struct _SECURITY_OBJECT_AI_PARAMS") MemorySegment seg) {
            return (int)winnt_h$constants$4._SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH().get(seg);
        }
        public static  @C("DWORD") int ConstraintMask$get(@C("struct _SECURITY_OBJECT_AI_PARAMS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ConstraintMask$set(@C("struct _SECURITY_OBJECT_AI_PARAMS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH().set(seg, x);
        }
        public static void ConstraintMask$set(@C("struct _SECURITY_OBJECT_AI_PARAMS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SECURITY_OBJECT_AI_PARAMS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SECURITY_OBJECT_AI_PARAMS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SECURITY_OBJECT_AI_PARAMS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SECURITY_OBJECT_AI_PARAMS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SECURITY_OBJECT_AI_PARAMS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SECURITY_OBJECT_AI_PARAMS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SECURITY_OBJECT_AI_PARAMS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SECURITY_OBJECT_AI_PARAMS")public static class SECURITY_OBJECT_AI_PARAMS extends _SECURITY_OBJECT_AI_PARAMS {

        /* package-private */ SECURITY_OBJECT_AI_PARAMS() {}
    }

    @C("struct _OBJECT_TYPE_LIST")public static class _OBJECT_TYPE_LIST {

        /* package-private */ _OBJECT_TYPE_LIST() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._OBJECT_TYPE_LIST$struct$LAYOUT();
        }
        public static VarHandle Level$VH() {
            return winnt_h$constants$4._OBJECT_TYPE_LIST$Level$VH();
        }
        public static  @C("WORD") short Level$get(@C("struct _OBJECT_TYPE_LIST") MemorySegment seg) {
            return (short)winnt_h$constants$4._OBJECT_TYPE_LIST$Level$VH().get(seg);
        }
        public static  @C("WORD") short Level$get(@C("struct _OBJECT_TYPE_LIST") MemorySegment seg, long index) {
            return (short)winnt_h$constants$4._OBJECT_TYPE_LIST$Level$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Level$set(@C("struct _OBJECT_TYPE_LIST") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$4._OBJECT_TYPE_LIST$Level$VH().set(seg, x);
        }
        public static void Level$set(@C("struct _OBJECT_TYPE_LIST") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$4._OBJECT_TYPE_LIST$Level$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sbz$VH() {
            return winnt_h$constants$4._OBJECT_TYPE_LIST$Sbz$VH();
        }
        public static  @C("WORD") short Sbz$get(@C("struct _OBJECT_TYPE_LIST") MemorySegment seg) {
            return (short)winnt_h$constants$4._OBJECT_TYPE_LIST$Sbz$VH().get(seg);
        }
        public static  @C("WORD") short Sbz$get(@C("struct _OBJECT_TYPE_LIST") MemorySegment seg, long index) {
            return (short)winnt_h$constants$4._OBJECT_TYPE_LIST$Sbz$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sbz$set(@C("struct _OBJECT_TYPE_LIST") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$4._OBJECT_TYPE_LIST$Sbz$VH().set(seg, x);
        }
        public static void Sbz$set(@C("struct _OBJECT_TYPE_LIST") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$4._OBJECT_TYPE_LIST$Sbz$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ObjectType$VH() {
            return winnt_h$constants$4._OBJECT_TYPE_LIST$ObjectType$VH();
        }
        public static  @C("GUID*") MemoryAddress ObjectType$get(@C("struct _OBJECT_TYPE_LIST") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._OBJECT_TYPE_LIST$ObjectType$VH().get(seg);
        }
        public static  @C("GUID*") MemoryAddress ObjectType$get(@C("struct _OBJECT_TYPE_LIST") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._OBJECT_TYPE_LIST$ObjectType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ObjectType$set(@C("struct _OBJECT_TYPE_LIST") MemorySegment seg, @C("GUID*") MemoryAddress x) {
            winnt_h$constants$4._OBJECT_TYPE_LIST$ObjectType$VH().set(seg, x);
        }
        public static void ObjectType$set(@C("struct _OBJECT_TYPE_LIST") MemorySegment seg, long index, @C("GUID*") MemoryAddress x) {
            winnt_h$constants$4._OBJECT_TYPE_LIST$ObjectType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _OBJECT_TYPE_LIST") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _OBJECT_TYPE_LIST") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _OBJECT_TYPE_LIST[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _OBJECT_TYPE_LIST[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _OBJECT_TYPE_LIST*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _OBJECT_TYPE_LIST*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _OBJECT_TYPE_LIST") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _OBJECT_TYPE_LIST")public static class OBJECT_TYPE_LIST extends _OBJECT_TYPE_LIST {

        /* package-private */ OBJECT_TYPE_LIST() {}
    }

    @C("struct _PRIVILEGE_SET")public static class _PRIVILEGE_SET {

        /* package-private */ _PRIVILEGE_SET() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._PRIVILEGE_SET$struct$LAYOUT();
        }
        public static VarHandle PrivilegeCount$VH() {
            return winnt_h$constants$4._PRIVILEGE_SET$PrivilegeCount$VH();
        }
        public static  @C("DWORD") int PrivilegeCount$get(@C("struct _PRIVILEGE_SET") MemorySegment seg) {
            return (int)winnt_h$constants$4._PRIVILEGE_SET$PrivilegeCount$VH().get(seg);
        }
        public static  @C("DWORD") int PrivilegeCount$get(@C("struct _PRIVILEGE_SET") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._PRIVILEGE_SET$PrivilegeCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrivilegeCount$set(@C("struct _PRIVILEGE_SET") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._PRIVILEGE_SET$PrivilegeCount$VH().set(seg, x);
        }
        public static void PrivilegeCount$set(@C("struct _PRIVILEGE_SET") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._PRIVILEGE_SET$PrivilegeCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Control$VH() {
            return winnt_h$constants$4._PRIVILEGE_SET$Control$VH();
        }
        public static  @C("DWORD") int Control$get(@C("struct _PRIVILEGE_SET") MemorySegment seg) {
            return (int)winnt_h$constants$4._PRIVILEGE_SET$Control$VH().get(seg);
        }
        public static  @C("DWORD") int Control$get(@C("struct _PRIVILEGE_SET") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._PRIVILEGE_SET$Control$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Control$set(@C("struct _PRIVILEGE_SET") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._PRIVILEGE_SET$Control$VH().set(seg, x);
        }
        public static void Control$set(@C("struct _PRIVILEGE_SET") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._PRIVILEGE_SET$Control$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Privilege$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 12));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PRIVILEGE_SET") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PRIVILEGE_SET") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PRIVILEGE_SET[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PRIVILEGE_SET[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PRIVILEGE_SET*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PRIVILEGE_SET*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PRIVILEGE_SET") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PRIVILEGE_SET")public static class PRIVILEGE_SET extends _PRIVILEGE_SET {

        /* package-private */ PRIVILEGE_SET() {}
    }

    @C("struct _ACCESS_REASONS")public static class _ACCESS_REASONS {

        /* package-private */ _ACCESS_REASONS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._ACCESS_REASONS$struct$LAYOUT();
        }
        public static MemorySegment Data$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 128));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACCESS_REASONS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACCESS_REASONS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACCESS_REASONS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACCESS_REASONS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACCESS_REASONS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACCESS_REASONS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACCESS_REASONS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACCESS_REASONS")public static class ACCESS_REASONS extends _ACCESS_REASONS {

        /* package-private */ ACCESS_REASONS() {}
    }

    @C("struct _SE_SECURITY_DESCRIPTOR")public static class _SE_SECURITY_DESCRIPTOR {

        /* package-private */ _SE_SECURITY_DESCRIPTOR() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SecurityDescriptor$VH() {
            return winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH();
        }
        public static  @C("PSECURITY_DESCRIPTOR") MemoryAddress SecurityDescriptor$get(@C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH().get(seg);
        }
        public static  @C("PSECURITY_DESCRIPTOR") MemoryAddress SecurityDescriptor$get(@C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SecurityDescriptor$set(@C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment seg, @C("PSECURITY_DESCRIPTOR") MemoryAddress x) {
            winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH().set(seg, x);
        }
        public static void SecurityDescriptor$set(@C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment seg, long index, @C("PSECURITY_DESCRIPTOR") MemoryAddress x) {
            winnt_h$constants$4._SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SE_SECURITY_DESCRIPTOR[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SE_SECURITY_DESCRIPTOR[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SE_SECURITY_DESCRIPTOR*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SE_SECURITY_DESCRIPTOR*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SE_SECURITY_DESCRIPTOR") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SE_SECURITY_DESCRIPTOR")public static class SE_SECURITY_DESCRIPTOR extends _SE_SECURITY_DESCRIPTOR {

        /* package-private */ SE_SECURITY_DESCRIPTOR() {}
    }

    @C("struct _SE_ACCESS_REQUEST")public static class _SE_ACCESS_REQUEST {

        /* package-private */ _SE_ACCESS_REQUEST() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SE_ACCESS_REQUEST$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$4._SE_ACCESS_REQUEST$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg) {
            return (int)winnt_h$constants$4._SE_ACCESS_REQUEST$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SE_ACCESS_REQUEST$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SeSecurityDescriptor$VH() {
            return winnt_h$constants$4._SE_ACCESS_REQUEST$SeSecurityDescriptor$VH();
        }
        public static  @C("PSE_SECURITY_DESCRIPTOR") MemoryAddress SeSecurityDescriptor$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REQUEST$SeSecurityDescriptor$VH().get(seg);
        }
        public static  @C("PSE_SECURITY_DESCRIPTOR") MemoryAddress SeSecurityDescriptor$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REQUEST$SeSecurityDescriptor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SeSecurityDescriptor$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, @C("PSE_SECURITY_DESCRIPTOR") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$SeSecurityDescriptor$VH().set(seg, x);
        }
        public static void SeSecurityDescriptor$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index, @C("PSE_SECURITY_DESCRIPTOR") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$SeSecurityDescriptor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DesiredAccess$VH() {
            return winnt_h$constants$4._SE_ACCESS_REQUEST$DesiredAccess$VH();
        }
        public static  @C("ACCESS_MASK") int DesiredAccess$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg) {
            return (int)winnt_h$constants$4._SE_ACCESS_REQUEST$DesiredAccess$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int DesiredAccess$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SE_ACCESS_REQUEST$DesiredAccess$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DesiredAccess$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$DesiredAccess$VH().set(seg, x);
        }
        public static void DesiredAccess$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$DesiredAccess$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PreviouslyGrantedAccess$VH() {
            return winnt_h$constants$4._SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH();
        }
        public static  @C("ACCESS_MASK") int PreviouslyGrantedAccess$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg) {
            return (int)winnt_h$constants$4._SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH().get(seg);
        }
        public static  @C("ACCESS_MASK") int PreviouslyGrantedAccess$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PreviouslyGrantedAccess$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH().set(seg, x);
        }
        public static void PreviouslyGrantedAccess$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index, @C("ACCESS_MASK") int x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PrincipalSelfSid$VH() {
            return winnt_h$constants$4._SE_ACCESS_REQUEST$PrincipalSelfSid$VH();
        }
        public static  @C("PSID") MemoryAddress PrincipalSelfSid$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REQUEST$PrincipalSelfSid$VH().get(seg);
        }
        public static  @C("PSID") MemoryAddress PrincipalSelfSid$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REQUEST$PrincipalSelfSid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrincipalSelfSid$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$PrincipalSelfSid$VH().set(seg, x);
        }
        public static void PrincipalSelfSid$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$PrincipalSelfSid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GenericMapping$VH() {
            return winnt_h$constants$4._SE_ACCESS_REQUEST$GenericMapping$VH();
        }
        public static  @C("PGENERIC_MAPPING") MemoryAddress GenericMapping$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REQUEST$GenericMapping$VH().get(seg);
        }
        public static  @C("PGENERIC_MAPPING") MemoryAddress GenericMapping$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REQUEST$GenericMapping$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GenericMapping$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, @C("PGENERIC_MAPPING") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$GenericMapping$VH().set(seg, x);
        }
        public static void GenericMapping$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index, @C("PGENERIC_MAPPING") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$GenericMapping$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ObjectTypeListCount$VH() {
            return winnt_h$constants$4._SE_ACCESS_REQUEST$ObjectTypeListCount$VH();
        }
        public static  @C("DWORD") int ObjectTypeListCount$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg) {
            return (int)winnt_h$constants$4._SE_ACCESS_REQUEST$ObjectTypeListCount$VH().get(seg);
        }
        public static  @C("DWORD") int ObjectTypeListCount$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SE_ACCESS_REQUEST$ObjectTypeListCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ObjectTypeListCount$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$ObjectTypeListCount$VH().set(seg, x);
        }
        public static void ObjectTypeListCount$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$ObjectTypeListCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ObjectTypeList$VH() {
            return winnt_h$constants$4._SE_ACCESS_REQUEST$ObjectTypeList$VH();
        }
        public static  @C("POBJECT_TYPE_LIST") MemoryAddress ObjectTypeList$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REQUEST$ObjectTypeList$VH().get(seg);
        }
        public static  @C("POBJECT_TYPE_LIST") MemoryAddress ObjectTypeList$get(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REQUEST$ObjectTypeList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ObjectTypeList$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, @C("POBJECT_TYPE_LIST") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$ObjectTypeList$VH().set(seg, x);
        }
        public static void ObjectTypeList$set(@C("struct _SE_ACCESS_REQUEST") MemorySegment seg, long index, @C("POBJECT_TYPE_LIST") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REQUEST$ObjectTypeList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SE_ACCESS_REQUEST") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SE_ACCESS_REQUEST") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SE_ACCESS_REQUEST[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SE_ACCESS_REQUEST[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SE_ACCESS_REQUEST*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SE_ACCESS_REQUEST*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SE_ACCESS_REQUEST") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SE_ACCESS_REQUEST")public static class SE_ACCESS_REQUEST extends _SE_ACCESS_REQUEST {

        /* package-private */ SE_ACCESS_REQUEST() {}
    }

    @C("struct _SE_ACCESS_REPLY")public static class _SE_ACCESS_REPLY {

        /* package-private */ _SE_ACCESS_REPLY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SE_ACCESS_REPLY$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$4._SE_ACCESS_REPLY$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _SE_ACCESS_REPLY") MemorySegment seg) {
            return (int)winnt_h$constants$4._SE_ACCESS_REPLY$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SE_ACCESS_REPLY$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SE_ACCESS_REPLY$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SE_ACCESS_REPLY$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ResultListCount$VH() {
            return winnt_h$constants$4._SE_ACCESS_REPLY$ResultListCount$VH();
        }
        public static  @C("DWORD") int ResultListCount$get(@C("struct _SE_ACCESS_REPLY") MemorySegment seg) {
            return (int)winnt_h$constants$4._SE_ACCESS_REPLY$ResultListCount$VH().get(seg);
        }
        public static  @C("DWORD") int ResultListCount$get(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SE_ACCESS_REPLY$ResultListCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ResultListCount$set(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SE_ACCESS_REPLY$ResultListCount$VH().set(seg, x);
        }
        public static void ResultListCount$set(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SE_ACCESS_REPLY$ResultListCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GrantedAccess$VH() {
            return winnt_h$constants$4._SE_ACCESS_REPLY$GrantedAccess$VH();
        }
        public static  @C("PACCESS_MASK") MemoryAddress GrantedAccess$get(@C("struct _SE_ACCESS_REPLY") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REPLY$GrantedAccess$VH().get(seg);
        }
        public static  @C("PACCESS_MASK") MemoryAddress GrantedAccess$get(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REPLY$GrantedAccess$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GrantedAccess$set(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, @C("PACCESS_MASK") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REPLY$GrantedAccess$VH().set(seg, x);
        }
        public static void GrantedAccess$set(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, long index, @C("PACCESS_MASK") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REPLY$GrantedAccess$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AccessStatus$VH() {
            return winnt_h$constants$4._SE_ACCESS_REPLY$AccessStatus$VH();
        }
        public static  @C("PDWORD") MemoryAddress AccessStatus$get(@C("struct _SE_ACCESS_REPLY") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REPLY$AccessStatus$VH().get(seg);
        }
        public static  @C("PDWORD") MemoryAddress AccessStatus$get(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REPLY$AccessStatus$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AccessStatus$set(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, @C("PDWORD") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REPLY$AccessStatus$VH().set(seg, x);
        }
        public static void AccessStatus$set(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, long index, @C("PDWORD") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REPLY$AccessStatus$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AccessReason$VH() {
            return winnt_h$constants$4._SE_ACCESS_REPLY$AccessReason$VH();
        }
        public static  @C("PACCESS_REASONS") MemoryAddress AccessReason$get(@C("struct _SE_ACCESS_REPLY") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REPLY$AccessReason$VH().get(seg);
        }
        public static  @C("PACCESS_REASONS") MemoryAddress AccessReason$get(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REPLY$AccessReason$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AccessReason$set(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, @C("PACCESS_REASONS") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REPLY$AccessReason$VH().set(seg, x);
        }
        public static void AccessReason$set(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, long index, @C("PACCESS_REASONS") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REPLY$AccessReason$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Privileges$VH() {
            return winnt_h$constants$4._SE_ACCESS_REPLY$Privileges$VH();
        }
        public static  @C("PPRIVILEGE_SET*") MemoryAddress Privileges$get(@C("struct _SE_ACCESS_REPLY") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REPLY$Privileges$VH().get(seg);
        }
        public static  @C("PPRIVILEGE_SET*") MemoryAddress Privileges$get(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_ACCESS_REPLY$Privileges$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Privileges$set(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, @C("PPRIVILEGE_SET*") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REPLY$Privileges$VH().set(seg, x);
        }
        public static void Privileges$set(@C("struct _SE_ACCESS_REPLY") MemorySegment seg, long index, @C("PPRIVILEGE_SET*") MemoryAddress x) {
            winnt_h$constants$4._SE_ACCESS_REPLY$Privileges$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SE_ACCESS_REPLY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SE_ACCESS_REPLY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SE_ACCESS_REPLY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SE_ACCESS_REPLY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SE_ACCESS_REPLY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SE_ACCESS_REPLY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SE_ACCESS_REPLY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SE_ACCESS_REPLY")public static class SE_ACCESS_REPLY extends _SE_ACCESS_REPLY {

        /* package-private */ SE_ACCESS_REPLY() {}
    }

    @C("struct _TOKEN_USER")public static class _TOKEN_USER {

        /* package-private */ _TOKEN_USER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_USER$struct$LAYOUT();
        }
        public static MemorySegment User$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_USER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_USER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_USER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_USER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_USER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_USER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_USER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_USER")public static class TOKEN_USER extends _TOKEN_USER {

        /* package-private */ TOKEN_USER() {}
    }

    @C("struct _SE_TOKEN_USER")public static class _SE_TOKEN_USER {

        /* package-private */ _SE_TOKEN_USER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SE_TOKEN_USER$struct$LAYOUT();
        }
        public static MemorySegment TokenUser$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment User$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 16));
        }
        public static MemorySegment Sid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 12));
        }
        public static MemorySegment Buffer$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(44, 68));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SE_TOKEN_USER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SE_TOKEN_USER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SE_TOKEN_USER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SE_TOKEN_USER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SE_TOKEN_USER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SE_TOKEN_USER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SE_TOKEN_USER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SE_TOKEN_USER")public static class SE_TOKEN_USER extends _SE_TOKEN_USER {

        /* package-private */ SE_TOKEN_USER() {}
    }

    @C("struct _SE_TOKEN_USER")public static class PSE_TOKEN_USER extends _SE_TOKEN_USER {

        /* package-private */ PSE_TOKEN_USER() {}
    }

    @C("struct _TOKEN_GROUPS")public static class _TOKEN_GROUPS {

        /* package-private */ _TOKEN_GROUPS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_GROUPS$struct$LAYOUT();
        }
        public static VarHandle GroupCount$VH() {
            return winnt_h$constants$4._TOKEN_GROUPS$GroupCount$VH();
        }
        public static  @C("DWORD") int GroupCount$get(@C("struct _TOKEN_GROUPS") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS$GroupCount$VH().get(seg);
        }
        public static  @C("DWORD") int GroupCount$get(@C("struct _TOKEN_GROUPS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS$GroupCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GroupCount$set(@C("struct _TOKEN_GROUPS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS$GroupCount$VH().set(seg, x);
        }
        public static void GroupCount$set(@C("struct _TOKEN_GROUPS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS$GroupCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Groups$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_GROUPS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_GROUPS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_GROUPS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_GROUPS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_GROUPS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_GROUPS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_GROUPS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_GROUPS")public static class TOKEN_GROUPS extends _TOKEN_GROUPS {

        /* package-private */ TOKEN_GROUPS() {}
    }

    @C("struct _TOKEN_PRIVILEGES")public static class _TOKEN_PRIVILEGES {

        /* package-private */ _TOKEN_PRIVILEGES() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_PRIVILEGES$struct$LAYOUT();
        }
        public static VarHandle PrivilegeCount$VH() {
            return winnt_h$constants$4._TOKEN_PRIVILEGES$PrivilegeCount$VH();
        }
        public static  @C("DWORD") int PrivilegeCount$get(@C("struct _TOKEN_PRIVILEGES") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_PRIVILEGES$PrivilegeCount$VH().get(seg);
        }
        public static  @C("DWORD") int PrivilegeCount$get(@C("struct _TOKEN_PRIVILEGES") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_PRIVILEGES$PrivilegeCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrivilegeCount$set(@C("struct _TOKEN_PRIVILEGES") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_PRIVILEGES$PrivilegeCount$VH().set(seg, x);
        }
        public static void PrivilegeCount$set(@C("struct _TOKEN_PRIVILEGES") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_PRIVILEGES$PrivilegeCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Privileges$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 12));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_PRIVILEGES") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_PRIVILEGES") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_PRIVILEGES[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_PRIVILEGES[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_PRIVILEGES*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_PRIVILEGES*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_PRIVILEGES") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_PRIVILEGES")public static class TOKEN_PRIVILEGES extends _TOKEN_PRIVILEGES {

        /* package-private */ TOKEN_PRIVILEGES() {}
    }

    @C("struct _TOKEN_OWNER")public static class _TOKEN_OWNER {

        /* package-private */ _TOKEN_OWNER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_OWNER$struct$LAYOUT();
        }
        public static VarHandle Owner$VH() {
            return winnt_h$constants$4._TOKEN_OWNER$Owner$VH();
        }
        public static  @C("PSID") MemoryAddress Owner$get(@C("struct _TOKEN_OWNER") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_OWNER$Owner$VH().get(seg);
        }
        public static  @C("PSID") MemoryAddress Owner$get(@C("struct _TOKEN_OWNER") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_OWNER$Owner$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Owner$set(@C("struct _TOKEN_OWNER") MemorySegment seg, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_OWNER$Owner$VH().set(seg, x);
        }
        public static void Owner$set(@C("struct _TOKEN_OWNER") MemorySegment seg, long index, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_OWNER$Owner$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_OWNER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_OWNER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_OWNER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_OWNER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_OWNER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_OWNER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_OWNER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_OWNER")public static class TOKEN_OWNER extends _TOKEN_OWNER {

        /* package-private */ TOKEN_OWNER() {}
    }

    @C("struct _TOKEN_PRIMARY_GROUP")public static class _TOKEN_PRIMARY_GROUP {

        /* package-private */ _TOKEN_PRIMARY_GROUP() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_PRIMARY_GROUP$struct$LAYOUT();
        }
        public static VarHandle PrimaryGroup$VH() {
            return winnt_h$constants$4._TOKEN_PRIMARY_GROUP$PrimaryGroup$VH();
        }
        public static  @C("PSID") MemoryAddress PrimaryGroup$get(@C("struct _TOKEN_PRIMARY_GROUP") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_PRIMARY_GROUP$PrimaryGroup$VH().get(seg);
        }
        public static  @C("PSID") MemoryAddress PrimaryGroup$get(@C("struct _TOKEN_PRIMARY_GROUP") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_PRIMARY_GROUP$PrimaryGroup$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrimaryGroup$set(@C("struct _TOKEN_PRIMARY_GROUP") MemorySegment seg, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_PRIMARY_GROUP$PrimaryGroup$VH().set(seg, x);
        }
        public static void PrimaryGroup$set(@C("struct _TOKEN_PRIMARY_GROUP") MemorySegment seg, long index, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_PRIMARY_GROUP$PrimaryGroup$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_PRIMARY_GROUP") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_PRIMARY_GROUP") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_PRIMARY_GROUP[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_PRIMARY_GROUP[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_PRIMARY_GROUP*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_PRIMARY_GROUP*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_PRIMARY_GROUP") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_PRIMARY_GROUP")public static class TOKEN_PRIMARY_GROUP extends _TOKEN_PRIMARY_GROUP {

        /* package-private */ TOKEN_PRIMARY_GROUP() {}
    }

    @C("struct _TOKEN_DEFAULT_DACL")public static class _TOKEN_DEFAULT_DACL {

        /* package-private */ _TOKEN_DEFAULT_DACL() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_DEFAULT_DACL$struct$LAYOUT();
        }
        public static VarHandle DefaultDacl$VH() {
            return winnt_h$constants$4._TOKEN_DEFAULT_DACL$DefaultDacl$VH();
        }
        public static  @C("PACL") MemoryAddress DefaultDacl$get(@C("struct _TOKEN_DEFAULT_DACL") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_DEFAULT_DACL$DefaultDacl$VH().get(seg);
        }
        public static  @C("PACL") MemoryAddress DefaultDacl$get(@C("struct _TOKEN_DEFAULT_DACL") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_DEFAULT_DACL$DefaultDacl$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DefaultDacl$set(@C("struct _TOKEN_DEFAULT_DACL") MemorySegment seg, @C("PACL") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_DEFAULT_DACL$DefaultDacl$VH().set(seg, x);
        }
        public static void DefaultDacl$set(@C("struct _TOKEN_DEFAULT_DACL") MemorySegment seg, long index, @C("PACL") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_DEFAULT_DACL$DefaultDacl$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_DEFAULT_DACL") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_DEFAULT_DACL") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_DEFAULT_DACL[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_DEFAULT_DACL[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_DEFAULT_DACL*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_DEFAULT_DACL*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_DEFAULT_DACL") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_DEFAULT_DACL")public static class TOKEN_DEFAULT_DACL extends _TOKEN_DEFAULT_DACL {

        /* package-private */ TOKEN_DEFAULT_DACL() {}
    }

    @C("struct _TOKEN_USER_CLAIMS")public static class _TOKEN_USER_CLAIMS {

        /* package-private */ _TOKEN_USER_CLAIMS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_USER_CLAIMS$struct$LAYOUT();
        }
        public static VarHandle UserClaims$VH() {
            return winnt_h$constants$4._TOKEN_USER_CLAIMS$UserClaims$VH();
        }
        public static  @C("PCLAIMS_BLOB") MemoryAddress UserClaims$get(@C("struct _TOKEN_USER_CLAIMS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_USER_CLAIMS$UserClaims$VH().get(seg);
        }
        public static  @C("PCLAIMS_BLOB") MemoryAddress UserClaims$get(@C("struct _TOKEN_USER_CLAIMS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_USER_CLAIMS$UserClaims$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UserClaims$set(@C("struct _TOKEN_USER_CLAIMS") MemorySegment seg, @C("PCLAIMS_BLOB") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_USER_CLAIMS$UserClaims$VH().set(seg, x);
        }
        public static void UserClaims$set(@C("struct _TOKEN_USER_CLAIMS") MemorySegment seg, long index, @C("PCLAIMS_BLOB") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_USER_CLAIMS$UserClaims$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_USER_CLAIMS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_USER_CLAIMS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_USER_CLAIMS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_USER_CLAIMS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_USER_CLAIMS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_USER_CLAIMS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_USER_CLAIMS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_USER_CLAIMS")public static class TOKEN_USER_CLAIMS extends _TOKEN_USER_CLAIMS {

        /* package-private */ TOKEN_USER_CLAIMS() {}
    }

    @C("struct _TOKEN_DEVICE_CLAIMS")public static class _TOKEN_DEVICE_CLAIMS {

        /* package-private */ _TOKEN_DEVICE_CLAIMS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_DEVICE_CLAIMS$struct$LAYOUT();
        }
        public static VarHandle DeviceClaims$VH() {
            return winnt_h$constants$4._TOKEN_DEVICE_CLAIMS$DeviceClaims$VH();
        }
        public static  @C("PCLAIMS_BLOB") MemoryAddress DeviceClaims$get(@C("struct _TOKEN_DEVICE_CLAIMS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_DEVICE_CLAIMS$DeviceClaims$VH().get(seg);
        }
        public static  @C("PCLAIMS_BLOB") MemoryAddress DeviceClaims$get(@C("struct _TOKEN_DEVICE_CLAIMS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_DEVICE_CLAIMS$DeviceClaims$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DeviceClaims$set(@C("struct _TOKEN_DEVICE_CLAIMS") MemorySegment seg, @C("PCLAIMS_BLOB") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_DEVICE_CLAIMS$DeviceClaims$VH().set(seg, x);
        }
        public static void DeviceClaims$set(@C("struct _TOKEN_DEVICE_CLAIMS") MemorySegment seg, long index, @C("PCLAIMS_BLOB") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_DEVICE_CLAIMS$DeviceClaims$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_DEVICE_CLAIMS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_DEVICE_CLAIMS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_DEVICE_CLAIMS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_DEVICE_CLAIMS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_DEVICE_CLAIMS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_DEVICE_CLAIMS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_DEVICE_CLAIMS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_DEVICE_CLAIMS")public static class TOKEN_DEVICE_CLAIMS extends _TOKEN_DEVICE_CLAIMS {

        /* package-private */ TOKEN_DEVICE_CLAIMS() {}
    }

    @C("struct _TOKEN_GROUPS_AND_PRIVILEGES")public static class _TOKEN_GROUPS_AND_PRIVILEGES {

        /* package-private */ _TOKEN_GROUPS_AND_PRIVILEGES() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT();
        }
        public static VarHandle SidCount$VH() {
            return winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH();
        }
        public static  @C("DWORD") int SidCount$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH().get(seg);
        }
        public static  @C("DWORD") int SidCount$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidCount$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH().set(seg, x);
        }
        public static void SidCount$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidLength$VH() {
            return winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH();
        }
        public static  @C("DWORD") int SidLength$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH().get(seg);
        }
        public static  @C("DWORD") int SidLength$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidLength$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH().set(seg, x);
        }
        public static void SidLength$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sids$VH() {
            return winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH();
        }
        public static  @C("PSID_AND_ATTRIBUTES") MemoryAddress Sids$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH().get(seg);
        }
        public static  @C("PSID_AND_ATTRIBUTES") MemoryAddress Sids$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sids$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, @C("PSID_AND_ATTRIBUTES") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH().set(seg, x);
        }
        public static void Sids$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index, @C("PSID_AND_ATTRIBUTES") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RestrictedSidCount$VH() {
            return winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH();
        }
        public static  @C("DWORD") int RestrictedSidCount$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH().get(seg);
        }
        public static  @C("DWORD") int RestrictedSidCount$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RestrictedSidCount$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH().set(seg, x);
        }
        public static void RestrictedSidCount$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RestrictedSidLength$VH() {
            return winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH();
        }
        public static  @C("DWORD") int RestrictedSidLength$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH().get(seg);
        }
        public static  @C("DWORD") int RestrictedSidLength$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RestrictedSidLength$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH().set(seg, x);
        }
        public static void RestrictedSidLength$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RestrictedSids$VH() {
            return winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH();
        }
        public static  @C("PSID_AND_ATTRIBUTES") MemoryAddress RestrictedSids$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH().get(seg);
        }
        public static  @C("PSID_AND_ATTRIBUTES") MemoryAddress RestrictedSids$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RestrictedSids$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, @C("PSID_AND_ATTRIBUTES") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH().set(seg, x);
        }
        public static void RestrictedSids$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index, @C("PSID_AND_ATTRIBUTES") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PrivilegeCount$VH() {
            return winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH();
        }
        public static  @C("DWORD") int PrivilegeCount$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH().get(seg);
        }
        public static  @C("DWORD") int PrivilegeCount$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrivilegeCount$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH().set(seg, x);
        }
        public static void PrivilegeCount$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PrivilegeLength$VH() {
            return winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH();
        }
        public static  @C("DWORD") int PrivilegeLength$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH().get(seg);
        }
        public static  @C("DWORD") int PrivilegeLength$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrivilegeLength$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH().set(seg, x);
        }
        public static void PrivilegeLength$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Privileges$VH() {
            return winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH();
        }
        public static  @C("PLUID_AND_ATTRIBUTES") MemoryAddress Privileges$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH().get(seg);
        }
        public static  @C("PLUID_AND_ATTRIBUTES") MemoryAddress Privileges$get(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Privileges$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, @C("PLUID_AND_ATTRIBUTES") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH().set(seg, x);
        }
        public static void Privileges$set(@C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment seg, long index, @C("PLUID_AND_ATTRIBUTES") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment AuthenticationId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_GROUPS_AND_PRIVILEGES[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_GROUPS_AND_PRIVILEGES[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_GROUPS_AND_PRIVILEGES*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_GROUPS_AND_PRIVILEGES*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_GROUPS_AND_PRIVILEGES") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_GROUPS_AND_PRIVILEGES")public static class TOKEN_GROUPS_AND_PRIVILEGES extends _TOKEN_GROUPS_AND_PRIVILEGES {

        /* package-private */ TOKEN_GROUPS_AND_PRIVILEGES() {}
    }

    @C("struct _TOKEN_LINKED_TOKEN")public static class _TOKEN_LINKED_TOKEN {

        /* package-private */ _TOKEN_LINKED_TOKEN() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_LINKED_TOKEN$struct$LAYOUT();
        }
        public static VarHandle LinkedToken$VH() {
            return winnt_h$constants$4._TOKEN_LINKED_TOKEN$LinkedToken$VH();
        }
        public static  @C("HANDLE") MemoryAddress LinkedToken$get(@C("struct _TOKEN_LINKED_TOKEN") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_LINKED_TOKEN$LinkedToken$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress LinkedToken$get(@C("struct _TOKEN_LINKED_TOKEN") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_LINKED_TOKEN$LinkedToken$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LinkedToken$set(@C("struct _TOKEN_LINKED_TOKEN") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_LINKED_TOKEN$LinkedToken$VH().set(seg, x);
        }
        public static void LinkedToken$set(@C("struct _TOKEN_LINKED_TOKEN") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_LINKED_TOKEN$LinkedToken$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_LINKED_TOKEN") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_LINKED_TOKEN") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_LINKED_TOKEN[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_LINKED_TOKEN[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_LINKED_TOKEN*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_LINKED_TOKEN*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_LINKED_TOKEN") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_LINKED_TOKEN")public static class TOKEN_LINKED_TOKEN extends _TOKEN_LINKED_TOKEN {

        /* package-private */ TOKEN_LINKED_TOKEN() {}
    }

    @C("struct _TOKEN_ELEVATION")public static class _TOKEN_ELEVATION {

        /* package-private */ _TOKEN_ELEVATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_ELEVATION$struct$LAYOUT();
        }
        public static VarHandle TokenIsElevated$VH() {
            return winnt_h$constants$4._TOKEN_ELEVATION$TokenIsElevated$VH();
        }
        public static  @C("DWORD") int TokenIsElevated$get(@C("struct _TOKEN_ELEVATION") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_ELEVATION$TokenIsElevated$VH().get(seg);
        }
        public static  @C("DWORD") int TokenIsElevated$get(@C("struct _TOKEN_ELEVATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_ELEVATION$TokenIsElevated$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TokenIsElevated$set(@C("struct _TOKEN_ELEVATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_ELEVATION$TokenIsElevated$VH().set(seg, x);
        }
        public static void TokenIsElevated$set(@C("struct _TOKEN_ELEVATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_ELEVATION$TokenIsElevated$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_ELEVATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_ELEVATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_ELEVATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_ELEVATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_ELEVATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_ELEVATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_ELEVATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_ELEVATION")public static class TOKEN_ELEVATION extends _TOKEN_ELEVATION {

        /* package-private */ TOKEN_ELEVATION() {}
    }

    @C("struct _TOKEN_MANDATORY_LABEL")public static class _TOKEN_MANDATORY_LABEL {

        /* package-private */ _TOKEN_MANDATORY_LABEL() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_MANDATORY_LABEL$struct$LAYOUT();
        }
        public static MemorySegment Label$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_MANDATORY_LABEL") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_MANDATORY_LABEL") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_MANDATORY_LABEL[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_MANDATORY_LABEL[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_MANDATORY_LABEL*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_MANDATORY_LABEL*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_MANDATORY_LABEL") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_MANDATORY_LABEL")public static class TOKEN_MANDATORY_LABEL extends _TOKEN_MANDATORY_LABEL {

        /* package-private */ TOKEN_MANDATORY_LABEL() {}
    }

    @C("struct _TOKEN_MANDATORY_POLICY")public static class _TOKEN_MANDATORY_POLICY {

        /* package-private */ _TOKEN_MANDATORY_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_MANDATORY_POLICY$struct$LAYOUT();
        }
        public static VarHandle Policy$VH() {
            return winnt_h$constants$4._TOKEN_MANDATORY_POLICY$Policy$VH();
        }
        public static  @C("DWORD") int Policy$get(@C("struct _TOKEN_MANDATORY_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_MANDATORY_POLICY$Policy$VH().get(seg);
        }
        public static  @C("DWORD") int Policy$get(@C("struct _TOKEN_MANDATORY_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_MANDATORY_POLICY$Policy$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Policy$set(@C("struct _TOKEN_MANDATORY_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_MANDATORY_POLICY$Policy$VH().set(seg, x);
        }
        public static void Policy$set(@C("struct _TOKEN_MANDATORY_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_MANDATORY_POLICY$Policy$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_MANDATORY_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_MANDATORY_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_MANDATORY_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_MANDATORY_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_MANDATORY_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_MANDATORY_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_MANDATORY_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_MANDATORY_POLICY")public static class TOKEN_MANDATORY_POLICY extends _TOKEN_MANDATORY_POLICY {

        /* package-private */ TOKEN_MANDATORY_POLICY() {}
    }

    @C("struct _TOKEN_ACCESS_INFORMATION")public static class _TOKEN_ACCESS_INFORMATION {

        /* package-private */ _TOKEN_ACCESS_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle SidHash$VH() {
            return winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$SidHash$VH();
        }
        public static  @C("PSID_AND_ATTRIBUTES_HASH") MemoryAddress SidHash$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$SidHash$VH().get(seg);
        }
        public static  @C("PSID_AND_ATTRIBUTES_HASH") MemoryAddress SidHash$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$SidHash$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidHash$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, @C("PSID_AND_ATTRIBUTES_HASH") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$SidHash$VH().set(seg, x);
        }
        public static void SidHash$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index, @C("PSID_AND_ATTRIBUTES_HASH") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$SidHash$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RestrictedSidHash$VH() {
            return winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH();
        }
        public static  @C("PSID_AND_ATTRIBUTES_HASH") MemoryAddress RestrictedSidHash$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH().get(seg);
        }
        public static  @C("PSID_AND_ATTRIBUTES_HASH") MemoryAddress RestrictedSidHash$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RestrictedSidHash$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, @C("PSID_AND_ATTRIBUTES_HASH") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH().set(seg, x);
        }
        public static void RestrictedSidHash$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index, @C("PSID_AND_ATTRIBUTES_HASH") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Privileges$VH() {
            return winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$Privileges$VH();
        }
        public static  @C("PTOKEN_PRIVILEGES") MemoryAddress Privileges$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$Privileges$VH().get(seg);
        }
        public static  @C("PTOKEN_PRIVILEGES") MemoryAddress Privileges$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$Privileges$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Privileges$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, @C("PTOKEN_PRIVILEGES") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$Privileges$VH().set(seg, x);
        }
        public static void Privileges$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index, @C("PTOKEN_PRIVILEGES") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$Privileges$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment AuthenticationId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
        }
        public static VarHandle TokenType$VH() {
            return winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$TokenType$VH();
        }
        public static  @C("TOKEN_TYPE") int TokenType$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$TokenType$VH().get(seg);
        }
        public static  @C("TOKEN_TYPE") int TokenType$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$TokenType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TokenType$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, @C("TOKEN_TYPE") int x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$TokenType$VH().set(seg, x);
        }
        public static void TokenType$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index, @C("TOKEN_TYPE") int x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$TokenType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImpersonationLevel$VH() {
            return winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH();
        }
        public static  @C("SECURITY_IMPERSONATION_LEVEL") int ImpersonationLevel$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH().get(seg);
        }
        public static  @C("SECURITY_IMPERSONATION_LEVEL") int ImpersonationLevel$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImpersonationLevel$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, @C("SECURITY_IMPERSONATION_LEVEL") int x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH().set(seg, x);
        }
        public static void ImpersonationLevel$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index, @C("SECURITY_IMPERSONATION_LEVEL") int x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment MandatoryPolicy$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 4));
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AppContainerNumber$VH() {
            return winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH();
        }
        public static  @C("DWORD") int AppContainerNumber$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH().get(seg);
        }
        public static  @C("DWORD") int AppContainerNumber$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AppContainerNumber$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH().set(seg, x);
        }
        public static void AppContainerNumber$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PackageSid$VH() {
            return winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$PackageSid$VH();
        }
        public static  @C("PSID") MemoryAddress PackageSid$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$PackageSid$VH().get(seg);
        }
        public static  @C("PSID") MemoryAddress PackageSid$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$PackageSid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PackageSid$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$PackageSid$VH().set(seg, x);
        }
        public static void PackageSid$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$PackageSid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CapabilitiesHash$VH() {
            return winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH();
        }
        public static  @C("PSID_AND_ATTRIBUTES_HASH") MemoryAddress CapabilitiesHash$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH().get(seg);
        }
        public static  @C("PSID_AND_ATTRIBUTES_HASH") MemoryAddress CapabilitiesHash$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CapabilitiesHash$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, @C("PSID_AND_ATTRIBUTES_HASH") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH().set(seg, x);
        }
        public static void CapabilitiesHash$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index, @C("PSID_AND_ATTRIBUTES_HASH") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TrustLevelSid$VH() {
            return winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH();
        }
        public static  @C("PSID") MemoryAddress TrustLevelSid$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH().get(seg);
        }
        public static  @C("PSID") MemoryAddress TrustLevelSid$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TrustLevelSid$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH().set(seg, x);
        }
        public static void TrustLevelSid$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SecurityAttributes$VH() {
            return winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH();
        }
        public static  @C("PSECURITY_ATTRIBUTES_OPAQUE") MemoryAddress SecurityAttributes$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH().get(seg);
        }
        public static  @C("PSECURITY_ATTRIBUTES_OPAQUE") MemoryAddress SecurityAttributes$get(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SecurityAttributes$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, @C("PSECURITY_ATTRIBUTES_OPAQUE") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH().set(seg, x);
        }
        public static void SecurityAttributes$set(@C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment seg, long index, @C("PSECURITY_ATTRIBUTES_OPAQUE") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_ACCESS_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_ACCESS_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_ACCESS_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_ACCESS_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_ACCESS_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_ACCESS_INFORMATION")public static class TOKEN_ACCESS_INFORMATION extends _TOKEN_ACCESS_INFORMATION {

        /* package-private */ TOKEN_ACCESS_INFORMATION() {}
    }

    @C("struct _TOKEN_AUDIT_POLICY")public static class _TOKEN_AUDIT_POLICY {

        /* package-private */ _TOKEN_AUDIT_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_AUDIT_POLICY$struct$LAYOUT();
        }
        public static MemorySegment PerUserPolicy$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 30));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_AUDIT_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_AUDIT_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_AUDIT_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_AUDIT_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_AUDIT_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_AUDIT_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_AUDIT_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_AUDIT_POLICY")public static class TOKEN_AUDIT_POLICY extends _TOKEN_AUDIT_POLICY {

        /* package-private */ TOKEN_AUDIT_POLICY() {}
    }

    @C("struct _TOKEN_SOURCE")public static class _TOKEN_SOURCE {

        /* package-private */ _TOKEN_SOURCE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_SOURCE$struct$LAYOUT();
        }
        public static MemorySegment SourceName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment SourceIdentifier$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_SOURCE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_SOURCE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_SOURCE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_SOURCE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_SOURCE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_SOURCE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_SOURCE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_SOURCE")public static class TOKEN_SOURCE extends _TOKEN_SOURCE {

        /* package-private */ TOKEN_SOURCE() {}
    }

    @C("struct _TOKEN_STATISTICS")public static class _TOKEN_STATISTICS {

        /* package-private */ _TOKEN_STATISTICS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_STATISTICS$struct$LAYOUT();
        }
        public static MemorySegment TokenId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment AuthenticationId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment ExpirationTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static VarHandle TokenType$VH() {
            return winnt_h$constants$4._TOKEN_STATISTICS$TokenType$VH();
        }
        public static  @C("TOKEN_TYPE") int TokenType$get(@C("struct _TOKEN_STATISTICS") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_STATISTICS$TokenType$VH().get(seg);
        }
        public static  @C("TOKEN_TYPE") int TokenType$get(@C("struct _TOKEN_STATISTICS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_STATISTICS$TokenType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TokenType$set(@C("struct _TOKEN_STATISTICS") MemorySegment seg, @C("TOKEN_TYPE") int x) {
            winnt_h$constants$4._TOKEN_STATISTICS$TokenType$VH().set(seg, x);
        }
        public static void TokenType$set(@C("struct _TOKEN_STATISTICS") MemorySegment seg, long index, @C("TOKEN_TYPE") int x) {
            winnt_h$constants$4._TOKEN_STATISTICS$TokenType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImpersonationLevel$VH() {
            return winnt_h$constants$4._TOKEN_STATISTICS$ImpersonationLevel$VH();
        }
        public static  @C("SECURITY_IMPERSONATION_LEVEL") int ImpersonationLevel$get(@C("struct _TOKEN_STATISTICS") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_STATISTICS$ImpersonationLevel$VH().get(seg);
        }
        public static  @C("SECURITY_IMPERSONATION_LEVEL") int ImpersonationLevel$get(@C("struct _TOKEN_STATISTICS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_STATISTICS$ImpersonationLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImpersonationLevel$set(@C("struct _TOKEN_STATISTICS") MemorySegment seg, @C("SECURITY_IMPERSONATION_LEVEL") int x) {
            winnt_h$constants$4._TOKEN_STATISTICS$ImpersonationLevel$VH().set(seg, x);
        }
        public static void ImpersonationLevel$set(@C("struct _TOKEN_STATISTICS") MemorySegment seg, long index, @C("SECURITY_IMPERSONATION_LEVEL") int x) {
            winnt_h$constants$4._TOKEN_STATISTICS$ImpersonationLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DynamicCharged$VH() {
            return winnt_h$constants$4._TOKEN_STATISTICS$DynamicCharged$VH();
        }
        public static  @C("DWORD") int DynamicCharged$get(@C("struct _TOKEN_STATISTICS") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_STATISTICS$DynamicCharged$VH().get(seg);
        }
        public static  @C("DWORD") int DynamicCharged$get(@C("struct _TOKEN_STATISTICS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_STATISTICS$DynamicCharged$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DynamicCharged$set(@C("struct _TOKEN_STATISTICS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_STATISTICS$DynamicCharged$VH().set(seg, x);
        }
        public static void DynamicCharged$set(@C("struct _TOKEN_STATISTICS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_STATISTICS$DynamicCharged$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DynamicAvailable$VH() {
            return winnt_h$constants$4._TOKEN_STATISTICS$DynamicAvailable$VH();
        }
        public static  @C("DWORD") int DynamicAvailable$get(@C("struct _TOKEN_STATISTICS") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_STATISTICS$DynamicAvailable$VH().get(seg);
        }
        public static  @C("DWORD") int DynamicAvailable$get(@C("struct _TOKEN_STATISTICS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_STATISTICS$DynamicAvailable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DynamicAvailable$set(@C("struct _TOKEN_STATISTICS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_STATISTICS$DynamicAvailable$VH().set(seg, x);
        }
        public static void DynamicAvailable$set(@C("struct _TOKEN_STATISTICS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_STATISTICS$DynamicAvailable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GroupCount$VH() {
            return winnt_h$constants$4._TOKEN_STATISTICS$GroupCount$VH();
        }
        public static  @C("DWORD") int GroupCount$get(@C("struct _TOKEN_STATISTICS") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_STATISTICS$GroupCount$VH().get(seg);
        }
        public static  @C("DWORD") int GroupCount$get(@C("struct _TOKEN_STATISTICS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_STATISTICS$GroupCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GroupCount$set(@C("struct _TOKEN_STATISTICS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_STATISTICS$GroupCount$VH().set(seg, x);
        }
        public static void GroupCount$set(@C("struct _TOKEN_STATISTICS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_STATISTICS$GroupCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PrivilegeCount$VH() {
            return winnt_h$constants$4._TOKEN_STATISTICS$PrivilegeCount$VH();
        }
        public static  @C("DWORD") int PrivilegeCount$get(@C("struct _TOKEN_STATISTICS") MemorySegment seg) {
            return (int)winnt_h$constants$4._TOKEN_STATISTICS$PrivilegeCount$VH().get(seg);
        }
        public static  @C("DWORD") int PrivilegeCount$get(@C("struct _TOKEN_STATISTICS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._TOKEN_STATISTICS$PrivilegeCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrivilegeCount$set(@C("struct _TOKEN_STATISTICS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_STATISTICS$PrivilegeCount$VH().set(seg, x);
        }
        public static void PrivilegeCount$set(@C("struct _TOKEN_STATISTICS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._TOKEN_STATISTICS$PrivilegeCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ModifiedId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_STATISTICS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_STATISTICS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_STATISTICS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_STATISTICS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_STATISTICS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_STATISTICS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_STATISTICS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_STATISTICS")public static class TOKEN_STATISTICS extends _TOKEN_STATISTICS {

        /* package-private */ TOKEN_STATISTICS() {}
    }

    @C("struct _TOKEN_CONTROL")public static class _TOKEN_CONTROL {

        /* package-private */ _TOKEN_CONTROL() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_CONTROL$struct$LAYOUT();
        }
        public static MemorySegment TokenId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment AuthenticationId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment ModifiedId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static MemorySegment TokenSource$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_CONTROL") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_CONTROL") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_CONTROL[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_CONTROL[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_CONTROL*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_CONTROL*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_CONTROL") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_CONTROL")public static class TOKEN_CONTROL extends _TOKEN_CONTROL {

        /* package-private */ TOKEN_CONTROL() {}
    }

    @C("struct _TOKEN_ORIGIN")public static class _TOKEN_ORIGIN {

        /* package-private */ _TOKEN_ORIGIN() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_ORIGIN$struct$LAYOUT();
        }
        public static MemorySegment OriginatingLogonSession$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_ORIGIN") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_ORIGIN") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_ORIGIN[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_ORIGIN[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_ORIGIN*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_ORIGIN*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_ORIGIN") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_ORIGIN")public static class TOKEN_ORIGIN extends _TOKEN_ORIGIN {

        /* package-private */ TOKEN_ORIGIN() {}
    }

    @C("struct _TOKEN_APPCONTAINER_INFORMATION")public static class _TOKEN_APPCONTAINER_INFORMATION {

        /* package-private */ _TOKEN_APPCONTAINER_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle TokenAppContainer$VH() {
            return winnt_h$constants$4._TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH();
        }
        public static  @C("PSID") MemoryAddress TokenAppContainer$get(@C("struct _TOKEN_APPCONTAINER_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH().get(seg);
        }
        public static  @C("PSID") MemoryAddress TokenAppContainer$get(@C("struct _TOKEN_APPCONTAINER_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TokenAppContainer$set(@C("struct _TOKEN_APPCONTAINER_INFORMATION") MemorySegment seg, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH().set(seg, x);
        }
        public static void TokenAppContainer$set(@C("struct _TOKEN_APPCONTAINER_INFORMATION") MemorySegment seg, long index, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_APPCONTAINER_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_APPCONTAINER_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_APPCONTAINER_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_APPCONTAINER_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_APPCONTAINER_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_APPCONTAINER_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_APPCONTAINER_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_APPCONTAINER_INFORMATION")public static class TOKEN_APPCONTAINER_INFORMATION extends _TOKEN_APPCONTAINER_INFORMATION {

        /* package-private */ TOKEN_APPCONTAINER_INFORMATION() {}
    }

    @C("struct _TOKEN_SID_INFORMATION")public static class _TOKEN_SID_INFORMATION {

        /* package-private */ _TOKEN_SID_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_SID_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle Sid$VH() {
            return winnt_h$constants$4._TOKEN_SID_INFORMATION$Sid$VH();
        }
        public static  @C("PSID") MemoryAddress Sid$get(@C("struct _TOKEN_SID_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_SID_INFORMATION$Sid$VH().get(seg);
        }
        public static  @C("PSID") MemoryAddress Sid$get(@C("struct _TOKEN_SID_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_SID_INFORMATION$Sid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sid$set(@C("struct _TOKEN_SID_INFORMATION") MemorySegment seg, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_SID_INFORMATION$Sid$VH().set(seg, x);
        }
        public static void Sid$set(@C("struct _TOKEN_SID_INFORMATION") MemorySegment seg, long index, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_SID_INFORMATION$Sid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_SID_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_SID_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_SID_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_SID_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_SID_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_SID_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_SID_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_SID_INFORMATION")public static class TOKEN_SID_INFORMATION extends _TOKEN_SID_INFORMATION {

        /* package-private */ TOKEN_SID_INFORMATION() {}
    }

    @C("struct _TOKEN_BNO_ISOLATION_INFORMATION")public static class _TOKEN_BNO_ISOLATION_INFORMATION {

        /* package-private */ _TOKEN_BNO_ISOLATION_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle IsolationPrefix$VH() {
            return winnt_h$constants$4._TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH();
        }
        public static  @C("PWSTR") MemoryAddress IsolationPrefix$get(@C("struct _TOKEN_BNO_ISOLATION_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH().get(seg);
        }
        public static  @C("PWSTR") MemoryAddress IsolationPrefix$get(@C("struct _TOKEN_BNO_ISOLATION_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IsolationPrefix$set(@C("struct _TOKEN_BNO_ISOLATION_INFORMATION") MemorySegment seg, @C("PWSTR") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH().set(seg, x);
        }
        public static void IsolationPrefix$set(@C("struct _TOKEN_BNO_ISOLATION_INFORMATION") MemorySegment seg, long index, @C("PWSTR") MemoryAddress x) {
            winnt_h$constants$4._TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IsolationEnabled$VH() {
            return winnt_h$constants$4._TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH();
        }
        public static  @C("BOOLEAN") byte IsolationEnabled$get(@C("struct _TOKEN_BNO_ISOLATION_INFORMATION") MemorySegment seg) {
            return (byte)winnt_h$constants$4._TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte IsolationEnabled$get(@C("struct _TOKEN_BNO_ISOLATION_INFORMATION") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$4._TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IsolationEnabled$set(@C("struct _TOKEN_BNO_ISOLATION_INFORMATION") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$4._TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH().set(seg, x);
        }
        public static void IsolationEnabled$set(@C("struct _TOKEN_BNO_ISOLATION_INFORMATION") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$4._TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TOKEN_BNO_ISOLATION_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TOKEN_BNO_ISOLATION_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TOKEN_BNO_ISOLATION_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TOKEN_BNO_ISOLATION_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TOKEN_BNO_ISOLATION_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TOKEN_BNO_ISOLATION_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TOKEN_BNO_ISOLATION_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TOKEN_BNO_ISOLATION_INFORMATION")public static class TOKEN_BNO_ISOLATION_INFORMATION extends _TOKEN_BNO_ISOLATION_INFORMATION {

        /* package-private */ TOKEN_BNO_ISOLATION_INFORMATION() {}
    }

    @C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE")public static class _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {

        /* package-private */ _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT();
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH();
        }
        public static  @C("DWORD64") long Version$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemorySegment seg) {
            return (long)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH().get(seg);
        }
        public static  @C("DWORD64") long Version$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemorySegment seg, long index) {
            return (long)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Name$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH();
        }
        public static  @C("PWSTR") MemoryAddress Name$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH().get(seg);
        }
        public static  @C("PWSTR") MemoryAddress Name$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Name$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemorySegment seg, @C("PWSTR") MemoryAddress x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH().set(seg, x);
        }
        public static void Name$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemorySegment seg, long index, @C("PWSTR") MemoryAddress x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE")public static class CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE extends _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {

        /* package-private */ CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE() {}
    }

    @C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE")public static class _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {

        /* package-private */ _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT();
        }
        public static VarHandle pValue$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH();
        }
        public static  @C("PVOID") MemoryAddress pValue$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress pValue$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void pValue$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH().set(seg, x);
        }
        public static void pValue$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ValueLength$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH();
        }
        public static  @C("DWORD") int ValueLength$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemorySegment seg) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH().get(seg);
        }
        public static  @C("DWORD") int ValueLength$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ValueLength$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH().set(seg, x);
        }
        public static void ValueLength$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE")public static class CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE extends _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {

        /* package-private */ CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE() {}
    }

    @C("struct _CLAIM_SECURITY_ATTRIBUTE_V1")public static class _CLAIM_SECURITY_ATTRIBUTE_V1 {

        /* package-private */ _CLAIM_SECURITY_ATTRIBUTE_V1() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT();
        }
        public static VarHandle Name$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH();
        }
        public static  @C("PWSTR") MemoryAddress Name$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH().get(seg);
        }
        public static  @C("PWSTR") MemoryAddress Name$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Name$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, @C("PWSTR") MemoryAddress x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH().set(seg, x);
        }
        public static void Name$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, long index, @C("PWSTR") MemoryAddress x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ValueType$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH();
        }
        public static  @C("WORD") short ValueType$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg) {
            return (short)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH().get(seg);
        }
        public static  @C("WORD") short ValueType$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, long index) {
            return (short)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ValueType$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH().set(seg, x);
        }
        public static void ValueType$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH();
        }
        public static  @C("WORD") short Reserved$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg) {
            return (short)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH().get(seg);
        }
        public static  @C("WORD") short Reserved$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, long index) {
            return (short)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ValueCount$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH();
        }
        public static  @C("DWORD") int ValueCount$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH().get(seg);
        }
        public static  @C("DWORD") int ValueCount$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ValueCount$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH().set(seg, x);
        }
        public static void ValueCount$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("union ")public static class Values {

            /* package-private */ Values() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT();
            }
            public static VarHandle pInt64$VH() {
                return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$VH();
            }
            public static  @C("PLONG64") MemoryAddress pInt64$get(@C("union ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$VH().get(seg);
            }
            public static  @C("PLONG64") MemoryAddress pInt64$get(@C("union ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void pInt64$set(@C("union ") MemorySegment seg, @C("PLONG64") MemoryAddress x) {
                winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$VH().set(seg, x);
            }
            public static void pInt64$set(@C("union ") MemorySegment seg, long index, @C("PLONG64") MemoryAddress x) {
                winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle pUint64$VH() {
                return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$VH();
            }
            public static  @C("PDWORD64") MemoryAddress pUint64$get(@C("union ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$VH().get(seg);
            }
            public static  @C("PDWORD64") MemoryAddress pUint64$get(@C("union ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void pUint64$set(@C("union ") MemorySegment seg, @C("PDWORD64") MemoryAddress x) {
                winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$VH().set(seg, x);
            }
            public static void pUint64$set(@C("union ") MemorySegment seg, long index, @C("PDWORD64") MemoryAddress x) {
                winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle ppString$VH() {
                return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$VH();
            }
            public static  @C("PWSTR*") MemoryAddress ppString$get(@C("union ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$VH().get(seg);
            }
            public static  @C("PWSTR*") MemoryAddress ppString$get(@C("union ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void ppString$set(@C("union ") MemorySegment seg, @C("PWSTR*") MemoryAddress x) {
                winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$VH().set(seg, x);
            }
            public static void ppString$set(@C("union ") MemorySegment seg, long index, @C("PWSTR*") MemoryAddress x) {
                winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle pFqbn$VH() {
                return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$VH();
            }
            public static  @C("PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemoryAddress pFqbn$get(@C("union ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$VH().get(seg);
            }
            public static  @C("PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemoryAddress pFqbn$get(@C("union ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void pFqbn$set(@C("union ") MemorySegment seg, @C("PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemoryAddress x) {
                winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$VH().set(seg, x);
            }
            public static void pFqbn$set(@C("union ") MemorySegment seg, long index, @C("PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE") MemoryAddress x) {
                winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle pOctetString$VH() {
                return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$VH();
            }
            public static  @C("PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemoryAddress pOctetString$get(@C("union ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$VH().get(seg);
            }
            public static  @C("PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemoryAddress pOctetString$get(@C("union ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void pOctetString$set(@C("union ") MemorySegment seg, @C("PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemoryAddress x) {
                winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$VH().set(seg, x);
            }
            public static void pOctetString$set(@C("union ") MemorySegment seg, long index, @C("PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE") MemoryAddress x) {
                winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Values$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_V1[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_V1[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_V1*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_V1*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_V1") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _CLAIM_SECURITY_ATTRIBUTE_V1")public static class CLAIM_SECURITY_ATTRIBUTE_V1 extends _CLAIM_SECURITY_ATTRIBUTE_V1 {

        /* package-private */ CLAIM_SECURITY_ATTRIBUTE_V1() {}
    }

    @C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1")public static class _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {

        /* package-private */ _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT();
        }
        public static VarHandle Name$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH();
        }
        public static  @C("DWORD") int Name$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH().get(seg);
        }
        public static  @C("DWORD") int Name$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Name$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH().set(seg, x);
        }
        public static void Name$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ValueType$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH();
        }
        public static  @C("WORD") short ValueType$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg) {
            return (short)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH().get(seg);
        }
        public static  @C("WORD") short ValueType$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, long index) {
            return (short)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ValueType$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH().set(seg, x);
        }
        public static void ValueType$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH();
        }
        public static  @C("WORD") short Reserved$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg) {
            return (short)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH().get(seg);
        }
        public static  @C("WORD") short Reserved$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, long index) {
            return (short)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ValueCount$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH();
        }
        public static  @C("DWORD") int ValueCount$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH().get(seg);
        }
        public static  @C("DWORD") int ValueCount$get(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ValueCount$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH().set(seg, x);
        }
        public static void ValueCount$set(@C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("union ")public static class Values {

            /* package-private */ Values() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Values$union$LAYOUT();
            }
            public static MemorySegment pInt64$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            public static MemorySegment pUint64$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            public static MemorySegment ppString$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            public static MemorySegment pFqbn$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            public static MemorySegment pOctetString$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Values$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 4));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1")public static class CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 extends _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {

        /* package-private */ CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1() {}
    }

    @C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION")public static class _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {

        /* package-private */ _CLAIM_SECURITY_ATTRIBUTES_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH();
        }
        public static  @C("WORD") short Version$get(@C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment seg) {
            return (short)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH().get(seg);
        }
        public static  @C("WORD") short Version$get(@C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment seg, long index) {
            return (short)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH();
        }
        public static  @C("WORD") short Reserved$get(@C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment seg) {
            return (short)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH().get(seg);
        }
        public static  @C("WORD") short Reserved$get(@C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment seg, long index) {
            return (short)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AttributeCount$VH() {
            return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH();
        }
        public static  @C("DWORD") int AttributeCount$get(@C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH().get(seg);
        }
        public static  @C("DWORD") int AttributeCount$get(@C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AttributeCount$set(@C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH().set(seg, x);
        }
        public static void AttributeCount$set(@C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("union ")public static class Attribute {

            /* package-private */ Attribute() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$union$LAYOUT();
            }
            public static VarHandle pAttributeV1$VH() {
                return winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$VH();
            }
            public static  @C("PCLAIM_SECURITY_ATTRIBUTE_V1") MemoryAddress pAttributeV1$get(@C("union ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$VH().get(seg);
            }
            public static  @C("PCLAIM_SECURITY_ATTRIBUTE_V1") MemoryAddress pAttributeV1$get(@C("union ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void pAttributeV1$set(@C("union ") MemorySegment seg, @C("PCLAIM_SECURITY_ATTRIBUTE_V1") MemoryAddress x) {
                winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$VH().set(seg, x);
            }
            public static void pAttributeV1$set(@C("union ") MemorySegment seg, long index, @C("PCLAIM_SECURITY_ATTRIBUTE_V1") MemoryAddress x) {
                winnt_h$constants$4._CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Attribute$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION")public static class CLAIM_SECURITY_ATTRIBUTES_INFORMATION extends _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {

        /* package-private */ CLAIM_SECURITY_ATTRIBUTES_INFORMATION() {}
    }

    @C("struct _SECURITY_QUALITY_OF_SERVICE")public static class _SECURITY_QUALITY_OF_SERVICE {

        /* package-private */ _SECURITY_QUALITY_OF_SERVICE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT();
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$Length$VH();
        }
        public static  @C("DWORD") int Length$get(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$Length$VH().get(seg);
        }
        public static  @C("DWORD") int Length$get(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImpersonationLevel$VH() {
            return winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH();
        }
        public static  @C("SECURITY_IMPERSONATION_LEVEL") int ImpersonationLevel$get(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH().get(seg);
        }
        public static  @C("SECURITY_IMPERSONATION_LEVEL") int ImpersonationLevel$get(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImpersonationLevel$set(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg, @C("SECURITY_IMPERSONATION_LEVEL") int x) {
            winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH().set(seg, x);
        }
        public static void ImpersonationLevel$set(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg, long index, @C("SECURITY_IMPERSONATION_LEVEL") int x) {
            winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ContextTrackingMode$VH() {
            return winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH();
        }
        public static  @C("SECURITY_CONTEXT_TRACKING_MODE") byte ContextTrackingMode$get(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg) {
            return (byte)winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH().get(seg);
        }
        public static  @C("SECURITY_CONTEXT_TRACKING_MODE") byte ContextTrackingMode$get(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ContextTrackingMode$set(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg, @C("SECURITY_CONTEXT_TRACKING_MODE") byte x) {
            winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH().set(seg, x);
        }
        public static void ContextTrackingMode$set(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg, long index, @C("SECURITY_CONTEXT_TRACKING_MODE") byte x) {
            winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EffectiveOnly$VH() {
            return winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH();
        }
        public static  @C("BOOLEAN") byte EffectiveOnly$get(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg) {
            return (byte)winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte EffectiveOnly$get(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EffectiveOnly$set(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH().set(seg, x);
        }
        public static void EffectiveOnly$set(@C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$4._SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SECURITY_QUALITY_OF_SERVICE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SECURITY_QUALITY_OF_SERVICE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SECURITY_QUALITY_OF_SERVICE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SECURITY_QUALITY_OF_SERVICE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SECURITY_QUALITY_OF_SERVICE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SECURITY_QUALITY_OF_SERVICE")public static class SECURITY_QUALITY_OF_SERVICE extends _SECURITY_QUALITY_OF_SERVICE {

        /* package-private */ SECURITY_QUALITY_OF_SERVICE() {}
    }

    @C("struct _SE_IMPERSONATION_STATE")public static class _SE_IMPERSONATION_STATE {

        /* package-private */ _SE_IMPERSONATION_STATE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SE_IMPERSONATION_STATE$struct$LAYOUT();
        }
        public static VarHandle Token$VH() {
            return winnt_h$constants$4._SE_IMPERSONATION_STATE$Token$VH();
        }
        public static  @C("PACCESS_TOKEN") MemoryAddress Token$get(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_IMPERSONATION_STATE$Token$VH().get(seg);
        }
        public static  @C("PACCESS_TOKEN") MemoryAddress Token$get(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SE_IMPERSONATION_STATE$Token$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Token$set(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg, @C("PACCESS_TOKEN") MemoryAddress x) {
            winnt_h$constants$4._SE_IMPERSONATION_STATE$Token$VH().set(seg, x);
        }
        public static void Token$set(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg, long index, @C("PACCESS_TOKEN") MemoryAddress x) {
            winnt_h$constants$4._SE_IMPERSONATION_STATE$Token$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CopyOnOpen$VH() {
            return winnt_h$constants$4._SE_IMPERSONATION_STATE$CopyOnOpen$VH();
        }
        public static  @C("BOOLEAN") byte CopyOnOpen$get(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg) {
            return (byte)winnt_h$constants$4._SE_IMPERSONATION_STATE$CopyOnOpen$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte CopyOnOpen$get(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$4._SE_IMPERSONATION_STATE$CopyOnOpen$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CopyOnOpen$set(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$4._SE_IMPERSONATION_STATE$CopyOnOpen$VH().set(seg, x);
        }
        public static void CopyOnOpen$set(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$4._SE_IMPERSONATION_STATE$CopyOnOpen$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EffectiveOnly$VH() {
            return winnt_h$constants$4._SE_IMPERSONATION_STATE$EffectiveOnly$VH();
        }
        public static  @C("BOOLEAN") byte EffectiveOnly$get(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg) {
            return (byte)winnt_h$constants$4._SE_IMPERSONATION_STATE$EffectiveOnly$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte EffectiveOnly$get(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$4._SE_IMPERSONATION_STATE$EffectiveOnly$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EffectiveOnly$set(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$4._SE_IMPERSONATION_STATE$EffectiveOnly$VH().set(seg, x);
        }
        public static void EffectiveOnly$set(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$4._SE_IMPERSONATION_STATE$EffectiveOnly$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Level$VH() {
            return winnt_h$constants$4._SE_IMPERSONATION_STATE$Level$VH();
        }
        public static  @C("SECURITY_IMPERSONATION_LEVEL") int Level$get(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg) {
            return (int)winnt_h$constants$4._SE_IMPERSONATION_STATE$Level$VH().get(seg);
        }
        public static  @C("SECURITY_IMPERSONATION_LEVEL") int Level$get(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SE_IMPERSONATION_STATE$Level$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Level$set(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg, @C("SECURITY_IMPERSONATION_LEVEL") int x) {
            winnt_h$constants$4._SE_IMPERSONATION_STATE$Level$VH().set(seg, x);
        }
        public static void Level$set(@C("struct _SE_IMPERSONATION_STATE") MemorySegment seg, long index, @C("SECURITY_IMPERSONATION_LEVEL") int x) {
            winnt_h$constants$4._SE_IMPERSONATION_STATE$Level$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SE_IMPERSONATION_STATE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SE_IMPERSONATION_STATE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SE_IMPERSONATION_STATE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SE_IMPERSONATION_STATE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SE_IMPERSONATION_STATE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SE_IMPERSONATION_STATE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SE_IMPERSONATION_STATE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SE_IMPERSONATION_STATE")public static class SE_IMPERSONATION_STATE extends _SE_IMPERSONATION_STATE {

        /* package-private */ SE_IMPERSONATION_STATE() {}
    }

    @C("struct _SECURITY_CAPABILITIES")public static class _SECURITY_CAPABILITIES {

        /* package-private */ _SECURITY_CAPABILITIES() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._SECURITY_CAPABILITIES$struct$LAYOUT();
        }
        public static VarHandle AppContainerSid$VH() {
            return winnt_h$constants$4._SECURITY_CAPABILITIES$AppContainerSid$VH();
        }
        public static  @C("PSID") MemoryAddress AppContainerSid$get(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SECURITY_CAPABILITIES$AppContainerSid$VH().get(seg);
        }
        public static  @C("PSID") MemoryAddress AppContainerSid$get(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SECURITY_CAPABILITIES$AppContainerSid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AppContainerSid$set(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._SECURITY_CAPABILITIES$AppContainerSid$VH().set(seg, x);
        }
        public static void AppContainerSid$set(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg, long index, @C("PSID") MemoryAddress x) {
            winnt_h$constants$4._SECURITY_CAPABILITIES$AppContainerSid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Capabilities$VH() {
            return winnt_h$constants$4._SECURITY_CAPABILITIES$Capabilities$VH();
        }
        public static  @C("PSID_AND_ATTRIBUTES") MemoryAddress Capabilities$get(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SECURITY_CAPABILITIES$Capabilities$VH().get(seg);
        }
        public static  @C("PSID_AND_ATTRIBUTES") MemoryAddress Capabilities$get(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._SECURITY_CAPABILITIES$Capabilities$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Capabilities$set(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg, @C("PSID_AND_ATTRIBUTES") MemoryAddress x) {
            winnt_h$constants$4._SECURITY_CAPABILITIES$Capabilities$VH().set(seg, x);
        }
        public static void Capabilities$set(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg, long index, @C("PSID_AND_ATTRIBUTES") MemoryAddress x) {
            winnt_h$constants$4._SECURITY_CAPABILITIES$Capabilities$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CapabilityCount$VH() {
            return winnt_h$constants$4._SECURITY_CAPABILITIES$CapabilityCount$VH();
        }
        public static  @C("DWORD") int CapabilityCount$get(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg) {
            return (int)winnt_h$constants$4._SECURITY_CAPABILITIES$CapabilityCount$VH().get(seg);
        }
        public static  @C("DWORD") int CapabilityCount$get(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SECURITY_CAPABILITIES$CapabilityCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CapabilityCount$set(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_CAPABILITIES$CapabilityCount$VH().set(seg, x);
        }
        public static void CapabilityCount$set(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_CAPABILITIES$CapabilityCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$4._SECURITY_CAPABILITIES$Reserved$VH();
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg) {
            return (int)winnt_h$constants$4._SECURITY_CAPABILITIES$Reserved$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._SECURITY_CAPABILITIES$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_CAPABILITIES$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _SECURITY_CAPABILITIES") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._SECURITY_CAPABILITIES$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SECURITY_CAPABILITIES") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SECURITY_CAPABILITIES") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SECURITY_CAPABILITIES[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SECURITY_CAPABILITIES[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SECURITY_CAPABILITIES*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SECURITY_CAPABILITIES*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SECURITY_CAPABILITIES") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SECURITY_CAPABILITIES")public static class SECURITY_CAPABILITIES extends _SECURITY_CAPABILITIES {

        /* package-private */ SECURITY_CAPABILITIES() {}
    }

    @C("struct _JOB_SET_ARRAY")public static class _JOB_SET_ARRAY {

        /* package-private */ _JOB_SET_ARRAY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._JOB_SET_ARRAY$struct$LAYOUT();
        }
        public static VarHandle JobHandle$VH() {
            return winnt_h$constants$4._JOB_SET_ARRAY$JobHandle$VH();
        }
        public static  @C("HANDLE") MemoryAddress JobHandle$get(@C("struct _JOB_SET_ARRAY") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._JOB_SET_ARRAY$JobHandle$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress JobHandle$get(@C("struct _JOB_SET_ARRAY") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._JOB_SET_ARRAY$JobHandle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobHandle$set(@C("struct _JOB_SET_ARRAY") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$4._JOB_SET_ARRAY$JobHandle$VH().set(seg, x);
        }
        public static void JobHandle$set(@C("struct _JOB_SET_ARRAY") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$4._JOB_SET_ARRAY$JobHandle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MemberLevel$VH() {
            return winnt_h$constants$4._JOB_SET_ARRAY$MemberLevel$VH();
        }
        public static  @C("DWORD") int MemberLevel$get(@C("struct _JOB_SET_ARRAY") MemorySegment seg) {
            return (int)winnt_h$constants$4._JOB_SET_ARRAY$MemberLevel$VH().get(seg);
        }
        public static  @C("DWORD") int MemberLevel$get(@C("struct _JOB_SET_ARRAY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._JOB_SET_ARRAY$MemberLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MemberLevel$set(@C("struct _JOB_SET_ARRAY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._JOB_SET_ARRAY$MemberLevel$VH().set(seg, x);
        }
        public static void MemberLevel$set(@C("struct _JOB_SET_ARRAY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._JOB_SET_ARRAY$MemberLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$4._JOB_SET_ARRAY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _JOB_SET_ARRAY") MemorySegment seg) {
            return (int)winnt_h$constants$4._JOB_SET_ARRAY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _JOB_SET_ARRAY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._JOB_SET_ARRAY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _JOB_SET_ARRAY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._JOB_SET_ARRAY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _JOB_SET_ARRAY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._JOB_SET_ARRAY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOB_SET_ARRAY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOB_SET_ARRAY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOB_SET_ARRAY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOB_SET_ARRAY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOB_SET_ARRAY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOB_SET_ARRAY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOB_SET_ARRAY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOB_SET_ARRAY")public static class JOB_SET_ARRAY extends _JOB_SET_ARRAY {

        /* package-private */ JOB_SET_ARRAY() {}
    }

    @C("struct _EXCEPTION_REGISTRATION_RECORD")public static class _EXCEPTION_REGISTRATION_RECORD {

        /* package-private */ _EXCEPTION_REGISTRATION_RECORD() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT();
        }
        public static VarHandle Next$VH() {
            return winnt_h$constants$4._EXCEPTION_REGISTRATION_RECORD$Next$VH();
        }
        public static  @C("struct _EXCEPTION_REGISTRATION_RECORD*") MemoryAddress Next$get(@C("struct _EXCEPTION_REGISTRATION_RECORD") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._EXCEPTION_REGISTRATION_RECORD$Next$VH().get(seg);
        }
        public static  @C("struct _EXCEPTION_REGISTRATION_RECORD*") MemoryAddress Next$get(@C("struct _EXCEPTION_REGISTRATION_RECORD") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._EXCEPTION_REGISTRATION_RECORD$Next$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Next$set(@C("struct _EXCEPTION_REGISTRATION_RECORD") MemorySegment seg, @C("struct _EXCEPTION_REGISTRATION_RECORD*") MemoryAddress x) {
            winnt_h$constants$4._EXCEPTION_REGISTRATION_RECORD$Next$VH().set(seg, x);
        }
        public static void Next$set(@C("struct _EXCEPTION_REGISTRATION_RECORD") MemorySegment seg, long index, @C("struct _EXCEPTION_REGISTRATION_RECORD*") MemoryAddress x) {
            winnt_h$constants$4._EXCEPTION_REGISTRATION_RECORD$Next$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Handler$VH() {
            return winnt_h$constants$4._EXCEPTION_REGISTRATION_RECORD$Handler$VH();
        }
        public static  @C("PEXCEPTION_ROUTINE") MemoryAddress Handler$get(@C("struct _EXCEPTION_REGISTRATION_RECORD") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._EXCEPTION_REGISTRATION_RECORD$Handler$VH().get(seg);
        }
        public static  @C("PEXCEPTION_ROUTINE") MemoryAddress Handler$get(@C("struct _EXCEPTION_REGISTRATION_RECORD") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._EXCEPTION_REGISTRATION_RECORD$Handler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Handler$set(@C("struct _EXCEPTION_REGISTRATION_RECORD") MemorySegment seg, @C("PEXCEPTION_ROUTINE") MemoryAddress x) {
            winnt_h$constants$4._EXCEPTION_REGISTRATION_RECORD$Handler$VH().set(seg, x);
        }
        public static void Handler$set(@C("struct _EXCEPTION_REGISTRATION_RECORD") MemorySegment seg, long index, @C("PEXCEPTION_ROUTINE") MemoryAddress x) {
            winnt_h$constants$4._EXCEPTION_REGISTRATION_RECORD$Handler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _EXCEPTION_REGISTRATION_RECORD") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _EXCEPTION_REGISTRATION_RECORD") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _EXCEPTION_REGISTRATION_RECORD[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _EXCEPTION_REGISTRATION_RECORD[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _EXCEPTION_REGISTRATION_RECORD*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _EXCEPTION_REGISTRATION_RECORD*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _EXCEPTION_REGISTRATION_RECORD") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _EXCEPTION_REGISTRATION_RECORD")public static class EXCEPTION_REGISTRATION_RECORD extends _EXCEPTION_REGISTRATION_RECORD {

        /* package-private */ EXCEPTION_REGISTRATION_RECORD() {}
    }

    @C("struct _NT_TIB")public static class _NT_TIB {

        /* package-private */ _NT_TIB() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._NT_TIB$struct$LAYOUT();
        }
        public static VarHandle ExceptionList$VH() {
            return winnt_h$constants$4._NT_TIB$ExceptionList$VH();
        }
        public static  @C("struct _EXCEPTION_REGISTRATION_RECORD*") MemoryAddress ExceptionList$get(@C("struct _NT_TIB") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$ExceptionList$VH().get(seg);
        }
        public static  @C("struct _EXCEPTION_REGISTRATION_RECORD*") MemoryAddress ExceptionList$get(@C("struct _NT_TIB") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$ExceptionList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionList$set(@C("struct _NT_TIB") MemorySegment seg, @C("struct _EXCEPTION_REGISTRATION_RECORD*") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$ExceptionList$VH().set(seg, x);
        }
        public static void ExceptionList$set(@C("struct _NT_TIB") MemorySegment seg, long index, @C("struct _EXCEPTION_REGISTRATION_RECORD*") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$ExceptionList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StackBase$VH() {
            return winnt_h$constants$4._NT_TIB$StackBase$VH();
        }
        public static  @C("PVOID") MemoryAddress StackBase$get(@C("struct _NT_TIB") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$StackBase$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress StackBase$get(@C("struct _NT_TIB") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$StackBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StackBase$set(@C("struct _NT_TIB") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$StackBase$VH().set(seg, x);
        }
        public static void StackBase$set(@C("struct _NT_TIB") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$StackBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StackLimit$VH() {
            return winnt_h$constants$4._NT_TIB$StackLimit$VH();
        }
        public static  @C("PVOID") MemoryAddress StackLimit$get(@C("struct _NT_TIB") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$StackLimit$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress StackLimit$get(@C("struct _NT_TIB") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$StackLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StackLimit$set(@C("struct _NT_TIB") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$StackLimit$VH().set(seg, x);
        }
        public static void StackLimit$set(@C("struct _NT_TIB") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$StackLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SubSystemTib$VH() {
            return winnt_h$constants$4._NT_TIB$SubSystemTib$VH();
        }
        public static  @C("PVOID") MemoryAddress SubSystemTib$get(@C("struct _NT_TIB") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$SubSystemTib$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress SubSystemTib$get(@C("struct _NT_TIB") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$SubSystemTib$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SubSystemTib$set(@C("struct _NT_TIB") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$SubSystemTib$VH().set(seg, x);
        }
        public static void SubSystemTib$set(@C("struct _NT_TIB") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$SubSystemTib$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FiberData$VH() {
            return winnt_h$constants$4._NT_TIB$FiberData$VH();
        }
        public static  @C("PVOID") MemoryAddress FiberData$get(@C("struct _NT_TIB") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$FiberData$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress FiberData$get(@C("struct _NT_TIB") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$FiberData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FiberData$set(@C("struct _NT_TIB") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$FiberData$VH().set(seg, x);
        }
        public static void FiberData$set(@C("struct _NT_TIB") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$FiberData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$4._NT_TIB$Version$VH();
        }
        public static  @C("DWORD") int Version$get(@C("struct _NT_TIB") MemorySegment seg) {
            return (int)winnt_h$constants$4._NT_TIB$Version$VH().get(seg);
        }
        public static  @C("DWORD") int Version$get(@C("struct _NT_TIB") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._NT_TIB$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _NT_TIB") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _NT_TIB") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ArbitraryUserPointer$VH() {
            return winnt_h$constants$4._NT_TIB$ArbitraryUserPointer$VH();
        }
        public static  @C("PVOID") MemoryAddress ArbitraryUserPointer$get(@C("struct _NT_TIB") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$ArbitraryUserPointer$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress ArbitraryUserPointer$get(@C("struct _NT_TIB") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$ArbitraryUserPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ArbitraryUserPointer$set(@C("struct _NT_TIB") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$ArbitraryUserPointer$VH().set(seg, x);
        }
        public static void ArbitraryUserPointer$set(@C("struct _NT_TIB") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$ArbitraryUserPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Self$VH() {
            return winnt_h$constants$4._NT_TIB$Self$VH();
        }
        public static  @C("struct _NT_TIB*") MemoryAddress Self$get(@C("struct _NT_TIB") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$Self$VH().get(seg);
        }
        public static  @C("struct _NT_TIB*") MemoryAddress Self$get(@C("struct _NT_TIB") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._NT_TIB$Self$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Self$set(@C("struct _NT_TIB") MemorySegment seg, @C("struct _NT_TIB*") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$Self$VH().set(seg, x);
        }
        public static void Self$set(@C("struct _NT_TIB") MemorySegment seg, long index, @C("struct _NT_TIB*") MemoryAddress x) {
            winnt_h$constants$4._NT_TIB$Self$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _NT_TIB") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _NT_TIB") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _NT_TIB[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _NT_TIB[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _NT_TIB*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _NT_TIB*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _NT_TIB") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _NT_TIB")public static class NT_TIB extends _NT_TIB {

        /* package-private */ NT_TIB() {}
    }

    @C("struct _NT_TIB32")public static class _NT_TIB32 {

        /* package-private */ _NT_TIB32() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._NT_TIB32$struct$LAYOUT();
        }
        public static VarHandle ExceptionList$VH() {
            return winnt_h$constants$4._NT_TIB32$ExceptionList$VH();
        }
        public static  @C("DWORD") int ExceptionList$get(@C("struct _NT_TIB32") MemorySegment seg) {
            return (int)winnt_h$constants$4._NT_TIB32$ExceptionList$VH().get(seg);
        }
        public static  @C("DWORD") int ExceptionList$get(@C("struct _NT_TIB32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._NT_TIB32$ExceptionList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionList$set(@C("struct _NT_TIB32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$ExceptionList$VH().set(seg, x);
        }
        public static void ExceptionList$set(@C("struct _NT_TIB32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$ExceptionList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StackBase$VH() {
            return winnt_h$constants$4._NT_TIB32$StackBase$VH();
        }
        public static  @C("DWORD") int StackBase$get(@C("struct _NT_TIB32") MemorySegment seg) {
            return (int)winnt_h$constants$4._NT_TIB32$StackBase$VH().get(seg);
        }
        public static  @C("DWORD") int StackBase$get(@C("struct _NT_TIB32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._NT_TIB32$StackBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StackBase$set(@C("struct _NT_TIB32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$StackBase$VH().set(seg, x);
        }
        public static void StackBase$set(@C("struct _NT_TIB32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$StackBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StackLimit$VH() {
            return winnt_h$constants$4._NT_TIB32$StackLimit$VH();
        }
        public static  @C("DWORD") int StackLimit$get(@C("struct _NT_TIB32") MemorySegment seg) {
            return (int)winnt_h$constants$4._NT_TIB32$StackLimit$VH().get(seg);
        }
        public static  @C("DWORD") int StackLimit$get(@C("struct _NT_TIB32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._NT_TIB32$StackLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StackLimit$set(@C("struct _NT_TIB32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$StackLimit$VH().set(seg, x);
        }
        public static void StackLimit$set(@C("struct _NT_TIB32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$StackLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SubSystemTib$VH() {
            return winnt_h$constants$4._NT_TIB32$SubSystemTib$VH();
        }
        public static  @C("DWORD") int SubSystemTib$get(@C("struct _NT_TIB32") MemorySegment seg) {
            return (int)winnt_h$constants$4._NT_TIB32$SubSystemTib$VH().get(seg);
        }
        public static  @C("DWORD") int SubSystemTib$get(@C("struct _NT_TIB32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._NT_TIB32$SubSystemTib$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SubSystemTib$set(@C("struct _NT_TIB32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$SubSystemTib$VH().set(seg, x);
        }
        public static void SubSystemTib$set(@C("struct _NT_TIB32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$SubSystemTib$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FiberData$VH() {
            return winnt_h$constants$4._NT_TIB32$FiberData$VH();
        }
        public static  @C("DWORD") int FiberData$get(@C("struct _NT_TIB32") MemorySegment seg) {
            return (int)winnt_h$constants$4._NT_TIB32$FiberData$VH().get(seg);
        }
        public static  @C("DWORD") int FiberData$get(@C("struct _NT_TIB32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._NT_TIB32$FiberData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FiberData$set(@C("struct _NT_TIB32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$FiberData$VH().set(seg, x);
        }
        public static void FiberData$set(@C("struct _NT_TIB32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$FiberData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$4._NT_TIB32$Version$VH();
        }
        public static  @C("DWORD") int Version$get(@C("struct _NT_TIB32") MemorySegment seg) {
            return (int)winnt_h$constants$4._NT_TIB32$Version$VH().get(seg);
        }
        public static  @C("DWORD") int Version$get(@C("struct _NT_TIB32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._NT_TIB32$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _NT_TIB32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _NT_TIB32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ArbitraryUserPointer$VH() {
            return winnt_h$constants$4._NT_TIB32$ArbitraryUserPointer$VH();
        }
        public static  @C("DWORD") int ArbitraryUserPointer$get(@C("struct _NT_TIB32") MemorySegment seg) {
            return (int)winnt_h$constants$4._NT_TIB32$ArbitraryUserPointer$VH().get(seg);
        }
        public static  @C("DWORD") int ArbitraryUserPointer$get(@C("struct _NT_TIB32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._NT_TIB32$ArbitraryUserPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ArbitraryUserPointer$set(@C("struct _NT_TIB32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$ArbitraryUserPointer$VH().set(seg, x);
        }
        public static void ArbitraryUserPointer$set(@C("struct _NT_TIB32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$ArbitraryUserPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Self$VH() {
            return winnt_h$constants$4._NT_TIB32$Self$VH();
        }
        public static  @C("DWORD") int Self$get(@C("struct _NT_TIB32") MemorySegment seg) {
            return (int)winnt_h$constants$4._NT_TIB32$Self$VH().get(seg);
        }
        public static  @C("DWORD") int Self$get(@C("struct _NT_TIB32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._NT_TIB32$Self$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Self$set(@C("struct _NT_TIB32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$Self$VH().set(seg, x);
        }
        public static void Self$set(@C("struct _NT_TIB32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB32$Self$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _NT_TIB32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _NT_TIB32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _NT_TIB32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _NT_TIB32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _NT_TIB32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _NT_TIB32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _NT_TIB32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _NT_TIB32")public static class NT_TIB32 extends _NT_TIB32 {

        /* package-private */ NT_TIB32() {}
    }

    @C("struct _NT_TIB64")public static class _NT_TIB64 {

        /* package-private */ _NT_TIB64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._NT_TIB64$struct$LAYOUT();
        }
        public static VarHandle ExceptionList$VH() {
            return winnt_h$constants$4._NT_TIB64$ExceptionList$VH();
        }
        public static  @C("DWORD64") long ExceptionList$get(@C("struct _NT_TIB64") MemorySegment seg) {
            return (long)winnt_h$constants$4._NT_TIB64$ExceptionList$VH().get(seg);
        }
        public static  @C("DWORD64") long ExceptionList$get(@C("struct _NT_TIB64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$4._NT_TIB64$ExceptionList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionList$set(@C("struct _NT_TIB64") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$ExceptionList$VH().set(seg, x);
        }
        public static void ExceptionList$set(@C("struct _NT_TIB64") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$ExceptionList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StackBase$VH() {
            return winnt_h$constants$4._NT_TIB64$StackBase$VH();
        }
        public static  @C("DWORD64") long StackBase$get(@C("struct _NT_TIB64") MemorySegment seg) {
            return (long)winnt_h$constants$4._NT_TIB64$StackBase$VH().get(seg);
        }
        public static  @C("DWORD64") long StackBase$get(@C("struct _NT_TIB64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$4._NT_TIB64$StackBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StackBase$set(@C("struct _NT_TIB64") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$StackBase$VH().set(seg, x);
        }
        public static void StackBase$set(@C("struct _NT_TIB64") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$StackBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StackLimit$VH() {
            return winnt_h$constants$4._NT_TIB64$StackLimit$VH();
        }
        public static  @C("DWORD64") long StackLimit$get(@C("struct _NT_TIB64") MemorySegment seg) {
            return (long)winnt_h$constants$4._NT_TIB64$StackLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long StackLimit$get(@C("struct _NT_TIB64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$4._NT_TIB64$StackLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StackLimit$set(@C("struct _NT_TIB64") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$StackLimit$VH().set(seg, x);
        }
        public static void StackLimit$set(@C("struct _NT_TIB64") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$StackLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SubSystemTib$VH() {
            return winnt_h$constants$4._NT_TIB64$SubSystemTib$VH();
        }
        public static  @C("DWORD64") long SubSystemTib$get(@C("struct _NT_TIB64") MemorySegment seg) {
            return (long)winnt_h$constants$4._NT_TIB64$SubSystemTib$VH().get(seg);
        }
        public static  @C("DWORD64") long SubSystemTib$get(@C("struct _NT_TIB64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$4._NT_TIB64$SubSystemTib$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SubSystemTib$set(@C("struct _NT_TIB64") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$SubSystemTib$VH().set(seg, x);
        }
        public static void SubSystemTib$set(@C("struct _NT_TIB64") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$SubSystemTib$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FiberData$VH() {
            return winnt_h$constants$4._NT_TIB64$FiberData$VH();
        }
        public static  @C("DWORD64") long FiberData$get(@C("struct _NT_TIB64") MemorySegment seg) {
            return (long)winnt_h$constants$4._NT_TIB64$FiberData$VH().get(seg);
        }
        public static  @C("DWORD64") long FiberData$get(@C("struct _NT_TIB64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$4._NT_TIB64$FiberData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FiberData$set(@C("struct _NT_TIB64") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$FiberData$VH().set(seg, x);
        }
        public static void FiberData$set(@C("struct _NT_TIB64") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$FiberData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$4._NT_TIB64$Version$VH();
        }
        public static  @C("DWORD") int Version$get(@C("struct _NT_TIB64") MemorySegment seg) {
            return (int)winnt_h$constants$4._NT_TIB64$Version$VH().get(seg);
        }
        public static  @C("DWORD") int Version$get(@C("struct _NT_TIB64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._NT_TIB64$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _NT_TIB64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB64$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _NT_TIB64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._NT_TIB64$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ArbitraryUserPointer$VH() {
            return winnt_h$constants$4._NT_TIB64$ArbitraryUserPointer$VH();
        }
        public static  @C("DWORD64") long ArbitraryUserPointer$get(@C("struct _NT_TIB64") MemorySegment seg) {
            return (long)winnt_h$constants$4._NT_TIB64$ArbitraryUserPointer$VH().get(seg);
        }
        public static  @C("DWORD64") long ArbitraryUserPointer$get(@C("struct _NT_TIB64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$4._NT_TIB64$ArbitraryUserPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ArbitraryUserPointer$set(@C("struct _NT_TIB64") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$ArbitraryUserPointer$VH().set(seg, x);
        }
        public static void ArbitraryUserPointer$set(@C("struct _NT_TIB64") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$ArbitraryUserPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Self$VH() {
            return winnt_h$constants$4._NT_TIB64$Self$VH();
        }
        public static  @C("DWORD64") long Self$get(@C("struct _NT_TIB64") MemorySegment seg) {
            return (long)winnt_h$constants$4._NT_TIB64$Self$VH().get(seg);
        }
        public static  @C("DWORD64") long Self$get(@C("struct _NT_TIB64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$4._NT_TIB64$Self$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Self$set(@C("struct _NT_TIB64") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$Self$VH().set(seg, x);
        }
        public static void Self$set(@C("struct _NT_TIB64") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$4._NT_TIB64$Self$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _NT_TIB64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _NT_TIB64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _NT_TIB64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _NT_TIB64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _NT_TIB64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _NT_TIB64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _NT_TIB64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _NT_TIB64")public static class NT_TIB64 extends _NT_TIB64 {

        /* package-private */ NT_TIB64() {}
    }

    @C("struct _UMS_CREATE_THREAD_ATTRIBUTES")public static class _UMS_CREATE_THREAD_ATTRIBUTES {

        /* package-private */ _UMS_CREATE_THREAD_ATTRIBUTES() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT();
        }
        public static VarHandle UmsVersion$VH() {
            return winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH();
        }
        public static  @C("DWORD") int UmsVersion$get(@C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment seg) {
            return (int)winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH().get(seg);
        }
        public static  @C("DWORD") int UmsVersion$get(@C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment seg, long index) {
            return (int)winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UmsVersion$set(@C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH().set(seg, x);
        }
        public static void UmsVersion$set(@C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle UmsContext$VH() {
            return winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH();
        }
        public static  @C("PVOID") MemoryAddress UmsContext$get(@C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress UmsContext$get(@C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UmsContext$set(@C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH().set(seg, x);
        }
        public static void UmsContext$set(@C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle UmsCompletionList$VH() {
            return winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH();
        }
        public static  @C("PVOID") MemoryAddress UmsCompletionList$get(@C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress UmsCompletionList$get(@C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UmsCompletionList$set(@C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH().set(seg, x);
        }
        public static void UmsCompletionList$set(@C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$4._UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _UMS_CREATE_THREAD_ATTRIBUTES[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _UMS_CREATE_THREAD_ATTRIBUTES[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _UMS_CREATE_THREAD_ATTRIBUTES*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _UMS_CREATE_THREAD_ATTRIBUTES*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _UMS_CREATE_THREAD_ATTRIBUTES") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _UMS_CREATE_THREAD_ATTRIBUTES")public static class UMS_CREATE_THREAD_ATTRIBUTES extends _UMS_CREATE_THREAD_ATTRIBUTES {

        /* package-private */ UMS_CREATE_THREAD_ATTRIBUTES() {}
    }

    @C("struct _WOW64_ARCHITECTURE_INFORMATION")public static class _WOW64_ARCHITECTURE_INFORMATION {

        /* package-private */ _WOW64_ARCHITECTURE_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._WOW64_ARCHITECTURE_INFORMATION$struct$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _WOW64_ARCHITECTURE_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _WOW64_ARCHITECTURE_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _WOW64_ARCHITECTURE_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _WOW64_ARCHITECTURE_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _WOW64_ARCHITECTURE_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _WOW64_ARCHITECTURE_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _WOW64_ARCHITECTURE_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _WOW64_ARCHITECTURE_INFORMATION")public static class WOW64_ARCHITECTURE_INFORMATION extends _WOW64_ARCHITECTURE_INFORMATION {

        /* package-private */ WOW64_ARCHITECTURE_INFORMATION() {}
    }

    @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET")public static class _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET {

        /* package-private */ _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$struct$LAYOUT();
        }
        public static VarHandle TargetAddress$VH() {
            return winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$VH();
        }
        public static  @C("ULONG_PTR") long TargetAddress$get(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemorySegment seg) {
            return (long)winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$VH().get(seg);
        }
        public static  @C("ULONG_PTR") long TargetAddress$get(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TargetAddress$set(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemorySegment seg, @C("ULONG_PTR") long x) {
            winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$VH().set(seg, x);
        }
        public static void TargetAddress$set(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemorySegment seg, long index, @C("ULONG_PTR") long x) {
            winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$VH();
        }
        public static  @C("ULONG_PTR") long Flags$get(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemorySegment seg) {
            return (long)winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$VH().get(seg);
        }
        public static  @C("ULONG_PTR") long Flags$get(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemorySegment seg, @C("ULONG_PTR") long x) {
            winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemorySegment seg, long index, @C("ULONG_PTR") long x) {
            winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET")public static class PROCESS_DYNAMIC_EH_CONTINUATION_TARGET extends _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET {

        /* package-private */ PROCESS_DYNAMIC_EH_CONTINUATION_TARGET() {}
    }

    @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION")public static class _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION {

        /* package-private */ _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle NumberOfTargets$VH() {
            return winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$VH();
        }
        public static  @C("WORD") short NumberOfTargets$get(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg) {
            return (short)winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$VH().get(seg);
        }
        public static  @C("WORD") short NumberOfTargets$get(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg, long index) {
            return (short)winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfTargets$set(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$VH().set(seg, x);
        }
        public static void NumberOfTargets$set(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$VH();
        }
        public static  @C("WORD") short Reserved$get(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg) {
            return (short)winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$VH().get(seg);
        }
        public static  @C("WORD") short Reserved$get(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg, long index) {
            return (short)winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved2$VH() {
            return winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$VH();
        }
        public static  @C("DWORD") int Reserved2$get(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved2$get(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved2$set(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$VH().set(seg, x);
        }
        public static void Reserved2$set(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Targets$VH() {
            return winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$VH();
        }
        public static  @C("PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemoryAddress Targets$get(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$VH().get(seg);
        }
        public static  @C("PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemoryAddress Targets$get(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Targets$set(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg, @C("PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemoryAddress x) {
            winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$VH().set(seg, x);
        }
        public static void Targets$set(@C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment seg, long index, @C("PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET") MemoryAddress x) {
            winnt_h$constants$5._PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION")public static class PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION extends _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION {

        /* package-private */ PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION() {}
    }

    @C("struct _QUOTA_LIMITS")public static class _QUOTA_LIMITS {

        /* package-private */ _QUOTA_LIMITS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._QUOTA_LIMITS$struct$LAYOUT();
        }
        public static VarHandle PagedPoolLimit$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS$PagedPoolLimit$VH();
        }
        public static  @C("SIZE_T") long PagedPoolLimit$get(@C("struct _QUOTA_LIMITS") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS$PagedPoolLimit$VH().get(seg);
        }
        public static  @C("SIZE_T") long PagedPoolLimit$get(@C("struct _QUOTA_LIMITS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS$PagedPoolLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PagedPoolLimit$set(@C("struct _QUOTA_LIMITS") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS$PagedPoolLimit$VH().set(seg, x);
        }
        public static void PagedPoolLimit$set(@C("struct _QUOTA_LIMITS") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS$PagedPoolLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NonPagedPoolLimit$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS$NonPagedPoolLimit$VH();
        }
        public static  @C("SIZE_T") long NonPagedPoolLimit$get(@C("struct _QUOTA_LIMITS") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS$NonPagedPoolLimit$VH().get(seg);
        }
        public static  @C("SIZE_T") long NonPagedPoolLimit$get(@C("struct _QUOTA_LIMITS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS$NonPagedPoolLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NonPagedPoolLimit$set(@C("struct _QUOTA_LIMITS") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS$NonPagedPoolLimit$VH().set(seg, x);
        }
        public static void NonPagedPoolLimit$set(@C("struct _QUOTA_LIMITS") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS$NonPagedPoolLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinimumWorkingSetSize$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS$MinimumWorkingSetSize$VH();
        }
        public static  @C("SIZE_T") long MinimumWorkingSetSize$get(@C("struct _QUOTA_LIMITS") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS$MinimumWorkingSetSize$VH().get(seg);
        }
        public static  @C("SIZE_T") long MinimumWorkingSetSize$get(@C("struct _QUOTA_LIMITS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS$MinimumWorkingSetSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinimumWorkingSetSize$set(@C("struct _QUOTA_LIMITS") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS$MinimumWorkingSetSize$VH().set(seg, x);
        }
        public static void MinimumWorkingSetSize$set(@C("struct _QUOTA_LIMITS") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS$MinimumWorkingSetSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaximumWorkingSetSize$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS$MaximumWorkingSetSize$VH();
        }
        public static  @C("SIZE_T") long MaximumWorkingSetSize$get(@C("struct _QUOTA_LIMITS") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS$MaximumWorkingSetSize$VH().get(seg);
        }
        public static  @C("SIZE_T") long MaximumWorkingSetSize$get(@C("struct _QUOTA_LIMITS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS$MaximumWorkingSetSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumWorkingSetSize$set(@C("struct _QUOTA_LIMITS") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS$MaximumWorkingSetSize$VH().set(seg, x);
        }
        public static void MaximumWorkingSetSize$set(@C("struct _QUOTA_LIMITS") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS$MaximumWorkingSetSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PagefileLimit$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS$PagefileLimit$VH();
        }
        public static  @C("SIZE_T") long PagefileLimit$get(@C("struct _QUOTA_LIMITS") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS$PagefileLimit$VH().get(seg);
        }
        public static  @C("SIZE_T") long PagefileLimit$get(@C("struct _QUOTA_LIMITS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS$PagefileLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PagefileLimit$set(@C("struct _QUOTA_LIMITS") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS$PagefileLimit$VH().set(seg, x);
        }
        public static void PagefileLimit$set(@C("struct _QUOTA_LIMITS") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS$PagefileLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment TimeLimit$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _QUOTA_LIMITS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _QUOTA_LIMITS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _QUOTA_LIMITS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _QUOTA_LIMITS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _QUOTA_LIMITS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _QUOTA_LIMITS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _QUOTA_LIMITS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _QUOTA_LIMITS")public static class QUOTA_LIMITS extends _QUOTA_LIMITS {

        /* package-private */ QUOTA_LIMITS() {}
    }

    @C("union _RATE_QUOTA_LIMIT")public static class _RATE_QUOTA_LIMIT {

        /* package-private */ _RATE_QUOTA_LIMIT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._RATE_QUOTA_LIMIT$union$LAYOUT();
        }
        public static VarHandle RateData$VH() {
            return winnt_h$constants$5._RATE_QUOTA_LIMIT$RateData$VH();
        }
        public static  @C("DWORD") int RateData$get(@C("union _RATE_QUOTA_LIMIT") MemorySegment seg) {
            return (int)winnt_h$constants$5._RATE_QUOTA_LIMIT$RateData$VH().get(seg);
        }
        public static  @C("DWORD") int RateData$get(@C("union _RATE_QUOTA_LIMIT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._RATE_QUOTA_LIMIT$RateData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RateData$set(@C("union _RATE_QUOTA_LIMIT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._RATE_QUOTA_LIMIT$RateData$VH().set(seg, x);
        }
        public static void RateData$set(@C("union _RATE_QUOTA_LIMIT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._RATE_QUOTA_LIMIT$RateData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union _RATE_QUOTA_LIMIT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union _RATE_QUOTA_LIMIT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union _RATE_QUOTA_LIMIT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union _RATE_QUOTA_LIMIT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union _RATE_QUOTA_LIMIT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union _RATE_QUOTA_LIMIT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union _RATE_QUOTA_LIMIT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("union _RATE_QUOTA_LIMIT")public static class RATE_QUOTA_LIMIT extends _RATE_QUOTA_LIMIT {

        /* package-private */ RATE_QUOTA_LIMIT() {}
    }

    @C("struct _QUOTA_LIMITS_EX")public static class _QUOTA_LIMITS_EX {

        /* package-private */ _QUOTA_LIMITS_EX() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._QUOTA_LIMITS_EX$struct$LAYOUT();
        }
        public static VarHandle PagedPoolLimit$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS_EX$PagedPoolLimit$VH();
        }
        public static  @C("SIZE_T") long PagedPoolLimit$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$PagedPoolLimit$VH().get(seg);
        }
        public static  @C("SIZE_T") long PagedPoolLimit$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$PagedPoolLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PagedPoolLimit$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$PagedPoolLimit$VH().set(seg, x);
        }
        public static void PagedPoolLimit$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$PagedPoolLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NonPagedPoolLimit$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS_EX$NonPagedPoolLimit$VH();
        }
        public static  @C("SIZE_T") long NonPagedPoolLimit$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$NonPagedPoolLimit$VH().get(seg);
        }
        public static  @C("SIZE_T") long NonPagedPoolLimit$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$NonPagedPoolLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NonPagedPoolLimit$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$NonPagedPoolLimit$VH().set(seg, x);
        }
        public static void NonPagedPoolLimit$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$NonPagedPoolLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinimumWorkingSetSize$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS_EX$MinimumWorkingSetSize$VH();
        }
        public static  @C("SIZE_T") long MinimumWorkingSetSize$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$MinimumWorkingSetSize$VH().get(seg);
        }
        public static  @C("SIZE_T") long MinimumWorkingSetSize$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$MinimumWorkingSetSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinimumWorkingSetSize$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$MinimumWorkingSetSize$VH().set(seg, x);
        }
        public static void MinimumWorkingSetSize$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$MinimumWorkingSetSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaximumWorkingSetSize$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS_EX$MaximumWorkingSetSize$VH();
        }
        public static  @C("SIZE_T") long MaximumWorkingSetSize$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$MaximumWorkingSetSize$VH().get(seg);
        }
        public static  @C("SIZE_T") long MaximumWorkingSetSize$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$MaximumWorkingSetSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumWorkingSetSize$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$MaximumWorkingSetSize$VH().set(seg, x);
        }
        public static void MaximumWorkingSetSize$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$MaximumWorkingSetSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PagefileLimit$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS_EX$PagefileLimit$VH();
        }
        public static  @C("SIZE_T") long PagefileLimit$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$PagefileLimit$VH().get(seg);
        }
        public static  @C("SIZE_T") long PagefileLimit$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$PagefileLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PagefileLimit$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$PagefileLimit$VH().set(seg, x);
        }
        public static void PagefileLimit$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$PagefileLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment TimeLimit$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static VarHandle WorkingSetLimit$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS_EX$WorkingSetLimit$VH();
        }
        public static  @C("SIZE_T") long WorkingSetLimit$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$WorkingSetLimit$VH().get(seg);
        }
        public static  @C("SIZE_T") long WorkingSetLimit$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$WorkingSetLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void WorkingSetLimit$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$WorkingSetLimit$VH().set(seg, x);
        }
        public static void WorkingSetLimit$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$WorkingSetLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved2$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved2$VH();
        }
        public static  @C("SIZE_T") long Reserved2$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved2$VH().get(seg);
        }
        public static  @C("SIZE_T") long Reserved2$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved2$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved2$VH().set(seg, x);
        }
        public static void Reserved2$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved3$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved3$VH();
        }
        public static  @C("SIZE_T") long Reserved3$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved3$VH().get(seg);
        }
        public static  @C("SIZE_T") long Reserved3$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved3$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved3$VH().set(seg, x);
        }
        public static void Reserved3$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved4$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved4$VH();
        }
        public static  @C("SIZE_T") long Reserved4$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved4$VH().get(seg);
        }
        public static  @C("SIZE_T") long Reserved4$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved4$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved4$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved4$VH().set(seg, x);
        }
        public static void Reserved4$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$Reserved4$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._QUOTA_LIMITS_EX$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg) {
            return (int)winnt_h$constants$5._QUOTA_LIMITS_EX$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._QUOTA_LIMITS_EX$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _QUOTA_LIMITS_EX") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._QUOTA_LIMITS_EX$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment CpuRateLimit$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(84, 4));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _QUOTA_LIMITS_EX") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _QUOTA_LIMITS_EX") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _QUOTA_LIMITS_EX[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _QUOTA_LIMITS_EX[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _QUOTA_LIMITS_EX*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _QUOTA_LIMITS_EX*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _QUOTA_LIMITS_EX") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _QUOTA_LIMITS_EX")public static class QUOTA_LIMITS_EX extends _QUOTA_LIMITS_EX {

        /* package-private */ QUOTA_LIMITS_EX() {}
    }

    @C("struct _IO_COUNTERS")public static class _IO_COUNTERS {

        /* package-private */ _IO_COUNTERS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._IO_COUNTERS$struct$LAYOUT();
        }
        public static VarHandle ReadOperationCount$VH() {
            return winnt_h$constants$5._IO_COUNTERS$ReadOperationCount$VH();
        }
        public static  @C("ULONGLONG") long ReadOperationCount$get(@C("struct _IO_COUNTERS") MemorySegment seg) {
            return (long)winnt_h$constants$5._IO_COUNTERS$ReadOperationCount$VH().get(seg);
        }
        public static  @C("ULONGLONG") long ReadOperationCount$get(@C("struct _IO_COUNTERS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._IO_COUNTERS$ReadOperationCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReadOperationCount$set(@C("struct _IO_COUNTERS") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$5._IO_COUNTERS$ReadOperationCount$VH().set(seg, x);
        }
        public static void ReadOperationCount$set(@C("struct _IO_COUNTERS") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$5._IO_COUNTERS$ReadOperationCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle WriteOperationCount$VH() {
            return winnt_h$constants$5._IO_COUNTERS$WriteOperationCount$VH();
        }
        public static  @C("ULONGLONG") long WriteOperationCount$get(@C("struct _IO_COUNTERS") MemorySegment seg) {
            return (long)winnt_h$constants$5._IO_COUNTERS$WriteOperationCount$VH().get(seg);
        }
        public static  @C("ULONGLONG") long WriteOperationCount$get(@C("struct _IO_COUNTERS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._IO_COUNTERS$WriteOperationCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void WriteOperationCount$set(@C("struct _IO_COUNTERS") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$5._IO_COUNTERS$WriteOperationCount$VH().set(seg, x);
        }
        public static void WriteOperationCount$set(@C("struct _IO_COUNTERS") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$5._IO_COUNTERS$WriteOperationCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OtherOperationCount$VH() {
            return winnt_h$constants$5._IO_COUNTERS$OtherOperationCount$VH();
        }
        public static  @C("ULONGLONG") long OtherOperationCount$get(@C("struct _IO_COUNTERS") MemorySegment seg) {
            return (long)winnt_h$constants$5._IO_COUNTERS$OtherOperationCount$VH().get(seg);
        }
        public static  @C("ULONGLONG") long OtherOperationCount$get(@C("struct _IO_COUNTERS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._IO_COUNTERS$OtherOperationCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OtherOperationCount$set(@C("struct _IO_COUNTERS") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$5._IO_COUNTERS$OtherOperationCount$VH().set(seg, x);
        }
        public static void OtherOperationCount$set(@C("struct _IO_COUNTERS") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$5._IO_COUNTERS$OtherOperationCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReadTransferCount$VH() {
            return winnt_h$constants$5._IO_COUNTERS$ReadTransferCount$VH();
        }
        public static  @C("ULONGLONG") long ReadTransferCount$get(@C("struct _IO_COUNTERS") MemorySegment seg) {
            return (long)winnt_h$constants$5._IO_COUNTERS$ReadTransferCount$VH().get(seg);
        }
        public static  @C("ULONGLONG") long ReadTransferCount$get(@C("struct _IO_COUNTERS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._IO_COUNTERS$ReadTransferCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReadTransferCount$set(@C("struct _IO_COUNTERS") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$5._IO_COUNTERS$ReadTransferCount$VH().set(seg, x);
        }
        public static void ReadTransferCount$set(@C("struct _IO_COUNTERS") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$5._IO_COUNTERS$ReadTransferCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle WriteTransferCount$VH() {
            return winnt_h$constants$5._IO_COUNTERS$WriteTransferCount$VH();
        }
        public static  @C("ULONGLONG") long WriteTransferCount$get(@C("struct _IO_COUNTERS") MemorySegment seg) {
            return (long)winnt_h$constants$5._IO_COUNTERS$WriteTransferCount$VH().get(seg);
        }
        public static  @C("ULONGLONG") long WriteTransferCount$get(@C("struct _IO_COUNTERS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._IO_COUNTERS$WriteTransferCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void WriteTransferCount$set(@C("struct _IO_COUNTERS") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$5._IO_COUNTERS$WriteTransferCount$VH().set(seg, x);
        }
        public static void WriteTransferCount$set(@C("struct _IO_COUNTERS") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$5._IO_COUNTERS$WriteTransferCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OtherTransferCount$VH() {
            return winnt_h$constants$5._IO_COUNTERS$OtherTransferCount$VH();
        }
        public static  @C("ULONGLONG") long OtherTransferCount$get(@C("struct _IO_COUNTERS") MemorySegment seg) {
            return (long)winnt_h$constants$5._IO_COUNTERS$OtherTransferCount$VH().get(seg);
        }
        public static  @C("ULONGLONG") long OtherTransferCount$get(@C("struct _IO_COUNTERS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._IO_COUNTERS$OtherTransferCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OtherTransferCount$set(@C("struct _IO_COUNTERS") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$5._IO_COUNTERS$OtherTransferCount$VH().set(seg, x);
        }
        public static void OtherTransferCount$set(@C("struct _IO_COUNTERS") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$5._IO_COUNTERS$OtherTransferCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IO_COUNTERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IO_COUNTERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IO_COUNTERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IO_COUNTERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IO_COUNTERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IO_COUNTERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IO_COUNTERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IO_COUNTERS")public static class IO_COUNTERS extends _IO_COUNTERS {

        /* package-private */ IO_COUNTERS() {}
    }

    @C("struct _PROCESS_MITIGATION_ASLR_POLICY")public static class _PROCESS_MITIGATION_ASLR_POLICY {

        /* package-private */ _PROCESS_MITIGATION_ASLR_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_ASLR_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_ASLR_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_ASLR_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_ASLR_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_ASLR_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_ASLR_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_ASLR_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_ASLR_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_ASLR_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_ASLR_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_ASLR_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_ASLR_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_ASLR_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_ASLR_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_ASLR_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_ASLR_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_ASLR_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_ASLR_POLICY")public static class PROCESS_MITIGATION_ASLR_POLICY extends _PROCESS_MITIGATION_ASLR_POLICY {

        /* package-private */ PROCESS_MITIGATION_ASLR_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_DEP_POLICY")public static class _PROCESS_MITIGATION_DEP_POLICY {

        /* package-private */ _PROCESS_MITIGATION_DEP_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_DEP_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_DEP_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_DEP_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_DEP_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_DEP_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_DEP_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_DEP_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_DEP_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_DEP_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_DEP_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Permanent$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_DEP_POLICY$Permanent$VH();
        }
        public static  @C("BOOLEAN") byte Permanent$get(@C("struct _PROCESS_MITIGATION_DEP_POLICY") MemorySegment seg) {
            return (byte)winnt_h$constants$5._PROCESS_MITIGATION_DEP_POLICY$Permanent$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Permanent$get(@C("struct _PROCESS_MITIGATION_DEP_POLICY") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$5._PROCESS_MITIGATION_DEP_POLICY$Permanent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Permanent$set(@C("struct _PROCESS_MITIGATION_DEP_POLICY") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$5._PROCESS_MITIGATION_DEP_POLICY$Permanent$VH().set(seg, x);
        }
        public static void Permanent$set(@C("struct _PROCESS_MITIGATION_DEP_POLICY") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$5._PROCESS_MITIGATION_DEP_POLICY$Permanent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_DEP_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_DEP_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_DEP_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_DEP_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_DEP_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_DEP_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_DEP_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_DEP_POLICY")public static class PROCESS_MITIGATION_DEP_POLICY extends _PROCESS_MITIGATION_DEP_POLICY {

        /* package-private */ PROCESS_MITIGATION_DEP_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY")public static class _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {

        /* package-private */ _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY")public static class PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY extends _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {

        /* package-private */ PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY")public static class _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {

        /* package-private */ _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY")public static class PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY extends _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {

        /* package-private */ PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY")public static class _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {

        /* package-private */ _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY")public static class PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY extends _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {

        /* package-private */ PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY")public static class _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {

        /* package-private */ _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY")public static class PROCESS_MITIGATION_DYNAMIC_CODE_POLICY extends _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {

        /* package-private */ PROCESS_MITIGATION_DYNAMIC_CODE_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY")public static class _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {

        /* package-private */ _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY")public static class PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY extends _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {

        /* package-private */ PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY")public static class _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {

        /* package-private */ _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY")public static class PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY extends _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {

        /* package-private */ PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY")public static class _PROCESS_MITIGATION_FONT_DISABLE_POLICY {

        /* package-private */ _PROCESS_MITIGATION_FONT_DISABLE_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_FONT_DISABLE_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY")public static class PROCESS_MITIGATION_FONT_DISABLE_POLICY extends _PROCESS_MITIGATION_FONT_DISABLE_POLICY {

        /* package-private */ PROCESS_MITIGATION_FONT_DISABLE_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY")public static class _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {

        /* package-private */ _PROCESS_MITIGATION_IMAGE_LOAD_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_IMAGE_LOAD_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY")public static class PROCESS_MITIGATION_IMAGE_LOAD_POLICY extends _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {

        /* package-private */ PROCESS_MITIGATION_IMAGE_LOAD_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY")public static class _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {

        /* package-private */ _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY")public static class PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY extends _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {

        /* package-private */ PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY")public static class _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {

        /* package-private */ _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY")public static class PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY extends _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {

        /* package-private */ PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY")public static class _PROCESS_MITIGATION_CHILD_PROCESS_POLICY {

        /* package-private */ _PROCESS_MITIGATION_CHILD_PROCESS_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_CHILD_PROCESS_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY")public static class PROCESS_MITIGATION_CHILD_PROCESS_POLICY extends _PROCESS_MITIGATION_CHILD_PROCESS_POLICY {

        /* package-private */ PROCESS_MITIGATION_CHILD_PROCESS_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY")public static class _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY {

        /* package-private */ _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY")public static class PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY extends _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY {

        /* package-private */ PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY() {}
    }

    @C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY")public static class _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY {

        /* package-private */ _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$5._PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY")public static class PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY extends _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY {

        /* package-private */ PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY() {}
    }

    @C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION")public static class _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {

        /* package-private */ _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT();
        }
        public static MemorySegment TotalUserTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment TotalKernelTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment ThisPeriodTotalUserTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static MemorySegment ThisPeriodTotalKernelTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
        }
        public static VarHandle TotalPageFaultCount$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$VH();
        }
        public static  @C("DWORD") int TotalPageFaultCount$get(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$VH().get(seg);
        }
        public static  @C("DWORD") int TotalPageFaultCount$get(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalPageFaultCount$set(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$VH().set(seg, x);
        }
        public static void TotalPageFaultCount$set(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TotalProcesses$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$VH();
        }
        public static  @C("DWORD") int TotalProcesses$get(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$VH().get(seg);
        }
        public static  @C("DWORD") int TotalProcesses$get(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalProcesses$set(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$VH().set(seg, x);
        }
        public static void TotalProcesses$set(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ActiveProcesses$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$VH();
        }
        public static  @C("DWORD") int ActiveProcesses$get(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$VH().get(seg);
        }
        public static  @C("DWORD") int ActiveProcesses$get(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ActiveProcesses$set(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$VH().set(seg, x);
        }
        public static void ActiveProcesses$set(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TotalTerminatedProcesses$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$VH();
        }
        public static  @C("DWORD") int TotalTerminatedProcesses$get(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$VH().get(seg);
        }
        public static  @C("DWORD") int TotalTerminatedProcesses$get(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalTerminatedProcesses$set(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$VH().set(seg, x);
        }
        public static void TotalTerminatedProcesses$set(@C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION")public static class JOBOBJECT_BASIC_ACCOUNTING_INFORMATION extends _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {

        /* package-private */ JOBOBJECT_BASIC_ACCOUNTING_INFORMATION() {}
    }

    @C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION")public static class _JOBOBJECT_BASIC_LIMIT_INFORMATION {

        /* package-private */ _JOBOBJECT_BASIC_LIMIT_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT();
        }
        public static MemorySegment PerProcessUserTimeLimit$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment PerJobUserTimeLimit$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static VarHandle LimitFlags$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$VH();
        }
        public static  @C("DWORD") int LimitFlags$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$VH().get(seg);
        }
        public static  @C("DWORD") int LimitFlags$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LimitFlags$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$VH().set(seg, x);
        }
        public static void LimitFlags$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinimumWorkingSetSize$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$VH();
        }
        public static  @C("SIZE_T") long MinimumWorkingSetSize$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$VH().get(seg);
        }
        public static  @C("SIZE_T") long MinimumWorkingSetSize$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinimumWorkingSetSize$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$VH().set(seg, x);
        }
        public static void MinimumWorkingSetSize$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaximumWorkingSetSize$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$VH();
        }
        public static  @C("SIZE_T") long MaximumWorkingSetSize$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$VH().get(seg);
        }
        public static  @C("SIZE_T") long MaximumWorkingSetSize$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumWorkingSetSize$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$VH().set(seg, x);
        }
        public static void MaximumWorkingSetSize$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ActiveProcessLimit$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$VH();
        }
        public static  @C("DWORD") int ActiveProcessLimit$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$VH().get(seg);
        }
        public static  @C("DWORD") int ActiveProcessLimit$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ActiveProcessLimit$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$VH().set(seg, x);
        }
        public static void ActiveProcessLimit$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Affinity$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$VH();
        }
        public static  @C("ULONG_PTR") long Affinity$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$VH().get(seg);
        }
        public static  @C("ULONG_PTR") long Affinity$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Affinity$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, @C("ULONG_PTR") long x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$VH().set(seg, x);
        }
        public static void Affinity$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index, @C("ULONG_PTR") long x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PriorityClass$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$VH();
        }
        public static  @C("DWORD") int PriorityClass$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$VH().get(seg);
        }
        public static  @C("DWORD") int PriorityClass$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PriorityClass$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$VH().set(seg, x);
        }
        public static void PriorityClass$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SchedulingClass$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$VH();
        }
        public static  @C("DWORD") int SchedulingClass$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$VH().get(seg);
        }
        public static  @C("DWORD") int SchedulingClass$get(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SchedulingClass$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$VH().set(seg, x);
        }
        public static void SchedulingClass$set(@C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_BASIC_LIMIT_INFORMATION")public static class JOBOBJECT_BASIC_LIMIT_INFORMATION extends _JOBOBJECT_BASIC_LIMIT_INFORMATION {

        /* package-private */ JOBOBJECT_BASIC_LIMIT_INFORMATION() {}
    }

    @C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION")public static class _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {

        /* package-private */ _JOBOBJECT_EXTENDED_LIMIT_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT();
        }
        public static MemorySegment BasicLimitInformation$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 64));
        }
        public static MemorySegment IoInfo$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 48));
        }
        public static VarHandle ProcessMemoryLimit$VH() {
            return winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$VH();
        }
        public static  @C("SIZE_T") long ProcessMemoryLimit$get(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$VH().get(seg);
        }
        public static  @C("SIZE_T") long ProcessMemoryLimit$get(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProcessMemoryLimit$set(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$VH().set(seg, x);
        }
        public static void ProcessMemoryLimit$set(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle JobMemoryLimit$VH() {
            return winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$VH();
        }
        public static  @C("SIZE_T") long JobMemoryLimit$get(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$VH().get(seg);
        }
        public static  @C("SIZE_T") long JobMemoryLimit$get(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobMemoryLimit$set(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$VH().set(seg, x);
        }
        public static void JobMemoryLimit$set(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PeakProcessMemoryUsed$VH() {
            return winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$VH();
        }
        public static  @C("SIZE_T") long PeakProcessMemoryUsed$get(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$VH().get(seg);
        }
        public static  @C("SIZE_T") long PeakProcessMemoryUsed$get(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PeakProcessMemoryUsed$set(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$VH().set(seg, x);
        }
        public static void PeakProcessMemoryUsed$set(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PeakJobMemoryUsed$VH() {
            return winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$VH();
        }
        public static  @C("SIZE_T") long PeakJobMemoryUsed$get(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$VH().get(seg);
        }
        public static  @C("SIZE_T") long PeakJobMemoryUsed$get(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PeakJobMemoryUsed$set(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$VH().set(seg, x);
        }
        public static void PeakJobMemoryUsed$set(@C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$5._JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION")public static class JOBOBJECT_EXTENDED_LIMIT_INFORMATION extends _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {

        /* package-private */ JOBOBJECT_EXTENDED_LIMIT_INFORMATION() {}
    }

    @C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST")public static class _JOBOBJECT_BASIC_PROCESS_ID_LIST {

        /* package-private */ _JOBOBJECT_BASIC_PROCESS_ID_LIST() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_PROCESS_ID_LIST$struct$LAYOUT();
        }
        public static VarHandle NumberOfAssignedProcesses$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$VH();
        }
        public static  @C("DWORD") int NumberOfAssignedProcesses$get(@C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfAssignedProcesses$get(@C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfAssignedProcesses$set(@C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$VH().set(seg, x);
        }
        public static void NumberOfAssignedProcesses$set(@C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfProcessIdsInList$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$VH();
        }
        public static  @C("DWORD") int NumberOfProcessIdsInList$get(@C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfProcessIdsInList$get(@C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfProcessIdsInList$set(@C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$VH().set(seg, x);
        }
        public static void NumberOfProcessIdsInList$set(@C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ProcessIdList$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_BASIC_PROCESS_ID_LIST")public static class JOBOBJECT_BASIC_PROCESS_ID_LIST extends _JOBOBJECT_BASIC_PROCESS_ID_LIST {

        /* package-private */ JOBOBJECT_BASIC_PROCESS_ID_LIST() {}
    }

    @C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS")public static class _JOBOBJECT_BASIC_UI_RESTRICTIONS {

        /* package-private */ _JOBOBJECT_BASIC_UI_RESTRICTIONS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_UI_RESTRICTIONS$struct$LAYOUT();
        }
        public static VarHandle UIRestrictionsClass$VH() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$VH();
        }
        public static  @C("DWORD") int UIRestrictionsClass$get(@C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$VH().get(seg);
        }
        public static  @C("DWORD") int UIRestrictionsClass$get(@C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UIRestrictionsClass$set(@C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$VH().set(seg, x);
        }
        public static void UIRestrictionsClass$set(@C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_BASIC_UI_RESTRICTIONS")public static class JOBOBJECT_BASIC_UI_RESTRICTIONS extends _JOBOBJECT_BASIC_UI_RESTRICTIONS {

        /* package-private */ JOBOBJECT_BASIC_UI_RESTRICTIONS() {}
    }

    @C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION")public static class _JOBOBJECT_SECURITY_LIMIT_INFORMATION {

        /* package-private */ _JOBOBJECT_SECURITY_LIMIT_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle SecurityLimitFlags$VH() {
            return winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$VH();
        }
        public static  @C("DWORD") int SecurityLimitFlags$get(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$VH().get(seg);
        }
        public static  @C("DWORD") int SecurityLimitFlags$get(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SecurityLimitFlags$set(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$VH().set(seg, x);
        }
        public static void SecurityLimitFlags$set(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle JobToken$VH() {
            return winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$VH();
        }
        public static  @C("HANDLE") MemoryAddress JobToken$get(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress JobToken$get(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobToken$set(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$VH().set(seg, x);
        }
        public static void JobToken$set(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SidsToDisable$VH() {
            return winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$VH();
        }
        public static  @C("PTOKEN_GROUPS") MemoryAddress SidsToDisable$get(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$VH().get(seg);
        }
        public static  @C("PTOKEN_GROUPS") MemoryAddress SidsToDisable$get(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SidsToDisable$set(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, @C("PTOKEN_GROUPS") MemoryAddress x) {
            winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$VH().set(seg, x);
        }
        public static void SidsToDisable$set(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, long index, @C("PTOKEN_GROUPS") MemoryAddress x) {
            winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PrivilegesToDelete$VH() {
            return winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$VH();
        }
        public static  @C("PTOKEN_PRIVILEGES") MemoryAddress PrivilegesToDelete$get(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$VH().get(seg);
        }
        public static  @C("PTOKEN_PRIVILEGES") MemoryAddress PrivilegesToDelete$get(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrivilegesToDelete$set(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, @C("PTOKEN_PRIVILEGES") MemoryAddress x) {
            winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$VH().set(seg, x);
        }
        public static void PrivilegesToDelete$set(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, long index, @C("PTOKEN_PRIVILEGES") MemoryAddress x) {
            winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RestrictedSids$VH() {
            return winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$VH();
        }
        public static  @C("PTOKEN_GROUPS") MemoryAddress RestrictedSids$get(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$VH().get(seg);
        }
        public static  @C("PTOKEN_GROUPS") MemoryAddress RestrictedSids$get(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RestrictedSids$set(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, @C("PTOKEN_GROUPS") MemoryAddress x) {
            winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$VH().set(seg, x);
        }
        public static void RestrictedSids$set(@C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment seg, long index, @C("PTOKEN_GROUPS") MemoryAddress x) {
            winnt_h$constants$5._JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION")public static class JOBOBJECT_SECURITY_LIMIT_INFORMATION extends _JOBOBJECT_SECURITY_LIMIT_INFORMATION {

        /* package-private */ JOBOBJECT_SECURITY_LIMIT_INFORMATION() {}
    }

    @C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION")public static class _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {

        /* package-private */ _JOBOBJECT_END_OF_JOB_TIME_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_END_OF_JOB_TIME_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle EndOfJobTimeAction$VH() {
            return winnt_h$constants$5._JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$VH();
        }
        public static  @C("DWORD") int EndOfJobTimeAction$get(@C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$VH().get(seg);
        }
        public static  @C("DWORD") int EndOfJobTimeAction$get(@C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EndOfJobTimeAction$set(@C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$VH().set(seg, x);
        }
        public static void EndOfJobTimeAction$set(@C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION")public static class JOBOBJECT_END_OF_JOB_TIME_INFORMATION extends _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {

        /* package-private */ JOBOBJECT_END_OF_JOB_TIME_INFORMATION() {}
    }

    @C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT")public static class _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {

        /* package-private */ _JOBOBJECT_ASSOCIATE_COMPLETION_PORT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_ASSOCIATE_COMPLETION_PORT$struct$LAYOUT();
        }
        public static VarHandle CompletionKey$VH() {
            return winnt_h$constants$5._JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$VH();
        }
        public static  @C("PVOID") MemoryAddress CompletionKey$get(@C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress CompletionKey$get(@C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CompletionKey$set(@C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$5._JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$VH().set(seg, x);
        }
        public static void CompletionKey$set(@C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$5._JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CompletionPort$VH() {
            return winnt_h$constants$5._JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$VH();
        }
        public static  @C("HANDLE") MemoryAddress CompletionPort$get(@C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress CompletionPort$get(@C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5._JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CompletionPort$set(@C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$5._JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$VH().set(seg, x);
        }
        public static void CompletionPort$set(@C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$5._JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT")public static class JOBOBJECT_ASSOCIATE_COMPLETION_PORT extends _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {

        /* package-private */ JOBOBJECT_ASSOCIATE_COMPLETION_PORT() {}
    }

    @C("struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION")public static class _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {

        /* package-private */ _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION$struct$LAYOUT();
        }
        public static MemorySegment BasicInfo$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 48));
        }
        public static MemorySegment IoInfo$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 48));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION")public static class JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION extends _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {

        /* package-private */ JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION() {}
    }

    @C("struct _JOBOBJECT_JOBSET_INFORMATION")public static class _JOBOBJECT_JOBSET_INFORMATION {

        /* package-private */ _JOBOBJECT_JOBSET_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_JOBSET_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle MemberLevel$VH() {
            return winnt_h$constants$5._JOBOBJECT_JOBSET_INFORMATION$MemberLevel$VH();
        }
        public static  @C("DWORD") int MemberLevel$get(@C("struct _JOBOBJECT_JOBSET_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_JOBSET_INFORMATION$MemberLevel$VH().get(seg);
        }
        public static  @C("DWORD") int MemberLevel$get(@C("struct _JOBOBJECT_JOBSET_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_JOBSET_INFORMATION$MemberLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MemberLevel$set(@C("struct _JOBOBJECT_JOBSET_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_JOBSET_INFORMATION$MemberLevel$VH().set(seg, x);
        }
        public static void MemberLevel$set(@C("struct _JOBOBJECT_JOBSET_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_JOBSET_INFORMATION$MemberLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_JOBSET_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_JOBSET_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_JOBSET_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_JOBSET_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_JOBSET_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_JOBSET_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_JOBSET_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_JOBSET_INFORMATION")public static class JOBOBJECT_JOBSET_INFORMATION extends _JOBOBJECT_JOBSET_INFORMATION {

        /* package-private */ JOBOBJECT_JOBSET_INFORMATION() {}
    }

    @C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION")public static class _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {

        /* package-private */ _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle IoReadBytesLimit$VH() {
            return winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$VH();
        }
        public static  @C("DWORD64") long IoReadBytesLimit$get(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long IoReadBytesLimit$get(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoReadBytesLimit$set(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$VH().set(seg, x);
        }
        public static void IoReadBytesLimit$set(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoWriteBytesLimit$VH() {
            return winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$VH();
        }
        public static  @C("DWORD64") long IoWriteBytesLimit$get(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long IoWriteBytesLimit$get(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoWriteBytesLimit$set(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$VH().set(seg, x);
        }
        public static void IoWriteBytesLimit$set(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment PerJobUserTimeLimit$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static VarHandle JobMemoryLimit$VH() {
            return winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$VH();
        }
        public static  @C("DWORD64") long JobMemoryLimit$get(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long JobMemoryLimit$get(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobMemoryLimit$set(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$VH().set(seg, x);
        }
        public static void JobMemoryLimit$set(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RateControlTolerance$VH() {
            return winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int RateControlTolerance$get(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int RateControlTolerance$get(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RateControlTolerance$set(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$VH().set(seg, x);
        }
        public static void RateControlTolerance$set(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RateControlToleranceInterval$VH() {
            return winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int RateControlToleranceInterval$get(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int RateControlToleranceInterval$get(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RateControlToleranceInterval$set(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int x) {
            winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$VH().set(seg, x);
        }
        public static void RateControlToleranceInterval$set(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int x) {
            winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LimitFlags$VH() {
            return winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$VH();
        }
        public static  @C("DWORD") int LimitFlags$get(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$VH().get(seg);
        }
        public static  @C("DWORD") int LimitFlags$get(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LimitFlags$set(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$VH().set(seg, x);
        }
        public static void LimitFlags$set(@C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION")public static class JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION extends _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {

        /* package-private */ JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION() {}
    }

    @C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2")public static class JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {

        /* package-private */ JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT();
        }
        public static VarHandle IoReadBytesLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$VH();
        }
        public static  @C("DWORD64") long IoReadBytesLimit$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long IoReadBytesLimit$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoReadBytesLimit$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$VH().set(seg, x);
        }
        public static void IoReadBytesLimit$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoWriteBytesLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$VH();
        }
        public static  @C("DWORD64") long IoWriteBytesLimit$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long IoWriteBytesLimit$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoWriteBytesLimit$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$VH().set(seg, x);
        }
        public static void IoWriteBytesLimit$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment PerJobUserTimeLimit$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static VarHandle JobHighMemoryLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$VH();
        }
        public static  @C("DWORD64") long JobHighMemoryLimit$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long JobHighMemoryLimit$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobHighMemoryLimit$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$VH().set(seg, x);
        }
        public static void JobHighMemoryLimit$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle JobMemoryLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$VH();
        }
        public static  @C("DWORD64") long JobMemoryLimit$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long JobMemoryLimit$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobMemoryLimit$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$VH().set(seg, x);
        }
        public static void JobMemoryLimit$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RateControlTolerance$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int RateControlTolerance$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int RateControlTolerance$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RateControlTolerance$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$VH().set(seg, x);
        }
        public static void RateControlTolerance$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CpuRateControlTolerance$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int CpuRateControlTolerance$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int CpuRateControlTolerance$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CpuRateControlTolerance$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$VH().set(seg, x);
        }
        public static void CpuRateControlTolerance$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RateControlToleranceInterval$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int RateControlToleranceInterval$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int RateControlToleranceInterval$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RateControlToleranceInterval$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$VH().set(seg, x);
        }
        public static void RateControlToleranceInterval$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CpuRateControlToleranceInterval$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int CpuRateControlToleranceInterval$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int CpuRateControlToleranceInterval$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CpuRateControlToleranceInterval$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$VH().set(seg, x);
        }
        public static void CpuRateControlToleranceInterval$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LimitFlags$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$VH();
        }
        public static  @C("DWORD") int LimitFlags$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$VH().get(seg);
        }
        public static  @C("DWORD") int LimitFlags$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LimitFlags$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$VH().set(seg, x);
        }
        public static void LimitFlags$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoRateControlTolerance$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int IoRateControlTolerance$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int IoRateControlTolerance$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoRateControlTolerance$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$VH().set(seg, x);
        }
        public static void IoRateControlTolerance$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle JobLowMemoryLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$VH();
        }
        public static  @C("DWORD64") long JobLowMemoryLimit$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long JobLowMemoryLimit$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobLowMemoryLimit$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$VH().set(seg, x);
        }
        public static void JobLowMemoryLimit$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoRateControlToleranceInterval$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int IoRateControlToleranceInterval$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int IoRateControlToleranceInterval$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoRateControlToleranceInterval$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$VH().set(seg, x);
        }
        public static void IoRateControlToleranceInterval$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NetRateControlTolerance$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int NetRateControlTolerance$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int NetRateControlTolerance$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NetRateControlTolerance$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$VH().set(seg, x);
        }
        public static void NetRateControlTolerance$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NetRateControlToleranceInterval$VH() {
            return winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int NetRateControlToleranceInterval$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int NetRateControlToleranceInterval$get(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NetRateControlToleranceInterval$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$VH().set(seg, x);
        }
        public static void NetRateControlToleranceInterval$set(@C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL") int x) {
            winnt_h$constants$5.JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION")public static class _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {

        /* package-private */ _JOBOBJECT_LIMIT_VIOLATION_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle LimitFlags$VH() {
            return winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$VH();
        }
        public static  @C("DWORD") int LimitFlags$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$VH().get(seg);
        }
        public static  @C("DWORD") int LimitFlags$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LimitFlags$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$VH().set(seg, x);
        }
        public static void LimitFlags$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ViolationLimitFlags$VH() {
            return winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$VH();
        }
        public static  @C("DWORD") int ViolationLimitFlags$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ViolationLimitFlags$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ViolationLimitFlags$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$VH().set(seg, x);
        }
        public static void ViolationLimitFlags$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoReadBytes$VH() {
            return winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$VH();
        }
        public static  @C("DWORD64") long IoReadBytes$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$VH().get(seg);
        }
        public static  @C("DWORD64") long IoReadBytes$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoReadBytes$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$VH().set(seg, x);
        }
        public static void IoReadBytes$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoReadBytesLimit$VH() {
            return winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$VH();
        }
        public static  @C("DWORD64") long IoReadBytesLimit$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long IoReadBytesLimit$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoReadBytesLimit$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$VH().set(seg, x);
        }
        public static void IoReadBytesLimit$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoWriteBytes$VH() {
            return winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$VH();
        }
        public static  @C("DWORD64") long IoWriteBytes$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$VH().get(seg);
        }
        public static  @C("DWORD64") long IoWriteBytes$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoWriteBytes$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$VH().set(seg, x);
        }
        public static void IoWriteBytes$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoWriteBytesLimit$VH() {
            return winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$VH();
        }
        public static  @C("DWORD64") long IoWriteBytesLimit$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long IoWriteBytesLimit$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoWriteBytesLimit$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$VH().set(seg, x);
        }
        public static void IoWriteBytesLimit$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment PerJobUserTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static MemorySegment PerJobUserTimeLimit$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
        }
        public static VarHandle JobMemory$VH() {
            return winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$VH();
        }
        public static  @C("DWORD64") long JobMemory$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$VH().get(seg);
        }
        public static  @C("DWORD64") long JobMemory$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobMemory$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$VH().set(seg, x);
        }
        public static void JobMemory$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle JobMemoryLimit$VH() {
            return winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$VH();
        }
        public static  @C("DWORD64") long JobMemoryLimit$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long JobMemoryLimit$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobMemoryLimit$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$VH().set(seg, x);
        }
        public static void JobMemoryLimit$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RateControlTolerance$VH() {
            return winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int RateControlTolerance$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int RateControlTolerance$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RateControlTolerance$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$VH().set(seg, x);
        }
        public static void RateControlTolerance$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RateControlToleranceLimit$VH() {
            return winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int RateControlToleranceLimit$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int RateControlToleranceLimit$get(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RateControlToleranceLimit$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$VH().set(seg, x);
        }
        public static void RateControlToleranceLimit$set(@C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5._JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION")public static class JOBOBJECT_LIMIT_VIOLATION_INFORMATION extends _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {

        /* package-private */ JOBOBJECT_LIMIT_VIOLATION_INFORMATION() {}
    }

    @C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2")public static class JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {

        /* package-private */ JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT();
        }
        public static VarHandle LimitFlags$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$VH();
        }
        public static  @C("DWORD") int LimitFlags$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$VH().get(seg);
        }
        public static  @C("DWORD") int LimitFlags$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LimitFlags$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$VH().set(seg, x);
        }
        public static void LimitFlags$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ViolationLimitFlags$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$VH();
        }
        public static  @C("DWORD") int ViolationLimitFlags$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ViolationLimitFlags$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ViolationLimitFlags$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$VH().set(seg, x);
        }
        public static void ViolationLimitFlags$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoReadBytes$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$VH();
        }
        public static  @C("DWORD64") long IoReadBytes$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$VH().get(seg);
        }
        public static  @C("DWORD64") long IoReadBytes$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoReadBytes$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$VH().set(seg, x);
        }
        public static void IoReadBytes$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoReadBytesLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$VH();
        }
        public static  @C("DWORD64") long IoReadBytesLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long IoReadBytesLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoReadBytesLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$VH().set(seg, x);
        }
        public static void IoReadBytesLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoWriteBytes$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$VH();
        }
        public static  @C("DWORD64") long IoWriteBytes$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$VH().get(seg);
        }
        public static  @C("DWORD64") long IoWriteBytes$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoWriteBytes$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$VH().set(seg, x);
        }
        public static void IoWriteBytes$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoWriteBytesLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$VH();
        }
        public static  @C("DWORD64") long IoWriteBytesLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long IoWriteBytesLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoWriteBytesLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$VH().set(seg, x);
        }
        public static void IoWriteBytesLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment PerJobUserTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static MemorySegment PerJobUserTimeLimit$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
        }
        public static VarHandle JobMemory$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$VH();
        }
        public static  @C("DWORD64") long JobMemory$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$VH().get(seg);
        }
        public static  @C("DWORD64") long JobMemory$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobMemory$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$VH().set(seg, x);
        }
        public static void JobMemory$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle JobHighMemoryLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$VH();
        }
        public static  @C("DWORD64") long JobHighMemoryLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long JobHighMemoryLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobHighMemoryLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$VH().set(seg, x);
        }
        public static void JobHighMemoryLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle JobMemoryLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$VH();
        }
        public static  @C("DWORD64") long JobMemoryLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long JobMemoryLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobMemoryLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$VH().set(seg, x);
        }
        public static void JobMemoryLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RateControlTolerance$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int RateControlTolerance$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int RateControlTolerance$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RateControlTolerance$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$VH().set(seg, x);
        }
        public static void RateControlTolerance$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CpuRateControlTolerance$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int CpuRateControlTolerance$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int CpuRateControlTolerance$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CpuRateControlTolerance$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$VH().set(seg, x);
        }
        public static void CpuRateControlTolerance$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RateControlToleranceLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int RateControlToleranceLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int RateControlToleranceLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RateControlToleranceLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$VH().set(seg, x);
        }
        public static void RateControlToleranceLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CpuRateControlToleranceLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int CpuRateControlToleranceLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int CpuRateControlToleranceLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CpuRateControlToleranceLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$VH().set(seg, x);
        }
        public static void CpuRateControlToleranceLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle JobLowMemoryLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$VH();
        }
        public static  @C("DWORD64") long JobLowMemoryLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$VH().get(seg);
        }
        public static  @C("DWORD64") long JobLowMemoryLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void JobLowMemoryLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$VH().set(seg, x);
        }
        public static void JobLowMemoryLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoRateControlTolerance$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int IoRateControlTolerance$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int IoRateControlTolerance$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoRateControlTolerance$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$VH().set(seg, x);
        }
        public static void IoRateControlTolerance$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IoRateControlToleranceLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int IoRateControlToleranceLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int IoRateControlToleranceLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoRateControlToleranceLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$VH().set(seg, x);
        }
        public static void IoRateControlToleranceLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NetRateControlTolerance$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int NetRateControlTolerance$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int NetRateControlTolerance$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NetRateControlTolerance$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$VH().set(seg, x);
        }
        public static void NetRateControlTolerance$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NetRateControlToleranceLimit$VH() {
            return winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$VH();
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int NetRateControlToleranceLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$VH().get(seg);
        }
        public static  @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int NetRateControlToleranceLimit$get(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NetRateControlToleranceLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$VH().set(seg, x);
        }
        public static void NetRateControlToleranceLimit$set(@C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment seg, long index, @C("JOBOBJECT_RATE_CONTROL_TOLERANCE") int x) {
            winnt_h$constants$5.JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION")public static class _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {

        /* package-private */ _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle ControlFlags$VH() {
            return winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$VH();
        }
        public static  @C("DWORD") int ControlFlags$get(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ControlFlags$get(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ControlFlags$set(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$VH().set(seg, x);
        }
        public static void ControlFlags$set(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CpuRate$VH() {
            return winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$VH();
        }
        public static  @C("DWORD") int CpuRate$get(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$VH().get(seg);
        }
        public static  @C("DWORD") int CpuRate$get(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CpuRate$set(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$VH().set(seg, x);
        }
        public static void CpuRate$set(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Weight$VH() {
            return winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$VH();
        }
        public static  @C("DWORD") int Weight$get(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$VH().get(seg);
        }
        public static  @C("DWORD") int Weight$get(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Weight$set(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$VH().set(seg, x);
        }
        public static void Weight$set(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinRate$VH() {
            return winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$VH();
        }
        public static  @C("WORD") short MinRate$get(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg) {
            return (short)winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$VH().get(seg);
        }
        public static  @C("WORD") short MinRate$get(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, long index) {
            return (short)winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinRate$set(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$VH().set(seg, x);
        }
        public static void MinRate$set(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxRate$VH() {
            return winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$VH();
        }
        public static  @C("WORD") short MaxRate$get(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg) {
            return (short)winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$VH().get(seg);
        }
        public static  @C("WORD") short MaxRate$get(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, long index) {
            return (short)winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxRate$set(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$VH().set(seg, x);
        }
        public static void MaxRate$set(@C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$5._JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION")public static class JOBOBJECT_CPU_RATE_CONTROL_INFORMATION extends _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {

        /* package-private */ JOBOBJECT_CPU_RATE_CONTROL_INFORMATION() {}
    }

    @C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION")public static class JOBOBJECT_NET_RATE_CONTROL_INFORMATION {

        /* package-private */ JOBOBJECT_NET_RATE_CONTROL_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle MaxBandwidth$VH() {
            return winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$VH();
        }
        public static  @C("DWORD64") long MaxBandwidth$get(@C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$VH().get(seg);
        }
        public static  @C("DWORD64") long MaxBandwidth$get(@C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxBandwidth$set(@C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$VH().set(seg, x);
        }
        public static void MaxBandwidth$set(@C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ControlFlags$VH() {
            return winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$VH();
        }
        public static  @C("JOB_OBJECT_NET_RATE_CONTROL_FLAGS") int ControlFlags$get(@C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$VH().get(seg);
        }
        public static  @C("JOB_OBJECT_NET_RATE_CONTROL_FLAGS") int ControlFlags$get(@C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ControlFlags$set(@C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment seg, @C("JOB_OBJECT_NET_RATE_CONTROL_FLAGS") int x) {
            winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$VH().set(seg, x);
        }
        public static void ControlFlags$set(@C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment seg, long index, @C("JOB_OBJECT_NET_RATE_CONTROL_FLAGS") int x) {
            winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DscpTag$VH() {
            return winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$VH();
        }
        public static  @C("BYTE") byte DscpTag$get(@C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment seg) {
            return (byte)winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$VH().get(seg);
        }
        public static  @C("BYTE") byte DscpTag$get(@C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DscpTag$set(@C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$VH().set(seg, x);
        }
        public static void DscpTag$set(@C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$5.JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE")public static class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {

        /* package-private */ JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT();
        }
        public static VarHandle MaxIops$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$VH();
        }
        public static  @C("LONG64") long MaxIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$VH().get(seg);
        }
        public static  @C("LONG64") long MaxIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$VH().set(seg, x);
        }
        public static void MaxIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxBandwidth$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$VH();
        }
        public static  @C("LONG64") long MaxBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$VH().get(seg);
        }
        public static  @C("LONG64") long MaxBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$VH().set(seg, x);
        }
        public static void MaxBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReservationIops$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$VH();
        }
        public static  @C("LONG64") long ReservationIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$VH().get(seg);
        }
        public static  @C("LONG64") long ReservationIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReservationIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$VH().set(seg, x);
        }
        public static void ReservationIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VolumeName$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$VH();
        }
        public static  @C("PWSTR") MemoryAddress VolumeName$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$VH().get(seg);
        }
        public static  @C("PWSTR") MemoryAddress VolumeName$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VolumeName$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, @C("PWSTR") MemoryAddress x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$VH().set(seg, x);
        }
        public static void VolumeName$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index, @C("PWSTR") MemoryAddress x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseIoSize$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$VH();
        }
        public static  @C("DWORD") int BaseIoSize$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$VH().get(seg);
        }
        public static  @C("DWORD") int BaseIoSize$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseIoSize$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$VH().set(seg, x);
        }
        public static void BaseIoSize$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ControlFlags$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$VH();
        }
        public static  @C("JOB_OBJECT_IO_RATE_CONTROL_FLAGS") int ControlFlags$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$VH().get(seg);
        }
        public static  @C("JOB_OBJECT_IO_RATE_CONTROL_FLAGS") int ControlFlags$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ControlFlags$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, @C("JOB_OBJECT_IO_RATE_CONTROL_FLAGS") int x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$VH().set(seg, x);
        }
        public static void ControlFlags$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index, @C("JOB_OBJECT_IO_RATE_CONTROL_FLAGS") int x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VolumeNameLength$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$VH();
        }
        public static  @C("WORD") short VolumeNameLength$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg) {
            return (short)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$VH().get(seg);
        }
        public static  @C("WORD") short VolumeNameLength$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index) {
            return (short)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VolumeNameLength$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$VH().set(seg, x);
        }
        public static void VolumeNameLength$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE")public static class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1 extends JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {

        /* package-private */ JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1() {}
    }

    @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2")public static class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 {

        /* package-private */ JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT();
        }
        public static VarHandle MaxIops$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$VH();
        }
        public static  @C("LONG64") long MaxIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$VH().get(seg);
        }
        public static  @C("LONG64") long MaxIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$VH().set(seg, x);
        }
        public static void MaxIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxBandwidth$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$VH();
        }
        public static  @C("LONG64") long MaxBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$VH().get(seg);
        }
        public static  @C("LONG64") long MaxBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$VH().set(seg, x);
        }
        public static void MaxBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReservationIops$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$VH();
        }
        public static  @C("LONG64") long ReservationIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$VH().get(seg);
        }
        public static  @C("LONG64") long ReservationIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReservationIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$VH().set(seg, x);
        }
        public static void ReservationIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VolumeName$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$VH();
        }
        public static  @C("PWSTR") MemoryAddress VolumeName$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$VH().get(seg);
        }
        public static  @C("PWSTR") MemoryAddress VolumeName$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VolumeName$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("PWSTR") MemoryAddress x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$VH().set(seg, x);
        }
        public static void VolumeName$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("PWSTR") MemoryAddress x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseIoSize$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$VH();
        }
        public static  @C("DWORD") int BaseIoSize$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$VH().get(seg);
        }
        public static  @C("DWORD") int BaseIoSize$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseIoSize$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$VH().set(seg, x);
        }
        public static void BaseIoSize$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ControlFlags$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$VH();
        }
        public static  @C("JOB_OBJECT_IO_RATE_CONTROL_FLAGS") int ControlFlags$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$VH().get(seg);
        }
        public static  @C("JOB_OBJECT_IO_RATE_CONTROL_FLAGS") int ControlFlags$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ControlFlags$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("JOB_OBJECT_IO_RATE_CONTROL_FLAGS") int x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$VH().set(seg, x);
        }
        public static void ControlFlags$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("JOB_OBJECT_IO_RATE_CONTROL_FLAGS") int x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VolumeNameLength$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$VH();
        }
        public static  @C("WORD") short VolumeNameLength$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (short)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$VH().get(seg);
        }
        public static  @C("WORD") short VolumeNameLength$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (short)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VolumeNameLength$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$VH().set(seg, x);
        }
        public static void VolumeNameLength$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CriticalReservationIops$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$VH();
        }
        public static  @C("LONG64") long CriticalReservationIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$VH().get(seg);
        }
        public static  @C("LONG64") long CriticalReservationIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CriticalReservationIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$VH().set(seg, x);
        }
        public static void CriticalReservationIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReservationBandwidth$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$VH();
        }
        public static  @C("LONG64") long ReservationBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$VH().get(seg);
        }
        public static  @C("LONG64") long ReservationBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReservationBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$VH().set(seg, x);
        }
        public static void ReservationBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CriticalReservationBandwidth$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$VH();
        }
        public static  @C("LONG64") long CriticalReservationBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$VH().get(seg);
        }
        public static  @C("LONG64") long CriticalReservationBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CriticalReservationBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$VH().set(seg, x);
        }
        public static void CriticalReservationBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxTimePercent$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$VH();
        }
        public static  @C("LONG64") long MaxTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$VH().get(seg);
        }
        public static  @C("LONG64") long MaxTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$VH().set(seg, x);
        }
        public static void MaxTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReservationTimePercent$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$VH();
        }
        public static  @C("LONG64") long ReservationTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$VH().get(seg);
        }
        public static  @C("LONG64") long ReservationTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReservationTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$VH().set(seg, x);
        }
        public static void ReservationTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CriticalReservationTimePercent$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$VH();
        }
        public static  @C("LONG64") long CriticalReservationTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$VH().get(seg);
        }
        public static  @C("LONG64") long CriticalReservationTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CriticalReservationTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$VH().set(seg, x);
        }
        public static void CriticalReservationTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3")public static class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 {

        /* package-private */ JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT();
        }
        public static VarHandle MaxIops$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$VH();
        }
        public static  @C("LONG64") long MaxIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$VH().get(seg);
        }
        public static  @C("LONG64") long MaxIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$VH().set(seg, x);
        }
        public static void MaxIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxBandwidth$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$VH();
        }
        public static  @C("LONG64") long MaxBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$VH().get(seg);
        }
        public static  @C("LONG64") long MaxBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$VH().set(seg, x);
        }
        public static void MaxBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReservationIops$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$VH();
        }
        public static  @C("LONG64") long ReservationIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$VH().get(seg);
        }
        public static  @C("LONG64") long ReservationIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReservationIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$VH().set(seg, x);
        }
        public static void ReservationIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VolumeName$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$VH();
        }
        public static  @C("PWSTR") MemoryAddress VolumeName$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$VH().get(seg);
        }
        public static  @C("PWSTR") MemoryAddress VolumeName$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VolumeName$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("PWSTR") MemoryAddress x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$VH().set(seg, x);
        }
        public static void VolumeName$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("PWSTR") MemoryAddress x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseIoSize$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$VH();
        }
        public static  @C("DWORD") int BaseIoSize$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$VH().get(seg);
        }
        public static  @C("DWORD") int BaseIoSize$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseIoSize$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$VH().set(seg, x);
        }
        public static void BaseIoSize$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ControlFlags$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$VH();
        }
        public static  @C("JOB_OBJECT_IO_RATE_CONTROL_FLAGS") int ControlFlags$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (int)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$VH().get(seg);
        }
        public static  @C("JOB_OBJECT_IO_RATE_CONTROL_FLAGS") int ControlFlags$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ControlFlags$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("JOB_OBJECT_IO_RATE_CONTROL_FLAGS") int x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$VH().set(seg, x);
        }
        public static void ControlFlags$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("JOB_OBJECT_IO_RATE_CONTROL_FLAGS") int x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VolumeNameLength$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$VH();
        }
        public static  @C("WORD") short VolumeNameLength$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (short)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$VH().get(seg);
        }
        public static  @C("WORD") short VolumeNameLength$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (short)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VolumeNameLength$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$VH().set(seg, x);
        }
        public static void VolumeNameLength$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CriticalReservationIops$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$VH();
        }
        public static  @C("LONG64") long CriticalReservationIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$VH().get(seg);
        }
        public static  @C("LONG64") long CriticalReservationIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CriticalReservationIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$VH().set(seg, x);
        }
        public static void CriticalReservationIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReservationBandwidth$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$VH();
        }
        public static  @C("LONG64") long ReservationBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$VH().get(seg);
        }
        public static  @C("LONG64") long ReservationBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReservationBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$VH().set(seg, x);
        }
        public static void ReservationBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CriticalReservationBandwidth$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$VH();
        }
        public static  @C("LONG64") long CriticalReservationBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$VH().get(seg);
        }
        public static  @C("LONG64") long CriticalReservationBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CriticalReservationBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$VH().set(seg, x);
        }
        public static void CriticalReservationBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxTimePercent$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$VH();
        }
        public static  @C("LONG64") long MaxTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$VH().get(seg);
        }
        public static  @C("LONG64") long MaxTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$VH().set(seg, x);
        }
        public static void MaxTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReservationTimePercent$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$VH();
        }
        public static  @C("LONG64") long ReservationTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$VH().get(seg);
        }
        public static  @C("LONG64") long ReservationTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReservationTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$VH().set(seg, x);
        }
        public static void ReservationTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CriticalReservationTimePercent$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$VH();
        }
        public static  @C("LONG64") long CriticalReservationTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$VH().get(seg);
        }
        public static  @C("LONG64") long CriticalReservationTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CriticalReservationTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$VH().set(seg, x);
        }
        public static void CriticalReservationTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SoftMaxIops$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$VH();
        }
        public static  @C("LONG64") long SoftMaxIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$VH().get(seg);
        }
        public static  @C("LONG64") long SoftMaxIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SoftMaxIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$VH().set(seg, x);
        }
        public static void SoftMaxIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SoftMaxBandwidth$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$VH();
        }
        public static  @C("LONG64") long SoftMaxBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$VH().get(seg);
        }
        public static  @C("LONG64") long SoftMaxBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SoftMaxBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$VH().set(seg, x);
        }
        public static void SoftMaxBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SoftMaxTimePercent$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$VH();
        }
        public static  @C("LONG64") long SoftMaxTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$VH().get(seg);
        }
        public static  @C("LONG64") long SoftMaxTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SoftMaxTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$VH().set(seg, x);
        }
        public static void SoftMaxTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LimitExcessNotifyIops$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$VH();
        }
        public static  @C("LONG64") long LimitExcessNotifyIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$VH().get(seg);
        }
        public static  @C("LONG64") long LimitExcessNotifyIops$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LimitExcessNotifyIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$VH().set(seg, x);
        }
        public static void LimitExcessNotifyIops$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LimitExcessNotifyBandwidth$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$VH();
        }
        public static  @C("LONG64") long LimitExcessNotifyBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$VH().get(seg);
        }
        public static  @C("LONG64") long LimitExcessNotifyBandwidth$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LimitExcessNotifyBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$VH().set(seg, x);
        }
        public static void LimitExcessNotifyBandwidth$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LimitExcessNotifyTimePercent$VH() {
            return winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$VH();
        }
        public static  @C("LONG64") long LimitExcessNotifyTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$VH().get(seg);
        }
        public static  @C("LONG64") long LimitExcessNotifyTimePercent$get(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LimitExcessNotifyTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$VH().set(seg, x);
        }
        public static void LimitExcessNotifyTimePercent$set(@C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment seg, long index, @C("LONG64") long x) {
            winnt_h$constants$5.JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS")public static class _JOBOBJECT_IO_ATTRIBUTION_STATS {

        /* package-private */ _JOBOBJECT_IO_ATTRIBUTION_STATS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT();
        }
        public static VarHandle IoCount$VH() {
            return winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$VH();
        }
        public static  @C("ULONG_PTR") long IoCount$get(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$VH().get(seg);
        }
        public static  @C("ULONG_PTR") long IoCount$get(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoCount$set(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg, @C("ULONG_PTR") long x) {
            winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$VH().set(seg, x);
        }
        public static void IoCount$set(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg, long index, @C("ULONG_PTR") long x) {
            winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TotalNonOverlappedQueueTime$VH() {
            return winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$VH();
        }
        public static  @C("ULONGLONG") long TotalNonOverlappedQueueTime$get(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$VH().get(seg);
        }
        public static  @C("ULONGLONG") long TotalNonOverlappedQueueTime$get(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalNonOverlappedQueueTime$set(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$VH().set(seg, x);
        }
        public static void TotalNonOverlappedQueueTime$set(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TotalNonOverlappedServiceTime$VH() {
            return winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$VH();
        }
        public static  @C("ULONGLONG") long TotalNonOverlappedServiceTime$get(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$VH().get(seg);
        }
        public static  @C("ULONGLONG") long TotalNonOverlappedServiceTime$get(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalNonOverlappedServiceTime$set(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$VH().set(seg, x);
        }
        public static void TotalNonOverlappedServiceTime$set(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TotalSize$VH() {
            return winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$VH();
        }
        public static  @C("ULONGLONG") long TotalSize$get(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg) {
            return (long)winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$VH().get(seg);
        }
        public static  @C("ULONGLONG") long TotalSize$get(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalSize$set(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$VH().set(seg, x);
        }
        public static void TotalSize$set(@C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_IO_ATTRIBUTION_STATS")public static class JOBOBJECT_IO_ATTRIBUTION_STATS extends _JOBOBJECT_IO_ATTRIBUTION_STATS {

        /* package-private */ JOBOBJECT_IO_ATTRIBUTION_STATS() {}
    }

    @C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION")public static class _JOBOBJECT_IO_ATTRIBUTION_INFORMATION {

        /* package-private */ _JOBOBJECT_IO_ATTRIBUTION_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle ControlFlags$VH() {
            return winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$VH();
        }
        public static  @C("DWORD") int ControlFlags$get(@C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ControlFlags$get(@C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ControlFlags$set(@C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$VH().set(seg, x);
        }
        public static void ControlFlags$set(@C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ReadStats$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));
        }
        public static MemorySegment WriteStats$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 32));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION")public static class JOBOBJECT_IO_ATTRIBUTION_INFORMATION extends _JOBOBJECT_IO_ATTRIBUTION_INFORMATION {

        /* package-private */ JOBOBJECT_IO_ATTRIBUTION_INFORMATION() {}
    }

    @C("struct _SILOOBJECT_BASIC_INFORMATION")public static class _SILOOBJECT_BASIC_INFORMATION {

        /* package-private */ _SILOOBJECT_BASIC_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle SiloId$VH() {
            return winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$SiloId$VH();
        }
        public static  @C("DWORD") int SiloId$get(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$SiloId$VH().get(seg);
        }
        public static  @C("DWORD") int SiloId$get(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$SiloId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SiloId$set(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$SiloId$VH().set(seg, x);
        }
        public static void SiloId$set(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$SiloId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SiloParentId$VH() {
            return winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$SiloParentId$VH();
        }
        public static  @C("DWORD") int SiloParentId$get(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$SiloParentId$VH().get(seg);
        }
        public static  @C("DWORD") int SiloParentId$get(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$SiloParentId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SiloParentId$set(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$SiloParentId$VH().set(seg, x);
        }
        public static void SiloParentId$set(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$SiloParentId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfProcesses$VH() {
            return winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$VH();
        }
        public static  @C("DWORD") int NumberOfProcesses$get(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfProcesses$get(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfProcesses$set(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$VH().set(seg, x);
        }
        public static void NumberOfProcesses$set(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$5._SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IsInServerSilo$VH() {
            return winnt_h$constants$6._SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH();
        }
        public static  @C("BOOLEAN") byte IsInServerSilo$get(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg) {
            return (byte)winnt_h$constants$6._SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte IsInServerSilo$get(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$6._SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IsInServerSilo$set(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$6._SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH().set(seg, x);
        }
        public static void IsInServerSilo$set(@C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$6._SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(13, 3));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SILOOBJECT_BASIC_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SILOOBJECT_BASIC_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SILOOBJECT_BASIC_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SILOOBJECT_BASIC_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SILOOBJECT_BASIC_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SILOOBJECT_BASIC_INFORMATION")public static class SILOOBJECT_BASIC_INFORMATION extends _SILOOBJECT_BASIC_INFORMATION {

        /* package-private */ SILOOBJECT_BASIC_INFORMATION() {}
    }

    @C("struct _SERVERSILO_BASIC_INFORMATION")public static class _SERVERSILO_BASIC_INFORMATION {

        /* package-private */ _SERVERSILO_BASIC_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle ServiceSessionId$VH() {
            return winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH();
        }
        public static  @C("DWORD") int ServiceSessionId$get(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH().get(seg);
        }
        public static  @C("DWORD") int ServiceSessionId$get(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ServiceSessionId$set(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH().set(seg, x);
        }
        public static void ServiceSessionId$set(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle State$VH() {
            return winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$State$VH();
        }
        public static  @C("SERVERSILO_STATE") int State$get(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$State$VH().get(seg);
        }
        public static  @C("SERVERSILO_STATE") int State$get(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$State$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void State$set(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, @C("SERVERSILO_STATE") int x) {
            winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$State$VH().set(seg, x);
        }
        public static void State$set(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, long index, @C("SERVERSILO_STATE") int x) {
            winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$State$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExitStatus$VH() {
            return winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ExitStatus$VH();
        }
        public static  @C("DWORD") int ExitStatus$get(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ExitStatus$VH().get(seg);
        }
        public static  @C("DWORD") int ExitStatus$get(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ExitStatus$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExitStatus$set(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ExitStatus$VH().set(seg, x);
        }
        public static void ExitStatus$set(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ExitStatus$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IsDownlevelContainer$VH() {
            return winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH();
        }
        public static  @C("BOOLEAN") byte IsDownlevelContainer$get(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg) {
            return (byte)winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte IsDownlevelContainer$get(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IsDownlevelContainer$set(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH().set(seg, x);
        }
        public static void IsDownlevelContainer$set(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ApiSetSchema$VH() {
            return winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH();
        }
        public static  @C("PVOID") MemoryAddress ApiSetSchema$get(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress ApiSetSchema$get(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ApiSetSchema$set(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH().set(seg, x);
        }
        public static void ApiSetSchema$set(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HostApiSetSchema$VH() {
            return winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH();
        }
        public static  @C("PVOID") MemoryAddress HostApiSetSchema$get(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress HostApiSetSchema$get(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HostApiSetSchema$set(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH().set(seg, x);
        }
        public static void HostApiSetSchema$set(@C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6._SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SERVERSILO_BASIC_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SERVERSILO_BASIC_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SERVERSILO_BASIC_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SERVERSILO_BASIC_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SERVERSILO_BASIC_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SERVERSILO_BASIC_INFORMATION")public static class SERVERSILO_BASIC_INFORMATION extends _SERVERSILO_BASIC_INFORMATION {

        /* package-private */ SERVERSILO_BASIC_INFORMATION() {}
    }

    @C("struct _CACHE_DESCRIPTOR")public static class _CACHE_DESCRIPTOR {

        /* package-private */ _CACHE_DESCRIPTOR() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._CACHE_DESCRIPTOR$struct$LAYOUT();
        }
        public static VarHandle Level$VH() {
            return winnt_h$constants$6._CACHE_DESCRIPTOR$Level$VH();
        }
        public static  @C("BYTE") byte Level$get(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg) {
            return (byte)winnt_h$constants$6._CACHE_DESCRIPTOR$Level$VH().get(seg);
        }
        public static  @C("BYTE") byte Level$get(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$6._CACHE_DESCRIPTOR$Level$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Level$set(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$6._CACHE_DESCRIPTOR$Level$VH().set(seg, x);
        }
        public static void Level$set(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$6._CACHE_DESCRIPTOR$Level$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Associativity$VH() {
            return winnt_h$constants$6._CACHE_DESCRIPTOR$Associativity$VH();
        }
        public static  @C("BYTE") byte Associativity$get(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg) {
            return (byte)winnt_h$constants$6._CACHE_DESCRIPTOR$Associativity$VH().get(seg);
        }
        public static  @C("BYTE") byte Associativity$get(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$6._CACHE_DESCRIPTOR$Associativity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Associativity$set(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$6._CACHE_DESCRIPTOR$Associativity$VH().set(seg, x);
        }
        public static void Associativity$set(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$6._CACHE_DESCRIPTOR$Associativity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LineSize$VH() {
            return winnt_h$constants$6._CACHE_DESCRIPTOR$LineSize$VH();
        }
        public static  @C("WORD") short LineSize$get(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg) {
            return (short)winnt_h$constants$6._CACHE_DESCRIPTOR$LineSize$VH().get(seg);
        }
        public static  @C("WORD") short LineSize$get(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._CACHE_DESCRIPTOR$LineSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LineSize$set(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._CACHE_DESCRIPTOR$LineSize$VH().set(seg, x);
        }
        public static void LineSize$set(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._CACHE_DESCRIPTOR$LineSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$6._CACHE_DESCRIPTOR$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$6._CACHE_DESCRIPTOR$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._CACHE_DESCRIPTOR$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._CACHE_DESCRIPTOR$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._CACHE_DESCRIPTOR$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$6._CACHE_DESCRIPTOR$Type$VH();
        }
        public static  @C("PROCESSOR_CACHE_TYPE") int Type$get(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$6._CACHE_DESCRIPTOR$Type$VH().get(seg);
        }
        public static  @C("PROCESSOR_CACHE_TYPE") int Type$get(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._CACHE_DESCRIPTOR$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, @C("PROCESSOR_CACHE_TYPE") int x) {
            winnt_h$constants$6._CACHE_DESCRIPTOR$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _CACHE_DESCRIPTOR") MemorySegment seg, long index, @C("PROCESSOR_CACHE_TYPE") int x) {
            winnt_h$constants$6._CACHE_DESCRIPTOR$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _CACHE_DESCRIPTOR") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _CACHE_DESCRIPTOR") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _CACHE_DESCRIPTOR[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _CACHE_DESCRIPTOR[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _CACHE_DESCRIPTOR*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _CACHE_DESCRIPTOR*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _CACHE_DESCRIPTOR") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _CACHE_DESCRIPTOR")public static class CACHE_DESCRIPTOR extends _CACHE_DESCRIPTOR {

        /* package-private */ CACHE_DESCRIPTOR() {}
    }

    @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION")public static class _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {

        /* package-private */ _SYSTEM_LOGICAL_PROCESSOR_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle ProcessorMask$VH() {
            return winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH();
        }
        public static  @C("ULONG_PTR") long ProcessorMask$get(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH().get(seg);
        }
        public static  @C("ULONG_PTR") long ProcessorMask$get(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProcessorMask$set(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION") MemorySegment seg, @C("ULONG_PTR") long x) {
            winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH().set(seg, x);
        }
        public static void ProcessorMask$set(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION") MemorySegment seg, long index, @C("ULONG_PTR") long x) {
            winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Relationship$VH() {
            return winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH();
        }
        public static  @C("LOGICAL_PROCESSOR_RELATIONSHIP") int Relationship$get(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH().get(seg);
        }
        public static  @C("LOGICAL_PROCESSOR_RELATIONSHIP") int Relationship$get(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Relationship$set(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION") MemorySegment seg, @C("LOGICAL_PROCESSOR_RELATIONSHIP") int x) {
            winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH().set(seg, x);
        }
        public static void Relationship$set(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION") MemorySegment seg, long index, @C("LOGICAL_PROCESSOR_RELATIONSHIP") int x) {
            winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("struct ")public static class ProcessorCore {

            /* package-private */ ProcessorCore() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$Flags$VH();
            }
            public static  @C("BYTE") byte Flags$get(@C("struct ") MemorySegment seg) {
                return (byte)winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$Flags$VH().get(seg);
            }
            public static  @C("BYTE") byte Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorCore$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment ProcessorCore$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 1));
        }
        @C("struct ")public static class NumaNode {

            /* package-private */ NumaNode() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$struct$LAYOUT();
            }
            public static VarHandle NodeNumber$VH() {
                return winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$NodeNumber$VH();
            }
            public static  @C("DWORD") int NodeNumber$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$NodeNumber$VH().get(seg);
            }
            public static  @C("DWORD") int NodeNumber$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$NodeNumber$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void NodeNumber$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$NodeNumber$VH().set(seg, x);
            }
            public static void NodeNumber$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION$NumaNode$NodeNumber$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment NumaNode$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(17, 4));
        }
        public static MemorySegment Cache$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(21, 12));
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(33, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION")public static class SYSTEM_LOGICAL_PROCESSOR_INFORMATION extends _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {

        /* package-private */ SYSTEM_LOGICAL_PROCESSOR_INFORMATION() {}
    }

    @C("struct _PROCESSOR_RELATIONSHIP")public static class _PROCESSOR_RELATIONSHIP {

        /* package-private */ _PROCESSOR_RELATIONSHIP() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._PROCESSOR_RELATIONSHIP$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$6._PROCESSOR_RELATIONSHIP$Flags$VH();
        }
        public static  @C("BYTE") byte Flags$get(@C("struct _PROCESSOR_RELATIONSHIP") MemorySegment seg) {
            return (byte)winnt_h$constants$6._PROCESSOR_RELATIONSHIP$Flags$VH().get(seg);
        }
        public static  @C("BYTE") byte Flags$get(@C("struct _PROCESSOR_RELATIONSHIP") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$6._PROCESSOR_RELATIONSHIP$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _PROCESSOR_RELATIONSHIP") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$6._PROCESSOR_RELATIONSHIP$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _PROCESSOR_RELATIONSHIP") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$6._PROCESSOR_RELATIONSHIP$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EfficiencyClass$VH() {
            return winnt_h$constants$6._PROCESSOR_RELATIONSHIP$EfficiencyClass$VH();
        }
        public static  @C("BYTE") byte EfficiencyClass$get(@C("struct _PROCESSOR_RELATIONSHIP") MemorySegment seg) {
            return (byte)winnt_h$constants$6._PROCESSOR_RELATIONSHIP$EfficiencyClass$VH().get(seg);
        }
        public static  @C("BYTE") byte EfficiencyClass$get(@C("struct _PROCESSOR_RELATIONSHIP") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$6._PROCESSOR_RELATIONSHIP$EfficiencyClass$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EfficiencyClass$set(@C("struct _PROCESSOR_RELATIONSHIP") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$6._PROCESSOR_RELATIONSHIP$EfficiencyClass$VH().set(seg, x);
        }
        public static void EfficiencyClass$set(@C("struct _PROCESSOR_RELATIONSHIP") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$6._PROCESSOR_RELATIONSHIP$EfficiencyClass$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2, 20));
        }
        public static VarHandle GroupCount$VH() {
            return winnt_h$constants$6._PROCESSOR_RELATIONSHIP$GroupCount$VH();
        }
        public static  @C("WORD") short GroupCount$get(@C("struct _PROCESSOR_RELATIONSHIP") MemorySegment seg) {
            return (short)winnt_h$constants$6._PROCESSOR_RELATIONSHIP$GroupCount$VH().get(seg);
        }
        public static  @C("WORD") short GroupCount$get(@C("struct _PROCESSOR_RELATIONSHIP") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._PROCESSOR_RELATIONSHIP$GroupCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GroupCount$set(@C("struct _PROCESSOR_RELATIONSHIP") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._PROCESSOR_RELATIONSHIP$GroupCount$VH().set(seg, x);
        }
        public static void GroupCount$set(@C("struct _PROCESSOR_RELATIONSHIP") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._PROCESSOR_RELATIONSHIP$GroupCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment GroupMask$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESSOR_RELATIONSHIP") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESSOR_RELATIONSHIP") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESSOR_RELATIONSHIP[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESSOR_RELATIONSHIP[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESSOR_RELATIONSHIP*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESSOR_RELATIONSHIP*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESSOR_RELATIONSHIP") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESSOR_RELATIONSHIP")public static class PROCESSOR_RELATIONSHIP extends _PROCESSOR_RELATIONSHIP {

        /* package-private */ PROCESSOR_RELATIONSHIP() {}
    }

    @C("struct _NUMA_NODE_RELATIONSHIP")public static class _NUMA_NODE_RELATIONSHIP {

        /* package-private */ _NUMA_NODE_RELATIONSHIP() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._NUMA_NODE_RELATIONSHIP$struct$LAYOUT();
        }
        public static VarHandle NodeNumber$VH() {
            return winnt_h$constants$6._NUMA_NODE_RELATIONSHIP$NodeNumber$VH();
        }
        public static  @C("DWORD") int NodeNumber$get(@C("struct _NUMA_NODE_RELATIONSHIP") MemorySegment seg) {
            return (int)winnt_h$constants$6._NUMA_NODE_RELATIONSHIP$NodeNumber$VH().get(seg);
        }
        public static  @C("DWORD") int NodeNumber$get(@C("struct _NUMA_NODE_RELATIONSHIP") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._NUMA_NODE_RELATIONSHIP$NodeNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NodeNumber$set(@C("struct _NUMA_NODE_RELATIONSHIP") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._NUMA_NODE_RELATIONSHIP$NodeNumber$VH().set(seg, x);
        }
        public static void NodeNumber$set(@C("struct _NUMA_NODE_RELATIONSHIP") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._NUMA_NODE_RELATIONSHIP$NodeNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 20));
        }
        public static MemorySegment GroupMask$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _NUMA_NODE_RELATIONSHIP") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _NUMA_NODE_RELATIONSHIP") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _NUMA_NODE_RELATIONSHIP[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _NUMA_NODE_RELATIONSHIP[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _NUMA_NODE_RELATIONSHIP*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _NUMA_NODE_RELATIONSHIP*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _NUMA_NODE_RELATIONSHIP") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _NUMA_NODE_RELATIONSHIP")public static class NUMA_NODE_RELATIONSHIP extends _NUMA_NODE_RELATIONSHIP {

        /* package-private */ NUMA_NODE_RELATIONSHIP() {}
    }

    @C("struct _CACHE_RELATIONSHIP")public static class _CACHE_RELATIONSHIP {

        /* package-private */ _CACHE_RELATIONSHIP() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._CACHE_RELATIONSHIP$struct$LAYOUT();
        }
        public static VarHandle Level$VH() {
            return winnt_h$constants$6._CACHE_RELATIONSHIP$Level$VH();
        }
        public static  @C("BYTE") byte Level$get(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg) {
            return (byte)winnt_h$constants$6._CACHE_RELATIONSHIP$Level$VH().get(seg);
        }
        public static  @C("BYTE") byte Level$get(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$6._CACHE_RELATIONSHIP$Level$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Level$set(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$6._CACHE_RELATIONSHIP$Level$VH().set(seg, x);
        }
        public static void Level$set(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$6._CACHE_RELATIONSHIP$Level$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Associativity$VH() {
            return winnt_h$constants$6._CACHE_RELATIONSHIP$Associativity$VH();
        }
        public static  @C("BYTE") byte Associativity$get(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg) {
            return (byte)winnt_h$constants$6._CACHE_RELATIONSHIP$Associativity$VH().get(seg);
        }
        public static  @C("BYTE") byte Associativity$get(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$6._CACHE_RELATIONSHIP$Associativity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Associativity$set(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$6._CACHE_RELATIONSHIP$Associativity$VH().set(seg, x);
        }
        public static void Associativity$set(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$6._CACHE_RELATIONSHIP$Associativity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LineSize$VH() {
            return winnt_h$constants$6._CACHE_RELATIONSHIP$LineSize$VH();
        }
        public static  @C("WORD") short LineSize$get(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg) {
            return (short)winnt_h$constants$6._CACHE_RELATIONSHIP$LineSize$VH().get(seg);
        }
        public static  @C("WORD") short LineSize$get(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._CACHE_RELATIONSHIP$LineSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LineSize$set(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._CACHE_RELATIONSHIP$LineSize$VH().set(seg, x);
        }
        public static void LineSize$set(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._CACHE_RELATIONSHIP$LineSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CacheSize$VH() {
            return winnt_h$constants$6._CACHE_RELATIONSHIP$CacheSize$VH();
        }
        public static  @C("DWORD") int CacheSize$get(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg) {
            return (int)winnt_h$constants$6._CACHE_RELATIONSHIP$CacheSize$VH().get(seg);
        }
        public static  @C("DWORD") int CacheSize$get(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._CACHE_RELATIONSHIP$CacheSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CacheSize$set(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._CACHE_RELATIONSHIP$CacheSize$VH().set(seg, x);
        }
        public static void CacheSize$set(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._CACHE_RELATIONSHIP$CacheSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$6._CACHE_RELATIONSHIP$Type$VH();
        }
        public static  @C("PROCESSOR_CACHE_TYPE") int Type$get(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg) {
            return (int)winnt_h$constants$6._CACHE_RELATIONSHIP$Type$VH().get(seg);
        }
        public static  @C("PROCESSOR_CACHE_TYPE") int Type$get(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._CACHE_RELATIONSHIP$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, @C("PROCESSOR_CACHE_TYPE") int x) {
            winnt_h$constants$6._CACHE_RELATIONSHIP$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _CACHE_RELATIONSHIP") MemorySegment seg, long index, @C("PROCESSOR_CACHE_TYPE") int x) {
            winnt_h$constants$6._CACHE_RELATIONSHIP$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 20));
        }
        public static MemorySegment GroupMask$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _CACHE_RELATIONSHIP") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _CACHE_RELATIONSHIP") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _CACHE_RELATIONSHIP[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _CACHE_RELATIONSHIP[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _CACHE_RELATIONSHIP*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _CACHE_RELATIONSHIP*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _CACHE_RELATIONSHIP") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _CACHE_RELATIONSHIP")public static class CACHE_RELATIONSHIP extends _CACHE_RELATIONSHIP {

        /* package-private */ CACHE_RELATIONSHIP() {}
    }

    @C("struct _PROCESSOR_GROUP_INFO")public static class _PROCESSOR_GROUP_INFO {

        /* package-private */ _PROCESSOR_GROUP_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._PROCESSOR_GROUP_INFO$struct$LAYOUT();
        }
        public static VarHandle MaximumProcessorCount$VH() {
            return winnt_h$constants$6._PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH();
        }
        public static  @C("BYTE") byte MaximumProcessorCount$get(@C("struct _PROCESSOR_GROUP_INFO") MemorySegment seg) {
            return (byte)winnt_h$constants$6._PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH().get(seg);
        }
        public static  @C("BYTE") byte MaximumProcessorCount$get(@C("struct _PROCESSOR_GROUP_INFO") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$6._PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumProcessorCount$set(@C("struct _PROCESSOR_GROUP_INFO") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$6._PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH().set(seg, x);
        }
        public static void MaximumProcessorCount$set(@C("struct _PROCESSOR_GROUP_INFO") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$6._PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ActiveProcessorCount$VH() {
            return winnt_h$constants$6._PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH();
        }
        public static  @C("BYTE") byte ActiveProcessorCount$get(@C("struct _PROCESSOR_GROUP_INFO") MemorySegment seg) {
            return (byte)winnt_h$constants$6._PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH().get(seg);
        }
        public static  @C("BYTE") byte ActiveProcessorCount$get(@C("struct _PROCESSOR_GROUP_INFO") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$6._PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ActiveProcessorCount$set(@C("struct _PROCESSOR_GROUP_INFO") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$6._PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH().set(seg, x);
        }
        public static void ActiveProcessorCount$set(@C("struct _PROCESSOR_GROUP_INFO") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$6._PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2, 38));
        }
        public static VarHandle ActiveProcessorMask$VH() {
            return winnt_h$constants$6._PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH();
        }
        public static  @C("KAFFINITY") long ActiveProcessorMask$get(@C("struct _PROCESSOR_GROUP_INFO") MemorySegment seg) {
            return (long)winnt_h$constants$6._PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH().get(seg);
        }
        public static  @C("KAFFINITY") long ActiveProcessorMask$get(@C("struct _PROCESSOR_GROUP_INFO") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ActiveProcessorMask$set(@C("struct _PROCESSOR_GROUP_INFO") MemorySegment seg, @C("KAFFINITY") long x) {
            winnt_h$constants$6._PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH().set(seg, x);
        }
        public static void ActiveProcessorMask$set(@C("struct _PROCESSOR_GROUP_INFO") MemorySegment seg, long index, @C("KAFFINITY") long x) {
            winnt_h$constants$6._PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESSOR_GROUP_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESSOR_GROUP_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESSOR_GROUP_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESSOR_GROUP_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESSOR_GROUP_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESSOR_GROUP_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESSOR_GROUP_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESSOR_GROUP_INFO")public static class PROCESSOR_GROUP_INFO extends _PROCESSOR_GROUP_INFO {

        /* package-private */ PROCESSOR_GROUP_INFO() {}
    }

    @C("struct _GROUP_RELATIONSHIP")public static class _GROUP_RELATIONSHIP {

        /* package-private */ _GROUP_RELATIONSHIP() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._GROUP_RELATIONSHIP$struct$LAYOUT();
        }
        public static VarHandle MaximumGroupCount$VH() {
            return winnt_h$constants$6._GROUP_RELATIONSHIP$MaximumGroupCount$VH();
        }
        public static  @C("WORD") short MaximumGroupCount$get(@C("struct _GROUP_RELATIONSHIP") MemorySegment seg) {
            return (short)winnt_h$constants$6._GROUP_RELATIONSHIP$MaximumGroupCount$VH().get(seg);
        }
        public static  @C("WORD") short MaximumGroupCount$get(@C("struct _GROUP_RELATIONSHIP") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._GROUP_RELATIONSHIP$MaximumGroupCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumGroupCount$set(@C("struct _GROUP_RELATIONSHIP") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._GROUP_RELATIONSHIP$MaximumGroupCount$VH().set(seg, x);
        }
        public static void MaximumGroupCount$set(@C("struct _GROUP_RELATIONSHIP") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._GROUP_RELATIONSHIP$MaximumGroupCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ActiveGroupCount$VH() {
            return winnt_h$constants$6._GROUP_RELATIONSHIP$ActiveGroupCount$VH();
        }
        public static  @C("WORD") short ActiveGroupCount$get(@C("struct _GROUP_RELATIONSHIP") MemorySegment seg) {
            return (short)winnt_h$constants$6._GROUP_RELATIONSHIP$ActiveGroupCount$VH().get(seg);
        }
        public static  @C("WORD") short ActiveGroupCount$get(@C("struct _GROUP_RELATIONSHIP") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._GROUP_RELATIONSHIP$ActiveGroupCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ActiveGroupCount$set(@C("struct _GROUP_RELATIONSHIP") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._GROUP_RELATIONSHIP$ActiveGroupCount$VH().set(seg, x);
        }
        public static void ActiveGroupCount$set(@C("struct _GROUP_RELATIONSHIP") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._GROUP_RELATIONSHIP$ActiveGroupCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 20));
        }
        public static MemorySegment GroupInfo$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 48));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _GROUP_RELATIONSHIP") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _GROUP_RELATIONSHIP") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _GROUP_RELATIONSHIP[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _GROUP_RELATIONSHIP[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _GROUP_RELATIONSHIP*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _GROUP_RELATIONSHIP*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _GROUP_RELATIONSHIP") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _GROUP_RELATIONSHIP")public static class GROUP_RELATIONSHIP extends _GROUP_RELATIONSHIP {

        /* package-private */ GROUP_RELATIONSHIP() {}
    }

    @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX")public static class _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {

        /* package-private */ _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT();
        }
        public static VarHandle Relationship$VH() {
            return winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH();
        }
        public static  @C("LOGICAL_PROCESSOR_RELATIONSHIP") int Relationship$get(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX") MemorySegment seg) {
            return (int)winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH().get(seg);
        }
        public static  @C("LOGICAL_PROCESSOR_RELATIONSHIP") int Relationship$get(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Relationship$set(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX") MemorySegment seg, @C("LOGICAL_PROCESSOR_RELATIONSHIP") int x) {
            winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH().set(seg, x);
        }
        public static void Relationship$set(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX") MemorySegment seg, long index, @C("LOGICAL_PROCESSOR_RELATIONSHIP") int x) {
            winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX") MemorySegment seg) {
            return (int)winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Processor$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 40));
        }
        public static MemorySegment NumaNode$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 40));
        }
        public static MemorySegment Cache$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 48));
        }
        public static MemorySegment Group$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(136, 72));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX")public static class SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX extends _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {

        /* package-private */ SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX() {}
    }

    @C("struct _SYSTEM_CPU_SET_INFORMATION")public static class _SYSTEM_CPU_SET_INFORMATION {

        /* package-private */ _SYSTEM_CPU_SET_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _SYSTEM_CPU_SET_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _SYSTEM_CPU_SET_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _SYSTEM_CPU_SET_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _SYSTEM_CPU_SET_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$Type$VH();
        }
        public static  @C("CPU_SET_INFORMATION_TYPE") int Type$get(@C("struct _SYSTEM_CPU_SET_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$Type$VH().get(seg);
        }
        public static  @C("CPU_SET_INFORMATION_TYPE") int Type$get(@C("struct _SYSTEM_CPU_SET_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _SYSTEM_CPU_SET_INFORMATION") MemorySegment seg, @C("CPU_SET_INFORMATION_TYPE") int x) {
            winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _SYSTEM_CPU_SET_INFORMATION") MemorySegment seg, long index, @C("CPU_SET_INFORMATION_TYPE") int x) {
            winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("struct ")public static class CpuSet {

            /* package-private */ CpuSet() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$struct$LAYOUT();
            }
            public static VarHandle Id$VH() {
                return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Id$VH();
            }
            public static  @C("DWORD") int Id$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Id$VH().get(seg);
            }
            public static  @C("DWORD") int Id$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Id$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Id$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Id$VH().set(seg, x);
            }
            public static void Id$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Id$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Group$VH() {
                return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Group$VH();
            }
            public static  @C("WORD") short Group$get(@C("struct ") MemorySegment seg) {
                return (short)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Group$VH().get(seg);
            }
            public static  @C("WORD") short Group$get(@C("struct ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Group$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Group$set(@C("struct ") MemorySegment seg, @C("WORD") short x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Group$VH().set(seg, x);
            }
            public static void Group$set(@C("struct ") MemorySegment seg, long index, @C("WORD") short x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Group$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle LogicalProcessorIndex$VH() {
                return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$LogicalProcessorIndex$VH();
            }
            public static  @C("BYTE") byte LogicalProcessorIndex$get(@C("struct ") MemorySegment seg) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$LogicalProcessorIndex$VH().get(seg);
            }
            public static  @C("BYTE") byte LogicalProcessorIndex$get(@C("struct ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$LogicalProcessorIndex$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void LogicalProcessorIndex$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$LogicalProcessorIndex$VH().set(seg, x);
            }
            public static void LogicalProcessorIndex$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$LogicalProcessorIndex$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle CoreIndex$VH() {
                return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$CoreIndex$VH();
            }
            public static  @C("BYTE") byte CoreIndex$get(@C("struct ") MemorySegment seg) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$CoreIndex$VH().get(seg);
            }
            public static  @C("BYTE") byte CoreIndex$get(@C("struct ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$CoreIndex$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void CoreIndex$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$CoreIndex$VH().set(seg, x);
            }
            public static void CoreIndex$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$CoreIndex$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle LastLevelCacheIndex$VH() {
                return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$LastLevelCacheIndex$VH();
            }
            public static  @C("BYTE") byte LastLevelCacheIndex$get(@C("struct ") MemorySegment seg) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$LastLevelCacheIndex$VH().get(seg);
            }
            public static  @C("BYTE") byte LastLevelCacheIndex$get(@C("struct ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$LastLevelCacheIndex$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void LastLevelCacheIndex$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$LastLevelCacheIndex$VH().set(seg, x);
            }
            public static void LastLevelCacheIndex$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$LastLevelCacheIndex$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle NumaNodeIndex$VH() {
                return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$NumaNodeIndex$VH();
            }
            public static  @C("BYTE") byte NumaNodeIndex$get(@C("struct ") MemorySegment seg) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$NumaNodeIndex$VH().get(seg);
            }
            public static  @C("BYTE") byte NumaNodeIndex$get(@C("struct ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$NumaNodeIndex$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void NumaNodeIndex$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$NumaNodeIndex$VH().set(seg, x);
            }
            public static void NumaNodeIndex$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$NumaNodeIndex$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle EfficiencyClass$VH() {
                return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$EfficiencyClass$VH();
            }
            public static  @C("BYTE") byte EfficiencyClass$get(@C("struct ") MemorySegment seg) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$EfficiencyClass$VH().get(seg);
            }
            public static  @C("BYTE") byte EfficiencyClass$get(@C("struct ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$EfficiencyClass$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void EfficiencyClass$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$EfficiencyClass$VH().set(seg, x);
            }
            public static void EfficiencyClass$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$EfficiencyClass$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle AllFlags$VH() {
                return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$AllFlags$VH();
            }
            public static  @C("BYTE") byte AllFlags$get(@C("struct ") MemorySegment seg) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$AllFlags$VH().get(seg);
            }
            public static  @C("BYTE") byte AllFlags$get(@C("struct ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$AllFlags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void AllFlags$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$AllFlags$VH().set(seg, x);
            }
            public static void AllFlags$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$AllFlags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Reserved$VH() {
                return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Reserved$VH();
            }
            public static  @C("DWORD") int Reserved$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Reserved$VH().get(seg);
            }
            public static  @C("DWORD") int Reserved$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Reserved$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Reserved$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Reserved$VH().set(seg, x);
            }
            public static void Reserved$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle SchedulingClass$VH() {
                return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$SchedulingClass$VH();
            }
            public static  @C("BYTE") byte SchedulingClass$get(@C("struct ") MemorySegment seg) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$SchedulingClass$VH().get(seg);
            }
            public static  @C("BYTE") byte SchedulingClass$get(@C("struct ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$SchedulingClass$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void SchedulingClass$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$SchedulingClass$VH().set(seg, x);
            }
            public static void SchedulingClass$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$SchedulingClass$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle AllocationTag$VH() {
                return winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$AllocationTag$VH();
            }
            public static  @C("DWORD64") long AllocationTag$get(@C("struct ") MemorySegment seg) {
                return (long)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$AllocationTag$VH().get(seg);
            }
            public static  @C("DWORD64") long AllocationTag$get(@C("struct ") MemorySegment seg, long index) {
                return (long)winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$AllocationTag$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void AllocationTag$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$AllocationTag$VH().set(seg, x);
            }
            public static void AllocationTag$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
                winnt_h$constants$6._SYSTEM_CPU_SET_INFORMATION$CpuSet$AllocationTag$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment CpuSet$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 26));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_CPU_SET_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_CPU_SET_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_CPU_SET_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_CPU_SET_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_CPU_SET_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_CPU_SET_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_CPU_SET_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_CPU_SET_INFORMATION")public static class SYSTEM_CPU_SET_INFORMATION extends _SYSTEM_CPU_SET_INFORMATION {

        /* package-private */ SYSTEM_CPU_SET_INFORMATION() {}
    }

    @C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION")public static class _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {

        /* package-private */ _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle CycleTime$VH() {
            return winnt_h$constants$6._SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH();
        }
        public static  @C("DWORD64") long CycleTime$get(@C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$6._SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH().get(seg);
        }
        public static  @C("DWORD64") long CycleTime$get(@C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CycleTime$set(@C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$6._SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH().set(seg, x);
        }
        public static void CycleTime$set(@C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$6._SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION")public static class SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION extends _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {

        /* package-private */ SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION() {}
    }

    @C("struct _XSTATE_FEATURE")public static class _XSTATE_FEATURE {

        /* package-private */ _XSTATE_FEATURE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._XSTATE_FEATURE$struct$LAYOUT();
        }
        public static VarHandle Offset$VH() {
            return winnt_h$constants$6._XSTATE_FEATURE$Offset$VH();
        }
        public static  @C("DWORD") int Offset$get(@C("struct _XSTATE_FEATURE") MemorySegment seg) {
            return (int)winnt_h$constants$6._XSTATE_FEATURE$Offset$VH().get(seg);
        }
        public static  @C("DWORD") int Offset$get(@C("struct _XSTATE_FEATURE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._XSTATE_FEATURE$Offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Offset$set(@C("struct _XSTATE_FEATURE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._XSTATE_FEATURE$Offset$VH().set(seg, x);
        }
        public static void Offset$set(@C("struct _XSTATE_FEATURE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._XSTATE_FEATURE$Offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$6._XSTATE_FEATURE$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _XSTATE_FEATURE") MemorySegment seg) {
            return (int)winnt_h$constants$6._XSTATE_FEATURE$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _XSTATE_FEATURE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._XSTATE_FEATURE$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _XSTATE_FEATURE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._XSTATE_FEATURE$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _XSTATE_FEATURE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._XSTATE_FEATURE$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _XSTATE_FEATURE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _XSTATE_FEATURE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _XSTATE_FEATURE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _XSTATE_FEATURE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _XSTATE_FEATURE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _XSTATE_FEATURE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _XSTATE_FEATURE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _XSTATE_FEATURE")public static class XSTATE_FEATURE extends _XSTATE_FEATURE {

        /* package-private */ XSTATE_FEATURE() {}
    }

    @C("struct _XSTATE_CONFIGURATION")public static class _XSTATE_CONFIGURATION {

        /* package-private */ _XSTATE_CONFIGURATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._XSTATE_CONFIGURATION$struct$LAYOUT();
        }
        public static VarHandle EnabledFeatures$VH() {
            return winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledFeatures$VH();
        }
        public static  @C("DWORD64") long EnabledFeatures$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg) {
            return (long)winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledFeatures$VH().get(seg);
        }
        public static  @C("DWORD64") long EnabledFeatures$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledFeatures$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EnabledFeatures$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledFeatures$VH().set(seg, x);
        }
        public static void EnabledFeatures$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledFeatures$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EnabledVolatileFeatures$VH() {
            return winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH();
        }
        public static  @C("DWORD64") long EnabledVolatileFeatures$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg) {
            return (long)winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH().get(seg);
        }
        public static  @C("DWORD64") long EnabledVolatileFeatures$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EnabledVolatileFeatures$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH().set(seg, x);
        }
        public static void EnabledVolatileFeatures$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$6._XSTATE_CONFIGURATION$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._XSTATE_CONFIGURATION$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._XSTATE_CONFIGURATION$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ControlFlags$VH() {
            return winnt_h$constants$6._XSTATE_CONFIGURATION$ControlFlags$VH();
        }
        public static  @C("DWORD") int ControlFlags$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._XSTATE_CONFIGURATION$ControlFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ControlFlags$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._XSTATE_CONFIGURATION$ControlFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ControlFlags$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$ControlFlags$VH().set(seg, x);
        }
        public static void ControlFlags$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$ControlFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Features$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 512));
        }
        public static VarHandle EnabledSupervisorFeatures$VH() {
            return winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH();
        }
        public static  @C("DWORD64") long EnabledSupervisorFeatures$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg) {
            return (long)winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH().get(seg);
        }
        public static  @C("DWORD64") long EnabledSupervisorFeatures$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EnabledSupervisorFeatures$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH().set(seg, x);
        }
        public static void EnabledSupervisorFeatures$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AlignedFeatures$VH() {
            return winnt_h$constants$6._XSTATE_CONFIGURATION$AlignedFeatures$VH();
        }
        public static  @C("DWORD64") long AlignedFeatures$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg) {
            return (long)winnt_h$constants$6._XSTATE_CONFIGURATION$AlignedFeatures$VH().get(seg);
        }
        public static  @C("DWORD64") long AlignedFeatures$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._XSTATE_CONFIGURATION$AlignedFeatures$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AlignedFeatures$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$AlignedFeatures$VH().set(seg, x);
        }
        public static void AlignedFeatures$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$AlignedFeatures$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AllFeatureSize$VH() {
            return winnt_h$constants$6._XSTATE_CONFIGURATION$AllFeatureSize$VH();
        }
        public static  @C("DWORD") int AllFeatureSize$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._XSTATE_CONFIGURATION$AllFeatureSize$VH().get(seg);
        }
        public static  @C("DWORD") int AllFeatureSize$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._XSTATE_CONFIGURATION$AllFeatureSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AllFeatureSize$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$AllFeatureSize$VH().set(seg, x);
        }
        public static void AllFeatureSize$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$AllFeatureSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment AllFeatures$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(560, 256));
        }
        public static VarHandle EnabledUserVisibleSupervisorFeatures$VH() {
            return winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH();
        }
        public static  @C("DWORD64") long EnabledUserVisibleSupervisorFeatures$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg) {
            return (long)winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH().get(seg);
        }
        public static  @C("DWORD64") long EnabledUserVisibleSupervisorFeatures$get(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EnabledUserVisibleSupervisorFeatures$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH().set(seg, x);
        }
        public static void EnabledUserVisibleSupervisorFeatures$set(@C("struct _XSTATE_CONFIGURATION") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$6._XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _XSTATE_CONFIGURATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _XSTATE_CONFIGURATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _XSTATE_CONFIGURATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _XSTATE_CONFIGURATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _XSTATE_CONFIGURATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _XSTATE_CONFIGURATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _XSTATE_CONFIGURATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _XSTATE_CONFIGURATION")public static class XSTATE_CONFIGURATION extends _XSTATE_CONFIGURATION {

        /* package-private */ XSTATE_CONFIGURATION() {}
    }

    @C("struct _MEMORY_BASIC_INFORMATION")public static class _MEMORY_BASIC_INFORMATION {

        /* package-private */ _MEMORY_BASIC_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle BaseAddress$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION$BaseAddress$VH();
        }
        public static  @C("PVOID") MemoryAddress BaseAddress$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$BaseAddress$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress BaseAddress$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$BaseAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseAddress$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$BaseAddress$VH().set(seg, x);
        }
        public static void BaseAddress$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$BaseAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AllocationBase$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION$AllocationBase$VH();
        }
        public static  @C("PVOID") MemoryAddress AllocationBase$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$AllocationBase$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress AllocationBase$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$AllocationBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AllocationBase$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$AllocationBase$VH().set(seg, x);
        }
        public static void AllocationBase$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$AllocationBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AllocationProtect$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION$AllocationProtect$VH();
        }
        public static  @C("DWORD") int AllocationProtect$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$AllocationProtect$VH().get(seg);
        }
        public static  @C("DWORD") int AllocationProtect$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$AllocationProtect$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AllocationProtect$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$AllocationProtect$VH().set(seg, x);
        }
        public static void AllocationProtect$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$AllocationProtect$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PartitionId$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION$PartitionId$VH();
        }
        public static  @C("WORD") short PartitionId$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg) {
            return (short)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$PartitionId$VH().get(seg);
        }
        public static  @C("WORD") short PartitionId$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$PartitionId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PartitionId$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$PartitionId$VH().set(seg, x);
        }
        public static void PartitionId$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$PartitionId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RegionSize$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION$RegionSize$VH();
        }
        public static  @C("SIZE_T") long RegionSize$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$RegionSize$VH().get(seg);
        }
        public static  @C("SIZE_T") long RegionSize$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$RegionSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RegionSize$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$RegionSize$VH().set(seg, x);
        }
        public static void RegionSize$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$RegionSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle State$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION$State$VH();
        }
        public static  @C("DWORD") int State$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$State$VH().get(seg);
        }
        public static  @C("DWORD") int State$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$State$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void State$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$State$VH().set(seg, x);
        }
        public static void State$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$State$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Protect$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION$Protect$VH();
        }
        public static  @C("DWORD") int Protect$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$Protect$VH().get(seg);
        }
        public static  @C("DWORD") int Protect$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$Protect$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Protect$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$Protect$VH().set(seg, x);
        }
        public static void Protect$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$Protect$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION$Type$VH();
        }
        public static  @C("DWORD") int Type$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$Type$VH().get(seg);
        }
        public static  @C("DWORD") int Type$get(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _MEMORY_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _MEMORY_BASIC_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _MEMORY_BASIC_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _MEMORY_BASIC_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _MEMORY_BASIC_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _MEMORY_BASIC_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _MEMORY_BASIC_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _MEMORY_BASIC_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _MEMORY_BASIC_INFORMATION")public static class MEMORY_BASIC_INFORMATION extends _MEMORY_BASIC_INFORMATION {

        /* package-private */ MEMORY_BASIC_INFORMATION() {}
    }

    @C("struct _MEMORY_BASIC_INFORMATION32")public static class _MEMORY_BASIC_INFORMATION32 {

        /* package-private */ _MEMORY_BASIC_INFORMATION32() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$struct$LAYOUT();
        }
        public static VarHandle BaseAddress$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$BaseAddress$VH();
        }
        public static  @C("DWORD") int BaseAddress$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$BaseAddress$VH().get(seg);
        }
        public static  @C("DWORD") int BaseAddress$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$BaseAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseAddress$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$BaseAddress$VH().set(seg, x);
        }
        public static void BaseAddress$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$BaseAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AllocationBase$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$AllocationBase$VH();
        }
        public static  @C("DWORD") int AllocationBase$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$AllocationBase$VH().get(seg);
        }
        public static  @C("DWORD") int AllocationBase$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$AllocationBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AllocationBase$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$AllocationBase$VH().set(seg, x);
        }
        public static void AllocationBase$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$AllocationBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AllocationProtect$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$AllocationProtect$VH();
        }
        public static  @C("DWORD") int AllocationProtect$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$AllocationProtect$VH().get(seg);
        }
        public static  @C("DWORD") int AllocationProtect$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$AllocationProtect$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AllocationProtect$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$AllocationProtect$VH().set(seg, x);
        }
        public static void AllocationProtect$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$AllocationProtect$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RegionSize$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$RegionSize$VH();
        }
        public static  @C("DWORD") int RegionSize$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$RegionSize$VH().get(seg);
        }
        public static  @C("DWORD") int RegionSize$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$RegionSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RegionSize$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$RegionSize$VH().set(seg, x);
        }
        public static void RegionSize$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$RegionSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle State$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$State$VH();
        }
        public static  @C("DWORD") int State$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$State$VH().get(seg);
        }
        public static  @C("DWORD") int State$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$State$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void State$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$State$VH().set(seg, x);
        }
        public static void State$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$State$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Protect$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$Protect$VH();
        }
        public static  @C("DWORD") int Protect$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$Protect$VH().get(seg);
        }
        public static  @C("DWORD") int Protect$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$Protect$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Protect$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$Protect$VH().set(seg, x);
        }
        public static void Protect$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$Protect$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$Type$VH();
        }
        public static  @C("DWORD") int Type$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$Type$VH().get(seg);
        }
        public static  @C("DWORD") int Type$get(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION32$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _MEMORY_BASIC_INFORMATION32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _MEMORY_BASIC_INFORMATION32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _MEMORY_BASIC_INFORMATION32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _MEMORY_BASIC_INFORMATION32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _MEMORY_BASIC_INFORMATION32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _MEMORY_BASIC_INFORMATION32")public static class MEMORY_BASIC_INFORMATION32 extends _MEMORY_BASIC_INFORMATION32 {

        /* package-private */ MEMORY_BASIC_INFORMATION32() {}
    }

    @C("struct _MEMORY_BASIC_INFORMATION64")public static class _MEMORY_BASIC_INFORMATION64 {

        /* package-private */ _MEMORY_BASIC_INFORMATION64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$struct$LAYOUT();
        }
        public static VarHandle BaseAddress$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$BaseAddress$VH();
        }
        public static  @C("ULONGLONG") long BaseAddress$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg) {
            return (long)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$BaseAddress$VH().get(seg);
        }
        public static  @C("ULONGLONG") long BaseAddress$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$BaseAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseAddress$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$BaseAddress$VH().set(seg, x);
        }
        public static void BaseAddress$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$BaseAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AllocationBase$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$AllocationBase$VH();
        }
        public static  @C("ULONGLONG") long AllocationBase$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg) {
            return (long)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$AllocationBase$VH().get(seg);
        }
        public static  @C("ULONGLONG") long AllocationBase$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$AllocationBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AllocationBase$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$AllocationBase$VH().set(seg, x);
        }
        public static void AllocationBase$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$AllocationBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AllocationProtect$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$AllocationProtect$VH();
        }
        public static  @C("DWORD") int AllocationProtect$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$AllocationProtect$VH().get(seg);
        }
        public static  @C("DWORD") int AllocationProtect$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$AllocationProtect$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AllocationProtect$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$AllocationProtect$VH().set(seg, x);
        }
        public static void AllocationProtect$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$AllocationProtect$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __alignment1$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$__alignment1$VH();
        }
        public static  @C("DWORD") int __alignment1$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$__alignment1$VH().get(seg);
        }
        public static  @C("DWORD") int __alignment1$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$__alignment1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __alignment1$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$__alignment1$VH().set(seg, x);
        }
        public static void __alignment1$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$__alignment1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RegionSize$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$RegionSize$VH();
        }
        public static  @C("ULONGLONG") long RegionSize$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg) {
            return (long)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$RegionSize$VH().get(seg);
        }
        public static  @C("ULONGLONG") long RegionSize$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$RegionSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RegionSize$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$RegionSize$VH().set(seg, x);
        }
        public static void RegionSize$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$RegionSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle State$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$State$VH();
        }
        public static  @C("DWORD") int State$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$State$VH().get(seg);
        }
        public static  @C("DWORD") int State$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$State$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void State$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$State$VH().set(seg, x);
        }
        public static void State$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$State$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Protect$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$Protect$VH();
        }
        public static  @C("DWORD") int Protect$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$Protect$VH().get(seg);
        }
        public static  @C("DWORD") int Protect$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$Protect$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Protect$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$Protect$VH().set(seg, x);
        }
        public static void Protect$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$Protect$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$Type$VH();
        }
        public static  @C("DWORD") int Type$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$Type$VH().get(seg);
        }
        public static  @C("DWORD") int Type$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle __alignment2$VH() {
            return winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$__alignment2$VH();
        }
        public static  @C("DWORD") int __alignment2$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$__alignment2$VH().get(seg);
        }
        public static  @C("DWORD") int __alignment2$get(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$__alignment2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void __alignment2$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$__alignment2$VH().set(seg, x);
        }
        public static void __alignment2$set(@C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._MEMORY_BASIC_INFORMATION64$__alignment2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _MEMORY_BASIC_INFORMATION64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _MEMORY_BASIC_INFORMATION64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _MEMORY_BASIC_INFORMATION64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _MEMORY_BASIC_INFORMATION64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _MEMORY_BASIC_INFORMATION64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _MEMORY_BASIC_INFORMATION64")public static class MEMORY_BASIC_INFORMATION64 extends _MEMORY_BASIC_INFORMATION64 {

        /* package-private */ MEMORY_BASIC_INFORMATION64() {}
    }

    @C("struct _CFG_CALL_TARGET_INFO")public static class _CFG_CALL_TARGET_INFO {

        /* package-private */ _CFG_CALL_TARGET_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._CFG_CALL_TARGET_INFO$struct$LAYOUT();
        }
        public static VarHandle Offset$VH() {
            return winnt_h$constants$6._CFG_CALL_TARGET_INFO$Offset$VH();
        }
        public static  @C("ULONG_PTR") long Offset$get(@C("struct _CFG_CALL_TARGET_INFO") MemorySegment seg) {
            return (long)winnt_h$constants$6._CFG_CALL_TARGET_INFO$Offset$VH().get(seg);
        }
        public static  @C("ULONG_PTR") long Offset$get(@C("struct _CFG_CALL_TARGET_INFO") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._CFG_CALL_TARGET_INFO$Offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Offset$set(@C("struct _CFG_CALL_TARGET_INFO") MemorySegment seg, @C("ULONG_PTR") long x) {
            winnt_h$constants$6._CFG_CALL_TARGET_INFO$Offset$VH().set(seg, x);
        }
        public static void Offset$set(@C("struct _CFG_CALL_TARGET_INFO") MemorySegment seg, long index, @C("ULONG_PTR") long x) {
            winnt_h$constants$6._CFG_CALL_TARGET_INFO$Offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$6._CFG_CALL_TARGET_INFO$Flags$VH();
        }
        public static  @C("ULONG_PTR") long Flags$get(@C("struct _CFG_CALL_TARGET_INFO") MemorySegment seg) {
            return (long)winnt_h$constants$6._CFG_CALL_TARGET_INFO$Flags$VH().get(seg);
        }
        public static  @C("ULONG_PTR") long Flags$get(@C("struct _CFG_CALL_TARGET_INFO") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._CFG_CALL_TARGET_INFO$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _CFG_CALL_TARGET_INFO") MemorySegment seg, @C("ULONG_PTR") long x) {
            winnt_h$constants$6._CFG_CALL_TARGET_INFO$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _CFG_CALL_TARGET_INFO") MemorySegment seg, long index, @C("ULONG_PTR") long x) {
            winnt_h$constants$6._CFG_CALL_TARGET_INFO$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _CFG_CALL_TARGET_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _CFG_CALL_TARGET_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _CFG_CALL_TARGET_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _CFG_CALL_TARGET_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _CFG_CALL_TARGET_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _CFG_CALL_TARGET_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _CFG_CALL_TARGET_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _CFG_CALL_TARGET_INFO")public static class CFG_CALL_TARGET_INFO extends _CFG_CALL_TARGET_INFO {

        /* package-private */ CFG_CALL_TARGET_INFO() {}
    }

    @C("struct _MEM_ADDRESS_REQUIREMENTS")public static class _MEM_ADDRESS_REQUIREMENTS {

        /* package-private */ _MEM_ADDRESS_REQUIREMENTS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT();
        }
        public static VarHandle LowestStartingAddress$VH() {
            return winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH();
        }
        public static  @C("PVOID") MemoryAddress LowestStartingAddress$get(@C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress LowestStartingAddress$get(@C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LowestStartingAddress$set(@C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH().set(seg, x);
        }
        public static void LowestStartingAddress$set(@C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HighestEndingAddress$VH() {
            return winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$VH();
        }
        public static  @C("PVOID") MemoryAddress HighestEndingAddress$get(@C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress HighestEndingAddress$get(@C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HighestEndingAddress$set(@C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$VH().set(seg, x);
        }
        public static void HighestEndingAddress$set(@C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$HighestEndingAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Alignment$VH() {
            return winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$Alignment$VH();
        }
        public static  @C("SIZE_T") long Alignment$get(@C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment seg) {
            return (long)winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$Alignment$VH().get(seg);
        }
        public static  @C("SIZE_T") long Alignment$get(@C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$Alignment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Alignment$set(@C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$Alignment$VH().set(seg, x);
        }
        public static void Alignment$set(@C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$6._MEM_ADDRESS_REQUIREMENTS$Alignment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _MEM_ADDRESS_REQUIREMENTS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _MEM_ADDRESS_REQUIREMENTS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _MEM_ADDRESS_REQUIREMENTS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _MEM_ADDRESS_REQUIREMENTS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _MEM_ADDRESS_REQUIREMENTS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _MEM_ADDRESS_REQUIREMENTS")public static class MEM_ADDRESS_REQUIREMENTS extends _MEM_ADDRESS_REQUIREMENTS {

        /* package-private */ MEM_ADDRESS_REQUIREMENTS() {}
    }

    @C("struct MEM_EXTENDED_PARAMETER")public static class MEM_EXTENDED_PARAMETER {

        /* package-private */ MEM_EXTENDED_PARAMETER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6.MEM_EXTENDED_PARAMETER$struct$LAYOUT();
        }
        public static VarHandle ULong64$VH() {
            return winnt_h$constants$6.MEM_EXTENDED_PARAMETER$ULong64$VH();
        }
        public static  @C("DWORD64") long ULong64$get(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg) {
            return (long)winnt_h$constants$6.MEM_EXTENDED_PARAMETER$ULong64$VH().get(seg);
        }
        public static  @C("DWORD64") long ULong64$get(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6.MEM_EXTENDED_PARAMETER$ULong64$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ULong64$set(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$6.MEM_EXTENDED_PARAMETER$ULong64$VH().set(seg, x);
        }
        public static void ULong64$set(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$6.MEM_EXTENDED_PARAMETER$ULong64$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Pointer$VH() {
            return winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Pointer$VH();
        }
        public static  @C("PVOID") MemoryAddress Pointer$get(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Pointer$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress Pointer$get(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Pointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Pointer$set(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Pointer$VH().set(seg, x);
        }
        public static void Pointer$set(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Pointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Size$VH();
        }
        public static  @C("SIZE_T") long Size$get(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg) {
            return (long)winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Size$VH().get(seg);
        }
        public static  @C("SIZE_T") long Size$get(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Handle$VH() {
            return winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Handle$VH();
        }
        public static  @C("HANDLE") MemoryAddress Handle$get(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Handle$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress Handle$get(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Handle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Handle$set(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Handle$VH().set(seg, x);
        }
        public static void Handle$set(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$6.MEM_EXTENDED_PARAMETER$Handle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ULong$VH() {
            return winnt_h$constants$6.MEM_EXTENDED_PARAMETER$ULong$VH();
        }
        public static  @C("DWORD") int ULong$get(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg) {
            return (int)winnt_h$constants$6.MEM_EXTENDED_PARAMETER$ULong$VH().get(seg);
        }
        public static  @C("DWORD") int ULong$get(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6.MEM_EXTENDED_PARAMETER$ULong$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ULong$set(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6.MEM_EXTENDED_PARAMETER$ULong$VH().set(seg, x);
        }
        public static void ULong$set(@C("struct MEM_EXTENDED_PARAMETER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6.MEM_EXTENDED_PARAMETER$ULong$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct MEM_EXTENDED_PARAMETER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct MEM_EXTENDED_PARAMETER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct MEM_EXTENDED_PARAMETER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct MEM_EXTENDED_PARAMETER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct MEM_EXTENDED_PARAMETER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct MEM_EXTENDED_PARAMETER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct MEM_EXTENDED_PARAMETER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ENCLAVE_CREATE_INFO_SGX")public static class _ENCLAVE_CREATE_INFO_SGX {

        /* package-private */ _ENCLAVE_CREATE_INFO_SGX() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._ENCLAVE_CREATE_INFO_SGX$struct$LAYOUT();
        }
        public static MemorySegment Secs$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4096));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ENCLAVE_CREATE_INFO_SGX") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ENCLAVE_CREATE_INFO_SGX") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ENCLAVE_CREATE_INFO_SGX[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ENCLAVE_CREATE_INFO_SGX[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ENCLAVE_CREATE_INFO_SGX*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ENCLAVE_CREATE_INFO_SGX*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ENCLAVE_CREATE_INFO_SGX") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ENCLAVE_CREATE_INFO_SGX")public static class ENCLAVE_CREATE_INFO_SGX extends _ENCLAVE_CREATE_INFO_SGX {

        /* package-private */ ENCLAVE_CREATE_INFO_SGX() {}
    }

    @C("struct _ENCLAVE_INIT_INFO_SGX")public static class _ENCLAVE_INIT_INFO_SGX {

        /* package-private */ _ENCLAVE_INIT_INFO_SGX() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._ENCLAVE_INIT_INFO_SGX$struct$LAYOUT();
        }
        public static MemorySegment SigStruct$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 1808));
        }
        public static MemorySegment Reserved1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1808, 240));
        }
        public static MemorySegment EInitToken$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2048, 304));
        }
        public static MemorySegment Reserved2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2352, 1744));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ENCLAVE_INIT_INFO_SGX") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ENCLAVE_INIT_INFO_SGX") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ENCLAVE_INIT_INFO_SGX[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ENCLAVE_INIT_INFO_SGX[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ENCLAVE_INIT_INFO_SGX*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ENCLAVE_INIT_INFO_SGX*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ENCLAVE_INIT_INFO_SGX") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ENCLAVE_INIT_INFO_SGX")public static class ENCLAVE_INIT_INFO_SGX extends _ENCLAVE_INIT_INFO_SGX {

        /* package-private */ ENCLAVE_INIT_INFO_SGX() {}
    }

    @C("struct _ENCLAVE_CREATE_INFO_VBS")public static class _ENCLAVE_CREATE_INFO_VBS {

        /* package-private */ _ENCLAVE_CREATE_INFO_VBS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._ENCLAVE_CREATE_INFO_VBS$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$6._ENCLAVE_CREATE_INFO_VBS$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _ENCLAVE_CREATE_INFO_VBS") MemorySegment seg) {
            return (int)winnt_h$constants$6._ENCLAVE_CREATE_INFO_VBS$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _ENCLAVE_CREATE_INFO_VBS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._ENCLAVE_CREATE_INFO_VBS$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _ENCLAVE_CREATE_INFO_VBS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_CREATE_INFO_VBS$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _ENCLAVE_CREATE_INFO_VBS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_CREATE_INFO_VBS$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment OwnerID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 32));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ENCLAVE_CREATE_INFO_VBS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ENCLAVE_CREATE_INFO_VBS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ENCLAVE_CREATE_INFO_VBS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ENCLAVE_CREATE_INFO_VBS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ENCLAVE_CREATE_INFO_VBS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ENCLAVE_CREATE_INFO_VBS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ENCLAVE_CREATE_INFO_VBS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ENCLAVE_CREATE_INFO_VBS")public static class ENCLAVE_CREATE_INFO_VBS extends _ENCLAVE_CREATE_INFO_VBS {

        /* package-private */ ENCLAVE_CREATE_INFO_VBS() {}
    }

    @C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC")public static class _ENCLAVE_CREATE_INFO_VBS_BASIC {

        /* package-private */ _ENCLAVE_CREATE_INFO_VBS_BASIC() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._ENCLAVE_CREATE_INFO_VBS_BASIC$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$6._ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC") MemorySegment seg) {
            return (int)winnt_h$constants$6._ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_CREATE_INFO_VBS_BASIC$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment OwnerID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 32));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ENCLAVE_CREATE_INFO_VBS_BASIC")public static class ENCLAVE_CREATE_INFO_VBS_BASIC extends _ENCLAVE_CREATE_INFO_VBS_BASIC {

        /* package-private */ ENCLAVE_CREATE_INFO_VBS_BASIC() {}
    }

    @C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC")public static class _ENCLAVE_LOAD_DATA_VBS_BASIC {

        /* package-private */ _ENCLAVE_LOAD_DATA_VBS_BASIC() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._ENCLAVE_LOAD_DATA_VBS_BASIC$struct$LAYOUT();
        }
        public static VarHandle PageType$VH() {
            return winnt_h$constants$6._ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$VH();
        }
        public static  @C("DWORD") int PageType$get(@C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC") MemorySegment seg) {
            return (int)winnt_h$constants$6._ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$VH().get(seg);
        }
        public static  @C("DWORD") int PageType$get(@C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PageType$set(@C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$VH().set(seg, x);
        }
        public static void PageType$set(@C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_LOAD_DATA_VBS_BASIC$PageType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ENCLAVE_LOAD_DATA_VBS_BASIC")public static class ENCLAVE_LOAD_DATA_VBS_BASIC extends _ENCLAVE_LOAD_DATA_VBS_BASIC {

        /* package-private */ ENCLAVE_LOAD_DATA_VBS_BASIC() {}
    }

    @C("struct _ENCLAVE_INIT_INFO_VBS_BASIC")public static class _ENCLAVE_INIT_INFO_VBS_BASIC {

        /* package-private */ _ENCLAVE_INIT_INFO_VBS_BASIC() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$struct$LAYOUT();
        }
        public static MemorySegment FamilyId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment ImageId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 16));
        }
        public static VarHandle EnclaveSize$VH() {
            return winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$VH();
        }
        public static  @C("ULONGLONG") long EnclaveSize$get(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg) {
            return (long)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$VH().get(seg);
        }
        public static  @C("ULONGLONG") long EnclaveSize$get(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EnclaveSize$set(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$VH().set(seg, x);
        }
        public static void EnclaveSize$set(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EnclaveSvn$VH() {
            return winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$VH();
        }
        public static  @C("DWORD") int EnclaveSvn$get(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg) {
            return (int)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$VH().get(seg);
        }
        public static  @C("DWORD") int EnclaveSvn$get(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EnclaveSvn$set(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$VH().set(seg, x);
        }
        public static void EnclaveSvn$set(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$EnclaveSvn$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$VH();
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg) {
            return (int)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SignatureInfoHandle$VH() {
            return winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$VH();
        }
        public static  @C("HANDLE") MemoryAddress SignatureInfoHandle$get(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress SignatureInfoHandle$get(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SignatureInfoHandle$set(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$VH().set(seg, x);
        }
        public static void SignatureInfoHandle$set(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$SignatureInfoHandle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Unused$VH() {
            return winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$Unused$VH();
        }
        public static  @C("ULONGLONG") long Unused$get(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg) {
            return (long)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$Unused$VH().get(seg);
        }
        public static  @C("ULONGLONG") long Unused$get(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$Unused$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Unused$set(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$Unused$VH().set(seg, x);
        }
        public static void Unused$set(@C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS_BASIC$Unused$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ENCLAVE_INIT_INFO_VBS_BASIC[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ENCLAVE_INIT_INFO_VBS_BASIC[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ENCLAVE_INIT_INFO_VBS_BASIC*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ENCLAVE_INIT_INFO_VBS_BASIC*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ENCLAVE_INIT_INFO_VBS_BASIC") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ENCLAVE_INIT_INFO_VBS_BASIC")public static class ENCLAVE_INIT_INFO_VBS_BASIC extends _ENCLAVE_INIT_INFO_VBS_BASIC {

        /* package-private */ ENCLAVE_INIT_INFO_VBS_BASIC() {}
    }

    @C("struct _ENCLAVE_INIT_INFO_VBS")public static class _ENCLAVE_INIT_INFO_VBS {

        /* package-private */ _ENCLAVE_INIT_INFO_VBS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS$struct$LAYOUT();
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS$Length$VH();
        }
        public static  @C("DWORD") int Length$get(@C("struct _ENCLAVE_INIT_INFO_VBS") MemorySegment seg) {
            return (int)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS$Length$VH().get(seg);
        }
        public static  @C("DWORD") int Length$get(@C("struct _ENCLAVE_INIT_INFO_VBS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _ENCLAVE_INIT_INFO_VBS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _ENCLAVE_INIT_INFO_VBS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ThreadCount$VH() {
            return winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS$ThreadCount$VH();
        }
        public static  @C("DWORD") int ThreadCount$get(@C("struct _ENCLAVE_INIT_INFO_VBS") MemorySegment seg) {
            return (int)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS$ThreadCount$VH().get(seg);
        }
        public static  @C("DWORD") int ThreadCount$get(@C("struct _ENCLAVE_INIT_INFO_VBS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS$ThreadCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ThreadCount$set(@C("struct _ENCLAVE_INIT_INFO_VBS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS$ThreadCount$VH().set(seg, x);
        }
        public static void ThreadCount$set(@C("struct _ENCLAVE_INIT_INFO_VBS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._ENCLAVE_INIT_INFO_VBS$ThreadCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ENCLAVE_INIT_INFO_VBS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ENCLAVE_INIT_INFO_VBS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ENCLAVE_INIT_INFO_VBS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ENCLAVE_INIT_INFO_VBS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ENCLAVE_INIT_INFO_VBS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ENCLAVE_INIT_INFO_VBS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ENCLAVE_INIT_INFO_VBS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ENCLAVE_INIT_INFO_VBS")public static class ENCLAVE_INIT_INFO_VBS extends _ENCLAVE_INIT_INFO_VBS {

        /* package-private */ ENCLAVE_INIT_INFO_VBS() {}
    }

    @C("struct _FILE_ID_128")public static class _FILE_ID_128 {

        /* package-private */ _FILE_ID_128() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._FILE_ID_128$struct$LAYOUT();
        }
        public static MemorySegment Identifier$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_ID_128") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_ID_128") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_ID_128[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_ID_128[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_ID_128*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_ID_128*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_ID_128") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_ID_128")public static class FILE_ID_128 extends _FILE_ID_128 {

        /* package-private */ FILE_ID_128() {}
    }

    @C("struct _FILE_NOTIFY_INFORMATION")public static class _FILE_NOTIFY_INFORMATION {

        /* package-private */ _FILE_NOTIFY_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._FILE_NOTIFY_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle NextEntryOffset$VH() {
            return winnt_h$constants$6._FILE_NOTIFY_INFORMATION$NextEntryOffset$VH();
        }
        public static  @C("DWORD") int NextEntryOffset$get(@C("struct _FILE_NOTIFY_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_INFORMATION$NextEntryOffset$VH().get(seg);
        }
        public static  @C("DWORD") int NextEntryOffset$get(@C("struct _FILE_NOTIFY_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_INFORMATION$NextEntryOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NextEntryOffset$set(@C("struct _FILE_NOTIFY_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_INFORMATION$NextEntryOffset$VH().set(seg, x);
        }
        public static void NextEntryOffset$set(@C("struct _FILE_NOTIFY_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_INFORMATION$NextEntryOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Action$VH() {
            return winnt_h$constants$6._FILE_NOTIFY_INFORMATION$Action$VH();
        }
        public static  @C("DWORD") int Action$get(@C("struct _FILE_NOTIFY_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_INFORMATION$Action$VH().get(seg);
        }
        public static  @C("DWORD") int Action$get(@C("struct _FILE_NOTIFY_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_INFORMATION$Action$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Action$set(@C("struct _FILE_NOTIFY_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_INFORMATION$Action$VH().set(seg, x);
        }
        public static void Action$set(@C("struct _FILE_NOTIFY_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_INFORMATION$Action$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileNameLength$VH() {
            return winnt_h$constants$6._FILE_NOTIFY_INFORMATION$FileNameLength$VH();
        }
        public static  @C("DWORD") int FileNameLength$get(@C("struct _FILE_NOTIFY_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_INFORMATION$FileNameLength$VH().get(seg);
        }
        public static  @C("DWORD") int FileNameLength$get(@C("struct _FILE_NOTIFY_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_INFORMATION$FileNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileNameLength$set(@C("struct _FILE_NOTIFY_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_INFORMATION$FileNameLength$VH().set(seg, x);
        }
        public static void FileNameLength$set(@C("struct _FILE_NOTIFY_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_INFORMATION$FileNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_NOTIFY_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_NOTIFY_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_NOTIFY_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_NOTIFY_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_NOTIFY_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_NOTIFY_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_NOTIFY_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_NOTIFY_INFORMATION")public static class FILE_NOTIFY_INFORMATION extends _FILE_NOTIFY_INFORMATION {

        /* package-private */ FILE_NOTIFY_INFORMATION() {}
    }

    @C("struct _FILE_NOTIFY_EXTENDED_INFORMATION")public static class _FILE_NOTIFY_EXTENDED_INFORMATION {

        /* package-private */ _FILE_NOTIFY_EXTENDED_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle NextEntryOffset$VH() {
            return winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$VH();
        }
        public static  @C("DWORD") int NextEntryOffset$get(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$VH().get(seg);
        }
        public static  @C("DWORD") int NextEntryOffset$get(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NextEntryOffset$set(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$VH().set(seg, x);
        }
        public static void NextEntryOffset$set(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$NextEntryOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Action$VH() {
            return winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$Action$VH();
        }
        public static  @C("DWORD") int Action$get(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$Action$VH().get(seg);
        }
        public static  @C("DWORD") int Action$get(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$Action$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Action$set(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$Action$VH().set(seg, x);
        }
        public static void Action$set(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$Action$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment CreationTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment LastModificationTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static MemorySegment LastChangeTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
        }
        public static MemorySegment LastAccessTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
        }
        public static MemorySegment AllocatedLength$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static MemorySegment FileSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
        }
        public static VarHandle FileAttributes$VH() {
            return winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$VH();
        }
        public static  @C("DWORD") int FileAttributes$get(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$VH().get(seg);
        }
        public static  @C("DWORD") int FileAttributes$get(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileAttributes$set(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$VH().set(seg, x);
        }
        public static void FileAttributes$set(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$FileAttributes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReparsePointTag$VH() {
            return winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$VH();
        }
        public static  @C("DWORD") int ReparsePointTag$get(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$VH().get(seg);
        }
        public static  @C("DWORD") int ReparsePointTag$get(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReparsePointTag$set(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$VH().set(seg, x);
        }
        public static void ReparsePointTag$set(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$ReparsePointTag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(64, 8));
        }
        public static MemorySegment ParentFileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 8));
        }
        public static VarHandle FileNameLength$VH() {
            return winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$VH();
        }
        public static  @C("DWORD") int FileNameLength$get(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$VH().get(seg);
        }
        public static  @C("DWORD") int FileNameLength$get(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileNameLength$set(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$VH().set(seg, x);
        }
        public static void FileNameLength$set(@C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._FILE_NOTIFY_EXTENDED_INFORMATION$FileNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(84, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FILE_NOTIFY_EXTENDED_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FILE_NOTIFY_EXTENDED_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FILE_NOTIFY_EXTENDED_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FILE_NOTIFY_EXTENDED_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FILE_NOTIFY_EXTENDED_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FILE_NOTIFY_EXTENDED_INFORMATION")public static class FILE_NOTIFY_EXTENDED_INFORMATION extends _FILE_NOTIFY_EXTENDED_INFORMATION {

        /* package-private */ FILE_NOTIFY_EXTENDED_INFORMATION() {}
    }

    @C("union _FILE_SEGMENT_ELEMENT")public static class _FILE_SEGMENT_ELEMENT {

        /* package-private */ _FILE_SEGMENT_ELEMENT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._FILE_SEGMENT_ELEMENT$union$LAYOUT();
        }
        public static VarHandle Buffer$VH() {
            return winnt_h$constants$6._FILE_SEGMENT_ELEMENT$Buffer$VH();
        }
        public static  @C("void*") MemoryAddress Buffer$get(@C("union _FILE_SEGMENT_ELEMENT") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._FILE_SEGMENT_ELEMENT$Buffer$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress Buffer$get(@C("union _FILE_SEGMENT_ELEMENT") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._FILE_SEGMENT_ELEMENT$Buffer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Buffer$set(@C("union _FILE_SEGMENT_ELEMENT") MemorySegment seg, @C("void*") MemoryAddress x) {
            winnt_h$constants$6._FILE_SEGMENT_ELEMENT$Buffer$VH().set(seg, x);
        }
        public static void Buffer$set(@C("union _FILE_SEGMENT_ELEMENT") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            winnt_h$constants$6._FILE_SEGMENT_ELEMENT$Buffer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Alignment$VH() {
            return winnt_h$constants$6._FILE_SEGMENT_ELEMENT$Alignment$VH();
        }
        public static  @C("ULONGLONG") long Alignment$get(@C("union _FILE_SEGMENT_ELEMENT") MemorySegment seg) {
            return (long)winnt_h$constants$6._FILE_SEGMENT_ELEMENT$Alignment$VH().get(seg);
        }
        public static  @C("ULONGLONG") long Alignment$get(@C("union _FILE_SEGMENT_ELEMENT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._FILE_SEGMENT_ELEMENT$Alignment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Alignment$set(@C("union _FILE_SEGMENT_ELEMENT") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._FILE_SEGMENT_ELEMENT$Alignment$VH().set(seg, x);
        }
        public static void Alignment$set(@C("union _FILE_SEGMENT_ELEMENT") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._FILE_SEGMENT_ELEMENT$Alignment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union _FILE_SEGMENT_ELEMENT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union _FILE_SEGMENT_ELEMENT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union _FILE_SEGMENT_ELEMENT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union _FILE_SEGMENT_ELEMENT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union _FILE_SEGMENT_ELEMENT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union _FILE_SEGMENT_ELEMENT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union _FILE_SEGMENT_ELEMENT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("union _FILE_SEGMENT_ELEMENT")public static class FILE_SEGMENT_ELEMENT extends _FILE_SEGMENT_ELEMENT {

        /* package-private */ FILE_SEGMENT_ELEMENT() {}
    }

    @C("struct _REPARSE_GUID_DATA_BUFFER")public static class _REPARSE_GUID_DATA_BUFFER {

        /* package-private */ _REPARSE_GUID_DATA_BUFFER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$struct$LAYOUT();
        }
        public static VarHandle ReparseTag$VH() {
            return winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$ReparseTag$VH();
        }
        public static  @C("DWORD") int ReparseTag$get(@C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment seg) {
            return (int)winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$ReparseTag$VH().get(seg);
        }
        public static  @C("DWORD") int ReparseTag$get(@C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$ReparseTag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReparseTag$set(@C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$ReparseTag$VH().set(seg, x);
        }
        public static void ReparseTag$set(@C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$ReparseTag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReparseDataLength$VH() {
            return winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$ReparseDataLength$VH();
        }
        public static  @C("WORD") short ReparseDataLength$get(@C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment seg) {
            return (short)winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$ReparseDataLength$VH().get(seg);
        }
        public static  @C("WORD") short ReparseDataLength$get(@C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$ReparseDataLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReparseDataLength$set(@C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$ReparseDataLength$VH().set(seg, x);
        }
        public static void ReparseDataLength$set(@C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$ReparseDataLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$Reserved$VH();
        }
        public static  @C("WORD") short Reserved$get(@C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment seg) {
            return (short)winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$Reserved$VH().get(seg);
        }
        public static  @C("WORD") short Reserved$get(@C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ReparseGuid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 16));
        }
        @C("struct ")public static class GenericReparseBuffer {

            /* package-private */ GenericReparseBuffer() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$6._REPARSE_GUID_DATA_BUFFER$GenericReparseBuffer$struct$LAYOUT();
            }
            public static MemorySegment DataBuffer$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 1));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment GenericReparseBuffer$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 1));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _REPARSE_GUID_DATA_BUFFER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _REPARSE_GUID_DATA_BUFFER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _REPARSE_GUID_DATA_BUFFER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _REPARSE_GUID_DATA_BUFFER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _REPARSE_GUID_DATA_BUFFER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _REPARSE_GUID_DATA_BUFFER")public static class REPARSE_GUID_DATA_BUFFER extends _REPARSE_GUID_DATA_BUFFER {

        /* package-private */ REPARSE_GUID_DATA_BUFFER() {}
    }

    @C("struct _SCRUB_DATA_INPUT")public static class _SCRUB_DATA_INPUT {

        /* package-private */ _SCRUB_DATA_INPUT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._SCRUB_DATA_INPUT$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$6._SCRUB_DATA_INPUT$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _SCRUB_DATA_INPUT") MemorySegment seg) {
            return (int)winnt_h$constants$6._SCRUB_DATA_INPUT$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _SCRUB_DATA_INPUT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SCRUB_DATA_INPUT$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _SCRUB_DATA_INPUT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._SCRUB_DATA_INPUT$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _SCRUB_DATA_INPUT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._SCRUB_DATA_INPUT$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$6._SCRUB_DATA_INPUT$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SCRUB_DATA_INPUT") MemorySegment seg) {
            return (int)winnt_h$constants$6._SCRUB_DATA_INPUT$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SCRUB_DATA_INPUT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SCRUB_DATA_INPUT$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _SCRUB_DATA_INPUT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._SCRUB_DATA_INPUT$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _SCRUB_DATA_INPUT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._SCRUB_DATA_INPUT$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaximumIos$VH() {
            return winnt_h$constants$6._SCRUB_DATA_INPUT$MaximumIos$VH();
        }
        public static  @C("DWORD") int MaximumIos$get(@C("struct _SCRUB_DATA_INPUT") MemorySegment seg) {
            return (int)winnt_h$constants$6._SCRUB_DATA_INPUT$MaximumIos$VH().get(seg);
        }
        public static  @C("DWORD") int MaximumIos$get(@C("struct _SCRUB_DATA_INPUT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SCRUB_DATA_INPUT$MaximumIos$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumIos$set(@C("struct _SCRUB_DATA_INPUT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._SCRUB_DATA_INPUT$MaximumIos$VH().set(seg, x);
        }
        public static void MaximumIos$set(@C("struct _SCRUB_DATA_INPUT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._SCRUB_DATA_INPUT$MaximumIos$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ObjectId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 16));
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 100));
        }
        public static MemorySegment ResumeContext$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(128, 816));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SCRUB_DATA_INPUT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SCRUB_DATA_INPUT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SCRUB_DATA_INPUT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SCRUB_DATA_INPUT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SCRUB_DATA_INPUT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SCRUB_DATA_INPUT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SCRUB_DATA_INPUT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SCRUB_DATA_INPUT")public static class SCRUB_DATA_INPUT extends _SCRUB_DATA_INPUT {

        /* package-private */ SCRUB_DATA_INPUT() {}
    }

    @C("struct _SCRUB_PARITY_EXTENT")public static class _SCRUB_PARITY_EXTENT {

        /* package-private */ _SCRUB_PARITY_EXTENT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._SCRUB_PARITY_EXTENT$struct$LAYOUT();
        }
        public static VarHandle Offset$VH() {
            return winnt_h$constants$6._SCRUB_PARITY_EXTENT$Offset$VH();
        }
        public static  @C("LONGLONG") long Offset$get(@C("struct _SCRUB_PARITY_EXTENT") MemorySegment seg) {
            return (long)winnt_h$constants$6._SCRUB_PARITY_EXTENT$Offset$VH().get(seg);
        }
        public static  @C("LONGLONG") long Offset$get(@C("struct _SCRUB_PARITY_EXTENT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SCRUB_PARITY_EXTENT$Offset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Offset$set(@C("struct _SCRUB_PARITY_EXTENT") MemorySegment seg, @C("LONGLONG") long x) {
            winnt_h$constants$6._SCRUB_PARITY_EXTENT$Offset$VH().set(seg, x);
        }
        public static void Offset$set(@C("struct _SCRUB_PARITY_EXTENT") MemorySegment seg, long index, @C("LONGLONG") long x) {
            winnt_h$constants$6._SCRUB_PARITY_EXTENT$Offset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$6._SCRUB_PARITY_EXTENT$Length$VH();
        }
        public static  @C("ULONGLONG") long Length$get(@C("struct _SCRUB_PARITY_EXTENT") MemorySegment seg) {
            return (long)winnt_h$constants$6._SCRUB_PARITY_EXTENT$Length$VH().get(seg);
        }
        public static  @C("ULONGLONG") long Length$get(@C("struct _SCRUB_PARITY_EXTENT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SCRUB_PARITY_EXTENT$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _SCRUB_PARITY_EXTENT") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_PARITY_EXTENT$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _SCRUB_PARITY_EXTENT") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_PARITY_EXTENT$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SCRUB_PARITY_EXTENT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SCRUB_PARITY_EXTENT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SCRUB_PARITY_EXTENT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SCRUB_PARITY_EXTENT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SCRUB_PARITY_EXTENT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SCRUB_PARITY_EXTENT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SCRUB_PARITY_EXTENT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SCRUB_PARITY_EXTENT")public static class SCRUB_PARITY_EXTENT extends _SCRUB_PARITY_EXTENT {

        /* package-private */ SCRUB_PARITY_EXTENT() {}
    }

    @C("struct _SCRUB_PARITY_EXTENT_DATA")public static class _SCRUB_PARITY_EXTENT_DATA {

        /* package-private */ _SCRUB_PARITY_EXTENT_DATA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$Size$VH();
        }
        public static  @C("WORD") short Size$get(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg) {
            return (short)winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$Size$VH().get(seg);
        }
        public static  @C("WORD") short Size$get(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$Flags$VH();
        }
        public static  @C("WORD") short Flags$get(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg) {
            return (short)winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$Flags$VH().get(seg);
        }
        public static  @C("WORD") short Flags$get(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfParityExtents$VH() {
            return winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$NumberOfParityExtents$VH();
        }
        public static  @C("WORD") short NumberOfParityExtents$get(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg) {
            return (short)winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$NumberOfParityExtents$VH().get(seg);
        }
        public static  @C("WORD") short NumberOfParityExtents$get(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$NumberOfParityExtents$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfParityExtents$set(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$NumberOfParityExtents$VH().set(seg, x);
        }
        public static void NumberOfParityExtents$set(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$NumberOfParityExtents$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaximumNumberOfParityExtents$VH() {
            return winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$MaximumNumberOfParityExtents$VH();
        }
        public static  @C("WORD") short MaximumNumberOfParityExtents$get(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg) {
            return (short)winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$MaximumNumberOfParityExtents$VH().get(seg);
        }
        public static  @C("WORD") short MaximumNumberOfParityExtents$get(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$MaximumNumberOfParityExtents$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumNumberOfParityExtents$set(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$MaximumNumberOfParityExtents$VH().set(seg, x);
        }
        public static void MaximumNumberOfParityExtents$set(@C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._SCRUB_PARITY_EXTENT_DATA$MaximumNumberOfParityExtents$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ParityExtents$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SCRUB_PARITY_EXTENT_DATA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SCRUB_PARITY_EXTENT_DATA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SCRUB_PARITY_EXTENT_DATA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SCRUB_PARITY_EXTENT_DATA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SCRUB_PARITY_EXTENT_DATA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SCRUB_PARITY_EXTENT_DATA")public static class SCRUB_PARITY_EXTENT_DATA extends _SCRUB_PARITY_EXTENT_DATA {

        /* package-private */ SCRUB_PARITY_EXTENT_DATA() {}
    }

    @C("struct _SCRUB_DATA_OUTPUT")public static class _SCRUB_DATA_OUTPUT {

        /* package-private */ _SCRUB_DATA_OUTPUT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (int)winnt_h$constants$6._SCRUB_DATA_OUTPUT$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SCRUB_DATA_OUTPUT$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (int)winnt_h$constants$6._SCRUB_DATA_OUTPUT$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SCRUB_DATA_OUTPUT$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Status$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$Status$VH();
        }
        public static  @C("DWORD") int Status$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (int)winnt_h$constants$6._SCRUB_DATA_OUTPUT$Status$VH().get(seg);
        }
        public static  @C("DWORD") int Status$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SCRUB_DATA_OUTPUT$Status$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Status$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$Status$VH().set(seg, x);
        }
        public static void Status$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$Status$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ErrorFileOffset$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$ErrorFileOffset$VH();
        }
        public static  @C("ULONGLONG") long ErrorFileOffset$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$ErrorFileOffset$VH().get(seg);
        }
        public static  @C("ULONGLONG") long ErrorFileOffset$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$ErrorFileOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ErrorFileOffset$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$ErrorFileOffset$VH().set(seg, x);
        }
        public static void ErrorFileOffset$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$ErrorFileOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ErrorLength$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$ErrorLength$VH();
        }
        public static  @C("ULONGLONG") long ErrorLength$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$ErrorLength$VH().get(seg);
        }
        public static  @C("ULONGLONG") long ErrorLength$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$ErrorLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ErrorLength$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$ErrorLength$VH().set(seg, x);
        }
        public static void ErrorLength$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$ErrorLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfBytesRepaired$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfBytesRepaired$VH();
        }
        public static  @C("ULONGLONG") long NumberOfBytesRepaired$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfBytesRepaired$VH().get(seg);
        }
        public static  @C("ULONGLONG") long NumberOfBytesRepaired$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfBytesRepaired$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfBytesRepaired$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfBytesRepaired$VH().set(seg, x);
        }
        public static void NumberOfBytesRepaired$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfBytesRepaired$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfBytesFailed$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfBytesFailed$VH();
        }
        public static  @C("ULONGLONG") long NumberOfBytesFailed$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfBytesFailed$VH().get(seg);
        }
        public static  @C("ULONGLONG") long NumberOfBytesFailed$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfBytesFailed$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfBytesFailed$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfBytesFailed$VH().set(seg, x);
        }
        public static void NumberOfBytesFailed$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfBytesFailed$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle InternalFileReference$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$InternalFileReference$VH();
        }
        public static  @C("ULONGLONG") long InternalFileReference$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$InternalFileReference$VH().get(seg);
        }
        public static  @C("ULONGLONG") long InternalFileReference$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$InternalFileReference$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void InternalFileReference$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$InternalFileReference$VH().set(seg, x);
        }
        public static void InternalFileReference$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$InternalFileReference$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ResumeContextLength$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$ResumeContextLength$VH();
        }
        public static  @C("WORD") short ResumeContextLength$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (short)winnt_h$constants$6._SCRUB_DATA_OUTPUT$ResumeContextLength$VH().get(seg);
        }
        public static  @C("WORD") short ResumeContextLength$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._SCRUB_DATA_OUTPUT$ResumeContextLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ResumeContextLength$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$ResumeContextLength$VH().set(seg, x);
        }
        public static void ResumeContextLength$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$ResumeContextLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ParityExtentDataOffset$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$ParityExtentDataOffset$VH();
        }
        public static  @C("WORD") short ParityExtentDataOffset$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (short)winnt_h$constants$6._SCRUB_DATA_OUTPUT$ParityExtentDataOffset$VH().get(seg);
        }
        public static  @C("WORD") short ParityExtentDataOffset$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (short)winnt_h$constants$6._SCRUB_DATA_OUTPUT$ParityExtentDataOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ParityExtentDataOffset$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$ParityExtentDataOffset$VH().set(seg, x);
        }
        public static void ParityExtentDataOffset$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$ParityExtentDataOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(60, 36));
        }
        public static VarHandle NumberOfMetadataBytesProcessed$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfMetadataBytesProcessed$VH();
        }
        public static  @C("ULONGLONG") long NumberOfMetadataBytesProcessed$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfMetadataBytesProcessed$VH().get(seg);
        }
        public static  @C("ULONGLONG") long NumberOfMetadataBytesProcessed$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfMetadataBytesProcessed$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfMetadataBytesProcessed$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfMetadataBytesProcessed$VH().set(seg, x);
        }
        public static void NumberOfMetadataBytesProcessed$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfMetadataBytesProcessed$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfDataBytesProcessed$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfDataBytesProcessed$VH();
        }
        public static  @C("ULONGLONG") long NumberOfDataBytesProcessed$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfDataBytesProcessed$VH().get(seg);
        }
        public static  @C("ULONGLONG") long NumberOfDataBytesProcessed$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfDataBytesProcessed$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfDataBytesProcessed$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfDataBytesProcessed$VH().set(seg, x);
        }
        public static void NumberOfDataBytesProcessed$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$NumberOfDataBytesProcessed$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TotalNumberOfMetadataBytesInUse$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$TotalNumberOfMetadataBytesInUse$VH();
        }
        public static  @C("ULONGLONG") long TotalNumberOfMetadataBytesInUse$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$TotalNumberOfMetadataBytesInUse$VH().get(seg);
        }
        public static  @C("ULONGLONG") long TotalNumberOfMetadataBytesInUse$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$TotalNumberOfMetadataBytesInUse$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalNumberOfMetadataBytesInUse$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$TotalNumberOfMetadataBytesInUse$VH().set(seg, x);
        }
        public static void TotalNumberOfMetadataBytesInUse$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$TotalNumberOfMetadataBytesInUse$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TotalNumberOfDataBytesInUse$VH() {
            return winnt_h$constants$6._SCRUB_DATA_OUTPUT$TotalNumberOfDataBytesInUse$VH();
        }
        public static  @C("ULONGLONG") long TotalNumberOfDataBytesInUse$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$TotalNumberOfDataBytesInUse$VH().get(seg);
        }
        public static  @C("ULONGLONG") long TotalNumberOfDataBytesInUse$get(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SCRUB_DATA_OUTPUT$TotalNumberOfDataBytesInUse$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalNumberOfDataBytesInUse$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$TotalNumberOfDataBytesInUse$VH().set(seg, x);
        }
        public static void TotalNumberOfDataBytesInUse$set(@C("struct _SCRUB_DATA_OUTPUT") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._SCRUB_DATA_OUTPUT$TotalNumberOfDataBytesInUse$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ResumeContext$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(128, 816));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SCRUB_DATA_OUTPUT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SCRUB_DATA_OUTPUT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SCRUB_DATA_OUTPUT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SCRUB_DATA_OUTPUT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SCRUB_DATA_OUTPUT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SCRUB_DATA_OUTPUT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SCRUB_DATA_OUTPUT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SCRUB_DATA_OUTPUT")public static class SCRUB_DATA_OUTPUT extends _SCRUB_DATA_OUTPUT {

        /* package-private */ SCRUB_DATA_OUTPUT() {}
    }

    @C("struct _SHARED_VIRTUAL_DISK_SUPPORT")public static class _SHARED_VIRTUAL_DISK_SUPPORT {

        /* package-private */ _SHARED_VIRTUAL_DISK_SUPPORT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._SHARED_VIRTUAL_DISK_SUPPORT$struct$LAYOUT();
        }
        public static VarHandle SharedVirtualDiskSupport$VH() {
            return winnt_h$constants$6._SHARED_VIRTUAL_DISK_SUPPORT$SharedVirtualDiskSupport$VH();
        }
        public static  @C("SharedVirtualDiskSupportType") int SharedVirtualDiskSupport$get(@C("struct _SHARED_VIRTUAL_DISK_SUPPORT") MemorySegment seg) {
            return (int)winnt_h$constants$6._SHARED_VIRTUAL_DISK_SUPPORT$SharedVirtualDiskSupport$VH().get(seg);
        }
        public static  @C("SharedVirtualDiskSupportType") int SharedVirtualDiskSupport$get(@C("struct _SHARED_VIRTUAL_DISK_SUPPORT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SHARED_VIRTUAL_DISK_SUPPORT$SharedVirtualDiskSupport$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SharedVirtualDiskSupport$set(@C("struct _SHARED_VIRTUAL_DISK_SUPPORT") MemorySegment seg, @C("SharedVirtualDiskSupportType") int x) {
            winnt_h$constants$6._SHARED_VIRTUAL_DISK_SUPPORT$SharedVirtualDiskSupport$VH().set(seg, x);
        }
        public static void SharedVirtualDiskSupport$set(@C("struct _SHARED_VIRTUAL_DISK_SUPPORT") MemorySegment seg, long index, @C("SharedVirtualDiskSupportType") int x) {
            winnt_h$constants$6._SHARED_VIRTUAL_DISK_SUPPORT$SharedVirtualDiskSupport$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HandleState$VH() {
            return winnt_h$constants$6._SHARED_VIRTUAL_DISK_SUPPORT$HandleState$VH();
        }
        public static  @C("SharedVirtualDiskHandleState") int HandleState$get(@C("struct _SHARED_VIRTUAL_DISK_SUPPORT") MemorySegment seg) {
            return (int)winnt_h$constants$6._SHARED_VIRTUAL_DISK_SUPPORT$HandleState$VH().get(seg);
        }
        public static  @C("SharedVirtualDiskHandleState") int HandleState$get(@C("struct _SHARED_VIRTUAL_DISK_SUPPORT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SHARED_VIRTUAL_DISK_SUPPORT$HandleState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HandleState$set(@C("struct _SHARED_VIRTUAL_DISK_SUPPORT") MemorySegment seg, @C("SharedVirtualDiskHandleState") int x) {
            winnt_h$constants$6._SHARED_VIRTUAL_DISK_SUPPORT$HandleState$VH().set(seg, x);
        }
        public static void HandleState$set(@C("struct _SHARED_VIRTUAL_DISK_SUPPORT") MemorySegment seg, long index, @C("SharedVirtualDiskHandleState") int x) {
            winnt_h$constants$6._SHARED_VIRTUAL_DISK_SUPPORT$HandleState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SHARED_VIRTUAL_DISK_SUPPORT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SHARED_VIRTUAL_DISK_SUPPORT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SHARED_VIRTUAL_DISK_SUPPORT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SHARED_VIRTUAL_DISK_SUPPORT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SHARED_VIRTUAL_DISK_SUPPORT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SHARED_VIRTUAL_DISK_SUPPORT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SHARED_VIRTUAL_DISK_SUPPORT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SHARED_VIRTUAL_DISK_SUPPORT")public static class SHARED_VIRTUAL_DISK_SUPPORT extends _SHARED_VIRTUAL_DISK_SUPPORT {

        /* package-private */ SHARED_VIRTUAL_DISK_SUPPORT() {}
    }

    @C("struct _REARRANGE_FILE_DATA")public static class _REARRANGE_FILE_DATA {

        /* package-private */ _REARRANGE_FILE_DATA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._REARRANGE_FILE_DATA$struct$LAYOUT();
        }
        public static VarHandle SourceStartingOffset$VH() {
            return winnt_h$constants$6._REARRANGE_FILE_DATA$SourceStartingOffset$VH();
        }
        public static  @C("ULONGLONG") long SourceStartingOffset$get(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg) {
            return (long)winnt_h$constants$6._REARRANGE_FILE_DATA$SourceStartingOffset$VH().get(seg);
        }
        public static  @C("ULONGLONG") long SourceStartingOffset$get(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._REARRANGE_FILE_DATA$SourceStartingOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SourceStartingOffset$set(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA$SourceStartingOffset$VH().set(seg, x);
        }
        public static void SourceStartingOffset$set(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA$SourceStartingOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TargetOffset$VH() {
            return winnt_h$constants$6._REARRANGE_FILE_DATA$TargetOffset$VH();
        }
        public static  @C("ULONGLONG") long TargetOffset$get(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg) {
            return (long)winnt_h$constants$6._REARRANGE_FILE_DATA$TargetOffset$VH().get(seg);
        }
        public static  @C("ULONGLONG") long TargetOffset$get(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._REARRANGE_FILE_DATA$TargetOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TargetOffset$set(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA$TargetOffset$VH().set(seg, x);
        }
        public static void TargetOffset$set(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA$TargetOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SourceFileHandle$VH() {
            return winnt_h$constants$6._REARRANGE_FILE_DATA$SourceFileHandle$VH();
        }
        public static  @C("HANDLE") MemoryAddress SourceFileHandle$get(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._REARRANGE_FILE_DATA$SourceFileHandle$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress SourceFileHandle$get(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$6._REARRANGE_FILE_DATA$SourceFileHandle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SourceFileHandle$set(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA$SourceFileHandle$VH().set(seg, x);
        }
        public static void SourceFileHandle$set(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA$SourceFileHandle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$6._REARRANGE_FILE_DATA$Length$VH();
        }
        public static  @C("DWORD") int Length$get(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg) {
            return (int)winnt_h$constants$6._REARRANGE_FILE_DATA$Length$VH().get(seg);
        }
        public static  @C("DWORD") int Length$get(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._REARRANGE_FILE_DATA$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$6._REARRANGE_FILE_DATA$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg) {
            return (int)winnt_h$constants$6._REARRANGE_FILE_DATA$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._REARRANGE_FILE_DATA$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _REARRANGE_FILE_DATA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _REARRANGE_FILE_DATA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _REARRANGE_FILE_DATA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _REARRANGE_FILE_DATA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _REARRANGE_FILE_DATA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _REARRANGE_FILE_DATA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _REARRANGE_FILE_DATA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _REARRANGE_FILE_DATA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _REARRANGE_FILE_DATA")public static class REARRANGE_FILE_DATA extends _REARRANGE_FILE_DATA {

        /* package-private */ REARRANGE_FILE_DATA() {}
    }

    @C("struct _REARRANGE_FILE_DATA32")public static class _REARRANGE_FILE_DATA32 {

        /* package-private */ _REARRANGE_FILE_DATA32() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._REARRANGE_FILE_DATA32$struct$LAYOUT();
        }
        public static VarHandle SourceStartingOffset$VH() {
            return winnt_h$constants$6._REARRANGE_FILE_DATA32$SourceStartingOffset$VH();
        }
        public static  @C("ULONGLONG") long SourceStartingOffset$get(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg) {
            return (long)winnt_h$constants$6._REARRANGE_FILE_DATA32$SourceStartingOffset$VH().get(seg);
        }
        public static  @C("ULONGLONG") long SourceStartingOffset$get(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._REARRANGE_FILE_DATA32$SourceStartingOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SourceStartingOffset$set(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA32$SourceStartingOffset$VH().set(seg, x);
        }
        public static void SourceStartingOffset$set(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA32$SourceStartingOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TargetOffset$VH() {
            return winnt_h$constants$6._REARRANGE_FILE_DATA32$TargetOffset$VH();
        }
        public static  @C("ULONGLONG") long TargetOffset$get(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg) {
            return (long)winnt_h$constants$6._REARRANGE_FILE_DATA32$TargetOffset$VH().get(seg);
        }
        public static  @C("ULONGLONG") long TargetOffset$get(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._REARRANGE_FILE_DATA32$TargetOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TargetOffset$set(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA32$TargetOffset$VH().set(seg, x);
        }
        public static void TargetOffset$set(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA32$TargetOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SourceFileHandle$VH() {
            return winnt_h$constants$6._REARRANGE_FILE_DATA32$SourceFileHandle$VH();
        }
        public static  @C("UINT32") int SourceFileHandle$get(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg) {
            return (int)winnt_h$constants$6._REARRANGE_FILE_DATA32$SourceFileHandle$VH().get(seg);
        }
        public static  @C("UINT32") int SourceFileHandle$get(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._REARRANGE_FILE_DATA32$SourceFileHandle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SourceFileHandle$set(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, @C("UINT32") int x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA32$SourceFileHandle$VH().set(seg, x);
        }
        public static void SourceFileHandle$set(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, long index, @C("UINT32") int x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA32$SourceFileHandle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$6._REARRANGE_FILE_DATA32$Length$VH();
        }
        public static  @C("DWORD") int Length$get(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg) {
            return (int)winnt_h$constants$6._REARRANGE_FILE_DATA32$Length$VH().get(seg);
        }
        public static  @C("DWORD") int Length$get(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._REARRANGE_FILE_DATA32$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA32$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA32$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$6._REARRANGE_FILE_DATA32$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg) {
            return (int)winnt_h$constants$6._REARRANGE_FILE_DATA32$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._REARRANGE_FILE_DATA32$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA32$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _REARRANGE_FILE_DATA32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._REARRANGE_FILE_DATA32$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _REARRANGE_FILE_DATA32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _REARRANGE_FILE_DATA32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _REARRANGE_FILE_DATA32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _REARRANGE_FILE_DATA32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _REARRANGE_FILE_DATA32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _REARRANGE_FILE_DATA32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _REARRANGE_FILE_DATA32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _REARRANGE_FILE_DATA32")public static class REARRANGE_FILE_DATA32 extends _REARRANGE_FILE_DATA32 {

        /* package-private */ REARRANGE_FILE_DATA32() {}
    }

    @C("struct _SHUFFLE_FILE_DATA")public static class _SHUFFLE_FILE_DATA {

        /* package-private */ _SHUFFLE_FILE_DATA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._SHUFFLE_FILE_DATA$struct$LAYOUT();
        }
        public static VarHandle StartingOffset$VH() {
            return winnt_h$constants$6._SHUFFLE_FILE_DATA$StartingOffset$VH();
        }
        public static  @C("LONGLONG") long StartingOffset$get(@C("struct _SHUFFLE_FILE_DATA") MemorySegment seg) {
            return (long)winnt_h$constants$6._SHUFFLE_FILE_DATA$StartingOffset$VH().get(seg);
        }
        public static  @C("LONGLONG") long StartingOffset$get(@C("struct _SHUFFLE_FILE_DATA") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SHUFFLE_FILE_DATA$StartingOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StartingOffset$set(@C("struct _SHUFFLE_FILE_DATA") MemorySegment seg, @C("LONGLONG") long x) {
            winnt_h$constants$6._SHUFFLE_FILE_DATA$StartingOffset$VH().set(seg, x);
        }
        public static void StartingOffset$set(@C("struct _SHUFFLE_FILE_DATA") MemorySegment seg, long index, @C("LONGLONG") long x) {
            winnt_h$constants$6._SHUFFLE_FILE_DATA$StartingOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$6._SHUFFLE_FILE_DATA$Length$VH();
        }
        public static  @C("LONGLONG") long Length$get(@C("struct _SHUFFLE_FILE_DATA") MemorySegment seg) {
            return (long)winnt_h$constants$6._SHUFFLE_FILE_DATA$Length$VH().get(seg);
        }
        public static  @C("LONGLONG") long Length$get(@C("struct _SHUFFLE_FILE_DATA") MemorySegment seg, long index) {
            return (long)winnt_h$constants$6._SHUFFLE_FILE_DATA$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _SHUFFLE_FILE_DATA") MemorySegment seg, @C("LONGLONG") long x) {
            winnt_h$constants$6._SHUFFLE_FILE_DATA$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _SHUFFLE_FILE_DATA") MemorySegment seg, long index, @C("LONGLONG") long x) {
            winnt_h$constants$6._SHUFFLE_FILE_DATA$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$6._SHUFFLE_FILE_DATA$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SHUFFLE_FILE_DATA") MemorySegment seg) {
            return (int)winnt_h$constants$6._SHUFFLE_FILE_DATA$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _SHUFFLE_FILE_DATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._SHUFFLE_FILE_DATA$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _SHUFFLE_FILE_DATA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._SHUFFLE_FILE_DATA$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _SHUFFLE_FILE_DATA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._SHUFFLE_FILE_DATA$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SHUFFLE_FILE_DATA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SHUFFLE_FILE_DATA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SHUFFLE_FILE_DATA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SHUFFLE_FILE_DATA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SHUFFLE_FILE_DATA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SHUFFLE_FILE_DATA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SHUFFLE_FILE_DATA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SHUFFLE_FILE_DATA")public static class SHUFFLE_FILE_DATA extends _SHUFFLE_FILE_DATA {

        /* package-private */ SHUFFLE_FILE_DATA() {}
    }

    @C("struct _NETWORK_APP_INSTANCE_EA")public static class _NETWORK_APP_INSTANCE_EA {

        /* package-private */ _NETWORK_APP_INSTANCE_EA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$6._NETWORK_APP_INSTANCE_EA$struct$LAYOUT();
        }
        public static MemorySegment AppInstanceID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle CsvFlags$VH() {
            return winnt_h$constants$6._NETWORK_APP_INSTANCE_EA$CsvFlags$VH();
        }
        public static  @C("DWORD") int CsvFlags$get(@C("struct _NETWORK_APP_INSTANCE_EA") MemorySegment seg) {
            return (int)winnt_h$constants$6._NETWORK_APP_INSTANCE_EA$CsvFlags$VH().get(seg);
        }
        public static  @C("DWORD") int CsvFlags$get(@C("struct _NETWORK_APP_INSTANCE_EA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$6._NETWORK_APP_INSTANCE_EA$CsvFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CsvFlags$set(@C("struct _NETWORK_APP_INSTANCE_EA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$6._NETWORK_APP_INSTANCE_EA$CsvFlags$VH().set(seg, x);
        }
        public static void CsvFlags$set(@C("struct _NETWORK_APP_INSTANCE_EA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$6._NETWORK_APP_INSTANCE_EA$CsvFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _NETWORK_APP_INSTANCE_EA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _NETWORK_APP_INSTANCE_EA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _NETWORK_APP_INSTANCE_EA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _NETWORK_APP_INSTANCE_EA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _NETWORK_APP_INSTANCE_EA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _NETWORK_APP_INSTANCE_EA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _NETWORK_APP_INSTANCE_EA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _NETWORK_APP_INSTANCE_EA")public static class NETWORK_APP_INSTANCE_EA extends _NETWORK_APP_INSTANCE_EA {

        /* package-private */ NETWORK_APP_INSTANCE_EA() {}
    }

    @C("struct CM_Power_Data_s")public static class CM_Power_Data_s {

        /* package-private */ CM_Power_Data_s() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.CM_Power_Data_s$struct$LAYOUT();
        }
        public static VarHandle PD_Size$VH() {
            return winnt_h$constants$7.CM_Power_Data_s$PD_Size$VH();
        }
        public static  @C("DWORD") int PD_Size$get(@C("struct CM_Power_Data_s") MemorySegment seg) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_Size$VH().get(seg);
        }
        public static  @C("DWORD") int PD_Size$get(@C("struct CM_Power_Data_s") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PD_Size$set(@C("struct CM_Power_Data_s") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_Size$VH().set(seg, x);
        }
        public static void PD_Size$set(@C("struct CM_Power_Data_s") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PD_MostRecentPowerState$VH() {
            return winnt_h$constants$7.CM_Power_Data_s$PD_MostRecentPowerState$VH();
        }
        public static  @C("DEVICE_POWER_STATE") int PD_MostRecentPowerState$get(@C("struct CM_Power_Data_s") MemorySegment seg) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_MostRecentPowerState$VH().get(seg);
        }
        public static  @C("DEVICE_POWER_STATE") int PD_MostRecentPowerState$get(@C("struct CM_Power_Data_s") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_MostRecentPowerState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PD_MostRecentPowerState$set(@C("struct CM_Power_Data_s") MemorySegment seg, @C("DEVICE_POWER_STATE") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_MostRecentPowerState$VH().set(seg, x);
        }
        public static void PD_MostRecentPowerState$set(@C("struct CM_Power_Data_s") MemorySegment seg, long index, @C("DEVICE_POWER_STATE") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_MostRecentPowerState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PD_Capabilities$VH() {
            return winnt_h$constants$7.CM_Power_Data_s$PD_Capabilities$VH();
        }
        public static  @C("DWORD") int PD_Capabilities$get(@C("struct CM_Power_Data_s") MemorySegment seg) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_Capabilities$VH().get(seg);
        }
        public static  @C("DWORD") int PD_Capabilities$get(@C("struct CM_Power_Data_s") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_Capabilities$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PD_Capabilities$set(@C("struct CM_Power_Data_s") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_Capabilities$VH().set(seg, x);
        }
        public static void PD_Capabilities$set(@C("struct CM_Power_Data_s") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_Capabilities$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PD_D1Latency$VH() {
            return winnt_h$constants$7.CM_Power_Data_s$PD_D1Latency$VH();
        }
        public static  @C("DWORD") int PD_D1Latency$get(@C("struct CM_Power_Data_s") MemorySegment seg) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_D1Latency$VH().get(seg);
        }
        public static  @C("DWORD") int PD_D1Latency$get(@C("struct CM_Power_Data_s") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_D1Latency$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PD_D1Latency$set(@C("struct CM_Power_Data_s") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_D1Latency$VH().set(seg, x);
        }
        public static void PD_D1Latency$set(@C("struct CM_Power_Data_s") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_D1Latency$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PD_D2Latency$VH() {
            return winnt_h$constants$7.CM_Power_Data_s$PD_D2Latency$VH();
        }
        public static  @C("DWORD") int PD_D2Latency$get(@C("struct CM_Power_Data_s") MemorySegment seg) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_D2Latency$VH().get(seg);
        }
        public static  @C("DWORD") int PD_D2Latency$get(@C("struct CM_Power_Data_s") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_D2Latency$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PD_D2Latency$set(@C("struct CM_Power_Data_s") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_D2Latency$VH().set(seg, x);
        }
        public static void PD_D2Latency$set(@C("struct CM_Power_Data_s") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_D2Latency$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PD_D3Latency$VH() {
            return winnt_h$constants$7.CM_Power_Data_s$PD_D3Latency$VH();
        }
        public static  @C("DWORD") int PD_D3Latency$get(@C("struct CM_Power_Data_s") MemorySegment seg) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_D3Latency$VH().get(seg);
        }
        public static  @C("DWORD") int PD_D3Latency$get(@C("struct CM_Power_Data_s") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_D3Latency$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PD_D3Latency$set(@C("struct CM_Power_Data_s") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_D3Latency$VH().set(seg, x);
        }
        public static void PD_D3Latency$set(@C("struct CM_Power_Data_s") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_D3Latency$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment PD_PowerStateMapping$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 28));
        }
        public static VarHandle PD_DeepestSystemWake$VH() {
            return winnt_h$constants$7.CM_Power_Data_s$PD_DeepestSystemWake$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int PD_DeepestSystemWake$get(@C("struct CM_Power_Data_s") MemorySegment seg) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_DeepestSystemWake$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int PD_DeepestSystemWake$get(@C("struct CM_Power_Data_s") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.CM_Power_Data_s$PD_DeepestSystemWake$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PD_DeepestSystemWake$set(@C("struct CM_Power_Data_s") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_DeepestSystemWake$VH().set(seg, x);
        }
        public static void PD_DeepestSystemWake$set(@C("struct CM_Power_Data_s") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$7.CM_Power_Data_s$PD_DeepestSystemWake$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CM_Power_Data_s") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CM_Power_Data_s") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CM_Power_Data_s[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CM_Power_Data_s[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CM_Power_Data_s*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CM_Power_Data_s*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CM_Power_Data_s") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct CM_Power_Data_s")public static class CM_POWER_DATA extends CM_Power_Data_s {

        /* package-private */ CM_POWER_DATA() {}
    }

    @C("struct _POWER_USER_PRESENCE")public static class _POWER_USER_PRESENCE {

        /* package-private */ _POWER_USER_PRESENCE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7._POWER_USER_PRESENCE$struct$LAYOUT();
        }
        public static VarHandle UserPresence$VH() {
            return winnt_h$constants$7._POWER_USER_PRESENCE$UserPresence$VH();
        }
        public static  @C("POWER_USER_PRESENCE_TYPE") int UserPresence$get(@C("struct _POWER_USER_PRESENCE") MemorySegment seg) {
            return (int)winnt_h$constants$7._POWER_USER_PRESENCE$UserPresence$VH().get(seg);
        }
        public static  @C("POWER_USER_PRESENCE_TYPE") int UserPresence$get(@C("struct _POWER_USER_PRESENCE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7._POWER_USER_PRESENCE$UserPresence$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UserPresence$set(@C("struct _POWER_USER_PRESENCE") MemorySegment seg, @C("POWER_USER_PRESENCE_TYPE") int x) {
            winnt_h$constants$7._POWER_USER_PRESENCE$UserPresence$VH().set(seg, x);
        }
        public static void UserPresence$set(@C("struct _POWER_USER_PRESENCE") MemorySegment seg, long index, @C("POWER_USER_PRESENCE_TYPE") int x) {
            winnt_h$constants$7._POWER_USER_PRESENCE$UserPresence$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _POWER_USER_PRESENCE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _POWER_USER_PRESENCE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _POWER_USER_PRESENCE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _POWER_USER_PRESENCE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _POWER_USER_PRESENCE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _POWER_USER_PRESENCE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _POWER_USER_PRESENCE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _POWER_USER_PRESENCE")public static class POWER_USER_PRESENCE extends _POWER_USER_PRESENCE {

        /* package-private */ POWER_USER_PRESENCE() {}
    }

    @C("struct _POWER_SESSION_CONNECT")public static class _POWER_SESSION_CONNECT {

        /* package-private */ _POWER_SESSION_CONNECT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7._POWER_SESSION_CONNECT$struct$LAYOUT();
        }
        public static VarHandle Connected$VH() {
            return winnt_h$constants$7._POWER_SESSION_CONNECT$Connected$VH();
        }
        public static  @C("BOOLEAN") byte Connected$get(@C("struct _POWER_SESSION_CONNECT") MemorySegment seg) {
            return (byte)winnt_h$constants$7._POWER_SESSION_CONNECT$Connected$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Connected$get(@C("struct _POWER_SESSION_CONNECT") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7._POWER_SESSION_CONNECT$Connected$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Connected$set(@C("struct _POWER_SESSION_CONNECT") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_SESSION_CONNECT$Connected$VH().set(seg, x);
        }
        public static void Connected$set(@C("struct _POWER_SESSION_CONNECT") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_SESSION_CONNECT$Connected$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Console$VH() {
            return winnt_h$constants$7._POWER_SESSION_CONNECT$Console$VH();
        }
        public static  @C("BOOLEAN") byte Console$get(@C("struct _POWER_SESSION_CONNECT") MemorySegment seg) {
            return (byte)winnt_h$constants$7._POWER_SESSION_CONNECT$Console$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Console$get(@C("struct _POWER_SESSION_CONNECT") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7._POWER_SESSION_CONNECT$Console$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Console$set(@C("struct _POWER_SESSION_CONNECT") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_SESSION_CONNECT$Console$VH().set(seg, x);
        }
        public static void Console$set(@C("struct _POWER_SESSION_CONNECT") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_SESSION_CONNECT$Console$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _POWER_SESSION_CONNECT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _POWER_SESSION_CONNECT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _POWER_SESSION_CONNECT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _POWER_SESSION_CONNECT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _POWER_SESSION_CONNECT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _POWER_SESSION_CONNECT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _POWER_SESSION_CONNECT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _POWER_SESSION_CONNECT")public static class POWER_SESSION_CONNECT extends _POWER_SESSION_CONNECT {

        /* package-private */ POWER_SESSION_CONNECT() {}
    }

    @C("struct _POWER_SESSION_TIMEOUTS")public static class _POWER_SESSION_TIMEOUTS {

        /* package-private */ _POWER_SESSION_TIMEOUTS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7._POWER_SESSION_TIMEOUTS$struct$LAYOUT();
        }
        public static VarHandle InputTimeout$VH() {
            return winnt_h$constants$7._POWER_SESSION_TIMEOUTS$InputTimeout$VH();
        }
        public static  @C("DWORD") int InputTimeout$get(@C("struct _POWER_SESSION_TIMEOUTS") MemorySegment seg) {
            return (int)winnt_h$constants$7._POWER_SESSION_TIMEOUTS$InputTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int InputTimeout$get(@C("struct _POWER_SESSION_TIMEOUTS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7._POWER_SESSION_TIMEOUTS$InputTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void InputTimeout$set(@C("struct _POWER_SESSION_TIMEOUTS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7._POWER_SESSION_TIMEOUTS$InputTimeout$VH().set(seg, x);
        }
        public static void InputTimeout$set(@C("struct _POWER_SESSION_TIMEOUTS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7._POWER_SESSION_TIMEOUTS$InputTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DisplayTimeout$VH() {
            return winnt_h$constants$7._POWER_SESSION_TIMEOUTS$DisplayTimeout$VH();
        }
        public static  @C("DWORD") int DisplayTimeout$get(@C("struct _POWER_SESSION_TIMEOUTS") MemorySegment seg) {
            return (int)winnt_h$constants$7._POWER_SESSION_TIMEOUTS$DisplayTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int DisplayTimeout$get(@C("struct _POWER_SESSION_TIMEOUTS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7._POWER_SESSION_TIMEOUTS$DisplayTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DisplayTimeout$set(@C("struct _POWER_SESSION_TIMEOUTS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7._POWER_SESSION_TIMEOUTS$DisplayTimeout$VH().set(seg, x);
        }
        public static void DisplayTimeout$set(@C("struct _POWER_SESSION_TIMEOUTS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7._POWER_SESSION_TIMEOUTS$DisplayTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _POWER_SESSION_TIMEOUTS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _POWER_SESSION_TIMEOUTS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _POWER_SESSION_TIMEOUTS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _POWER_SESSION_TIMEOUTS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _POWER_SESSION_TIMEOUTS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _POWER_SESSION_TIMEOUTS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _POWER_SESSION_TIMEOUTS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _POWER_SESSION_TIMEOUTS")public static class POWER_SESSION_TIMEOUTS extends _POWER_SESSION_TIMEOUTS {

        /* package-private */ POWER_SESSION_TIMEOUTS() {}
    }

    @C("struct _POWER_SESSION_RIT_STATE")public static class _POWER_SESSION_RIT_STATE {

        /* package-private */ _POWER_SESSION_RIT_STATE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7._POWER_SESSION_RIT_STATE$struct$LAYOUT();
        }
        public static VarHandle Active$VH() {
            return winnt_h$constants$7._POWER_SESSION_RIT_STATE$Active$VH();
        }
        public static  @C("BOOLEAN") byte Active$get(@C("struct _POWER_SESSION_RIT_STATE") MemorySegment seg) {
            return (byte)winnt_h$constants$7._POWER_SESSION_RIT_STATE$Active$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Active$get(@C("struct _POWER_SESSION_RIT_STATE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7._POWER_SESSION_RIT_STATE$Active$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Active$set(@C("struct _POWER_SESSION_RIT_STATE") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_SESSION_RIT_STATE$Active$VH().set(seg, x);
        }
        public static void Active$set(@C("struct _POWER_SESSION_RIT_STATE") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_SESSION_RIT_STATE$Active$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LastInputTime$VH() {
            return winnt_h$constants$7._POWER_SESSION_RIT_STATE$LastInputTime$VH();
        }
        public static  @C("DWORD") int LastInputTime$get(@C("struct _POWER_SESSION_RIT_STATE") MemorySegment seg) {
            return (int)winnt_h$constants$7._POWER_SESSION_RIT_STATE$LastInputTime$VH().get(seg);
        }
        public static  @C("DWORD") int LastInputTime$get(@C("struct _POWER_SESSION_RIT_STATE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7._POWER_SESSION_RIT_STATE$LastInputTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LastInputTime$set(@C("struct _POWER_SESSION_RIT_STATE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7._POWER_SESSION_RIT_STATE$LastInputTime$VH().set(seg, x);
        }
        public static void LastInputTime$set(@C("struct _POWER_SESSION_RIT_STATE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7._POWER_SESSION_RIT_STATE$LastInputTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _POWER_SESSION_RIT_STATE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _POWER_SESSION_RIT_STATE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _POWER_SESSION_RIT_STATE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _POWER_SESSION_RIT_STATE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _POWER_SESSION_RIT_STATE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _POWER_SESSION_RIT_STATE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _POWER_SESSION_RIT_STATE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _POWER_SESSION_RIT_STATE")public static class POWER_SESSION_RIT_STATE extends _POWER_SESSION_RIT_STATE {

        /* package-private */ POWER_SESSION_RIT_STATE() {}
    }

    @C("struct _POWER_SESSION_WINLOGON")public static class _POWER_SESSION_WINLOGON {

        /* package-private */ _POWER_SESSION_WINLOGON() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7._POWER_SESSION_WINLOGON$struct$LAYOUT();
        }
        public static VarHandle SessionId$VH() {
            return winnt_h$constants$7._POWER_SESSION_WINLOGON$SessionId$VH();
        }
        public static  @C("DWORD") int SessionId$get(@C("struct _POWER_SESSION_WINLOGON") MemorySegment seg) {
            return (int)winnt_h$constants$7._POWER_SESSION_WINLOGON$SessionId$VH().get(seg);
        }
        public static  @C("DWORD") int SessionId$get(@C("struct _POWER_SESSION_WINLOGON") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7._POWER_SESSION_WINLOGON$SessionId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SessionId$set(@C("struct _POWER_SESSION_WINLOGON") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7._POWER_SESSION_WINLOGON$SessionId$VH().set(seg, x);
        }
        public static void SessionId$set(@C("struct _POWER_SESSION_WINLOGON") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7._POWER_SESSION_WINLOGON$SessionId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Console$VH() {
            return winnt_h$constants$7._POWER_SESSION_WINLOGON$Console$VH();
        }
        public static  @C("BOOLEAN") byte Console$get(@C("struct _POWER_SESSION_WINLOGON") MemorySegment seg) {
            return (byte)winnt_h$constants$7._POWER_SESSION_WINLOGON$Console$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Console$get(@C("struct _POWER_SESSION_WINLOGON") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7._POWER_SESSION_WINLOGON$Console$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Console$set(@C("struct _POWER_SESSION_WINLOGON") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_SESSION_WINLOGON$Console$VH().set(seg, x);
        }
        public static void Console$set(@C("struct _POWER_SESSION_WINLOGON") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_SESSION_WINLOGON$Console$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Locked$VH() {
            return winnt_h$constants$7._POWER_SESSION_WINLOGON$Locked$VH();
        }
        public static  @C("BOOLEAN") byte Locked$get(@C("struct _POWER_SESSION_WINLOGON") MemorySegment seg) {
            return (byte)winnt_h$constants$7._POWER_SESSION_WINLOGON$Locked$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Locked$get(@C("struct _POWER_SESSION_WINLOGON") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7._POWER_SESSION_WINLOGON$Locked$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Locked$set(@C("struct _POWER_SESSION_WINLOGON") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_SESSION_WINLOGON$Locked$VH().set(seg, x);
        }
        public static void Locked$set(@C("struct _POWER_SESSION_WINLOGON") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_SESSION_WINLOGON$Locked$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _POWER_SESSION_WINLOGON") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _POWER_SESSION_WINLOGON") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _POWER_SESSION_WINLOGON[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _POWER_SESSION_WINLOGON[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _POWER_SESSION_WINLOGON*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _POWER_SESSION_WINLOGON*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _POWER_SESSION_WINLOGON") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _POWER_SESSION_WINLOGON")public static class POWER_SESSION_WINLOGON extends _POWER_SESSION_WINLOGON {

        /* package-private */ POWER_SESSION_WINLOGON() {}
    }

    @C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES")public static class _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES {

        /* package-private */ _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7._POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$struct$LAYOUT();
        }
        public static VarHandle IsAllowed$VH() {
            return winnt_h$constants$7._POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$IsAllowed$VH();
        }
        public static  @C("BOOLEAN") byte IsAllowed$get(@C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES") MemorySegment seg) {
            return (byte)winnt_h$constants$7._POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$IsAllowed$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte IsAllowed$get(@C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7._POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$IsAllowed$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IsAllowed$set(@C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$IsAllowed$VH().set(seg, x);
        }
        public static void IsAllowed$set(@C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES$IsAllowed$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES")public static class POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES extends _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES {

        /* package-private */ POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES() {}
    }

    @C("struct _POWER_IDLE_RESILIENCY")public static class _POWER_IDLE_RESILIENCY {

        /* package-private */ _POWER_IDLE_RESILIENCY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7._POWER_IDLE_RESILIENCY$struct$LAYOUT();
        }
        public static VarHandle CoalescingTimeout$VH() {
            return winnt_h$constants$7._POWER_IDLE_RESILIENCY$CoalescingTimeout$VH();
        }
        public static  @C("DWORD") int CoalescingTimeout$get(@C("struct _POWER_IDLE_RESILIENCY") MemorySegment seg) {
            return (int)winnt_h$constants$7._POWER_IDLE_RESILIENCY$CoalescingTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int CoalescingTimeout$get(@C("struct _POWER_IDLE_RESILIENCY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7._POWER_IDLE_RESILIENCY$CoalescingTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CoalescingTimeout$set(@C("struct _POWER_IDLE_RESILIENCY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7._POWER_IDLE_RESILIENCY$CoalescingTimeout$VH().set(seg, x);
        }
        public static void CoalescingTimeout$set(@C("struct _POWER_IDLE_RESILIENCY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7._POWER_IDLE_RESILIENCY$CoalescingTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IdleResiliencyPeriod$VH() {
            return winnt_h$constants$7._POWER_IDLE_RESILIENCY$IdleResiliencyPeriod$VH();
        }
        public static  @C("DWORD") int IdleResiliencyPeriod$get(@C("struct _POWER_IDLE_RESILIENCY") MemorySegment seg) {
            return (int)winnt_h$constants$7._POWER_IDLE_RESILIENCY$IdleResiliencyPeriod$VH().get(seg);
        }
        public static  @C("DWORD") int IdleResiliencyPeriod$get(@C("struct _POWER_IDLE_RESILIENCY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7._POWER_IDLE_RESILIENCY$IdleResiliencyPeriod$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IdleResiliencyPeriod$set(@C("struct _POWER_IDLE_RESILIENCY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7._POWER_IDLE_RESILIENCY$IdleResiliencyPeriod$VH().set(seg, x);
        }
        public static void IdleResiliencyPeriod$set(@C("struct _POWER_IDLE_RESILIENCY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7._POWER_IDLE_RESILIENCY$IdleResiliencyPeriod$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _POWER_IDLE_RESILIENCY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _POWER_IDLE_RESILIENCY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _POWER_IDLE_RESILIENCY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _POWER_IDLE_RESILIENCY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _POWER_IDLE_RESILIENCY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _POWER_IDLE_RESILIENCY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _POWER_IDLE_RESILIENCY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _POWER_IDLE_RESILIENCY")public static class POWER_IDLE_RESILIENCY extends _POWER_IDLE_RESILIENCY {

        /* package-private */ POWER_IDLE_RESILIENCY() {}
    }

    @C("struct _POWER_MONITOR_INVOCATION")public static class _POWER_MONITOR_INVOCATION {

        /* package-private */ _POWER_MONITOR_INVOCATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7._POWER_MONITOR_INVOCATION$struct$LAYOUT();
        }
        public static VarHandle Console$VH() {
            return winnt_h$constants$7._POWER_MONITOR_INVOCATION$Console$VH();
        }
        public static  @C("BOOLEAN") byte Console$get(@C("struct _POWER_MONITOR_INVOCATION") MemorySegment seg) {
            return (byte)winnt_h$constants$7._POWER_MONITOR_INVOCATION$Console$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Console$get(@C("struct _POWER_MONITOR_INVOCATION") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7._POWER_MONITOR_INVOCATION$Console$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Console$set(@C("struct _POWER_MONITOR_INVOCATION") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_MONITOR_INVOCATION$Console$VH().set(seg, x);
        }
        public static void Console$set(@C("struct _POWER_MONITOR_INVOCATION") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_MONITOR_INVOCATION$Console$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RequestReason$VH() {
            return winnt_h$constants$7._POWER_MONITOR_INVOCATION$RequestReason$VH();
        }
        public static  @C("POWER_MONITOR_REQUEST_REASON") int RequestReason$get(@C("struct _POWER_MONITOR_INVOCATION") MemorySegment seg) {
            return (int)winnt_h$constants$7._POWER_MONITOR_INVOCATION$RequestReason$VH().get(seg);
        }
        public static  @C("POWER_MONITOR_REQUEST_REASON") int RequestReason$get(@C("struct _POWER_MONITOR_INVOCATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7._POWER_MONITOR_INVOCATION$RequestReason$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RequestReason$set(@C("struct _POWER_MONITOR_INVOCATION") MemorySegment seg, @C("POWER_MONITOR_REQUEST_REASON") int x) {
            winnt_h$constants$7._POWER_MONITOR_INVOCATION$RequestReason$VH().set(seg, x);
        }
        public static void RequestReason$set(@C("struct _POWER_MONITOR_INVOCATION") MemorySegment seg, long index, @C("POWER_MONITOR_REQUEST_REASON") int x) {
            winnt_h$constants$7._POWER_MONITOR_INVOCATION$RequestReason$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _POWER_MONITOR_INVOCATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _POWER_MONITOR_INVOCATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _POWER_MONITOR_INVOCATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _POWER_MONITOR_INVOCATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _POWER_MONITOR_INVOCATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _POWER_MONITOR_INVOCATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _POWER_MONITOR_INVOCATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _POWER_MONITOR_INVOCATION")public static class POWER_MONITOR_INVOCATION extends _POWER_MONITOR_INVOCATION {

        /* package-private */ POWER_MONITOR_INVOCATION() {}
    }

    @C("struct _RESUME_PERFORMANCE")public static class _RESUME_PERFORMANCE {

        /* package-private */ _RESUME_PERFORMANCE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7._RESUME_PERFORMANCE$struct$LAYOUT();
        }
        public static VarHandle PostTimeMs$VH() {
            return winnt_h$constants$7._RESUME_PERFORMANCE$PostTimeMs$VH();
        }
        public static  @C("DWORD") int PostTimeMs$get(@C("struct _RESUME_PERFORMANCE") MemorySegment seg) {
            return (int)winnt_h$constants$7._RESUME_PERFORMANCE$PostTimeMs$VH().get(seg);
        }
        public static  @C("DWORD") int PostTimeMs$get(@C("struct _RESUME_PERFORMANCE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7._RESUME_PERFORMANCE$PostTimeMs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PostTimeMs$set(@C("struct _RESUME_PERFORMANCE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7._RESUME_PERFORMANCE$PostTimeMs$VH().set(seg, x);
        }
        public static void PostTimeMs$set(@C("struct _RESUME_PERFORMANCE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7._RESUME_PERFORMANCE$PostTimeMs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TotalResumeTimeMs$VH() {
            return winnt_h$constants$7._RESUME_PERFORMANCE$TotalResumeTimeMs$VH();
        }
        public static  @C("ULONGLONG") long TotalResumeTimeMs$get(@C("struct _RESUME_PERFORMANCE") MemorySegment seg) {
            return (long)winnt_h$constants$7._RESUME_PERFORMANCE$TotalResumeTimeMs$VH().get(seg);
        }
        public static  @C("ULONGLONG") long TotalResumeTimeMs$get(@C("struct _RESUME_PERFORMANCE") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7._RESUME_PERFORMANCE$TotalResumeTimeMs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalResumeTimeMs$set(@C("struct _RESUME_PERFORMANCE") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$7._RESUME_PERFORMANCE$TotalResumeTimeMs$VH().set(seg, x);
        }
        public static void TotalResumeTimeMs$set(@C("struct _RESUME_PERFORMANCE") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$7._RESUME_PERFORMANCE$TotalResumeTimeMs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ResumeCompleteTimestamp$VH() {
            return winnt_h$constants$7._RESUME_PERFORMANCE$ResumeCompleteTimestamp$VH();
        }
        public static  @C("ULONGLONG") long ResumeCompleteTimestamp$get(@C("struct _RESUME_PERFORMANCE") MemorySegment seg) {
            return (long)winnt_h$constants$7._RESUME_PERFORMANCE$ResumeCompleteTimestamp$VH().get(seg);
        }
        public static  @C("ULONGLONG") long ResumeCompleteTimestamp$get(@C("struct _RESUME_PERFORMANCE") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7._RESUME_PERFORMANCE$ResumeCompleteTimestamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ResumeCompleteTimestamp$set(@C("struct _RESUME_PERFORMANCE") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$7._RESUME_PERFORMANCE$ResumeCompleteTimestamp$VH().set(seg, x);
        }
        public static void ResumeCompleteTimestamp$set(@C("struct _RESUME_PERFORMANCE") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$7._RESUME_PERFORMANCE$ResumeCompleteTimestamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _RESUME_PERFORMANCE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _RESUME_PERFORMANCE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _RESUME_PERFORMANCE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _RESUME_PERFORMANCE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _RESUME_PERFORMANCE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _RESUME_PERFORMANCE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _RESUME_PERFORMANCE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _RESUME_PERFORMANCE")public static class RESUME_PERFORMANCE extends _RESUME_PERFORMANCE {

        /* package-private */ RESUME_PERFORMANCE() {}
    }

    @C("struct ")public static class SET_POWER_SETTING_VALUE {

        /* package-private */ SET_POWER_SETTING_VALUE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.SET_POWER_SETTING_VALUE$struct$LAYOUT();
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$7.SET_POWER_SETTING_VALUE$Version$VH();
        }
        public static  @C("DWORD") int Version$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.SET_POWER_SETTING_VALUE$Version$VH().get(seg);
        }
        public static  @C("DWORD") int Version$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.SET_POWER_SETTING_VALUE$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.SET_POWER_SETTING_VALUE$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.SET_POWER_SETTING_VALUE$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Guid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 16));
        }
        public static VarHandle PowerCondition$VH() {
            return winnt_h$constants$7.SET_POWER_SETTING_VALUE$PowerCondition$VH();
        }
        public static  @C("SYSTEM_POWER_CONDITION") int PowerCondition$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.SET_POWER_SETTING_VALUE$PowerCondition$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_CONDITION") int PowerCondition$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.SET_POWER_SETTING_VALUE$PowerCondition$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PowerCondition$set(@C("struct ") MemorySegment seg, @C("SYSTEM_POWER_CONDITION") int x) {
            winnt_h$constants$7.SET_POWER_SETTING_VALUE$PowerCondition$VH().set(seg, x);
        }
        public static void PowerCondition$set(@C("struct ") MemorySegment seg, long index, @C("SYSTEM_POWER_CONDITION") int x) {
            winnt_h$constants$7.SET_POWER_SETTING_VALUE$PowerCondition$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DataLength$VH() {
            return winnt_h$constants$7.SET_POWER_SETTING_VALUE$DataLength$VH();
        }
        public static  @C("DWORD") int DataLength$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.SET_POWER_SETTING_VALUE$DataLength$VH().get(seg);
        }
        public static  @C("DWORD") int DataLength$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.SET_POWER_SETTING_VALUE$DataLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DataLength$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.SET_POWER_SETTING_VALUE$DataLength$VH().set(seg, x);
        }
        public static void DataLength$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.SET_POWER_SETTING_VALUE$DataLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Data$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 1));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class NOTIFY_USER_POWER_SETTING {

        /* package-private */ NOTIFY_USER_POWER_SETTING() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.NOTIFY_USER_POWER_SETTING$struct$LAYOUT();
        }
        public static MemorySegment Guid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _APPLICATIONLAUNCH_SETTING_VALUE")public static class _APPLICATIONLAUNCH_SETTING_VALUE {

        /* package-private */ _APPLICATIONLAUNCH_SETTING_VALUE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7._APPLICATIONLAUNCH_SETTING_VALUE$struct$LAYOUT();
        }
        public static MemorySegment ActivationTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$7._APPLICATIONLAUNCH_SETTING_VALUE$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _APPLICATIONLAUNCH_SETTING_VALUE") MemorySegment seg) {
            return (int)winnt_h$constants$7._APPLICATIONLAUNCH_SETTING_VALUE$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _APPLICATIONLAUNCH_SETTING_VALUE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7._APPLICATIONLAUNCH_SETTING_VALUE$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _APPLICATIONLAUNCH_SETTING_VALUE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7._APPLICATIONLAUNCH_SETTING_VALUE$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _APPLICATIONLAUNCH_SETTING_VALUE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7._APPLICATIONLAUNCH_SETTING_VALUE$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ButtonInstanceID$VH() {
            return winnt_h$constants$7._APPLICATIONLAUNCH_SETTING_VALUE$ButtonInstanceID$VH();
        }
        public static  @C("DWORD") int ButtonInstanceID$get(@C("struct _APPLICATIONLAUNCH_SETTING_VALUE") MemorySegment seg) {
            return (int)winnt_h$constants$7._APPLICATIONLAUNCH_SETTING_VALUE$ButtonInstanceID$VH().get(seg);
        }
        public static  @C("DWORD") int ButtonInstanceID$get(@C("struct _APPLICATIONLAUNCH_SETTING_VALUE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7._APPLICATIONLAUNCH_SETTING_VALUE$ButtonInstanceID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ButtonInstanceID$set(@C("struct _APPLICATIONLAUNCH_SETTING_VALUE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7._APPLICATIONLAUNCH_SETTING_VALUE$ButtonInstanceID$VH().set(seg, x);
        }
        public static void ButtonInstanceID$set(@C("struct _APPLICATIONLAUNCH_SETTING_VALUE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7._APPLICATIONLAUNCH_SETTING_VALUE$ButtonInstanceID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _APPLICATIONLAUNCH_SETTING_VALUE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _APPLICATIONLAUNCH_SETTING_VALUE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _APPLICATIONLAUNCH_SETTING_VALUE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _APPLICATIONLAUNCH_SETTING_VALUE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _APPLICATIONLAUNCH_SETTING_VALUE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _APPLICATIONLAUNCH_SETTING_VALUE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _APPLICATIONLAUNCH_SETTING_VALUE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _APPLICATIONLAUNCH_SETTING_VALUE")public static class APPLICATIONLAUNCH_SETTING_VALUE extends _APPLICATIONLAUNCH_SETTING_VALUE {

        /* package-private */ APPLICATIONLAUNCH_SETTING_VALUE() {}
    }

    @C("struct _POWER_PLATFORM_INFORMATION")public static class _POWER_PLATFORM_INFORMATION {

        /* package-private */ _POWER_PLATFORM_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7._POWER_PLATFORM_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle AoAc$VH() {
            return winnt_h$constants$7._POWER_PLATFORM_INFORMATION$AoAc$VH();
        }
        public static  @C("BOOLEAN") byte AoAc$get(@C("struct _POWER_PLATFORM_INFORMATION") MemorySegment seg) {
            return (byte)winnt_h$constants$7._POWER_PLATFORM_INFORMATION$AoAc$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte AoAc$get(@C("struct _POWER_PLATFORM_INFORMATION") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7._POWER_PLATFORM_INFORMATION$AoAc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AoAc$set(@C("struct _POWER_PLATFORM_INFORMATION") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_PLATFORM_INFORMATION$AoAc$VH().set(seg, x);
        }
        public static void AoAc$set(@C("struct _POWER_PLATFORM_INFORMATION") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$7._POWER_PLATFORM_INFORMATION$AoAc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _POWER_PLATFORM_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _POWER_PLATFORM_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _POWER_PLATFORM_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _POWER_PLATFORM_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _POWER_PLATFORM_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _POWER_PLATFORM_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _POWER_PLATFORM_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _POWER_PLATFORM_INFORMATION")public static class POWER_PLATFORM_INFORMATION extends _POWER_PLATFORM_INFORMATION {

        /* package-private */ POWER_PLATFORM_INFORMATION() {}
    }

    @C("struct ")public static class BATTERY_REPORTING_SCALE {

        /* package-private */ BATTERY_REPORTING_SCALE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.BATTERY_REPORTING_SCALE$struct$LAYOUT();
        }
        public static VarHandle Granularity$VH() {
            return winnt_h$constants$7.BATTERY_REPORTING_SCALE$Granularity$VH();
        }
        public static  @C("DWORD") int Granularity$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.BATTERY_REPORTING_SCALE$Granularity$VH().get(seg);
        }
        public static  @C("DWORD") int Granularity$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.BATTERY_REPORTING_SCALE$Granularity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Granularity$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.BATTERY_REPORTING_SCALE$Granularity$VH().set(seg, x);
        }
        public static void Granularity$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.BATTERY_REPORTING_SCALE$Granularity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Capacity$VH() {
            return winnt_h$constants$7.BATTERY_REPORTING_SCALE$Capacity$VH();
        }
        public static  @C("DWORD") int Capacity$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.BATTERY_REPORTING_SCALE$Capacity$VH().get(seg);
        }
        public static  @C("DWORD") int Capacity$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.BATTERY_REPORTING_SCALE$Capacity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Capacity$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.BATTERY_REPORTING_SCALE$Capacity$VH().set(seg, x);
        }
        public static void Capacity$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.BATTERY_REPORTING_SCALE$Capacity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_WMI_LEGACY_PERFSTATE {

        /* package-private */ PPM_WMI_LEGACY_PERFSTATE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$struct$LAYOUT();
        }
        public static VarHandle Frequency$VH() {
            return winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$Frequency$VH();
        }
        public static  @C("DWORD") int Frequency$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$Frequency$VH().get(seg);
        }
        public static  @C("DWORD") int Frequency$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$Frequency$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Frequency$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$Frequency$VH().set(seg, x);
        }
        public static void Frequency$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$Frequency$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PercentFrequency$VH() {
            return winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$PercentFrequency$VH();
        }
        public static  @C("DWORD") int PercentFrequency$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$PercentFrequency$VH().get(seg);
        }
        public static  @C("DWORD") int PercentFrequency$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$PercentFrequency$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PercentFrequency$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$PercentFrequency$VH().set(seg, x);
        }
        public static void PercentFrequency$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_LEGACY_PERFSTATE$PercentFrequency$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_WMI_IDLE_STATE {

        /* package-private */ PPM_WMI_IDLE_STATE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATE$struct$LAYOUT();
        }
        public static VarHandle Latency$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATE$Latency$VH();
        }
        public static  @C("DWORD") int Latency$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$Latency$VH().get(seg);
        }
        public static  @C("DWORD") int Latency$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$Latency$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Latency$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$Latency$VH().set(seg, x);
        }
        public static void Latency$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$Latency$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Power$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATE$Power$VH();
        }
        public static  @C("DWORD") int Power$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$Power$VH().get(seg);
        }
        public static  @C("DWORD") int Power$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$Power$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Power$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$Power$VH().set(seg, x);
        }
        public static void Power$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$Power$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeCheck$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATE$TimeCheck$VH();
        }
        public static  @C("DWORD") int TimeCheck$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$TimeCheck$VH().get(seg);
        }
        public static  @C("DWORD") int TimeCheck$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$TimeCheck$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeCheck$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$TimeCheck$VH().set(seg, x);
        }
        public static void TimeCheck$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$TimeCheck$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PromotePercent$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATE$PromotePercent$VH();
        }
        public static  @C("BYTE") byte PromotePercent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_IDLE_STATE$PromotePercent$VH().get(seg);
        }
        public static  @C("BYTE") byte PromotePercent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_IDLE_STATE$PromotePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PromotePercent$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$PromotePercent$VH().set(seg, x);
        }
        public static void PromotePercent$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$PromotePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DemotePercent$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATE$DemotePercent$VH();
        }
        public static  @C("BYTE") byte DemotePercent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_IDLE_STATE$DemotePercent$VH().get(seg);
        }
        public static  @C("BYTE") byte DemotePercent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_IDLE_STATE$DemotePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DemotePercent$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$DemotePercent$VH().set(seg, x);
        }
        public static void DemotePercent$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$DemotePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StateType$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATE$StateType$VH();
        }
        public static  @C("BYTE") byte StateType$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_IDLE_STATE$StateType$VH().get(seg);
        }
        public static  @C("BYTE") byte StateType$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_IDLE_STATE$StateType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StateType$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$StateType$VH().set(seg, x);
        }
        public static void StateType$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$StateType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATE$Reserved$VH();
        }
        public static  @C("BYTE") byte Reserved$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_IDLE_STATE$Reserved$VH().get(seg);
        }
        public static  @C("BYTE") byte Reserved$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_IDLE_STATE$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StateFlags$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATE$StateFlags$VH();
        }
        public static  @C("DWORD") int StateFlags$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$StateFlags$VH().get(seg);
        }
        public static  @C("DWORD") int StateFlags$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$StateFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StateFlags$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$StateFlags$VH().set(seg, x);
        }
        public static void StateFlags$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$StateFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Context$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATE$Context$VH();
        }
        public static  @C("DWORD") int Context$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$Context$VH().get(seg);
        }
        public static  @C("DWORD") int Context$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$Context$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Context$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$Context$VH().set(seg, x);
        }
        public static void Context$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$Context$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IdleHandler$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATE$IdleHandler$VH();
        }
        public static  @C("DWORD") int IdleHandler$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$IdleHandler$VH().get(seg);
        }
        public static  @C("DWORD") int IdleHandler$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$IdleHandler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IdleHandler$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$IdleHandler$VH().set(seg, x);
        }
        public static void IdleHandler$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$IdleHandler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved1$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATE$Reserved1$VH();
        }
        public static  @C("DWORD") int Reserved1$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$Reserved1$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved1$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATE$Reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved1$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$Reserved1$VH().set(seg, x);
        }
        public static void Reserved1$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATE$Reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_WMI_IDLE_STATES {

        /* package-private */ PPM_WMI_IDLE_STATES() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATES$struct$LAYOUT();
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATES$Type$VH();
        }
        public static  @C("DWORD") int Type$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES$Type$VH().get(seg);
        }
        public static  @C("DWORD") int Type$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Count$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATES$Count$VH();
        }
        public static  @C("DWORD") int Count$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES$Count$VH().get(seg);
        }
        public static  @C("DWORD") int Count$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES$Count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Count$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES$Count$VH().set(seg, x);
        }
        public static void Count$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES$Count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TargetState$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATES$TargetState$VH();
        }
        public static  @C("DWORD") int TargetState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES$TargetState$VH().get(seg);
        }
        public static  @C("DWORD") int TargetState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES$TargetState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TargetState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES$TargetState$VH().set(seg, x);
        }
        public static void TargetState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES$TargetState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OldState$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATES$OldState$VH();
        }
        public static  @C("DWORD") int OldState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES$OldState$VH().get(seg);
        }
        public static  @C("DWORD") int OldState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES$OldState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OldState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES$OldState$VH().set(seg, x);
        }
        public static void OldState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES$OldState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TargetProcessors$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATES$TargetProcessors$VH();
        }
        public static  @C("DWORD64") long TargetProcessors$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_WMI_IDLE_STATES$TargetProcessors$VH().get(seg);
        }
        public static  @C("DWORD64") long TargetProcessors$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_WMI_IDLE_STATES$TargetProcessors$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TargetProcessors$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES$TargetProcessors$VH().set(seg, x);
        }
        public static void TargetProcessors$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES$TargetProcessors$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment State$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 32));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_WMI_IDLE_STATES_EX {

        /* package-private */ PPM_WMI_IDLE_STATES_EX() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$struct$LAYOUT();
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$Type$VH();
        }
        public static  @C("DWORD") int Type$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$Type$VH().get(seg);
        }
        public static  @C("DWORD") int Type$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Count$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$Count$VH();
        }
        public static  @C("DWORD") int Count$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$Count$VH().get(seg);
        }
        public static  @C("DWORD") int Count$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$Count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Count$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$Count$VH().set(seg, x);
        }
        public static void Count$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$Count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TargetState$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$TargetState$VH();
        }
        public static  @C("DWORD") int TargetState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$TargetState$VH().get(seg);
        }
        public static  @C("DWORD") int TargetState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$TargetState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TargetState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$TargetState$VH().set(seg, x);
        }
        public static void TargetState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$TargetState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OldState$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$OldState$VH();
        }
        public static  @C("DWORD") int OldState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$OldState$VH().get(seg);
        }
        public static  @C("DWORD") int OldState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$OldState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OldState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$OldState$VH().set(seg, x);
        }
        public static void OldState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$OldState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TargetProcessors$VH() {
            return winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$TargetProcessors$VH();
        }
        public static  @C("PVOID") MemoryAddress TargetProcessors$get(@C("struct ") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$TargetProcessors$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress TargetProcessors$get(@C("struct ") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$TargetProcessors$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TargetProcessors$set(@C("struct ") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$TargetProcessors$VH().set(seg, x);
        }
        public static void TargetProcessors$set(@C("struct ") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$7.PPM_WMI_IDLE_STATES_EX$TargetProcessors$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment State$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 32));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_WMI_PERF_STATE {

        /* package-private */ PPM_WMI_PERF_STATE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$struct$LAYOUT();
        }
        public static VarHandle Frequency$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$Frequency$VH();
        }
        public static  @C("DWORD") int Frequency$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATE$Frequency$VH().get(seg);
        }
        public static  @C("DWORD") int Frequency$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATE$Frequency$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Frequency$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Frequency$VH().set(seg, x);
        }
        public static void Frequency$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Frequency$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Power$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$Power$VH();
        }
        public static  @C("DWORD") int Power$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATE$Power$VH().get(seg);
        }
        public static  @C("DWORD") int Power$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATE$Power$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Power$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Power$VH().set(seg, x);
        }
        public static void Power$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Power$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PercentFrequency$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$PercentFrequency$VH();
        }
        public static  @C("BYTE") byte PercentFrequency$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATE$PercentFrequency$VH().get(seg);
        }
        public static  @C("BYTE") byte PercentFrequency$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATE$PercentFrequency$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PercentFrequency$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$PercentFrequency$VH().set(seg, x);
        }
        public static void PercentFrequency$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$PercentFrequency$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IncreaseLevel$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$IncreaseLevel$VH();
        }
        public static  @C("BYTE") byte IncreaseLevel$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATE$IncreaseLevel$VH().get(seg);
        }
        public static  @C("BYTE") byte IncreaseLevel$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATE$IncreaseLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IncreaseLevel$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$IncreaseLevel$VH().set(seg, x);
        }
        public static void IncreaseLevel$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$IncreaseLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DecreaseLevel$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$DecreaseLevel$VH();
        }
        public static  @C("BYTE") byte DecreaseLevel$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATE$DecreaseLevel$VH().get(seg);
        }
        public static  @C("BYTE") byte DecreaseLevel$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATE$DecreaseLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DecreaseLevel$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$DecreaseLevel$VH().set(seg, x);
        }
        public static void DecreaseLevel$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$DecreaseLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$Type$VH();
        }
        public static  @C("BYTE") byte Type$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATE$Type$VH().get(seg);
        }
        public static  @C("BYTE") byte Type$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATE$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IncreaseTime$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$IncreaseTime$VH();
        }
        public static  @C("DWORD") int IncreaseTime$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATE$IncreaseTime$VH().get(seg);
        }
        public static  @C("DWORD") int IncreaseTime$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATE$IncreaseTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IncreaseTime$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$IncreaseTime$VH().set(seg, x);
        }
        public static void IncreaseTime$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$IncreaseTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DecreaseTime$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$DecreaseTime$VH();
        }
        public static  @C("DWORD") int DecreaseTime$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATE$DecreaseTime$VH().get(seg);
        }
        public static  @C("DWORD") int DecreaseTime$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATE$DecreaseTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DecreaseTime$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$DecreaseTime$VH().set(seg, x);
        }
        public static void DecreaseTime$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$DecreaseTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Control$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$Control$VH();
        }
        public static  @C("DWORD64") long Control$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATE$Control$VH().get(seg);
        }
        public static  @C("DWORD64") long Control$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATE$Control$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Control$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Control$VH().set(seg, x);
        }
        public static void Control$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Control$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Status$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$Status$VH();
        }
        public static  @C("DWORD64") long Status$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATE$Status$VH().get(seg);
        }
        public static  @C("DWORD64") long Status$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATE$Status$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Status$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Status$VH().set(seg, x);
        }
        public static void Status$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Status$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HitCount$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$HitCount$VH();
        }
        public static  @C("DWORD") int HitCount$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATE$HitCount$VH().get(seg);
        }
        public static  @C("DWORD") int HitCount$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATE$HitCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HitCount$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$HitCount$VH().set(seg, x);
        }
        public static void HitCount$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$HitCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved1$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved1$VH();
        }
        public static  @C("DWORD") int Reserved1$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved1$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved1$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved1$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved1$VH().set(seg, x);
        }
        public static void Reserved1$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved2$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved2$VH();
        }
        public static  @C("DWORD64") long Reserved2$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved2$VH().get(seg);
        }
        public static  @C("DWORD64") long Reserved2$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved2$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved2$VH().set(seg, x);
        }
        public static void Reserved2$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved3$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved3$VH();
        }
        public static  @C("DWORD64") long Reserved3$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved3$VH().get(seg);
        }
        public static  @C("DWORD64") long Reserved3$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved3$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved3$VH().set(seg, x);
        }
        public static void Reserved3$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATE$Reserved3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_WMI_PERF_STATES {

        /* package-private */ PPM_WMI_PERF_STATES() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$struct$LAYOUT();
        }
        public static VarHandle Count$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$Count$VH();
        }
        public static  @C("DWORD") int Count$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$Count$VH().get(seg);
        }
        public static  @C("DWORD") int Count$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$Count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Count$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$Count$VH().set(seg, x);
        }
        public static void Count$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$Count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxFrequency$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$MaxFrequency$VH();
        }
        public static  @C("DWORD") int MaxFrequency$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$MaxFrequency$VH().get(seg);
        }
        public static  @C("DWORD") int MaxFrequency$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$MaxFrequency$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxFrequency$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$MaxFrequency$VH().set(seg, x);
        }
        public static void MaxFrequency$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$MaxFrequency$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CurrentState$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$CurrentState$VH();
        }
        public static  @C("DWORD") int CurrentState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$CurrentState$VH().get(seg);
        }
        public static  @C("DWORD") int CurrentState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$CurrentState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CurrentState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$CurrentState$VH().set(seg, x);
        }
        public static void CurrentState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$CurrentState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxPerfState$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$MaxPerfState$VH();
        }
        public static  @C("DWORD") int MaxPerfState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$MaxPerfState$VH().get(seg);
        }
        public static  @C("DWORD") int MaxPerfState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$MaxPerfState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxPerfState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$MaxPerfState$VH().set(seg, x);
        }
        public static void MaxPerfState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$MaxPerfState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinPerfState$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$MinPerfState$VH();
        }
        public static  @C("DWORD") int MinPerfState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$MinPerfState$VH().get(seg);
        }
        public static  @C("DWORD") int MinPerfState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$MinPerfState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinPerfState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$MinPerfState$VH().set(seg, x);
        }
        public static void MinPerfState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$MinPerfState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LowestPerfState$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$LowestPerfState$VH();
        }
        public static  @C("DWORD") int LowestPerfState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$LowestPerfState$VH().get(seg);
        }
        public static  @C("DWORD") int LowestPerfState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$LowestPerfState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LowestPerfState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$LowestPerfState$VH().set(seg, x);
        }
        public static void LowestPerfState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$LowestPerfState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ThermalConstraint$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$ThermalConstraint$VH();
        }
        public static  @C("DWORD") int ThermalConstraint$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$ThermalConstraint$VH().get(seg);
        }
        public static  @C("DWORD") int ThermalConstraint$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$ThermalConstraint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ThermalConstraint$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$ThermalConstraint$VH().set(seg, x);
        }
        public static void ThermalConstraint$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$ThermalConstraint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BusyAdjThreshold$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$BusyAdjThreshold$VH();
        }
        public static  @C("BYTE") byte BusyAdjThreshold$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES$BusyAdjThreshold$VH().get(seg);
        }
        public static  @C("BYTE") byte BusyAdjThreshold$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES$BusyAdjThreshold$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BusyAdjThreshold$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$BusyAdjThreshold$VH().set(seg, x);
        }
        public static void BusyAdjThreshold$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$BusyAdjThreshold$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PolicyType$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$PolicyType$VH();
        }
        public static  @C("BYTE") byte PolicyType$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES$PolicyType$VH().get(seg);
        }
        public static  @C("BYTE") byte PolicyType$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES$PolicyType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PolicyType$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$PolicyType$VH().set(seg, x);
        }
        public static void PolicyType$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$PolicyType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$Type$VH();
        }
        public static  @C("BYTE") byte Type$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES$Type$VH().get(seg);
        }
        public static  @C("BYTE") byte Type$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved$VH();
        }
        public static  @C("BYTE") byte Reserved$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved$VH().get(seg);
        }
        public static  @C("BYTE") byte Reserved$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimerInterval$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$TimerInterval$VH();
        }
        public static  @C("DWORD") int TimerInterval$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$TimerInterval$VH().get(seg);
        }
        public static  @C("DWORD") int TimerInterval$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$TimerInterval$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimerInterval$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$TimerInterval$VH().set(seg, x);
        }
        public static void TimerInterval$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$TimerInterval$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TargetProcessors$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$TargetProcessors$VH();
        }
        public static  @C("DWORD64") long TargetProcessors$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATES$TargetProcessors$VH().get(seg);
        }
        public static  @C("DWORD64") long TargetProcessors$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATES$TargetProcessors$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TargetProcessors$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$TargetProcessors$VH().set(seg, x);
        }
        public static void TargetProcessors$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$TargetProcessors$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PStateHandler$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$PStateHandler$VH();
        }
        public static  @C("DWORD") int PStateHandler$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$PStateHandler$VH().get(seg);
        }
        public static  @C("DWORD") int PStateHandler$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$PStateHandler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PStateHandler$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$PStateHandler$VH().set(seg, x);
        }
        public static void PStateHandler$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$PStateHandler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PStateContext$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$PStateContext$VH();
        }
        public static  @C("DWORD") int PStateContext$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$PStateContext$VH().get(seg);
        }
        public static  @C("DWORD") int PStateContext$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$PStateContext$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PStateContext$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$PStateContext$VH().set(seg, x);
        }
        public static void PStateContext$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$PStateContext$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TStateHandler$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$TStateHandler$VH();
        }
        public static  @C("DWORD") int TStateHandler$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$TStateHandler$VH().get(seg);
        }
        public static  @C("DWORD") int TStateHandler$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$TStateHandler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TStateHandler$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$TStateHandler$VH().set(seg, x);
        }
        public static void TStateHandler$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$TStateHandler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TStateContext$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$TStateContext$VH();
        }
        public static  @C("DWORD") int TStateContext$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$TStateContext$VH().get(seg);
        }
        public static  @C("DWORD") int TStateContext$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$TStateContext$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TStateContext$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$TStateContext$VH().set(seg, x);
        }
        public static void TStateContext$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$TStateContext$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FeedbackHandler$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$FeedbackHandler$VH();
        }
        public static  @C("DWORD") int FeedbackHandler$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$FeedbackHandler$VH().get(seg);
        }
        public static  @C("DWORD") int FeedbackHandler$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$FeedbackHandler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FeedbackHandler$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$FeedbackHandler$VH().set(seg, x);
        }
        public static void FeedbackHandler$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$FeedbackHandler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved1$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved1$VH();
        }
        public static  @C("DWORD") int Reserved1$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved1$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved1$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved1$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved1$VH().set(seg, x);
        }
        public static void Reserved1$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved2$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved2$VH();
        }
        public static  @C("DWORD64") long Reserved2$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved2$VH().get(seg);
        }
        public static  @C("DWORD64") long Reserved2$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved2$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved2$VH().set(seg, x);
        }
        public static void Reserved2$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES$Reserved2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment State$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(80, 64));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_WMI_PERF_STATES_EX {

        /* package-private */ PPM_WMI_PERF_STATES_EX() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$struct$LAYOUT();
        }
        public static VarHandle Count$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Count$VH();
        }
        public static  @C("DWORD") int Count$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Count$VH().get(seg);
        }
        public static  @C("DWORD") int Count$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Count$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Count$VH().set(seg, x);
        }
        public static void Count$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxFrequency$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MaxFrequency$VH();
        }
        public static  @C("DWORD") int MaxFrequency$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MaxFrequency$VH().get(seg);
        }
        public static  @C("DWORD") int MaxFrequency$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MaxFrequency$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxFrequency$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MaxFrequency$VH().set(seg, x);
        }
        public static void MaxFrequency$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MaxFrequency$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CurrentState$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$CurrentState$VH();
        }
        public static  @C("DWORD") int CurrentState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$CurrentState$VH().get(seg);
        }
        public static  @C("DWORD") int CurrentState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$CurrentState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CurrentState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$CurrentState$VH().set(seg, x);
        }
        public static void CurrentState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$CurrentState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxPerfState$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MaxPerfState$VH();
        }
        public static  @C("DWORD") int MaxPerfState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MaxPerfState$VH().get(seg);
        }
        public static  @C("DWORD") int MaxPerfState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MaxPerfState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxPerfState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MaxPerfState$VH().set(seg, x);
        }
        public static void MaxPerfState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MaxPerfState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinPerfState$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MinPerfState$VH();
        }
        public static  @C("DWORD") int MinPerfState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MinPerfState$VH().get(seg);
        }
        public static  @C("DWORD") int MinPerfState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MinPerfState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinPerfState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MinPerfState$VH().set(seg, x);
        }
        public static void MinPerfState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$MinPerfState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LowestPerfState$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$LowestPerfState$VH();
        }
        public static  @C("DWORD") int LowestPerfState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$LowestPerfState$VH().get(seg);
        }
        public static  @C("DWORD") int LowestPerfState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$LowestPerfState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LowestPerfState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$LowestPerfState$VH().set(seg, x);
        }
        public static void LowestPerfState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$LowestPerfState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ThermalConstraint$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$ThermalConstraint$VH();
        }
        public static  @C("DWORD") int ThermalConstraint$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$ThermalConstraint$VH().get(seg);
        }
        public static  @C("DWORD") int ThermalConstraint$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$ThermalConstraint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ThermalConstraint$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$ThermalConstraint$VH().set(seg, x);
        }
        public static void ThermalConstraint$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$ThermalConstraint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BusyAdjThreshold$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$VH();
        }
        public static  @C("BYTE") byte BusyAdjThreshold$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$VH().get(seg);
        }
        public static  @C("BYTE") byte BusyAdjThreshold$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BusyAdjThreshold$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$VH().set(seg, x);
        }
        public static void BusyAdjThreshold$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$BusyAdjThreshold$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PolicyType$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PolicyType$VH();
        }
        public static  @C("BYTE") byte PolicyType$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PolicyType$VH().get(seg);
        }
        public static  @C("BYTE") byte PolicyType$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PolicyType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PolicyType$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PolicyType$VH().set(seg, x);
        }
        public static void PolicyType$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PolicyType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Type$VH();
        }
        public static  @C("BYTE") byte Type$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Type$VH().get(seg);
        }
        public static  @C("BYTE") byte Type$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved$VH();
        }
        public static  @C("BYTE") byte Reserved$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved$VH().get(seg);
        }
        public static  @C("BYTE") byte Reserved$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimerInterval$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TimerInterval$VH();
        }
        public static  @C("DWORD") int TimerInterval$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TimerInterval$VH().get(seg);
        }
        public static  @C("DWORD") int TimerInterval$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TimerInterval$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimerInterval$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TimerInterval$VH().set(seg, x);
        }
        public static void TimerInterval$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TimerInterval$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TargetProcessors$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TargetProcessors$VH();
        }
        public static  @C("PVOID") MemoryAddress TargetProcessors$get(@C("struct ") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TargetProcessors$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress TargetProcessors$get(@C("struct ") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TargetProcessors$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TargetProcessors$set(@C("struct ") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TargetProcessors$VH().set(seg, x);
        }
        public static void TargetProcessors$set(@C("struct ") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TargetProcessors$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PStateHandler$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PStateHandler$VH();
        }
        public static  @C("DWORD") int PStateHandler$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PStateHandler$VH().get(seg);
        }
        public static  @C("DWORD") int PStateHandler$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PStateHandler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PStateHandler$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PStateHandler$VH().set(seg, x);
        }
        public static void PStateHandler$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PStateHandler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PStateContext$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PStateContext$VH();
        }
        public static  @C("DWORD") int PStateContext$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PStateContext$VH().get(seg);
        }
        public static  @C("DWORD") int PStateContext$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PStateContext$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PStateContext$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PStateContext$VH().set(seg, x);
        }
        public static void PStateContext$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$PStateContext$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TStateHandler$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TStateHandler$VH();
        }
        public static  @C("DWORD") int TStateHandler$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TStateHandler$VH().get(seg);
        }
        public static  @C("DWORD") int TStateHandler$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TStateHandler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TStateHandler$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TStateHandler$VH().set(seg, x);
        }
        public static void TStateHandler$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TStateHandler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TStateContext$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TStateContext$VH();
        }
        public static  @C("DWORD") int TStateContext$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TStateContext$VH().get(seg);
        }
        public static  @C("DWORD") int TStateContext$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TStateContext$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TStateContext$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TStateContext$VH().set(seg, x);
        }
        public static void TStateContext$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$TStateContext$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FeedbackHandler$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$FeedbackHandler$VH();
        }
        public static  @C("DWORD") int FeedbackHandler$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$FeedbackHandler$VH().get(seg);
        }
        public static  @C("DWORD") int FeedbackHandler$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$FeedbackHandler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FeedbackHandler$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$FeedbackHandler$VH().set(seg, x);
        }
        public static void FeedbackHandler$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$FeedbackHandler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved1$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved1$VH();
        }
        public static  @C("DWORD") int Reserved1$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved1$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved1$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved1$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved1$VH().set(seg, x);
        }
        public static void Reserved1$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved2$VH() {
            return winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved2$VH();
        }
        public static  @C("DWORD64") long Reserved2$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved2$VH().get(seg);
        }
        public static  @C("DWORD64") long Reserved2$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved2$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved2$VH().set(seg, x);
        }
        public static void Reserved2$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_WMI_PERF_STATES_EX$Reserved2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment State$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(80, 64));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_IDLE_STATE_ACCOUNTING {

        /* package-private */ PPM_IDLE_STATE_ACCOUNTING() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$struct$LAYOUT();
        }
        public static VarHandle IdleTransitions$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$VH();
        }
        public static  @C("DWORD") int IdleTransitions$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$VH().get(seg);
        }
        public static  @C("DWORD") int IdleTransitions$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IdleTransitions$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$VH().set(seg, x);
        }
        public static void IdleTransitions$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$IdleTransitions$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FailedTransitions$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$VH();
        }
        public static  @C("DWORD") int FailedTransitions$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$VH().get(seg);
        }
        public static  @C("DWORD") int FailedTransitions$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FailedTransitions$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$VH().set(seg, x);
        }
        public static void FailedTransitions$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$FailedTransitions$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle InvalidBucketIndex$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$VH();
        }
        public static  @C("DWORD") int InvalidBucketIndex$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$VH().get(seg);
        }
        public static  @C("DWORD") int InvalidBucketIndex$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void InvalidBucketIndex$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$VH().set(seg, x);
        }
        public static void InvalidBucketIndex$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$InvalidBucketIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TotalTime$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$TotalTime$VH();
        }
        public static  @C("DWORD64") long TotalTime$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$TotalTime$VH().get(seg);
        }
        public static  @C("DWORD64") long TotalTime$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$TotalTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalTime$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$TotalTime$VH().set(seg, x);
        }
        public static void TotalTime$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING$TotalTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment IdleTimeBuckets$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 24));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_IDLE_ACCOUNTING {

        /* package-private */ PPM_IDLE_ACCOUNTING() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_IDLE_ACCOUNTING$struct$LAYOUT();
        }
        public static VarHandle StateCount$VH() {
            return winnt_h$constants$7.PPM_IDLE_ACCOUNTING$StateCount$VH();
        }
        public static  @C("DWORD") int StateCount$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING$StateCount$VH().get(seg);
        }
        public static  @C("DWORD") int StateCount$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING$StateCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StateCount$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING$StateCount$VH().set(seg, x);
        }
        public static void StateCount$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING$StateCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TotalTransitions$VH() {
            return winnt_h$constants$7.PPM_IDLE_ACCOUNTING$TotalTransitions$VH();
        }
        public static  @C("DWORD") int TotalTransitions$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING$TotalTransitions$VH().get(seg);
        }
        public static  @C("DWORD") int TotalTransitions$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING$TotalTransitions$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalTransitions$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING$TotalTransitions$VH().set(seg, x);
        }
        public static void TotalTransitions$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING$TotalTransitions$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ResetCount$VH() {
            return winnt_h$constants$7.PPM_IDLE_ACCOUNTING$ResetCount$VH();
        }
        public static  @C("DWORD") int ResetCount$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING$ResetCount$VH().get(seg);
        }
        public static  @C("DWORD") int ResetCount$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING$ResetCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ResetCount$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING$ResetCount$VH().set(seg, x);
        }
        public static void ResetCount$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING$ResetCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StartTime$VH() {
            return winnt_h$constants$7.PPM_IDLE_ACCOUNTING$StartTime$VH();
        }
        public static  @C("DWORD64") long StartTime$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_IDLE_ACCOUNTING$StartTime$VH().get(seg);
        }
        public static  @C("DWORD64") long StartTime$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_IDLE_ACCOUNTING$StartTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StartTime$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING$StartTime$VH().set(seg, x);
        }
        public static void StartTime$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING$StartTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment State$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 48));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_IDLE_STATE_BUCKET_EX {

        /* package-private */ PPM_IDLE_STATE_BUCKET_EX() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$struct$LAYOUT();
        }
        public static VarHandle TotalTimeUs$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$VH();
        }
        public static  @C("DWORD64") long TotalTimeUs$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$VH().get(seg);
        }
        public static  @C("DWORD64") long TotalTimeUs$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalTimeUs$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$VH().set(seg, x);
        }
        public static void TotalTimeUs$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$TotalTimeUs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinTimeUs$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$VH();
        }
        public static  @C("DWORD") int MinTimeUs$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$VH().get(seg);
        }
        public static  @C("DWORD") int MinTimeUs$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinTimeUs$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$VH().set(seg, x);
        }
        public static void MinTimeUs$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$MinTimeUs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxTimeUs$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$VH();
        }
        public static  @C("DWORD") int MaxTimeUs$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$VH().get(seg);
        }
        public static  @C("DWORD") int MaxTimeUs$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxTimeUs$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$VH().set(seg, x);
        }
        public static void MaxTimeUs$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$MaxTimeUs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Count$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$Count$VH();
        }
        public static  @C("DWORD") int Count$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$Count$VH().get(seg);
        }
        public static  @C("DWORD") int Count$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$Count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Count$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$Count$VH().set(seg, x);
        }
        public static void Count$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_BUCKET_EX$Count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_IDLE_STATE_ACCOUNTING_EX {

        /* package-private */ PPM_IDLE_STATE_ACCOUNTING_EX() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$struct$LAYOUT();
        }
        public static VarHandle TotalTime$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$VH();
        }
        public static  @C("DWORD64") long TotalTime$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$VH().get(seg);
        }
        public static  @C("DWORD64") long TotalTime$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalTime$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$VH().set(seg, x);
        }
        public static void TotalTime$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$TotalTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IdleTransitions$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$VH();
        }
        public static  @C("DWORD") int IdleTransitions$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$VH().get(seg);
        }
        public static  @C("DWORD") int IdleTransitions$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IdleTransitions$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$VH().set(seg, x);
        }
        public static void IdleTransitions$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$IdleTransitions$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FailedTransitions$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$VH();
        }
        public static  @C("DWORD") int FailedTransitions$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$VH().get(seg);
        }
        public static  @C("DWORD") int FailedTransitions$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FailedTransitions$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$VH().set(seg, x);
        }
        public static void FailedTransitions$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$FailedTransitions$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle InvalidBucketIndex$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$VH();
        }
        public static  @C("DWORD") int InvalidBucketIndex$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$VH().get(seg);
        }
        public static  @C("DWORD") int InvalidBucketIndex$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void InvalidBucketIndex$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$VH().set(seg, x);
        }
        public static void InvalidBucketIndex$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$InvalidBucketIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinTimeUs$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$VH();
        }
        public static  @C("DWORD") int MinTimeUs$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$VH().get(seg);
        }
        public static  @C("DWORD") int MinTimeUs$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinTimeUs$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$VH().set(seg, x);
        }
        public static void MinTimeUs$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$MinTimeUs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxTimeUs$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$VH();
        }
        public static  @C("DWORD") int MaxTimeUs$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$VH().get(seg);
        }
        public static  @C("DWORD") int MaxTimeUs$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxTimeUs$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$VH().set(seg, x);
        }
        public static void MaxTimeUs$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$MaxTimeUs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CancelledTransitions$VH() {
            return winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$VH();
        }
        public static  @C("DWORD") int CancelledTransitions$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$VH().get(seg);
        }
        public static  @C("DWORD") int CancelledTransitions$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CancelledTransitions$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$VH().set(seg, x);
        }
        public static void CancelledTransitions$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_STATE_ACCOUNTING_EX$CancelledTransitions$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment IdleTimeBuckets$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 384));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_IDLE_ACCOUNTING_EX {

        /* package-private */ PPM_IDLE_ACCOUNTING_EX() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$struct$LAYOUT();
        }
        public static VarHandle StateCount$VH() {
            return winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$StateCount$VH();
        }
        public static  @C("DWORD") int StateCount$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$StateCount$VH().get(seg);
        }
        public static  @C("DWORD") int StateCount$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$StateCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StateCount$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$StateCount$VH().set(seg, x);
        }
        public static void StateCount$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$StateCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TotalTransitions$VH() {
            return winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$TotalTransitions$VH();
        }
        public static  @C("DWORD") int TotalTransitions$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$TotalTransitions$VH().get(seg);
        }
        public static  @C("DWORD") int TotalTransitions$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$TotalTransitions$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TotalTransitions$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$TotalTransitions$VH().set(seg, x);
        }
        public static void TotalTransitions$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$TotalTransitions$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ResetCount$VH() {
            return winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$ResetCount$VH();
        }
        public static  @C("DWORD") int ResetCount$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$ResetCount$VH().get(seg);
        }
        public static  @C("DWORD") int ResetCount$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$ResetCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ResetCount$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$ResetCount$VH().set(seg, x);
        }
        public static void ResetCount$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$ResetCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AbortCount$VH() {
            return winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$AbortCount$VH();
        }
        public static  @C("DWORD") int AbortCount$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$AbortCount$VH().get(seg);
        }
        public static  @C("DWORD") int AbortCount$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$AbortCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AbortCount$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$AbortCount$VH().set(seg, x);
        }
        public static void AbortCount$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$AbortCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StartTime$VH() {
            return winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$StartTime$VH();
        }
        public static  @C("DWORD64") long StartTime$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$StartTime$VH().get(seg);
        }
        public static  @C("DWORD64") long StartTime$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$StartTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StartTime$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$StartTime$VH().set(seg, x);
        }
        public static void StartTime$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$7.PPM_IDLE_ACCOUNTING_EX$StartTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment State$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 416));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_PERFSTATE_EVENT {

        /* package-private */ PPM_PERFSTATE_EVENT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_PERFSTATE_EVENT$struct$LAYOUT();
        }
        public static VarHandle State$VH() {
            return winnt_h$constants$7.PPM_PERFSTATE_EVENT$State$VH();
        }
        public static  @C("DWORD") int State$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_EVENT$State$VH().get(seg);
        }
        public static  @C("DWORD") int State$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_EVENT$State$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void State$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_EVENT$State$VH().set(seg, x);
        }
        public static void State$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_EVENT$State$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Status$VH() {
            return winnt_h$constants$7.PPM_PERFSTATE_EVENT$Status$VH();
        }
        public static  @C("DWORD") int Status$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_EVENT$Status$VH().get(seg);
        }
        public static  @C("DWORD") int Status$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_EVENT$Status$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Status$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_EVENT$Status$VH().set(seg, x);
        }
        public static void Status$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_EVENT$Status$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Latency$VH() {
            return winnt_h$constants$7.PPM_PERFSTATE_EVENT$Latency$VH();
        }
        public static  @C("DWORD") int Latency$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_EVENT$Latency$VH().get(seg);
        }
        public static  @C("DWORD") int Latency$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_EVENT$Latency$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Latency$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_EVENT$Latency$VH().set(seg, x);
        }
        public static void Latency$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_EVENT$Latency$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Speed$VH() {
            return winnt_h$constants$7.PPM_PERFSTATE_EVENT$Speed$VH();
        }
        public static  @C("DWORD") int Speed$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_EVENT$Speed$VH().get(seg);
        }
        public static  @C("DWORD") int Speed$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_EVENT$Speed$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Speed$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_EVENT$Speed$VH().set(seg, x);
        }
        public static void Speed$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_EVENT$Speed$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Processor$VH() {
            return winnt_h$constants$7.PPM_PERFSTATE_EVENT$Processor$VH();
        }
        public static  @C("DWORD") int Processor$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_EVENT$Processor$VH().get(seg);
        }
        public static  @C("DWORD") int Processor$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_EVENT$Processor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Processor$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_EVENT$Processor$VH().set(seg, x);
        }
        public static void Processor$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_EVENT$Processor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_PERFSTATE_DOMAIN_EVENT {

        /* package-private */ PPM_PERFSTATE_DOMAIN_EVENT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT();
        }
        public static VarHandle State$VH() {
            return winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$State$VH();
        }
        public static  @C("DWORD") int State$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$State$VH().get(seg);
        }
        public static  @C("DWORD") int State$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$State$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void State$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$State$VH().set(seg, x);
        }
        public static void State$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$State$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Latency$VH() {
            return winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$Latency$VH();
        }
        public static  @C("DWORD") int Latency$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$Latency$VH().get(seg);
        }
        public static  @C("DWORD") int Latency$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$Latency$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Latency$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$Latency$VH().set(seg, x);
        }
        public static void Latency$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$Latency$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Speed$VH() {
            return winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$Speed$VH();
        }
        public static  @C("DWORD") int Speed$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$Speed$VH().get(seg);
        }
        public static  @C("DWORD") int Speed$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$Speed$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Speed$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$Speed$VH().set(seg, x);
        }
        public static void Speed$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$7.PPM_PERFSTATE_DOMAIN_EVENT$Speed$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Processors$VH() {
            return winnt_h$constants$8.PPM_PERFSTATE_DOMAIN_EVENT$Processors$VH();
        }
        public static  @C("DWORD64") long Processors$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$8.PPM_PERFSTATE_DOMAIN_EVENT$Processors$VH().get(seg);
        }
        public static  @C("DWORD64") long Processors$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$8.PPM_PERFSTATE_DOMAIN_EVENT$Processors$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Processors$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$8.PPM_PERFSTATE_DOMAIN_EVENT$Processors$VH().set(seg, x);
        }
        public static void Processors$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$8.PPM_PERFSTATE_DOMAIN_EVENT$Processors$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_IDLESTATE_EVENT {

        /* package-private */ PPM_IDLESTATE_EVENT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8.PPM_IDLESTATE_EVENT$struct$LAYOUT();
        }
        public static VarHandle NewState$VH() {
            return winnt_h$constants$8.PPM_IDLESTATE_EVENT$NewState$VH();
        }
        public static  @C("DWORD") int NewState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.PPM_IDLESTATE_EVENT$NewState$VH().get(seg);
        }
        public static  @C("DWORD") int NewState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.PPM_IDLESTATE_EVENT$NewState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NewState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.PPM_IDLESTATE_EVENT$NewState$VH().set(seg, x);
        }
        public static void NewState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.PPM_IDLESTATE_EVENT$NewState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OldState$VH() {
            return winnt_h$constants$8.PPM_IDLESTATE_EVENT$OldState$VH();
        }
        public static  @C("DWORD") int OldState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.PPM_IDLESTATE_EVENT$OldState$VH().get(seg);
        }
        public static  @C("DWORD") int OldState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.PPM_IDLESTATE_EVENT$OldState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OldState$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.PPM_IDLESTATE_EVENT$OldState$VH().set(seg, x);
        }
        public static void OldState$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.PPM_IDLESTATE_EVENT$OldState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Processors$VH() {
            return winnt_h$constants$8.PPM_IDLESTATE_EVENT$Processors$VH();
        }
        public static  @C("DWORD64") long Processors$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$8.PPM_IDLESTATE_EVENT$Processors$VH().get(seg);
        }
        public static  @C("DWORD64") long Processors$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$8.PPM_IDLESTATE_EVENT$Processors$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Processors$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$8.PPM_IDLESTATE_EVENT$Processors$VH().set(seg, x);
        }
        public static void Processors$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$8.PPM_IDLESTATE_EVENT$Processors$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_THERMALCHANGE_EVENT {

        /* package-private */ PPM_THERMALCHANGE_EVENT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8.PPM_THERMALCHANGE_EVENT$struct$LAYOUT();
        }
        public static VarHandle ThermalConstraint$VH() {
            return winnt_h$constants$8.PPM_THERMALCHANGE_EVENT$ThermalConstraint$VH();
        }
        public static  @C("DWORD") int ThermalConstraint$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.PPM_THERMALCHANGE_EVENT$ThermalConstraint$VH().get(seg);
        }
        public static  @C("DWORD") int ThermalConstraint$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.PPM_THERMALCHANGE_EVENT$ThermalConstraint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ThermalConstraint$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.PPM_THERMALCHANGE_EVENT$ThermalConstraint$VH().set(seg, x);
        }
        public static void ThermalConstraint$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.PPM_THERMALCHANGE_EVENT$ThermalConstraint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Processors$VH() {
            return winnt_h$constants$8.PPM_THERMALCHANGE_EVENT$Processors$VH();
        }
        public static  @C("DWORD64") long Processors$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$8.PPM_THERMALCHANGE_EVENT$Processors$VH().get(seg);
        }
        public static  @C("DWORD64") long Processors$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$8.PPM_THERMALCHANGE_EVENT$Processors$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Processors$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$8.PPM_THERMALCHANGE_EVENT$Processors$VH().set(seg, x);
        }
        public static void Processors$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$8.PPM_THERMALCHANGE_EVENT$Processors$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PPM_THERMAL_POLICY_EVENT {

        /* package-private */ PPM_THERMAL_POLICY_EVENT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8.PPM_THERMAL_POLICY_EVENT$struct$LAYOUT();
        }
        public static VarHandle Mode$VH() {
            return winnt_h$constants$8.PPM_THERMAL_POLICY_EVENT$Mode$VH();
        }
        public static  @C("BYTE") byte Mode$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.PPM_THERMAL_POLICY_EVENT$Mode$VH().get(seg);
        }
        public static  @C("BYTE") byte Mode$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.PPM_THERMAL_POLICY_EVENT$Mode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Mode$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8.PPM_THERMAL_POLICY_EVENT$Mode$VH().set(seg, x);
        }
        public static void Mode$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8.PPM_THERMAL_POLICY_EVENT$Mode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Processors$VH() {
            return winnt_h$constants$8.PPM_THERMAL_POLICY_EVENT$Processors$VH();
        }
        public static  @C("DWORD64") long Processors$get(@C("struct ") MemorySegment seg) {
            return (long)winnt_h$constants$8.PPM_THERMAL_POLICY_EVENT$Processors$VH().get(seg);
        }
        public static  @C("DWORD64") long Processors$get(@C("struct ") MemorySegment seg, long index) {
            return (long)winnt_h$constants$8.PPM_THERMAL_POLICY_EVENT$Processors$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Processors$set(@C("struct ") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$8.PPM_THERMAL_POLICY_EVENT$Processors$VH().set(seg, x);
        }
        public static void Processors$set(@C("struct ") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$8.PPM_THERMAL_POLICY_EVENT$Processors$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class POWER_ACTION_POLICY {

        /* package-private */ POWER_ACTION_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8.POWER_ACTION_POLICY$struct$LAYOUT();
        }
        public static VarHandle Action$VH() {
            return winnt_h$constants$8.POWER_ACTION_POLICY$Action$VH();
        }
        public static  @C("POWER_ACTION") int Action$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.POWER_ACTION_POLICY$Action$VH().get(seg);
        }
        public static  @C("POWER_ACTION") int Action$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.POWER_ACTION_POLICY$Action$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Action$set(@C("struct ") MemorySegment seg, @C("POWER_ACTION") int x) {
            winnt_h$constants$8.POWER_ACTION_POLICY$Action$VH().set(seg, x);
        }
        public static void Action$set(@C("struct ") MemorySegment seg, long index, @C("POWER_ACTION") int x) {
            winnt_h$constants$8.POWER_ACTION_POLICY$Action$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$8.POWER_ACTION_POLICY$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.POWER_ACTION_POLICY$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.POWER_ACTION_POLICY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.POWER_ACTION_POLICY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.POWER_ACTION_POLICY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EventCode$VH() {
            return winnt_h$constants$8.POWER_ACTION_POLICY$EventCode$VH();
        }
        public static  @C("DWORD") int EventCode$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.POWER_ACTION_POLICY$EventCode$VH().get(seg);
        }
        public static  @C("DWORD") int EventCode$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.POWER_ACTION_POLICY$EventCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EventCode$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.POWER_ACTION_POLICY$EventCode$VH().set(seg, x);
        }
        public static void EventCode$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.POWER_ACTION_POLICY$EventCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class SYSTEM_POWER_LEVEL {

        /* package-private */ SYSTEM_POWER_LEVEL() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8.SYSTEM_POWER_LEVEL$struct$LAYOUT();
        }
        public static VarHandle Enable$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_LEVEL$Enable$VH();
        }
        public static  @C("BOOLEAN") byte Enable$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_LEVEL$Enable$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Enable$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_LEVEL$Enable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Enable$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_LEVEL$Enable$VH().set(seg, x);
        }
        public static void Enable$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_LEVEL$Enable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Spare$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1, 3));
        }
        public static VarHandle BatteryLevel$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_LEVEL$BatteryLevel$VH();
        }
        public static  @C("DWORD") int BatteryLevel$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_LEVEL$BatteryLevel$VH().get(seg);
        }
        public static  @C("DWORD") int BatteryLevel$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_LEVEL$BatteryLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BatteryLevel$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_POWER_LEVEL$BatteryLevel$VH().set(seg, x);
        }
        public static void BatteryLevel$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_POWER_LEVEL$BatteryLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment PowerPolicy$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 12));
        }
        public static VarHandle MinSystemState$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_LEVEL$MinSystemState$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int MinSystemState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_LEVEL$MinSystemState$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int MinSystemState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_LEVEL$MinSystemState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinSystemState$set(@C("struct ") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8.SYSTEM_POWER_LEVEL$MinSystemState$VH().set(seg, x);
        }
        public static void MinSystemState$set(@C("struct ") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8.SYSTEM_POWER_LEVEL$MinSystemState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_POWER_POLICY")public static class _SYSTEM_POWER_POLICY {

        /* package-private */ _SYSTEM_POWER_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$struct$LAYOUT();
        }
        public static VarHandle Revision$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$Revision$VH();
        }
        public static  @C("DWORD") int Revision$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$Revision$VH().get(seg);
        }
        public static  @C("DWORD") int Revision$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$Revision$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Revision$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$Revision$VH().set(seg, x);
        }
        public static void Revision$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$Revision$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment PowerButton$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 12));
        }
        public static MemorySegment SleepButton$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 12));
        }
        public static MemorySegment LidClose$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 12));
        }
        public static VarHandle LidOpenWake$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$LidOpenWake$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int LidOpenWake$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$LidOpenWake$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int LidOpenWake$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$LidOpenWake$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LidOpenWake$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$LidOpenWake$VH().set(seg, x);
        }
        public static void LidOpenWake$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$LidOpenWake$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$Reserved$VH();
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$Reserved$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Idle$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 12));
        }
        public static VarHandle IdleTimeout$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$IdleTimeout$VH();
        }
        public static  @C("DWORD") int IdleTimeout$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$IdleTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int IdleTimeout$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$IdleTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IdleTimeout$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$IdleTimeout$VH().set(seg, x);
        }
        public static void IdleTimeout$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$IdleTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IdleSensitivity$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$IdleSensitivity$VH();
        }
        public static  @C("BYTE") byte IdleSensitivity$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$IdleSensitivity$VH().get(seg);
        }
        public static  @C("BYTE") byte IdleSensitivity$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$IdleSensitivity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IdleSensitivity$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$IdleSensitivity$VH().set(seg, x);
        }
        public static void IdleSensitivity$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$IdleSensitivity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DynamicThrottle$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$DynamicThrottle$VH();
        }
        public static  @C("BYTE") byte DynamicThrottle$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$DynamicThrottle$VH().get(seg);
        }
        public static  @C("BYTE") byte DynamicThrottle$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$DynamicThrottle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DynamicThrottle$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$DynamicThrottle$VH().set(seg, x);
        }
        public static void DynamicThrottle$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$DynamicThrottle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Spare2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(66, 2));
        }
        public static VarHandle MinSleep$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$MinSleep$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int MinSleep$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$MinSleep$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int MinSleep$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$MinSleep$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinSleep$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$MinSleep$VH().set(seg, x);
        }
        public static void MinSleep$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$MinSleep$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxSleep$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$MaxSleep$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int MaxSleep$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$MaxSleep$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int MaxSleep$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$MaxSleep$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxSleep$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$MaxSleep$VH().set(seg, x);
        }
        public static void MaxSleep$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$MaxSleep$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReducedLatencySleep$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$ReducedLatencySleep$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int ReducedLatencySleep$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$ReducedLatencySleep$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int ReducedLatencySleep$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$ReducedLatencySleep$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReducedLatencySleep$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$ReducedLatencySleep$VH().set(seg, x);
        }
        public static void ReducedLatencySleep$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$ReducedLatencySleep$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle WinLogonFlags$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$WinLogonFlags$VH();
        }
        public static  @C("DWORD") int WinLogonFlags$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$WinLogonFlags$VH().get(seg);
        }
        public static  @C("DWORD") int WinLogonFlags$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$WinLogonFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void WinLogonFlags$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$WinLogonFlags$VH().set(seg, x);
        }
        public static void WinLogonFlags$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$WinLogonFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Spare3$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$Spare3$VH();
        }
        public static  @C("DWORD") int Spare3$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$Spare3$VH().get(seg);
        }
        public static  @C("DWORD") int Spare3$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$Spare3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Spare3$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$Spare3$VH().set(seg, x);
        }
        public static void Spare3$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$Spare3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DozeS4Timeout$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$DozeS4Timeout$VH();
        }
        public static  @C("DWORD") int DozeS4Timeout$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$DozeS4Timeout$VH().get(seg);
        }
        public static  @C("DWORD") int DozeS4Timeout$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$DozeS4Timeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DozeS4Timeout$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$DozeS4Timeout$VH().set(seg, x);
        }
        public static void DozeS4Timeout$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$DozeS4Timeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BroadcastCapacityResolution$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$BroadcastCapacityResolution$VH();
        }
        public static  @C("DWORD") int BroadcastCapacityResolution$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$BroadcastCapacityResolution$VH().get(seg);
        }
        public static  @C("DWORD") int BroadcastCapacityResolution$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$BroadcastCapacityResolution$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BroadcastCapacityResolution$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$BroadcastCapacityResolution$VH().set(seg, x);
        }
        public static void BroadcastCapacityResolution$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$BroadcastCapacityResolution$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment DischargePolicy$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(96, 96));
        }
        public static VarHandle VideoTimeout$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$VideoTimeout$VH();
        }
        public static  @C("DWORD") int VideoTimeout$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$VideoTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int VideoTimeout$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$VideoTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VideoTimeout$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$VideoTimeout$VH().set(seg, x);
        }
        public static void VideoTimeout$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$VideoTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VideoDimDisplay$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$VideoDimDisplay$VH();
        }
        public static  @C("BOOLEAN") byte VideoDimDisplay$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$VideoDimDisplay$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte VideoDimDisplay$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$VideoDimDisplay$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VideoDimDisplay$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$VideoDimDisplay$VH().set(seg, x);
        }
        public static void VideoDimDisplay$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$VideoDimDisplay$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment VideoReserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(200, 12));
        }
        public static VarHandle SpindownTimeout$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$SpindownTimeout$VH();
        }
        public static  @C("DWORD") int SpindownTimeout$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$SpindownTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int SpindownTimeout$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._SYSTEM_POWER_POLICY$SpindownTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SpindownTimeout$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$SpindownTimeout$VH().set(seg, x);
        }
        public static void SpindownTimeout$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$SpindownTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OptimizeForPower$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$OptimizeForPower$VH();
        }
        public static  @C("BOOLEAN") byte OptimizeForPower$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$OptimizeForPower$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte OptimizeForPower$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$OptimizeForPower$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OptimizeForPower$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$OptimizeForPower$VH().set(seg, x);
        }
        public static void OptimizeForPower$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$OptimizeForPower$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FanThrottleTolerance$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$FanThrottleTolerance$VH();
        }
        public static  @C("BYTE") byte FanThrottleTolerance$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$FanThrottleTolerance$VH().get(seg);
        }
        public static  @C("BYTE") byte FanThrottleTolerance$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$FanThrottleTolerance$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FanThrottleTolerance$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$FanThrottleTolerance$VH().set(seg, x);
        }
        public static void FanThrottleTolerance$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$FanThrottleTolerance$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ForcedThrottle$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$ForcedThrottle$VH();
        }
        public static  @C("BYTE") byte ForcedThrottle$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$ForcedThrottle$VH().get(seg);
        }
        public static  @C("BYTE") byte ForcedThrottle$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$ForcedThrottle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ForcedThrottle$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$ForcedThrottle$VH().set(seg, x);
        }
        public static void ForcedThrottle$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$ForcedThrottle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinThrottle$VH() {
            return winnt_h$constants$8._SYSTEM_POWER_POLICY$MinThrottle$VH();
        }
        public static  @C("BYTE") byte MinThrottle$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$MinThrottle$VH().get(seg);
        }
        public static  @C("BYTE") byte MinThrottle$get(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._SYSTEM_POWER_POLICY$MinThrottle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinThrottle$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$MinThrottle$VH().set(seg, x);
        }
        public static void MinThrottle$set(@C("struct _SYSTEM_POWER_POLICY") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8._SYSTEM_POWER_POLICY$MinThrottle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment OverThrottled$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(220, 12));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SYSTEM_POWER_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SYSTEM_POWER_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SYSTEM_POWER_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SYSTEM_POWER_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SYSTEM_POWER_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SYSTEM_POWER_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SYSTEM_POWER_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SYSTEM_POWER_POLICY")public static class SYSTEM_POWER_POLICY extends _SYSTEM_POWER_POLICY {

        /* package-private */ SYSTEM_POWER_POLICY() {}
    }

    @C("struct ")public static class PROCESSOR_IDLESTATE_INFO {

        /* package-private */ PROCESSOR_IDLESTATE_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$struct$LAYOUT();
        }
        public static VarHandle TimeCheck$VH() {
            return winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$TimeCheck$VH();
        }
        public static  @C("DWORD") int TimeCheck$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$TimeCheck$VH().get(seg);
        }
        public static  @C("DWORD") int TimeCheck$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$TimeCheck$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeCheck$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$TimeCheck$VH().set(seg, x);
        }
        public static void TimeCheck$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$TimeCheck$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DemotePercent$VH() {
            return winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$DemotePercent$VH();
        }
        public static  @C("BYTE") byte DemotePercent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$DemotePercent$VH().get(seg);
        }
        public static  @C("BYTE") byte DemotePercent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$DemotePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DemotePercent$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$DemotePercent$VH().set(seg, x);
        }
        public static void DemotePercent$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$DemotePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PromotePercent$VH() {
            return winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$PromotePercent$VH();
        }
        public static  @C("BYTE") byte PromotePercent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$PromotePercent$VH().get(seg);
        }
        public static  @C("BYTE") byte PromotePercent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$PromotePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PromotePercent$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$PromotePercent$VH().set(seg, x);
        }
        public static void PromotePercent$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8.PROCESSOR_IDLESTATE_INFO$PromotePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Spare$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(6, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class PROCESSOR_IDLESTATE_POLICY {

        /* package-private */ PROCESSOR_IDLESTATE_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$struct$LAYOUT();
        }
        public static VarHandle Revision$VH() {
            return winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$Revision$VH();
        }
        public static  @C("WORD") short Revision$get(@C("struct ") MemorySegment seg) {
            return (short)winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$Revision$VH().get(seg);
        }
        public static  @C("WORD") short Revision$get(@C("struct ") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$Revision$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Revision$set(@C("struct ") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$Revision$VH().set(seg, x);
        }
        public static void Revision$set(@C("struct ") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$Revision$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("union ")public static class Flags {

            /* package-private */ Flags() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$Flags$union$LAYOUT();
            }
            public static VarHandle AsWORD$VH() {
                return winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$Flags$AsWORD$VH();
            }
            public static  @C("WORD") short AsWORD$get(@C("union ") MemorySegment seg) {
                return (short)winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$Flags$AsWORD$VH().get(seg);
            }
            public static  @C("WORD") short AsWORD$get(@C("union ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$Flags$AsWORD$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void AsWORD$set(@C("union ") MemorySegment seg, @C("WORD") short x) {
                winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$Flags$AsWORD$VH().set(seg, x);
            }
            public static void AsWORD$set(@C("union ") MemorySegment seg, long index, @C("WORD") short x) {
                winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$Flags$AsWORD$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Flags$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2, 2));
        }
        public static VarHandle PolicyCount$VH() {
            return winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$PolicyCount$VH();
        }
        public static  @C("DWORD") int PolicyCount$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$PolicyCount$VH().get(seg);
        }
        public static  @C("DWORD") int PolicyCount$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$PolicyCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PolicyCount$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$PolicyCount$VH().set(seg, x);
        }
        public static void PolicyCount$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_IDLESTATE_POLICY$PolicyCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Policy$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 24));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESSOR_POWER_POLICY_INFO")public static class _PROCESSOR_POWER_POLICY_INFO {

        /* package-private */ _PROCESSOR_POWER_POLICY_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT();
        }
        public static VarHandle TimeCheck$VH() {
            return winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$TimeCheck$VH();
        }
        public static  @C("DWORD") int TimeCheck$get(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$TimeCheck$VH().get(seg);
        }
        public static  @C("DWORD") int TimeCheck$get(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$TimeCheck$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeCheck$set(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$TimeCheck$VH().set(seg, x);
        }
        public static void TimeCheck$set(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$TimeCheck$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DemoteLimit$VH() {
            return winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$DemoteLimit$VH();
        }
        public static  @C("DWORD") int DemoteLimit$get(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$DemoteLimit$VH().get(seg);
        }
        public static  @C("DWORD") int DemoteLimit$get(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$DemoteLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DemoteLimit$set(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$DemoteLimit$VH().set(seg, x);
        }
        public static void DemoteLimit$set(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$DemoteLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PromoteLimit$VH() {
            return winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$PromoteLimit$VH();
        }
        public static  @C("DWORD") int PromoteLimit$get(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$PromoteLimit$VH().get(seg);
        }
        public static  @C("DWORD") int PromoteLimit$get(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$PromoteLimit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PromoteLimit$set(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$PromoteLimit$VH().set(seg, x);
        }
        public static void PromoteLimit$set(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$PromoteLimit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DemotePercent$VH() {
            return winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$DemotePercent$VH();
        }
        public static  @C("BYTE") byte DemotePercent$get(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg) {
            return (byte)winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$DemotePercent$VH().get(seg);
        }
        public static  @C("BYTE") byte DemotePercent$get(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$DemotePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DemotePercent$set(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$DemotePercent$VH().set(seg, x);
        }
        public static void DemotePercent$set(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$DemotePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PromotePercent$VH() {
            return winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$PromotePercent$VH();
        }
        public static  @C("BYTE") byte PromotePercent$get(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg) {
            return (byte)winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$PromotePercent$VH().get(seg);
        }
        public static  @C("BYTE") byte PromotePercent$get(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$PromotePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PromotePercent$set(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$PromotePercent$VH().set(seg, x);
        }
        public static void PromotePercent$set(@C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY_INFO$PromotePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Spare$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(14, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESSOR_POWER_POLICY_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESSOR_POWER_POLICY_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESSOR_POWER_POLICY_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESSOR_POWER_POLICY_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESSOR_POWER_POLICY_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESSOR_POWER_POLICY_INFO")public static class PROCESSOR_POWER_POLICY_INFO extends _PROCESSOR_POWER_POLICY_INFO {

        /* package-private */ PROCESSOR_POWER_POLICY_INFO() {}
    }

    @C("struct _PROCESSOR_POWER_POLICY")public static class _PROCESSOR_POWER_POLICY {

        /* package-private */ _PROCESSOR_POWER_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8._PROCESSOR_POWER_POLICY$struct$LAYOUT();
        }
        public static VarHandle Revision$VH() {
            return winnt_h$constants$8._PROCESSOR_POWER_POLICY$Revision$VH();
        }
        public static  @C("DWORD") int Revision$get(@C("struct _PROCESSOR_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._PROCESSOR_POWER_POLICY$Revision$VH().get(seg);
        }
        public static  @C("DWORD") int Revision$get(@C("struct _PROCESSOR_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._PROCESSOR_POWER_POLICY$Revision$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Revision$set(@C("struct _PROCESSOR_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY$Revision$VH().set(seg, x);
        }
        public static void Revision$set(@C("struct _PROCESSOR_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY$Revision$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DynamicThrottle$VH() {
            return winnt_h$constants$8._PROCESSOR_POWER_POLICY$DynamicThrottle$VH();
        }
        public static  @C("BYTE") byte DynamicThrottle$get(@C("struct _PROCESSOR_POWER_POLICY") MemorySegment seg) {
            return (byte)winnt_h$constants$8._PROCESSOR_POWER_POLICY$DynamicThrottle$VH().get(seg);
        }
        public static  @C("BYTE") byte DynamicThrottle$get(@C("struct _PROCESSOR_POWER_POLICY") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._PROCESSOR_POWER_POLICY$DynamicThrottle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DynamicThrottle$set(@C("struct _PROCESSOR_POWER_POLICY") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY$DynamicThrottle$VH().set(seg, x);
        }
        public static void DynamicThrottle$set(@C("struct _PROCESSOR_POWER_POLICY") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY$DynamicThrottle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Spare$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(5, 3));
        }
        public static VarHandle PolicyCount$VH() {
            return winnt_h$constants$8._PROCESSOR_POWER_POLICY$PolicyCount$VH();
        }
        public static  @C("DWORD") int PolicyCount$get(@C("struct _PROCESSOR_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._PROCESSOR_POWER_POLICY$PolicyCount$VH().get(seg);
        }
        public static  @C("DWORD") int PolicyCount$get(@C("struct _PROCESSOR_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._PROCESSOR_POWER_POLICY$PolicyCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PolicyCount$set(@C("struct _PROCESSOR_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY$PolicyCount$VH().set(seg, x);
        }
        public static void PolicyCount$set(@C("struct _PROCESSOR_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._PROCESSOR_POWER_POLICY$PolicyCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Policy$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 60));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PROCESSOR_POWER_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PROCESSOR_POWER_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PROCESSOR_POWER_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PROCESSOR_POWER_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PROCESSOR_POWER_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PROCESSOR_POWER_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PROCESSOR_POWER_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PROCESSOR_POWER_POLICY")public static class PROCESSOR_POWER_POLICY extends _PROCESSOR_POWER_POLICY {

        /* package-private */ PROCESSOR_POWER_POLICY() {}
    }

    @C("struct ")public static class PROCESSOR_PERFSTATE_POLICY {

        /* package-private */ PROCESSOR_PERFSTATE_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT();
        }
        public static VarHandle Revision$VH() {
            return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Revision$VH();
        }
        public static  @C("DWORD") int Revision$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Revision$VH().get(seg);
        }
        public static  @C("DWORD") int Revision$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Revision$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Revision$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Revision$VH().set(seg, x);
        }
        public static void Revision$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Revision$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxThrottle$VH() {
            return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$MaxThrottle$VH();
        }
        public static  @C("BYTE") byte MaxThrottle$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$MaxThrottle$VH().get(seg);
        }
        public static  @C("BYTE") byte MaxThrottle$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$MaxThrottle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxThrottle$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$MaxThrottle$VH().set(seg, x);
        }
        public static void MaxThrottle$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$MaxThrottle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinThrottle$VH() {
            return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$MinThrottle$VH();
        }
        public static  @C("BYTE") byte MinThrottle$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$MinThrottle$VH().get(seg);
        }
        public static  @C("BYTE") byte MinThrottle$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$MinThrottle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinThrottle$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$MinThrottle$VH().set(seg, x);
        }
        public static void MinThrottle$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$MinThrottle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BusyAdjThreshold$VH() {
            return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$VH();
        }
        public static  @C("BYTE") byte BusyAdjThreshold$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$VH().get(seg);
        }
        public static  @C("BYTE") byte BusyAdjThreshold$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BusyAdjThreshold$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$VH().set(seg, x);
        }
        public static void BusyAdjThreshold$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Spare$VH() {
            return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Spare$VH();
        }
        public static  @C("BYTE") byte Spare$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Spare$VH().get(seg);
        }
        public static  @C("BYTE") byte Spare$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Spare$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Spare$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Spare$VH().set(seg, x);
        }
        public static void Spare$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Spare$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("union ")public static class Flags {

            /* package-private */ Flags() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Flags$union$LAYOUT();
            }
            public static VarHandle AsBYTE$VH() {
                return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Flags$AsBYTE$VH();
            }
            public static  @C("BYTE") byte AsBYTE$get(@C("union ") MemorySegment seg) {
                return (byte)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Flags$AsBYTE$VH().get(seg);
            }
            public static  @C("BYTE") byte AsBYTE$get(@C("union ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Flags$AsBYTE$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void AsBYTE$set(@C("union ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Flags$AsBYTE$VH().set(seg, x);
            }
            public static void AsBYTE$set(@C("union ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$Flags$AsBYTE$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Flags$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 1));
        }
        public static VarHandle TimeCheck$VH() {
            return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$TimeCheck$VH();
        }
        public static  @C("DWORD") int TimeCheck$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$TimeCheck$VH().get(seg);
        }
        public static  @C("DWORD") int TimeCheck$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$TimeCheck$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeCheck$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$TimeCheck$VH().set(seg, x);
        }
        public static void TimeCheck$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$TimeCheck$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IncreaseTime$VH() {
            return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$IncreaseTime$VH();
        }
        public static  @C("DWORD") int IncreaseTime$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$IncreaseTime$VH().get(seg);
        }
        public static  @C("DWORD") int IncreaseTime$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$IncreaseTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IncreaseTime$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$IncreaseTime$VH().set(seg, x);
        }
        public static void IncreaseTime$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$IncreaseTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DecreaseTime$VH() {
            return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$DecreaseTime$VH();
        }
        public static  @C("DWORD") int DecreaseTime$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$DecreaseTime$VH().get(seg);
        }
        public static  @C("DWORD") int DecreaseTime$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$DecreaseTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DecreaseTime$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$DecreaseTime$VH().set(seg, x);
        }
        public static void DecreaseTime$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$DecreaseTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IncreasePercent$VH() {
            return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$IncreasePercent$VH();
        }
        public static  @C("DWORD") int IncreasePercent$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$IncreasePercent$VH().get(seg);
        }
        public static  @C("DWORD") int IncreasePercent$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$IncreasePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IncreasePercent$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$IncreasePercent$VH().set(seg, x);
        }
        public static void IncreasePercent$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$IncreasePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DecreasePercent$VH() {
            return winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$DecreasePercent$VH();
        }
        public static  @C("DWORD") int DecreasePercent$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$DecreasePercent$VH().get(seg);
        }
        public static  @C("DWORD") int DecreasePercent$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$DecreasePercent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DecreasePercent$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$DecreasePercent$VH().set(seg, x);
        }
        public static void DecreasePercent$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.PROCESSOR_PERFSTATE_POLICY$DecreasePercent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ADMINISTRATOR_POWER_POLICY")public static class _ADMINISTRATOR_POWER_POLICY {

        /* package-private */ _ADMINISTRATOR_POWER_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$struct$LAYOUT();
        }
        public static VarHandle MinSleep$VH() {
            return winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinSleep$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int MinSleep$get(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinSleep$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int MinSleep$get(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinSleep$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinSleep$set(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinSleep$VH().set(seg, x);
        }
        public static void MinSleep$set(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinSleep$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxSleep$VH() {
            return winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxSleep$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int MaxSleep$get(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxSleep$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int MaxSleep$get(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxSleep$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxSleep$set(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxSleep$VH().set(seg, x);
        }
        public static void MaxSleep$set(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxSleep$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinVideoTimeout$VH() {
            return winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$VH();
        }
        public static  @C("DWORD") int MinVideoTimeout$get(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int MinVideoTimeout$get(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinVideoTimeout$set(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$VH().set(seg, x);
        }
        public static void MinVideoTimeout$set(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxVideoTimeout$VH() {
            return winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$VH();
        }
        public static  @C("DWORD") int MaxVideoTimeout$get(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int MaxVideoTimeout$get(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxVideoTimeout$set(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$VH().set(seg, x);
        }
        public static void MaxVideoTimeout$set(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinSpindownTimeout$VH() {
            return winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$VH();
        }
        public static  @C("DWORD") int MinSpindownTimeout$get(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int MinSpindownTimeout$get(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinSpindownTimeout$set(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$VH().set(seg, x);
        }
        public static void MinSpindownTimeout$set(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxSpindownTimeout$VH() {
            return winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$VH();
        }
        public static  @C("DWORD") int MaxSpindownTimeout$get(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg) {
            return (int)winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int MaxSpindownTimeout$get(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxSpindownTimeout$set(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$VH().set(seg, x);
        }
        public static void MaxSpindownTimeout$set(@C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ADMINISTRATOR_POWER_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ADMINISTRATOR_POWER_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ADMINISTRATOR_POWER_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ADMINISTRATOR_POWER_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ADMINISTRATOR_POWER_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ADMINISTRATOR_POWER_POLICY")public static class ADMINISTRATOR_POWER_POLICY extends _ADMINISTRATOR_POWER_POLICY {

        /* package-private */ ADMINISTRATOR_POWER_POLICY() {}
    }

    @C("struct _HIBERFILE_BUCKET")public static class _HIBERFILE_BUCKET {

        /* package-private */ _HIBERFILE_BUCKET() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8._HIBERFILE_BUCKET$struct$LAYOUT();
        }
        public static VarHandle MaxPhysicalMemory$VH() {
            return winnt_h$constants$8._HIBERFILE_BUCKET$MaxPhysicalMemory$VH();
        }
        public static  @C("DWORD64") long MaxPhysicalMemory$get(@C("struct _HIBERFILE_BUCKET") MemorySegment seg) {
            return (long)winnt_h$constants$8._HIBERFILE_BUCKET$MaxPhysicalMemory$VH().get(seg);
        }
        public static  @C("DWORD64") long MaxPhysicalMemory$get(@C("struct _HIBERFILE_BUCKET") MemorySegment seg, long index) {
            return (long)winnt_h$constants$8._HIBERFILE_BUCKET$MaxPhysicalMemory$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxPhysicalMemory$set(@C("struct _HIBERFILE_BUCKET") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$8._HIBERFILE_BUCKET$MaxPhysicalMemory$VH().set(seg, x);
        }
        public static void MaxPhysicalMemory$set(@C("struct _HIBERFILE_BUCKET") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$8._HIBERFILE_BUCKET$MaxPhysicalMemory$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment PhysicalMemoryPercent$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 12));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _HIBERFILE_BUCKET") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _HIBERFILE_BUCKET") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _HIBERFILE_BUCKET[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _HIBERFILE_BUCKET[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _HIBERFILE_BUCKET*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _HIBERFILE_BUCKET*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _HIBERFILE_BUCKET") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _HIBERFILE_BUCKET")public static class HIBERFILE_BUCKET extends _HIBERFILE_BUCKET {

        /* package-private */ HIBERFILE_BUCKET() {}
    }

    @C("struct ")public static class SYSTEM_POWER_CAPABILITIES {

        /* package-private */ SYSTEM_POWER_CAPABILITIES() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$struct$LAYOUT();
        }
        public static VarHandle PowerButtonPresent$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$VH();
        }
        public static  @C("BOOLEAN") byte PowerButtonPresent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte PowerButtonPresent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PowerButtonPresent$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$VH().set(seg, x);
        }
        public static void PowerButtonPresent$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SleepButtonPresent$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$VH();
        }
        public static  @C("BOOLEAN") byte SleepButtonPresent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte SleepButtonPresent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SleepButtonPresent$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$VH().set(seg, x);
        }
        public static void SleepButtonPresent$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LidPresent$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$LidPresent$VH();
        }
        public static  @C("BOOLEAN") byte LidPresent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$LidPresent$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte LidPresent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$LidPresent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LidPresent$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$LidPresent$VH().set(seg, x);
        }
        public static void LidPresent$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$LidPresent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SystemS1$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS1$VH();
        }
        public static  @C("BOOLEAN") byte SystemS1$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS1$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte SystemS1$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SystemS1$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS1$VH().set(seg, x);
        }
        public static void SystemS1$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SystemS2$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS2$VH();
        }
        public static  @C("BOOLEAN") byte SystemS2$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS2$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte SystemS2$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SystemS2$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS2$VH().set(seg, x);
        }
        public static void SystemS2$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SystemS3$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS3$VH();
        }
        public static  @C("BOOLEAN") byte SystemS3$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS3$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte SystemS3$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SystemS3$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS3$VH().set(seg, x);
        }
        public static void SystemS3$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SystemS4$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS4$VH();
        }
        public static  @C("BOOLEAN") byte SystemS4$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS4$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte SystemS4$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS4$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SystemS4$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS4$VH().set(seg, x);
        }
        public static void SystemS4$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS4$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SystemS5$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS5$VH();
        }
        public static  @C("BOOLEAN") byte SystemS5$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS5$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte SystemS5$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS5$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SystemS5$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS5$VH().set(seg, x);
        }
        public static void SystemS5$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemS5$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HiberFilePresent$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$HiberFilePresent$VH();
        }
        public static  @C("BOOLEAN") byte HiberFilePresent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$HiberFilePresent$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte HiberFilePresent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$HiberFilePresent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HiberFilePresent$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$HiberFilePresent$VH().set(seg, x);
        }
        public static void HiberFilePresent$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$HiberFilePresent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FullWake$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$FullWake$VH();
        }
        public static  @C("BOOLEAN") byte FullWake$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$FullWake$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte FullWake$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$FullWake$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FullWake$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$FullWake$VH().set(seg, x);
        }
        public static void FullWake$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$FullWake$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VideoDimPresent$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$VideoDimPresent$VH();
        }
        public static  @C("BOOLEAN") byte VideoDimPresent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$VideoDimPresent$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte VideoDimPresent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$VideoDimPresent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VideoDimPresent$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$VideoDimPresent$VH().set(seg, x);
        }
        public static void VideoDimPresent$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$VideoDimPresent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ApmPresent$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ApmPresent$VH();
        }
        public static  @C("BOOLEAN") byte ApmPresent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ApmPresent$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte ApmPresent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ApmPresent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ApmPresent$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ApmPresent$VH().set(seg, x);
        }
        public static void ApmPresent$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ApmPresent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle UpsPresent$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$UpsPresent$VH();
        }
        public static  @C("BOOLEAN") byte UpsPresent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$UpsPresent$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte UpsPresent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$UpsPresent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UpsPresent$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$UpsPresent$VH().set(seg, x);
        }
        public static void UpsPresent$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$UpsPresent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ThermalControl$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ThermalControl$VH();
        }
        public static  @C("BOOLEAN") byte ThermalControl$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ThermalControl$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte ThermalControl$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ThermalControl$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ThermalControl$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ThermalControl$VH().set(seg, x);
        }
        public static void ThermalControl$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ThermalControl$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProcessorThrottle$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$VH();
        }
        public static  @C("BOOLEAN") byte ProcessorThrottle$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte ProcessorThrottle$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProcessorThrottle$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$VH().set(seg, x);
        }
        public static void ProcessorThrottle$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProcessorMinThrottle$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$VH();
        }
        public static  @C("BYTE") byte ProcessorMinThrottle$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$VH().get(seg);
        }
        public static  @C("BYTE") byte ProcessorMinThrottle$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProcessorMinThrottle$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$VH().set(seg, x);
        }
        public static void ProcessorMinThrottle$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProcessorMaxThrottle$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$VH();
        }
        public static  @C("BYTE") byte ProcessorMaxThrottle$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$VH().get(seg);
        }
        public static  @C("BYTE") byte ProcessorMaxThrottle$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProcessorMaxThrottle$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$VH().set(seg, x);
        }
        public static void ProcessorMaxThrottle$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FastSystemS4$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$FastSystemS4$VH();
        }
        public static  @C("BOOLEAN") byte FastSystemS4$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$FastSystemS4$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte FastSystemS4$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$FastSystemS4$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FastSystemS4$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$FastSystemS4$VH().set(seg, x);
        }
        public static void FastSystemS4$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$FastSystemS4$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Hiberboot$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$Hiberboot$VH();
        }
        public static  @C("BOOLEAN") byte Hiberboot$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$Hiberboot$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Hiberboot$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$Hiberboot$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Hiberboot$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$Hiberboot$VH().set(seg, x);
        }
        public static void Hiberboot$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$Hiberboot$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle WakeAlarmPresent$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$VH();
        }
        public static  @C("BOOLEAN") byte WakeAlarmPresent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte WakeAlarmPresent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void WakeAlarmPresent$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$VH().set(seg, x);
        }
        public static void WakeAlarmPresent$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AoAc$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AoAc$VH();
        }
        public static  @C("BOOLEAN") byte AoAc$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AoAc$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte AoAc$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AoAc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AoAc$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AoAc$VH().set(seg, x);
        }
        public static void AoAc$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AoAc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DiskSpinDown$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH();
        }
        public static  @C("BOOLEAN") byte DiskSpinDown$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte DiskSpinDown$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DiskSpinDown$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH().set(seg, x);
        }
        public static void DiskSpinDown$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HiberFileType$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$HiberFileType$VH();
        }
        public static  @C("BYTE") byte HiberFileType$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$HiberFileType$VH().get(seg);
        }
        public static  @C("BYTE") byte HiberFileType$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$HiberFileType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HiberFileType$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$HiberFileType$VH().set(seg, x);
        }
        public static void HiberFileType$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$HiberFileType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AoAcConnectivitySupported$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH();
        }
        public static  @C("BOOLEAN") byte AoAcConnectivitySupported$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte AoAcConnectivitySupported$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AoAcConnectivitySupported$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH().set(seg, x);
        }
        public static void AoAcConnectivitySupported$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment spare3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 6));
        }
        public static VarHandle SystemBatteriesPresent$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH();
        }
        public static  @C("BOOLEAN") byte SystemBatteriesPresent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte SystemBatteriesPresent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SystemBatteriesPresent$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH().set(seg, x);
        }
        public static void SystemBatteriesPresent$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BatteriesAreShortTerm$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH();
        }
        public static  @C("BOOLEAN") byte BatteriesAreShortTerm$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte BatteriesAreShortTerm$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BatteriesAreShortTerm$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH().set(seg, x);
        }
        public static void BatteriesAreShortTerm$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment BatteryScale$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 24));
        }
        public static VarHandle AcOnLineWake$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int AcOnLineWake$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int AcOnLineWake$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AcOnLineWake$set(@C("struct ") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH().set(seg, x);
        }
        public static void AcOnLineWake$set(@C("struct ") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SoftLidWake$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int SoftLidWake$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int SoftLidWake$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SoftLidWake$set(@C("struct ") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH().set(seg, x);
        }
        public static void SoftLidWake$set(@C("struct ") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RtcWake$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$RtcWake$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int RtcWake$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$RtcWake$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int RtcWake$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$RtcWake$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RtcWake$set(@C("struct ") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$RtcWake$VH().set(seg, x);
        }
        public static void RtcWake$set(@C("struct ") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$RtcWake$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinDeviceWakeState$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int MinDeviceWakeState$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int MinDeviceWakeState$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinDeviceWakeState$set(@C("struct ") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH().set(seg, x);
        }
        public static void MinDeviceWakeState$set(@C("struct ") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DefaultLowLatencyWake$VH() {
            return winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH();
        }
        public static  @C("SYSTEM_POWER_STATE") int DefaultLowLatencyWake$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH().get(seg);
        }
        public static  @C("SYSTEM_POWER_STATE") int DefaultLowLatencyWake$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DefaultLowLatencyWake$set(@C("struct ") MemorySegment seg, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH().set(seg, x);
        }
        public static void DefaultLowLatencyWake$set(@C("struct ") MemorySegment seg, long index, @C("SYSTEM_POWER_STATE") int x) {
            winnt_h$constants$8.SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ")public static class SYSTEM_BATTERY_STATE {

        /* package-private */ SYSTEM_BATTERY_STATE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8.SYSTEM_BATTERY_STATE$struct$LAYOUT();
        }
        public static VarHandle AcOnLine$VH() {
            return winnt_h$constants$8.SYSTEM_BATTERY_STATE$AcOnLine$VH();
        }
        public static  @C("BOOLEAN") byte AcOnLine$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_BATTERY_STATE$AcOnLine$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte AcOnLine$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_BATTERY_STATE$AcOnLine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AcOnLine$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$AcOnLine$VH().set(seg, x);
        }
        public static void AcOnLine$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$AcOnLine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BatteryPresent$VH() {
            return winnt_h$constants$8.SYSTEM_BATTERY_STATE$BatteryPresent$VH();
        }
        public static  @C("BOOLEAN") byte BatteryPresent$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_BATTERY_STATE$BatteryPresent$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte BatteryPresent$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_BATTERY_STATE$BatteryPresent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BatteryPresent$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$BatteryPresent$VH().set(seg, x);
        }
        public static void BatteryPresent$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$BatteryPresent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Charging$VH() {
            return winnt_h$constants$8.SYSTEM_BATTERY_STATE$Charging$VH();
        }
        public static  @C("BOOLEAN") byte Charging$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_BATTERY_STATE$Charging$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Charging$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_BATTERY_STATE$Charging$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Charging$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$Charging$VH().set(seg, x);
        }
        public static void Charging$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$Charging$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Discharging$VH() {
            return winnt_h$constants$8.SYSTEM_BATTERY_STATE$Discharging$VH();
        }
        public static  @C("BOOLEAN") byte Discharging$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_BATTERY_STATE$Discharging$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Discharging$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_BATTERY_STATE$Discharging$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Discharging$set(@C("struct ") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$Discharging$VH().set(seg, x);
        }
        public static void Discharging$set(@C("struct ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$Discharging$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Spare1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 3));
        }
        public static VarHandle Tag$VH() {
            return winnt_h$constants$8.SYSTEM_BATTERY_STATE$Tag$VH();
        }
        public static  @C("BYTE") byte Tag$get(@C("struct ") MemorySegment seg) {
            return (byte)winnt_h$constants$8.SYSTEM_BATTERY_STATE$Tag$VH().get(seg);
        }
        public static  @C("BYTE") byte Tag$get(@C("struct ") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8.SYSTEM_BATTERY_STATE$Tag$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Tag$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$Tag$VH().set(seg, x);
        }
        public static void Tag$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$Tag$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxCapacity$VH() {
            return winnt_h$constants$8.SYSTEM_BATTERY_STATE$MaxCapacity$VH();
        }
        public static  @C("DWORD") int MaxCapacity$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_BATTERY_STATE$MaxCapacity$VH().get(seg);
        }
        public static  @C("DWORD") int MaxCapacity$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_BATTERY_STATE$MaxCapacity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxCapacity$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$MaxCapacity$VH().set(seg, x);
        }
        public static void MaxCapacity$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$MaxCapacity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RemainingCapacity$VH() {
            return winnt_h$constants$8.SYSTEM_BATTERY_STATE$RemainingCapacity$VH();
        }
        public static  @C("DWORD") int RemainingCapacity$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_BATTERY_STATE$RemainingCapacity$VH().get(seg);
        }
        public static  @C("DWORD") int RemainingCapacity$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_BATTERY_STATE$RemainingCapacity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RemainingCapacity$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$RemainingCapacity$VH().set(seg, x);
        }
        public static void RemainingCapacity$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$RemainingCapacity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Rate$VH() {
            return winnt_h$constants$8.SYSTEM_BATTERY_STATE$Rate$VH();
        }
        public static  @C("DWORD") int Rate$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_BATTERY_STATE$Rate$VH().get(seg);
        }
        public static  @C("DWORD") int Rate$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_BATTERY_STATE$Rate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Rate$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$Rate$VH().set(seg, x);
        }
        public static void Rate$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$Rate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EstimatedTime$VH() {
            return winnt_h$constants$8.SYSTEM_BATTERY_STATE$EstimatedTime$VH();
        }
        public static  @C("DWORD") int EstimatedTime$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_BATTERY_STATE$EstimatedTime$VH().get(seg);
        }
        public static  @C("DWORD") int EstimatedTime$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_BATTERY_STATE$EstimatedTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EstimatedTime$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$EstimatedTime$VH().set(seg, x);
        }
        public static void EstimatedTime$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$EstimatedTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DefaultAlert1$VH() {
            return winnt_h$constants$8.SYSTEM_BATTERY_STATE$DefaultAlert1$VH();
        }
        public static  @C("DWORD") int DefaultAlert1$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_BATTERY_STATE$DefaultAlert1$VH().get(seg);
        }
        public static  @C("DWORD") int DefaultAlert1$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_BATTERY_STATE$DefaultAlert1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DefaultAlert1$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$DefaultAlert1$VH().set(seg, x);
        }
        public static void DefaultAlert1$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$DefaultAlert1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DefaultAlert2$VH() {
            return winnt_h$constants$8.SYSTEM_BATTERY_STATE$DefaultAlert2$VH();
        }
        public static  @C("DWORD") int DefaultAlert2$get(@C("struct ") MemorySegment seg) {
            return (int)winnt_h$constants$8.SYSTEM_BATTERY_STATE$DefaultAlert2$VH().get(seg);
        }
        public static  @C("DWORD") int DefaultAlert2$get(@C("struct ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8.SYSTEM_BATTERY_STATE$DefaultAlert2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DefaultAlert2$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$DefaultAlert2$VH().set(seg, x);
        }
        public static void DefaultAlert2$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8.SYSTEM_BATTERY_STATE$DefaultAlert2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct []") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct *") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_DOS_HEADER")public static class _IMAGE_DOS_HEADER {

        /* package-private */ _IMAGE_DOS_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$struct$LAYOUT();
        }
        public static VarHandle e_magic$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_magic$VH();
        }
        public static  @C("WORD") short e_magic$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_magic$VH().get(seg);
        }
        public static  @C("WORD") short e_magic$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_magic$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_magic$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_magic$VH().set(seg, x);
        }
        public static void e_magic$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_magic$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_cblp$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_cblp$VH();
        }
        public static  @C("WORD") short e_cblp$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_cblp$VH().get(seg);
        }
        public static  @C("WORD") short e_cblp$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_cblp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_cblp$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_cblp$VH().set(seg, x);
        }
        public static void e_cblp$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_cblp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_cp$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_cp$VH();
        }
        public static  @C("WORD") short e_cp$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_cp$VH().get(seg);
        }
        public static  @C("WORD") short e_cp$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_cp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_cp$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_cp$VH().set(seg, x);
        }
        public static void e_cp$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_cp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_crlc$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_crlc$VH();
        }
        public static  @C("WORD") short e_crlc$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_crlc$VH().get(seg);
        }
        public static  @C("WORD") short e_crlc$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_crlc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_crlc$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_crlc$VH().set(seg, x);
        }
        public static void e_crlc$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_crlc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_cparhdr$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_cparhdr$VH();
        }
        public static  @C("WORD") short e_cparhdr$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_cparhdr$VH().get(seg);
        }
        public static  @C("WORD") short e_cparhdr$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_cparhdr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_cparhdr$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_cparhdr$VH().set(seg, x);
        }
        public static void e_cparhdr$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_cparhdr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_minalloc$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_minalloc$VH();
        }
        public static  @C("WORD") short e_minalloc$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_minalloc$VH().get(seg);
        }
        public static  @C("WORD") short e_minalloc$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_minalloc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_minalloc$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_minalloc$VH().set(seg, x);
        }
        public static void e_minalloc$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_minalloc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_maxalloc$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_maxalloc$VH();
        }
        public static  @C("WORD") short e_maxalloc$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_maxalloc$VH().get(seg);
        }
        public static  @C("WORD") short e_maxalloc$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_maxalloc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_maxalloc$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_maxalloc$VH().set(seg, x);
        }
        public static void e_maxalloc$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_maxalloc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_ss$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_ss$VH();
        }
        public static  @C("WORD") short e_ss$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_ss$VH().get(seg);
        }
        public static  @C("WORD") short e_ss$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_ss$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_ss$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_ss$VH().set(seg, x);
        }
        public static void e_ss$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_ss$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_sp$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_sp$VH();
        }
        public static  @C("WORD") short e_sp$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_sp$VH().get(seg);
        }
        public static  @C("WORD") short e_sp$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_sp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_sp$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_sp$VH().set(seg, x);
        }
        public static void e_sp$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_sp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_csum$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_csum$VH();
        }
        public static  @C("WORD") short e_csum$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_csum$VH().get(seg);
        }
        public static  @C("WORD") short e_csum$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_csum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_csum$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_csum$VH().set(seg, x);
        }
        public static void e_csum$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_csum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_ip$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_ip$VH();
        }
        public static  @C("WORD") short e_ip$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_ip$VH().get(seg);
        }
        public static  @C("WORD") short e_ip$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_ip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_ip$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_ip$VH().set(seg, x);
        }
        public static void e_ip$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_ip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_cs$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_cs$VH();
        }
        public static  @C("WORD") short e_cs$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_cs$VH().get(seg);
        }
        public static  @C("WORD") short e_cs$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_cs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_cs$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_cs$VH().set(seg, x);
        }
        public static void e_cs$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_cs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_lfarlc$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_lfarlc$VH();
        }
        public static  @C("WORD") short e_lfarlc$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_lfarlc$VH().get(seg);
        }
        public static  @C("WORD") short e_lfarlc$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_lfarlc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_lfarlc$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_lfarlc$VH().set(seg, x);
        }
        public static void e_lfarlc$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_lfarlc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_ovno$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_ovno$VH();
        }
        public static  @C("WORD") short e_ovno$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_ovno$VH().get(seg);
        }
        public static  @C("WORD") short e_ovno$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_ovno$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_ovno$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_ovno$VH().set(seg, x);
        }
        public static void e_ovno$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_ovno$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment e_res$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 8));
        }
        public static VarHandle e_oemid$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_oemid$VH();
        }
        public static  @C("WORD") short e_oemid$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_oemid$VH().get(seg);
        }
        public static  @C("WORD") short e_oemid$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_oemid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_oemid$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_oemid$VH().set(seg, x);
        }
        public static void e_oemid$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_oemid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e_oeminfo$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_oeminfo$VH();
        }
        public static  @C("WORD") short e_oeminfo$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_oeminfo$VH().get(seg);
        }
        public static  @C("WORD") short e_oeminfo$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_DOS_HEADER$e_oeminfo$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_oeminfo$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_oeminfo$VH().set(seg, x);
        }
        public static void e_oeminfo$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_oeminfo$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment e_res2$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 20));
        }
        public static VarHandle e_lfanew$VH() {
            return winnt_h$constants$8._IMAGE_DOS_HEADER$e_lfanew$VH();
        }
        public static  @C("LONG") int e_lfanew$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_DOS_HEADER$e_lfanew$VH().get(seg);
        }
        public static  @C("LONG") int e_lfanew$get(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_DOS_HEADER$e_lfanew$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e_lfanew$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, @C("LONG") int x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_lfanew$VH().set(seg, x);
        }
        public static void e_lfanew$set(@C("struct _IMAGE_DOS_HEADER") MemorySegment seg, long index, @C("LONG") int x) {
            winnt_h$constants$8._IMAGE_DOS_HEADER$e_lfanew$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_DOS_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_DOS_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_DOS_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_DOS_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_DOS_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_DOS_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_DOS_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_DOS_HEADER")public static class IMAGE_DOS_HEADER extends _IMAGE_DOS_HEADER {

        /* package-private */ IMAGE_DOS_HEADER() {}
    }

    @C("struct _IMAGE_OS2_HEADER")public static class _IMAGE_OS2_HEADER {

        /* package-private */ _IMAGE_OS2_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$struct$LAYOUT();
        }
        public static VarHandle ne_magic$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_magic$VH();
        }
        public static  @C("WORD") short ne_magic$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_magic$VH().get(seg);
        }
        public static  @C("WORD") short ne_magic$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_magic$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_magic$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_magic$VH().set(seg, x);
        }
        public static void ne_magic$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_magic$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_ver$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_ver$VH();
        }
        public static  @C("CHAR") byte ne_ver$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_ver$VH().get(seg);
        }
        public static  @C("CHAR") byte ne_ver$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_ver$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_ver$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("CHAR") byte x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_ver$VH().set(seg, x);
        }
        public static void ne_ver$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("CHAR") byte x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_ver$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_rev$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_rev$VH();
        }
        public static  @C("CHAR") byte ne_rev$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_rev$VH().get(seg);
        }
        public static  @C("CHAR") byte ne_rev$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_rev$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_rev$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("CHAR") byte x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_rev$VH().set(seg, x);
        }
        public static void ne_rev$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("CHAR") byte x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_rev$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_enttab$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_enttab$VH();
        }
        public static  @C("WORD") short ne_enttab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_enttab$VH().get(seg);
        }
        public static  @C("WORD") short ne_enttab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_enttab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_enttab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_enttab$VH().set(seg, x);
        }
        public static void ne_enttab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_enttab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_cbenttab$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cbenttab$VH();
        }
        public static  @C("WORD") short ne_cbenttab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cbenttab$VH().get(seg);
        }
        public static  @C("WORD") short ne_cbenttab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cbenttab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_cbenttab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cbenttab$VH().set(seg, x);
        }
        public static void ne_cbenttab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cbenttab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_crc$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_crc$VH();
        }
        public static  @C("LONG") int ne_crc$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_crc$VH().get(seg);
        }
        public static  @C("LONG") int ne_crc$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_crc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_crc$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("LONG") int x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_crc$VH().set(seg, x);
        }
        public static void ne_crc$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("LONG") int x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_crc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_flags$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_flags$VH();
        }
        public static  @C("WORD") short ne_flags$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_flags$VH().get(seg);
        }
        public static  @C("WORD") short ne_flags$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_flags$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_flags$VH().set(seg, x);
        }
        public static void ne_flags$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_autodata$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_autodata$VH();
        }
        public static  @C("WORD") short ne_autodata$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_autodata$VH().get(seg);
        }
        public static  @C("WORD") short ne_autodata$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_autodata$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_autodata$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_autodata$VH().set(seg, x);
        }
        public static void ne_autodata$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_autodata$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_heap$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_heap$VH();
        }
        public static  @C("WORD") short ne_heap$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_heap$VH().get(seg);
        }
        public static  @C("WORD") short ne_heap$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_heap$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_heap$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_heap$VH().set(seg, x);
        }
        public static void ne_heap$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_heap$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_stack$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_stack$VH();
        }
        public static  @C("WORD") short ne_stack$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_stack$VH().get(seg);
        }
        public static  @C("WORD") short ne_stack$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_stack$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_stack$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_stack$VH().set(seg, x);
        }
        public static void ne_stack$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_stack$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_csip$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_csip$VH();
        }
        public static  @C("LONG") int ne_csip$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_csip$VH().get(seg);
        }
        public static  @C("LONG") int ne_csip$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_csip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_csip$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("LONG") int x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_csip$VH().set(seg, x);
        }
        public static void ne_csip$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("LONG") int x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_csip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_sssp$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_sssp$VH();
        }
        public static  @C("LONG") int ne_sssp$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_sssp$VH().get(seg);
        }
        public static  @C("LONG") int ne_sssp$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_sssp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_sssp$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("LONG") int x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_sssp$VH().set(seg, x);
        }
        public static void ne_sssp$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("LONG") int x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_sssp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_cseg$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cseg$VH();
        }
        public static  @C("WORD") short ne_cseg$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cseg$VH().get(seg);
        }
        public static  @C("WORD") short ne_cseg$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cseg$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_cseg$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cseg$VH().set(seg, x);
        }
        public static void ne_cseg$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cseg$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_cmod$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cmod$VH();
        }
        public static  @C("WORD") short ne_cmod$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cmod$VH().get(seg);
        }
        public static  @C("WORD") short ne_cmod$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cmod$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_cmod$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cmod$VH().set(seg, x);
        }
        public static void ne_cmod$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cmod$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_cbnrestab$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cbnrestab$VH();
        }
        public static  @C("WORD") short ne_cbnrestab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cbnrestab$VH().get(seg);
        }
        public static  @C("WORD") short ne_cbnrestab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cbnrestab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_cbnrestab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cbnrestab$VH().set(seg, x);
        }
        public static void ne_cbnrestab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cbnrestab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_segtab$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_segtab$VH();
        }
        public static  @C("WORD") short ne_segtab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_segtab$VH().get(seg);
        }
        public static  @C("WORD") short ne_segtab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_segtab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_segtab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_segtab$VH().set(seg, x);
        }
        public static void ne_segtab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_segtab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_rsrctab$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_rsrctab$VH();
        }
        public static  @C("WORD") short ne_rsrctab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_rsrctab$VH().get(seg);
        }
        public static  @C("WORD") short ne_rsrctab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_rsrctab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_rsrctab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_rsrctab$VH().set(seg, x);
        }
        public static void ne_rsrctab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_rsrctab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_restab$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_restab$VH();
        }
        public static  @C("WORD") short ne_restab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_restab$VH().get(seg);
        }
        public static  @C("WORD") short ne_restab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_restab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_restab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_restab$VH().set(seg, x);
        }
        public static void ne_restab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_restab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_modtab$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_modtab$VH();
        }
        public static  @C("WORD") short ne_modtab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_modtab$VH().get(seg);
        }
        public static  @C("WORD") short ne_modtab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_modtab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_modtab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_modtab$VH().set(seg, x);
        }
        public static void ne_modtab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_modtab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_imptab$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_imptab$VH();
        }
        public static  @C("WORD") short ne_imptab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_imptab$VH().get(seg);
        }
        public static  @C("WORD") short ne_imptab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_imptab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_imptab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_imptab$VH().set(seg, x);
        }
        public static void ne_imptab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_imptab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_nrestab$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_nrestab$VH();
        }
        public static  @C("LONG") int ne_nrestab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_nrestab$VH().get(seg);
        }
        public static  @C("LONG") int ne_nrestab$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_nrestab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_nrestab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("LONG") int x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_nrestab$VH().set(seg, x);
        }
        public static void ne_nrestab$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("LONG") int x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_nrestab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_cmovent$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cmovent$VH();
        }
        public static  @C("WORD") short ne_cmovent$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cmovent$VH().get(seg);
        }
        public static  @C("WORD") short ne_cmovent$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cmovent$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_cmovent$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cmovent$VH().set(seg, x);
        }
        public static void ne_cmovent$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cmovent$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_align$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_align$VH();
        }
        public static  @C("WORD") short ne_align$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_align$VH().get(seg);
        }
        public static  @C("WORD") short ne_align$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_align$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_align$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_align$VH().set(seg, x);
        }
        public static void ne_align$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_align$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_cres$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cres$VH();
        }
        public static  @C("WORD") short ne_cres$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cres$VH().get(seg);
        }
        public static  @C("WORD") short ne_cres$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cres$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_cres$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cres$VH().set(seg, x);
        }
        public static void ne_cres$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_cres$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_exetyp$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_exetyp$VH();
        }
        public static  @C("BYTE") byte ne_exetyp$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_exetyp$VH().get(seg);
        }
        public static  @C("BYTE") byte ne_exetyp$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_exetyp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_exetyp$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_exetyp$VH().set(seg, x);
        }
        public static void ne_exetyp$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_exetyp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_flagsothers$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_flagsothers$VH();
        }
        public static  @C("BYTE") byte ne_flagsothers$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_flagsothers$VH().get(seg);
        }
        public static  @C("BYTE") byte ne_flagsothers$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_flagsothers$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_flagsothers$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_flagsothers$VH().set(seg, x);
        }
        public static void ne_flagsothers$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_flagsothers$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_pretthunks$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_pretthunks$VH();
        }
        public static  @C("WORD") short ne_pretthunks$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_pretthunks$VH().get(seg);
        }
        public static  @C("WORD") short ne_pretthunks$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_pretthunks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_pretthunks$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_pretthunks$VH().set(seg, x);
        }
        public static void ne_pretthunks$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_pretthunks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_psegrefbytes$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_psegrefbytes$VH();
        }
        public static  @C("WORD") short ne_psegrefbytes$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_psegrefbytes$VH().get(seg);
        }
        public static  @C("WORD") short ne_psegrefbytes$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_psegrefbytes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_psegrefbytes$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_psegrefbytes$VH().set(seg, x);
        }
        public static void ne_psegrefbytes$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_psegrefbytes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_swaparea$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_swaparea$VH();
        }
        public static  @C("WORD") short ne_swaparea$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_swaparea$VH().get(seg);
        }
        public static  @C("WORD") short ne_swaparea$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_swaparea$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_swaparea$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_swaparea$VH().set(seg, x);
        }
        public static void ne_swaparea$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_swaparea$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ne_expver$VH() {
            return winnt_h$constants$8._IMAGE_OS2_HEADER$ne_expver$VH();
        }
        public static  @C("WORD") short ne_expver$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_expver$VH().get(seg);
        }
        public static  @C("WORD") short ne_expver$get(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_OS2_HEADER$ne_expver$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ne_expver$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_expver$VH().set(seg, x);
        }
        public static void ne_expver$set(@C("struct _IMAGE_OS2_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_OS2_HEADER$ne_expver$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_OS2_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_OS2_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_OS2_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_OS2_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_OS2_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_OS2_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_OS2_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_OS2_HEADER")public static class IMAGE_OS2_HEADER extends _IMAGE_OS2_HEADER {

        /* package-private */ IMAGE_OS2_HEADER() {}
    }

    @C("struct _IMAGE_VXD_HEADER")public static class _IMAGE_VXD_HEADER {

        /* package-private */ _IMAGE_VXD_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$struct$LAYOUT();
        }
        public static VarHandle e32_magic$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_magic$VH();
        }
        public static  @C("WORD") short e32_magic$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_magic$VH().get(seg);
        }
        public static  @C("WORD") short e32_magic$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_magic$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_magic$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_magic$VH().set(seg, x);
        }
        public static void e32_magic$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_magic$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_border$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_border$VH();
        }
        public static  @C("BYTE") byte e32_border$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_border$VH().get(seg);
        }
        public static  @C("BYTE") byte e32_border$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_border$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_border$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_border$VH().set(seg, x);
        }
        public static void e32_border$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_border$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_worder$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_worder$VH();
        }
        public static  @C("BYTE") byte e32_worder$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_worder$VH().get(seg);
        }
        public static  @C("BYTE") byte e32_worder$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_worder$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_worder$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_worder$VH().set(seg, x);
        }
        public static void e32_worder$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_worder$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_level$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_level$VH();
        }
        public static  @C("DWORD") int e32_level$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_level$VH().get(seg);
        }
        public static  @C("DWORD") int e32_level$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_level$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_level$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_level$VH().set(seg, x);
        }
        public static void e32_level$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_level$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_cpu$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_cpu$VH();
        }
        public static  @C("WORD") short e32_cpu$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_cpu$VH().get(seg);
        }
        public static  @C("WORD") short e32_cpu$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_cpu$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_cpu$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_cpu$VH().set(seg, x);
        }
        public static void e32_cpu$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_cpu$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_os$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_os$VH();
        }
        public static  @C("WORD") short e32_os$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_os$VH().get(seg);
        }
        public static  @C("WORD") short e32_os$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_os$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_os$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_os$VH().set(seg, x);
        }
        public static void e32_os$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_os$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_ver$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ver$VH();
        }
        public static  @C("DWORD") int e32_ver$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ver$VH().get(seg);
        }
        public static  @C("DWORD") int e32_ver$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ver$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_ver$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ver$VH().set(seg, x);
        }
        public static void e32_ver$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ver$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_mflags$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_mflags$VH();
        }
        public static  @C("DWORD") int e32_mflags$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_mflags$VH().get(seg);
        }
        public static  @C("DWORD") int e32_mflags$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_mflags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_mflags$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_mflags$VH().set(seg, x);
        }
        public static void e32_mflags$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_mflags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_mpages$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_mpages$VH();
        }
        public static  @C("DWORD") int e32_mpages$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_mpages$VH().get(seg);
        }
        public static  @C("DWORD") int e32_mpages$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_mpages$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_mpages$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_mpages$VH().set(seg, x);
        }
        public static void e32_mpages$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_mpages$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_startobj$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_startobj$VH();
        }
        public static  @C("DWORD") int e32_startobj$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_startobj$VH().get(seg);
        }
        public static  @C("DWORD") int e32_startobj$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_startobj$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_startobj$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_startobj$VH().set(seg, x);
        }
        public static void e32_startobj$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_startobj$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_eip$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_eip$VH();
        }
        public static  @C("DWORD") int e32_eip$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_eip$VH().get(seg);
        }
        public static  @C("DWORD") int e32_eip$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_eip$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_eip$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_eip$VH().set(seg, x);
        }
        public static void e32_eip$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_eip$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_stackobj$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_stackobj$VH();
        }
        public static  @C("DWORD") int e32_stackobj$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_stackobj$VH().get(seg);
        }
        public static  @C("DWORD") int e32_stackobj$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_stackobj$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_stackobj$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_stackobj$VH().set(seg, x);
        }
        public static void e32_stackobj$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_stackobj$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_esp$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_esp$VH();
        }
        public static  @C("DWORD") int e32_esp$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_esp$VH().get(seg);
        }
        public static  @C("DWORD") int e32_esp$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_esp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_esp$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_esp$VH().set(seg, x);
        }
        public static void e32_esp$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_esp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_pagesize$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_pagesize$VH();
        }
        public static  @C("DWORD") int e32_pagesize$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_pagesize$VH().get(seg);
        }
        public static  @C("DWORD") int e32_pagesize$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_pagesize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_pagesize$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_pagesize$VH().set(seg, x);
        }
        public static void e32_pagesize$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_pagesize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_lastpagesize$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_lastpagesize$VH();
        }
        public static  @C("DWORD") int e32_lastpagesize$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_lastpagesize$VH().get(seg);
        }
        public static  @C("DWORD") int e32_lastpagesize$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_lastpagesize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_lastpagesize$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_lastpagesize$VH().set(seg, x);
        }
        public static void e32_lastpagesize$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_lastpagesize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_fixupsize$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fixupsize$VH();
        }
        public static  @C("DWORD") int e32_fixupsize$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fixupsize$VH().get(seg);
        }
        public static  @C("DWORD") int e32_fixupsize$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fixupsize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_fixupsize$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fixupsize$VH().set(seg, x);
        }
        public static void e32_fixupsize$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fixupsize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_fixupsum$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fixupsum$VH();
        }
        public static  @C("DWORD") int e32_fixupsum$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fixupsum$VH().get(seg);
        }
        public static  @C("DWORD") int e32_fixupsum$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fixupsum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_fixupsum$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fixupsum$VH().set(seg, x);
        }
        public static void e32_fixupsum$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fixupsum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_ldrsize$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ldrsize$VH();
        }
        public static  @C("DWORD") int e32_ldrsize$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ldrsize$VH().get(seg);
        }
        public static  @C("DWORD") int e32_ldrsize$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ldrsize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_ldrsize$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ldrsize$VH().set(seg, x);
        }
        public static void e32_ldrsize$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ldrsize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_ldrsum$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ldrsum$VH();
        }
        public static  @C("DWORD") int e32_ldrsum$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ldrsum$VH().get(seg);
        }
        public static  @C("DWORD") int e32_ldrsum$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ldrsum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_ldrsum$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ldrsum$VH().set(seg, x);
        }
        public static void e32_ldrsum$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_ldrsum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_objtab$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objtab$VH();
        }
        public static  @C("DWORD") int e32_objtab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objtab$VH().get(seg);
        }
        public static  @C("DWORD") int e32_objtab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objtab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_objtab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objtab$VH().set(seg, x);
        }
        public static void e32_objtab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objtab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_objcnt$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objcnt$VH();
        }
        public static  @C("DWORD") int e32_objcnt$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objcnt$VH().get(seg);
        }
        public static  @C("DWORD") int e32_objcnt$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objcnt$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_objcnt$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objcnt$VH().set(seg, x);
        }
        public static void e32_objcnt$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objcnt$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_objmap$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objmap$VH();
        }
        public static  @C("DWORD") int e32_objmap$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objmap$VH().get(seg);
        }
        public static  @C("DWORD") int e32_objmap$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objmap$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_objmap$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objmap$VH().set(seg, x);
        }
        public static void e32_objmap$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_objmap$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_itermap$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_itermap$VH();
        }
        public static  @C("DWORD") int e32_itermap$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_itermap$VH().get(seg);
        }
        public static  @C("DWORD") int e32_itermap$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_itermap$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_itermap$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_itermap$VH().set(seg, x);
        }
        public static void e32_itermap$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_itermap$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_rsrctab$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_rsrctab$VH();
        }
        public static  @C("DWORD") int e32_rsrctab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_rsrctab$VH().get(seg);
        }
        public static  @C("DWORD") int e32_rsrctab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_rsrctab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_rsrctab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_rsrctab$VH().set(seg, x);
        }
        public static void e32_rsrctab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_rsrctab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_rsrccnt$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_rsrccnt$VH();
        }
        public static  @C("DWORD") int e32_rsrccnt$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_rsrccnt$VH().get(seg);
        }
        public static  @C("DWORD") int e32_rsrccnt$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_rsrccnt$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_rsrccnt$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_rsrccnt$VH().set(seg, x);
        }
        public static void e32_rsrccnt$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_rsrccnt$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_restab$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_restab$VH();
        }
        public static  @C("DWORD") int e32_restab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_restab$VH().get(seg);
        }
        public static  @C("DWORD") int e32_restab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_restab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_restab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_restab$VH().set(seg, x);
        }
        public static void e32_restab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_restab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_enttab$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_enttab$VH();
        }
        public static  @C("DWORD") int e32_enttab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_enttab$VH().get(seg);
        }
        public static  @C("DWORD") int e32_enttab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_enttab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_enttab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_enttab$VH().set(seg, x);
        }
        public static void e32_enttab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_enttab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_dirtab$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_dirtab$VH();
        }
        public static  @C("DWORD") int e32_dirtab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_dirtab$VH().get(seg);
        }
        public static  @C("DWORD") int e32_dirtab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_dirtab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_dirtab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_dirtab$VH().set(seg, x);
        }
        public static void e32_dirtab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_dirtab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_dircnt$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_dircnt$VH();
        }
        public static  @C("DWORD") int e32_dircnt$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_dircnt$VH().get(seg);
        }
        public static  @C("DWORD") int e32_dircnt$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_dircnt$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_dircnt$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_dircnt$VH().set(seg, x);
        }
        public static void e32_dircnt$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_dircnt$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_fpagetab$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fpagetab$VH();
        }
        public static  @C("DWORD") int e32_fpagetab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fpagetab$VH().get(seg);
        }
        public static  @C("DWORD") int e32_fpagetab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fpagetab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_fpagetab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fpagetab$VH().set(seg, x);
        }
        public static void e32_fpagetab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_fpagetab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_frectab$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_frectab$VH();
        }
        public static  @C("DWORD") int e32_frectab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_frectab$VH().get(seg);
        }
        public static  @C("DWORD") int e32_frectab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_frectab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_frectab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_frectab$VH().set(seg, x);
        }
        public static void e32_frectab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_frectab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_impmod$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impmod$VH();
        }
        public static  @C("DWORD") int e32_impmod$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impmod$VH().get(seg);
        }
        public static  @C("DWORD") int e32_impmod$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impmod$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_impmod$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impmod$VH().set(seg, x);
        }
        public static void e32_impmod$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impmod$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_impmodcnt$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impmodcnt$VH();
        }
        public static  @C("DWORD") int e32_impmodcnt$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impmodcnt$VH().get(seg);
        }
        public static  @C("DWORD") int e32_impmodcnt$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impmodcnt$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_impmodcnt$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impmodcnt$VH().set(seg, x);
        }
        public static void e32_impmodcnt$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impmodcnt$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_impproc$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impproc$VH();
        }
        public static  @C("DWORD") int e32_impproc$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impproc$VH().get(seg);
        }
        public static  @C("DWORD") int e32_impproc$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impproc$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_impproc$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impproc$VH().set(seg, x);
        }
        public static void e32_impproc$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_impproc$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_pagesum$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_pagesum$VH();
        }
        public static  @C("DWORD") int e32_pagesum$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_pagesum$VH().get(seg);
        }
        public static  @C("DWORD") int e32_pagesum$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_pagesum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_pagesum$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_pagesum$VH().set(seg, x);
        }
        public static void e32_pagesum$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_pagesum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_datapage$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_datapage$VH();
        }
        public static  @C("DWORD") int e32_datapage$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_datapage$VH().get(seg);
        }
        public static  @C("DWORD") int e32_datapage$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_datapage$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_datapage$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_datapage$VH().set(seg, x);
        }
        public static void e32_datapage$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_datapage$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_preload$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_preload$VH();
        }
        public static  @C("DWORD") int e32_preload$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_preload$VH().get(seg);
        }
        public static  @C("DWORD") int e32_preload$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_preload$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_preload$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_preload$VH().set(seg, x);
        }
        public static void e32_preload$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_preload$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_nrestab$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_nrestab$VH();
        }
        public static  @C("DWORD") int e32_nrestab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_nrestab$VH().get(seg);
        }
        public static  @C("DWORD") int e32_nrestab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_nrestab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_nrestab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_nrestab$VH().set(seg, x);
        }
        public static void e32_nrestab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_nrestab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_cbnrestab$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_cbnrestab$VH();
        }
        public static  @C("DWORD") int e32_cbnrestab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_cbnrestab$VH().get(seg);
        }
        public static  @C("DWORD") int e32_cbnrestab$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_cbnrestab$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_cbnrestab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_cbnrestab$VH().set(seg, x);
        }
        public static void e32_cbnrestab$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_cbnrestab$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_nressum$VH() {
            return winnt_h$constants$8._IMAGE_VXD_HEADER$e32_nressum$VH();
        }
        public static  @C("DWORD") int e32_nressum$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_nressum$VH().get(seg);
        }
        public static  @C("DWORD") int e32_nressum$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$8._IMAGE_VXD_HEADER$e32_nressum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_nressum$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_nressum$VH().set(seg, x);
        }
        public static void e32_nressum$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$8._IMAGE_VXD_HEADER$e32_nressum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_autodata$VH() {
            return winnt_h$constants$9._IMAGE_VXD_HEADER$e32_autodata$VH();
        }
        public static  @C("DWORD") int e32_autodata$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_autodata$VH().get(seg);
        }
        public static  @C("DWORD") int e32_autodata$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_autodata$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_autodata$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_autodata$VH().set(seg, x);
        }
        public static void e32_autodata$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_autodata$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_debuginfo$VH() {
            return winnt_h$constants$9._IMAGE_VXD_HEADER$e32_debuginfo$VH();
        }
        public static  @C("DWORD") int e32_debuginfo$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_debuginfo$VH().get(seg);
        }
        public static  @C("DWORD") int e32_debuginfo$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_debuginfo$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_debuginfo$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_debuginfo$VH().set(seg, x);
        }
        public static void e32_debuginfo$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_debuginfo$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_debuglen$VH() {
            return winnt_h$constants$9._IMAGE_VXD_HEADER$e32_debuglen$VH();
        }
        public static  @C("DWORD") int e32_debuglen$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_debuglen$VH().get(seg);
        }
        public static  @C("DWORD") int e32_debuglen$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_debuglen$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_debuglen$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_debuglen$VH().set(seg, x);
        }
        public static void e32_debuglen$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_debuglen$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_instpreload$VH() {
            return winnt_h$constants$9._IMAGE_VXD_HEADER$e32_instpreload$VH();
        }
        public static  @C("DWORD") int e32_instpreload$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_instpreload$VH().get(seg);
        }
        public static  @C("DWORD") int e32_instpreload$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_instpreload$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_instpreload$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_instpreload$VH().set(seg, x);
        }
        public static void e32_instpreload$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_instpreload$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_instdemand$VH() {
            return winnt_h$constants$9._IMAGE_VXD_HEADER$e32_instdemand$VH();
        }
        public static  @C("DWORD") int e32_instdemand$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_instdemand$VH().get(seg);
        }
        public static  @C("DWORD") int e32_instdemand$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_instdemand$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_instdemand$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_instdemand$VH().set(seg, x);
        }
        public static void e32_instdemand$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_instdemand$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_heapsize$VH() {
            return winnt_h$constants$9._IMAGE_VXD_HEADER$e32_heapsize$VH();
        }
        public static  @C("DWORD") int e32_heapsize$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_heapsize$VH().get(seg);
        }
        public static  @C("DWORD") int e32_heapsize$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_heapsize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_heapsize$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_heapsize$VH().set(seg, x);
        }
        public static void e32_heapsize$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_heapsize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment e32_res3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(172, 12));
        }
        public static VarHandle e32_winresoff$VH() {
            return winnt_h$constants$9._IMAGE_VXD_HEADER$e32_winresoff$VH();
        }
        public static  @C("DWORD") int e32_winresoff$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_winresoff$VH().get(seg);
        }
        public static  @C("DWORD") int e32_winresoff$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_winresoff$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_winresoff$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_winresoff$VH().set(seg, x);
        }
        public static void e32_winresoff$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_winresoff$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_winreslen$VH() {
            return winnt_h$constants$9._IMAGE_VXD_HEADER$e32_winreslen$VH();
        }
        public static  @C("DWORD") int e32_winreslen$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_winreslen$VH().get(seg);
        }
        public static  @C("DWORD") int e32_winreslen$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_winreslen$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_winreslen$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_winreslen$VH().set(seg, x);
        }
        public static void e32_winreslen$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_winreslen$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_devid$VH() {
            return winnt_h$constants$9._IMAGE_VXD_HEADER$e32_devid$VH();
        }
        public static  @C("WORD") short e32_devid$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_devid$VH().get(seg);
        }
        public static  @C("WORD") short e32_devid$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_devid$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_devid$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_devid$VH().set(seg, x);
        }
        public static void e32_devid$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_devid$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle e32_ddkver$VH() {
            return winnt_h$constants$9._IMAGE_VXD_HEADER$e32_ddkver$VH();
        }
        public static  @C("WORD") short e32_ddkver$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_ddkver$VH().get(seg);
        }
        public static  @C("WORD") short e32_ddkver$get(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_VXD_HEADER$e32_ddkver$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void e32_ddkver$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_ddkver$VH().set(seg, x);
        }
        public static void e32_ddkver$set(@C("struct _IMAGE_VXD_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_VXD_HEADER$e32_ddkver$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_VXD_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_VXD_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_VXD_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_VXD_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_VXD_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_VXD_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_VXD_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_VXD_HEADER")public static class IMAGE_VXD_HEADER extends _IMAGE_VXD_HEADER {

        /* package-private */ IMAGE_VXD_HEADER() {}
    }

    @C("struct _IMAGE_FILE_HEADER")public static class _IMAGE_FILE_HEADER {

        /* package-private */ _IMAGE_FILE_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_FILE_HEADER$struct$LAYOUT();
        }
        public static VarHandle Machine$VH() {
            return winnt_h$constants$9._IMAGE_FILE_HEADER$Machine$VH();
        }
        public static  @C("WORD") short Machine$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_FILE_HEADER$Machine$VH().get(seg);
        }
        public static  @C("WORD") short Machine$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_FILE_HEADER$Machine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Machine$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$Machine$VH().set(seg, x);
        }
        public static void Machine$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$Machine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfSections$VH() {
            return winnt_h$constants$9._IMAGE_FILE_HEADER$NumberOfSections$VH();
        }
        public static  @C("WORD") short NumberOfSections$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_FILE_HEADER$NumberOfSections$VH().get(seg);
        }
        public static  @C("WORD") short NumberOfSections$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_FILE_HEADER$NumberOfSections$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfSections$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$NumberOfSections$VH().set(seg, x);
        }
        public static void NumberOfSections$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$NumberOfSections$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$9._IMAGE_FILE_HEADER$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_FILE_HEADER$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_FILE_HEADER$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PointerToSymbolTable$VH() {
            return winnt_h$constants$9._IMAGE_FILE_HEADER$PointerToSymbolTable$VH();
        }
        public static  @C("DWORD") int PointerToSymbolTable$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_FILE_HEADER$PointerToSymbolTable$VH().get(seg);
        }
        public static  @C("DWORD") int PointerToSymbolTable$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_FILE_HEADER$PointerToSymbolTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PointerToSymbolTable$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$PointerToSymbolTable$VH().set(seg, x);
        }
        public static void PointerToSymbolTable$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$PointerToSymbolTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfSymbols$VH() {
            return winnt_h$constants$9._IMAGE_FILE_HEADER$NumberOfSymbols$VH();
        }
        public static  @C("DWORD") int NumberOfSymbols$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_FILE_HEADER$NumberOfSymbols$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfSymbols$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_FILE_HEADER$NumberOfSymbols$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfSymbols$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$NumberOfSymbols$VH().set(seg, x);
        }
        public static void NumberOfSymbols$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$NumberOfSymbols$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfOptionalHeader$VH() {
            return winnt_h$constants$9._IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH();
        }
        public static  @C("WORD") short SizeOfOptionalHeader$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH().get(seg);
        }
        public static  @C("WORD") short SizeOfOptionalHeader$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfOptionalHeader$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH().set(seg, x);
        }
        public static void SizeOfOptionalHeader$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Characteristics$VH() {
            return winnt_h$constants$9._IMAGE_FILE_HEADER$Characteristics$VH();
        }
        public static  @C("WORD") short Characteristics$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_FILE_HEADER$Characteristics$VH().get(seg);
        }
        public static  @C("WORD") short Characteristics$get(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_FILE_HEADER$Characteristics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Characteristics$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$Characteristics$VH().set(seg, x);
        }
        public static void Characteristics$set(@C("struct _IMAGE_FILE_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_FILE_HEADER$Characteristics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_FILE_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_FILE_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_FILE_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_FILE_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_FILE_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_FILE_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_FILE_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_FILE_HEADER")public static class IMAGE_FILE_HEADER extends _IMAGE_FILE_HEADER {

        /* package-private */ IMAGE_FILE_HEADER() {}
    }

    @C("struct _IMAGE_DATA_DIRECTORY")public static class _IMAGE_DATA_DIRECTORY {

        /* package-private */ _IMAGE_DATA_DIRECTORY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_DATA_DIRECTORY$struct$LAYOUT();
        }
        public static VarHandle VirtualAddress$VH() {
            return winnt_h$constants$9._IMAGE_DATA_DIRECTORY$VirtualAddress$VH();
        }
        public static  @C("DWORD") int VirtualAddress$get(@C("struct _IMAGE_DATA_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_DATA_DIRECTORY$VirtualAddress$VH().get(seg);
        }
        public static  @C("DWORD") int VirtualAddress$get(@C("struct _IMAGE_DATA_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_DATA_DIRECTORY$VirtualAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VirtualAddress$set(@C("struct _IMAGE_DATA_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_DATA_DIRECTORY$VirtualAddress$VH().set(seg, x);
        }
        public static void VirtualAddress$set(@C("struct _IMAGE_DATA_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_DATA_DIRECTORY$VirtualAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$9._IMAGE_DATA_DIRECTORY$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_DATA_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_DATA_DIRECTORY$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_DATA_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_DATA_DIRECTORY$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _IMAGE_DATA_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_DATA_DIRECTORY$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _IMAGE_DATA_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_DATA_DIRECTORY$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_DATA_DIRECTORY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_DATA_DIRECTORY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_DATA_DIRECTORY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_DATA_DIRECTORY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_DATA_DIRECTORY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_DATA_DIRECTORY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_DATA_DIRECTORY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_DATA_DIRECTORY")public static class IMAGE_DATA_DIRECTORY extends _IMAGE_DATA_DIRECTORY {

        /* package-private */ IMAGE_DATA_DIRECTORY() {}
    }

    @C("struct _IMAGE_OPTIONAL_HEADER")public static class _IMAGE_OPTIONAL_HEADER {

        /* package-private */ _IMAGE_OPTIONAL_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$struct$LAYOUT();
        }
        public static VarHandle Magic$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Magic$VH();
        }
        public static  @C("WORD") short Magic$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Magic$VH().get(seg);
        }
        public static  @C("WORD") short Magic$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Magic$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Magic$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Magic$VH().set(seg, x);
        }
        public static void Magic$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Magic$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorLinkerVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH();
        }
        public static  @C("BYTE") byte MajorLinkerVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH().get(seg);
        }
        public static  @C("BYTE") byte MajorLinkerVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorLinkerVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH().set(seg, x);
        }
        public static void MajorLinkerVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorLinkerVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH();
        }
        public static  @C("BYTE") byte MinorLinkerVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH().get(seg);
        }
        public static  @C("BYTE") byte MinorLinkerVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorLinkerVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH().set(seg, x);
        }
        public static void MinorLinkerVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfCode$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfCode$VH();
        }
        public static  @C("DWORD") int SizeOfCode$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfCode$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfCode$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfCode$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfCode$VH().set(seg, x);
        }
        public static void SizeOfCode$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfInitializedData$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH();
        }
        public static  @C("DWORD") int SizeOfInitializedData$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfInitializedData$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfInitializedData$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH().set(seg, x);
        }
        public static void SizeOfInitializedData$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfUninitializedData$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH();
        }
        public static  @C("DWORD") int SizeOfUninitializedData$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfUninitializedData$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfUninitializedData$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH().set(seg, x);
        }
        public static void SizeOfUninitializedData$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AddressOfEntryPoint$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH();
        }
        public static  @C("DWORD") int AddressOfEntryPoint$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH().get(seg);
        }
        public static  @C("DWORD") int AddressOfEntryPoint$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AddressOfEntryPoint$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH().set(seg, x);
        }
        public static void AddressOfEntryPoint$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseOfCode$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$BaseOfCode$VH();
        }
        public static  @C("DWORD") int BaseOfCode$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$BaseOfCode$VH().get(seg);
        }
        public static  @C("DWORD") int BaseOfCode$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$BaseOfCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseOfCode$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$BaseOfCode$VH().set(seg, x);
        }
        public static void BaseOfCode$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$BaseOfCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseOfData$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$BaseOfData$VH();
        }
        public static  @C("DWORD") int BaseOfData$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$BaseOfData$VH().get(seg);
        }
        public static  @C("DWORD") int BaseOfData$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$BaseOfData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseOfData$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$BaseOfData$VH().set(seg, x);
        }
        public static void BaseOfData$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$BaseOfData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImageBase$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$ImageBase$VH();
        }
        public static  @C("DWORD") int ImageBase$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$ImageBase$VH().get(seg);
        }
        public static  @C("DWORD") int ImageBase$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$ImageBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImageBase$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$ImageBase$VH().set(seg, x);
        }
        public static void ImageBase$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$ImageBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SectionAlignment$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SectionAlignment$VH();
        }
        public static  @C("DWORD") int SectionAlignment$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SectionAlignment$VH().get(seg);
        }
        public static  @C("DWORD") int SectionAlignment$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SectionAlignment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SectionAlignment$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SectionAlignment$VH().set(seg, x);
        }
        public static void SectionAlignment$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SectionAlignment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileAlignment$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$FileAlignment$VH();
        }
        public static  @C("DWORD") int FileAlignment$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$FileAlignment$VH().get(seg);
        }
        public static  @C("DWORD") int FileAlignment$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$FileAlignment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileAlignment$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$FileAlignment$VH().set(seg, x);
        }
        public static void FileAlignment$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$FileAlignment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorOperatingSystemVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH();
        }
        public static  @C("WORD") short MajorOperatingSystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorOperatingSystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorOperatingSystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH().set(seg, x);
        }
        public static void MajorOperatingSystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorOperatingSystemVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH();
        }
        public static  @C("WORD") short MinorOperatingSystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorOperatingSystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorOperatingSystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH().set(seg, x);
        }
        public static void MinorOperatingSystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorImageVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH();
        }
        public static  @C("WORD") short MajorImageVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorImageVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorImageVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH().set(seg, x);
        }
        public static void MajorImageVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorImageVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH();
        }
        public static  @C("WORD") short MinorImageVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorImageVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorImageVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH().set(seg, x);
        }
        public static void MinorImageVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorSubsystemVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH();
        }
        public static  @C("WORD") short MajorSubsystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorSubsystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorSubsystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH().set(seg, x);
        }
        public static void MajorSubsystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorSubsystemVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH();
        }
        public static  @C("WORD") short MinorSubsystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorSubsystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorSubsystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH().set(seg, x);
        }
        public static void MinorSubsystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Win32VersionValue$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH();
        }
        public static  @C("DWORD") int Win32VersionValue$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH().get(seg);
        }
        public static  @C("DWORD") int Win32VersionValue$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Win32VersionValue$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH().set(seg, x);
        }
        public static void Win32VersionValue$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfImage$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfImage$VH();
        }
        public static  @C("DWORD") int SizeOfImage$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfImage$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfImage$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfImage$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfImage$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfImage$VH().set(seg, x);
        }
        public static void SizeOfImage$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfImage$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfHeaders$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH();
        }
        public static  @C("DWORD") int SizeOfHeaders$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfHeaders$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfHeaders$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH().set(seg, x);
        }
        public static void SizeOfHeaders$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CheckSum$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$CheckSum$VH();
        }
        public static  @C("DWORD") int CheckSum$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$CheckSum$VH().get(seg);
        }
        public static  @C("DWORD") int CheckSum$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$CheckSum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CheckSum$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$CheckSum$VH().set(seg, x);
        }
        public static void CheckSum$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$CheckSum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Subsystem$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Subsystem$VH();
        }
        public static  @C("WORD") short Subsystem$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Subsystem$VH().get(seg);
        }
        public static  @C("WORD") short Subsystem$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Subsystem$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Subsystem$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Subsystem$VH().set(seg, x);
        }
        public static void Subsystem$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$Subsystem$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DllCharacteristics$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH();
        }
        public static  @C("WORD") short DllCharacteristics$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH().get(seg);
        }
        public static  @C("WORD") short DllCharacteristics$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DllCharacteristics$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH().set(seg, x);
        }
        public static void DllCharacteristics$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfStackReserve$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH();
        }
        public static  @C("DWORD") int SizeOfStackReserve$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfStackReserve$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfStackReserve$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH().set(seg, x);
        }
        public static void SizeOfStackReserve$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfStackCommit$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH();
        }
        public static  @C("DWORD") int SizeOfStackCommit$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfStackCommit$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfStackCommit$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH().set(seg, x);
        }
        public static void SizeOfStackCommit$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfHeapReserve$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH();
        }
        public static  @C("DWORD") int SizeOfHeapReserve$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfHeapReserve$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfHeapReserve$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH().set(seg, x);
        }
        public static void SizeOfHeapReserve$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfHeapCommit$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH();
        }
        public static  @C("DWORD") int SizeOfHeapCommit$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfHeapCommit$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfHeapCommit$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH().set(seg, x);
        }
        public static void SizeOfHeapCommit$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LoaderFlags$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$LoaderFlags$VH();
        }
        public static  @C("DWORD") int LoaderFlags$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$LoaderFlags$VH().get(seg);
        }
        public static  @C("DWORD") int LoaderFlags$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$LoaderFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LoaderFlags$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$LoaderFlags$VH().set(seg, x);
        }
        public static void LoaderFlags$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$LoaderFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfRvaAndSizes$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH();
        }
        public static  @C("DWORD") int NumberOfRvaAndSizes$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfRvaAndSizes$get(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfRvaAndSizes$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH().set(seg, x);
        }
        public static void NumberOfRvaAndSizes$set(@C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment DataDirectory$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(96, 128));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_OPTIONAL_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_OPTIONAL_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_OPTIONAL_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_OPTIONAL_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_OPTIONAL_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_OPTIONAL_HEADER")public static class IMAGE_OPTIONAL_HEADER32 extends _IMAGE_OPTIONAL_HEADER {

        /* package-private */ IMAGE_OPTIONAL_HEADER32() {}
    }

    @C("struct _IMAGE_ROM_OPTIONAL_HEADER")public static class _IMAGE_ROM_OPTIONAL_HEADER {

        /* package-private */ _IMAGE_ROM_OPTIONAL_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT();
        }
        public static VarHandle Magic$VH() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$Magic$VH();
        }
        public static  @C("WORD") short Magic$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$Magic$VH().get(seg);
        }
        public static  @C("WORD") short Magic$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$Magic$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Magic$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$Magic$VH().set(seg, x);
        }
        public static void Magic$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$Magic$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorLinkerVersion$VH() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH();
        }
        public static  @C("BYTE") byte MajorLinkerVersion$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH().get(seg);
        }
        public static  @C("BYTE") byte MajorLinkerVersion$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorLinkerVersion$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH().set(seg, x);
        }
        public static void MajorLinkerVersion$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorLinkerVersion$VH() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH();
        }
        public static  @C("BYTE") byte MinorLinkerVersion$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH().get(seg);
        }
        public static  @C("BYTE") byte MinorLinkerVersion$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorLinkerVersion$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH().set(seg, x);
        }
        public static void MinorLinkerVersion$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfCode$VH() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH();
        }
        public static  @C("DWORD") int SizeOfCode$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfCode$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfCode$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH().set(seg, x);
        }
        public static void SizeOfCode$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfInitializedData$VH() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH();
        }
        public static  @C("DWORD") int SizeOfInitializedData$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfInitializedData$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfInitializedData$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH().set(seg, x);
        }
        public static void SizeOfInitializedData$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfUninitializedData$VH() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH();
        }
        public static  @C("DWORD") int SizeOfUninitializedData$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfUninitializedData$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfUninitializedData$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH().set(seg, x);
        }
        public static void SizeOfUninitializedData$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AddressOfEntryPoint$VH() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH();
        }
        public static  @C("DWORD") int AddressOfEntryPoint$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH().get(seg);
        }
        public static  @C("DWORD") int AddressOfEntryPoint$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AddressOfEntryPoint$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH().set(seg, x);
        }
        public static void AddressOfEntryPoint$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseOfCode$VH() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH();
        }
        public static  @C("DWORD") int BaseOfCode$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH().get(seg);
        }
        public static  @C("DWORD") int BaseOfCode$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseOfCode$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH().set(seg, x);
        }
        public static void BaseOfCode$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseOfData$VH() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH();
        }
        public static  @C("DWORD") int BaseOfData$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH().get(seg);
        }
        public static  @C("DWORD") int BaseOfData$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseOfData$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH().set(seg, x);
        }
        public static void BaseOfData$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseOfBss$VH() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH();
        }
        public static  @C("DWORD") int BaseOfBss$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH().get(seg);
        }
        public static  @C("DWORD") int BaseOfBss$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseOfBss$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH().set(seg, x);
        }
        public static void BaseOfBss$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GprMask$VH() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH();
        }
        public static  @C("DWORD") int GprMask$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH().get(seg);
        }
        public static  @C("DWORD") int GprMask$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GprMask$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH().set(seg, x);
        }
        public static void GprMask$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment CprMask$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(36, 16));
        }
        public static VarHandle GpValue$VH() {
            return winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH();
        }
        public static  @C("DWORD") int GpValue$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH().get(seg);
        }
        public static  @C("DWORD") int GpValue$get(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GpValue$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH().set(seg, x);
        }
        public static void GpValue$set(@C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_ROM_OPTIONAL_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_ROM_OPTIONAL_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_ROM_OPTIONAL_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_ROM_OPTIONAL_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_ROM_OPTIONAL_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_ROM_OPTIONAL_HEADER")public static class IMAGE_ROM_OPTIONAL_HEADER extends _IMAGE_ROM_OPTIONAL_HEADER {

        /* package-private */ IMAGE_ROM_OPTIONAL_HEADER() {}
    }

    @C("struct _IMAGE_OPTIONAL_HEADER64")public static class _IMAGE_OPTIONAL_HEADER64 {

        /* package-private */ _IMAGE_OPTIONAL_HEADER64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$struct$LAYOUT();
        }
        public static VarHandle Magic$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Magic$VH();
        }
        public static  @C("WORD") short Magic$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Magic$VH().get(seg);
        }
        public static  @C("WORD") short Magic$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Magic$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Magic$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Magic$VH().set(seg, x);
        }
        public static void Magic$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Magic$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorLinkerVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH();
        }
        public static  @C("BYTE") byte MajorLinkerVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (byte)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH().get(seg);
        }
        public static  @C("BYTE") byte MajorLinkerVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorLinkerVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH().set(seg, x);
        }
        public static void MajorLinkerVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorLinkerVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH();
        }
        public static  @C("BYTE") byte MinorLinkerVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (byte)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH().get(seg);
        }
        public static  @C("BYTE") byte MinorLinkerVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorLinkerVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH().set(seg, x);
        }
        public static void MinorLinkerVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfCode$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH();
        }
        public static  @C("DWORD") int SizeOfCode$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfCode$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfCode$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH().set(seg, x);
        }
        public static void SizeOfCode$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfInitializedData$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH();
        }
        public static  @C("DWORD") int SizeOfInitializedData$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfInitializedData$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfInitializedData$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH().set(seg, x);
        }
        public static void SizeOfInitializedData$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfUninitializedData$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH();
        }
        public static  @C("DWORD") int SizeOfUninitializedData$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfUninitializedData$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfUninitializedData$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH().set(seg, x);
        }
        public static void SizeOfUninitializedData$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AddressOfEntryPoint$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH();
        }
        public static  @C("DWORD") int AddressOfEntryPoint$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH().get(seg);
        }
        public static  @C("DWORD") int AddressOfEntryPoint$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AddressOfEntryPoint$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH().set(seg, x);
        }
        public static void AddressOfEntryPoint$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseOfCode$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH();
        }
        public static  @C("DWORD") int BaseOfCode$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH().get(seg);
        }
        public static  @C("DWORD") int BaseOfCode$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseOfCode$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH().set(seg, x);
        }
        public static void BaseOfCode$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImageBase$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$ImageBase$VH();
        }
        public static  @C("ULONGLONG") long ImageBase$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (long)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$ImageBase$VH().get(seg);
        }
        public static  @C("ULONGLONG") long ImageBase$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$ImageBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImageBase$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$ImageBase$VH().set(seg, x);
        }
        public static void ImageBase$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$ImageBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SectionAlignment$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH();
        }
        public static  @C("DWORD") int SectionAlignment$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH().get(seg);
        }
        public static  @C("DWORD") int SectionAlignment$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SectionAlignment$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH().set(seg, x);
        }
        public static void SectionAlignment$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileAlignment$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$FileAlignment$VH();
        }
        public static  @C("DWORD") int FileAlignment$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$FileAlignment$VH().get(seg);
        }
        public static  @C("DWORD") int FileAlignment$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$FileAlignment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileAlignment$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$FileAlignment$VH().set(seg, x);
        }
        public static void FileAlignment$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$FileAlignment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorOperatingSystemVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH();
        }
        public static  @C("WORD") short MajorOperatingSystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorOperatingSystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorOperatingSystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH().set(seg, x);
        }
        public static void MajorOperatingSystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorOperatingSystemVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH();
        }
        public static  @C("WORD") short MinorOperatingSystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorOperatingSystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorOperatingSystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH().set(seg, x);
        }
        public static void MinorOperatingSystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorImageVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH();
        }
        public static  @C("WORD") short MajorImageVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorImageVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorImageVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH().set(seg, x);
        }
        public static void MajorImageVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorImageVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH();
        }
        public static  @C("WORD") short MinorImageVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorImageVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorImageVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH().set(seg, x);
        }
        public static void MinorImageVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorSubsystemVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH();
        }
        public static  @C("WORD") short MajorSubsystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorSubsystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorSubsystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH().set(seg, x);
        }
        public static void MajorSubsystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorSubsystemVersion$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH();
        }
        public static  @C("WORD") short MinorSubsystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorSubsystemVersion$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorSubsystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH().set(seg, x);
        }
        public static void MinorSubsystemVersion$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Win32VersionValue$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH();
        }
        public static  @C("DWORD") int Win32VersionValue$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH().get(seg);
        }
        public static  @C("DWORD") int Win32VersionValue$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Win32VersionValue$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH().set(seg, x);
        }
        public static void Win32VersionValue$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfImage$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH();
        }
        public static  @C("DWORD") int SizeOfImage$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfImage$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfImage$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH().set(seg, x);
        }
        public static void SizeOfImage$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfHeaders$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH();
        }
        public static  @C("DWORD") int SizeOfHeaders$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfHeaders$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfHeaders$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH().set(seg, x);
        }
        public static void SizeOfHeaders$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CheckSum$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$CheckSum$VH();
        }
        public static  @C("DWORD") int CheckSum$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$CheckSum$VH().get(seg);
        }
        public static  @C("DWORD") int CheckSum$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$CheckSum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CheckSum$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$CheckSum$VH().set(seg, x);
        }
        public static void CheckSum$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$CheckSum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Subsystem$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Subsystem$VH();
        }
        public static  @C("WORD") short Subsystem$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Subsystem$VH().get(seg);
        }
        public static  @C("WORD") short Subsystem$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Subsystem$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Subsystem$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Subsystem$VH().set(seg, x);
        }
        public static void Subsystem$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$Subsystem$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DllCharacteristics$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH();
        }
        public static  @C("WORD") short DllCharacteristics$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH().get(seg);
        }
        public static  @C("WORD") short DllCharacteristics$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DllCharacteristics$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH().set(seg, x);
        }
        public static void DllCharacteristics$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfStackReserve$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH();
        }
        public static  @C("ULONGLONG") long SizeOfStackReserve$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (long)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH().get(seg);
        }
        public static  @C("ULONGLONG") long SizeOfStackReserve$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfStackReserve$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH().set(seg, x);
        }
        public static void SizeOfStackReserve$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfStackCommit$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH();
        }
        public static  @C("ULONGLONG") long SizeOfStackCommit$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (long)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH().get(seg);
        }
        public static  @C("ULONGLONG") long SizeOfStackCommit$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfStackCommit$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH().set(seg, x);
        }
        public static void SizeOfStackCommit$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfHeapReserve$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH();
        }
        public static  @C("ULONGLONG") long SizeOfHeapReserve$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (long)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH().get(seg);
        }
        public static  @C("ULONGLONG") long SizeOfHeapReserve$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfHeapReserve$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH().set(seg, x);
        }
        public static void SizeOfHeapReserve$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfHeapCommit$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH();
        }
        public static  @C("ULONGLONG") long SizeOfHeapCommit$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (long)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH().get(seg);
        }
        public static  @C("ULONGLONG") long SizeOfHeapCommit$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfHeapCommit$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH().set(seg, x);
        }
        public static void SizeOfHeapCommit$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LoaderFlags$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH();
        }
        public static  @C("DWORD") int LoaderFlags$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH().get(seg);
        }
        public static  @C("DWORD") int LoaderFlags$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LoaderFlags$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH().set(seg, x);
        }
        public static void LoaderFlags$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfRvaAndSizes$VH() {
            return winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH();
        }
        public static  @C("DWORD") int NumberOfRvaAndSizes$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfRvaAndSizes$get(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfRvaAndSizes$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH().set(seg, x);
        }
        public static void NumberOfRvaAndSizes$set(@C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment DataDirectory$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(112, 128));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_OPTIONAL_HEADER64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_OPTIONAL_HEADER64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_OPTIONAL_HEADER64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_OPTIONAL_HEADER64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_OPTIONAL_HEADER64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_OPTIONAL_HEADER64")public static class IMAGE_OPTIONAL_HEADER64 extends _IMAGE_OPTIONAL_HEADER64 {

        /* package-private */ IMAGE_OPTIONAL_HEADER64() {}
    }

    @C("struct _IMAGE_OPTIONAL_HEADER64")public static class IMAGE_OPTIONAL_HEADER extends _IMAGE_OPTIONAL_HEADER64 {

        /* package-private */ IMAGE_OPTIONAL_HEADER() {}
    }

    @C("struct _IMAGE_NT_HEADERS64")public static class _IMAGE_NT_HEADERS64 {

        /* package-private */ _IMAGE_NT_HEADERS64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_NT_HEADERS64$struct$LAYOUT();
        }
        public static VarHandle Signature$VH() {
            return winnt_h$constants$9._IMAGE_NT_HEADERS64$Signature$VH();
        }
        public static  @C("DWORD") int Signature$get(@C("struct _IMAGE_NT_HEADERS64") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_NT_HEADERS64$Signature$VH().get(seg);
        }
        public static  @C("DWORD") int Signature$get(@C("struct _IMAGE_NT_HEADERS64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_NT_HEADERS64$Signature$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Signature$set(@C("struct _IMAGE_NT_HEADERS64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_NT_HEADERS64$Signature$VH().set(seg, x);
        }
        public static void Signature$set(@C("struct _IMAGE_NT_HEADERS64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_NT_HEADERS64$Signature$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileHeader$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 20));
        }
        public static MemorySegment OptionalHeader$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 240));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_NT_HEADERS64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_NT_HEADERS64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_NT_HEADERS64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_NT_HEADERS64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_NT_HEADERS64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_NT_HEADERS64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_NT_HEADERS64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_NT_HEADERS64")public static class IMAGE_NT_HEADERS64 extends _IMAGE_NT_HEADERS64 {

        /* package-private */ IMAGE_NT_HEADERS64() {}
    }

    @C("struct _IMAGE_NT_HEADERS")public static class _IMAGE_NT_HEADERS {

        /* package-private */ _IMAGE_NT_HEADERS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_NT_HEADERS$struct$LAYOUT();
        }
        public static VarHandle Signature$VH() {
            return winnt_h$constants$9._IMAGE_NT_HEADERS$Signature$VH();
        }
        public static  @C("DWORD") int Signature$get(@C("struct _IMAGE_NT_HEADERS") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_NT_HEADERS$Signature$VH().get(seg);
        }
        public static  @C("DWORD") int Signature$get(@C("struct _IMAGE_NT_HEADERS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_NT_HEADERS$Signature$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Signature$set(@C("struct _IMAGE_NT_HEADERS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_NT_HEADERS$Signature$VH().set(seg, x);
        }
        public static void Signature$set(@C("struct _IMAGE_NT_HEADERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_NT_HEADERS$Signature$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileHeader$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 20));
        }
        public static MemorySegment OptionalHeader$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 224));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_NT_HEADERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_NT_HEADERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_NT_HEADERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_NT_HEADERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_NT_HEADERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_NT_HEADERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_NT_HEADERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_NT_HEADERS")public static class IMAGE_NT_HEADERS32 extends _IMAGE_NT_HEADERS {

        /* package-private */ IMAGE_NT_HEADERS32() {}
    }

    @C("struct _IMAGE_ROM_HEADERS")public static class _IMAGE_ROM_HEADERS {

        /* package-private */ _IMAGE_ROM_HEADERS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_ROM_HEADERS$struct$LAYOUT();
        }
        public static MemorySegment FileHeader$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 20));
        }
        public static MemorySegment OptionalHeader$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 56));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_ROM_HEADERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_ROM_HEADERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_ROM_HEADERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_ROM_HEADERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_ROM_HEADERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_ROM_HEADERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_ROM_HEADERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_ROM_HEADERS")public static class IMAGE_ROM_HEADERS extends _IMAGE_ROM_HEADERS {

        /* package-private */ IMAGE_ROM_HEADERS() {}
    }

    @C("struct _IMAGE_NT_HEADERS64")public static class IMAGE_NT_HEADERS extends _IMAGE_NT_HEADERS64 {

        /* package-private */ IMAGE_NT_HEADERS() {}
    }

    @C("struct ANON_OBJECT_HEADER")public static class ANON_OBJECT_HEADER {

        /* package-private */ ANON_OBJECT_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER$struct$LAYOUT();
        }
        public static VarHandle Sig1$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER$Sig1$VH();
        }
        public static  @C("WORD") short Sig1$get(@C("struct ANON_OBJECT_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER$Sig1$VH().get(seg);
        }
        public static  @C("WORD") short Sig1$get(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER$Sig1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sig1$set(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER$Sig1$VH().set(seg, x);
        }
        public static void Sig1$set(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER$Sig1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sig2$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER$Sig2$VH();
        }
        public static  @C("WORD") short Sig2$get(@C("struct ANON_OBJECT_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER$Sig2$VH().get(seg);
        }
        public static  @C("WORD") short Sig2$get(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER$Sig2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sig2$set(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER$Sig2$VH().set(seg, x);
        }
        public static void Sig2$set(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER$Sig2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER$Version$VH();
        }
        public static  @C("WORD") short Version$get(@C("struct ANON_OBJECT_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER$Version$VH().get(seg);
        }
        public static  @C("WORD") short Version$get(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Machine$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER$Machine$VH();
        }
        public static  @C("WORD") short Machine$get(@C("struct ANON_OBJECT_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER$Machine$VH().get(seg);
        }
        public static  @C("WORD") short Machine$get(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER$Machine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Machine$set(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER$Machine$VH().set(seg, x);
        }
        public static void Machine$set(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER$Machine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct ANON_OBJECT_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ClassID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 16));
        }
        public static VarHandle SizeOfData$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER$SizeOfData$VH();
        }
        public static  @C("DWORD") int SizeOfData$get(@C("struct ANON_OBJECT_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER$SizeOfData$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfData$get(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER$SizeOfData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfData$set(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER$SizeOfData$VH().set(seg, x);
        }
        public static void SizeOfData$set(@C("struct ANON_OBJECT_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER$SizeOfData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ANON_OBJECT_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ANON_OBJECT_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct ANON_OBJECT_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct ANON_OBJECT_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct ANON_OBJECT_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct ANON_OBJECT_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ANON_OBJECT_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ANON_OBJECT_HEADER_V2")public static class ANON_OBJECT_HEADER_V2 {

        /* package-private */ ANON_OBJECT_HEADER_V2() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_V2$struct$LAYOUT();
        }
        public static VarHandle Sig1$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Sig1$VH();
        }
        public static  @C("WORD") short Sig1$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Sig1$VH().get(seg);
        }
        public static  @C("WORD") short Sig1$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Sig1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sig1$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Sig1$VH().set(seg, x);
        }
        public static void Sig1$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Sig1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sig2$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Sig2$VH();
        }
        public static  @C("WORD") short Sig2$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Sig2$VH().get(seg);
        }
        public static  @C("WORD") short Sig2$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Sig2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sig2$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Sig2$VH().set(seg, x);
        }
        public static void Sig2$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Sig2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Version$VH();
        }
        public static  @C("WORD") short Version$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Version$VH().get(seg);
        }
        public static  @C("WORD") short Version$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Machine$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Machine$VH();
        }
        public static  @C("WORD") short Machine$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Machine$VH().get(seg);
        }
        public static  @C("WORD") short Machine$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Machine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Machine$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Machine$VH().set(seg, x);
        }
        public static void Machine$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Machine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_V2$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ClassID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 16));
        }
        public static VarHandle SizeOfData$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_V2$SizeOfData$VH();
        }
        public static  @C("DWORD") int SizeOfData$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$SizeOfData$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfData$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$SizeOfData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfData$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$SizeOfData$VH().set(seg, x);
        }
        public static void SizeOfData$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$SizeOfData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MetaDataSize$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_V2$MetaDataSize$VH();
        }
        public static  @C("DWORD") int MetaDataSize$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$MetaDataSize$VH().get(seg);
        }
        public static  @C("DWORD") int MetaDataSize$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$MetaDataSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MetaDataSize$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$MetaDataSize$VH().set(seg, x);
        }
        public static void MetaDataSize$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$MetaDataSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MetaDataOffset$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_V2$MetaDataOffset$VH();
        }
        public static  @C("DWORD") int MetaDataOffset$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$MetaDataOffset$VH().get(seg);
        }
        public static  @C("DWORD") int MetaDataOffset$get(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_V2$MetaDataOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MetaDataOffset$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$MetaDataOffset$VH().set(seg, x);
        }
        public static void MetaDataOffset$set(@C("struct ANON_OBJECT_HEADER_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_V2$MetaDataOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ANON_OBJECT_HEADER_V2") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ANON_OBJECT_HEADER_V2") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct ANON_OBJECT_HEADER_V2[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct ANON_OBJECT_HEADER_V2[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct ANON_OBJECT_HEADER_V2*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct ANON_OBJECT_HEADER_V2*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ANON_OBJECT_HEADER_V2") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct ANON_OBJECT_HEADER_BIGOBJ")public static class ANON_OBJECT_HEADER_BIGOBJ {

        /* package-private */ ANON_OBJECT_HEADER_BIGOBJ() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$struct$LAYOUT();
        }
        public static VarHandle Sig1$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Sig1$VH();
        }
        public static  @C("WORD") short Sig1$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Sig1$VH().get(seg);
        }
        public static  @C("WORD") short Sig1$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Sig1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sig1$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Sig1$VH().set(seg, x);
        }
        public static void Sig1$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Sig1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sig2$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Sig2$VH();
        }
        public static  @C("WORD") short Sig2$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Sig2$VH().get(seg);
        }
        public static  @C("WORD") short Sig2$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Sig2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sig2$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Sig2$VH().set(seg, x);
        }
        public static void Sig2$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Sig2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Version$VH();
        }
        public static  @C("WORD") short Version$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Version$VH().get(seg);
        }
        public static  @C("WORD") short Version$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Machine$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Machine$VH();
        }
        public static  @C("WORD") short Machine$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Machine$VH().get(seg);
        }
        public static  @C("WORD") short Machine$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Machine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Machine$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Machine$VH().set(seg, x);
        }
        public static void Machine$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Machine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ClassID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 16));
        }
        public static VarHandle SizeOfData$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$VH();
        }
        public static  @C("DWORD") int SizeOfData$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfData$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfData$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$VH().set(seg, x);
        }
        public static void SizeOfData$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$SizeOfData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MetaDataSize$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$VH();
        }
        public static  @C("DWORD") int MetaDataSize$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$VH().get(seg);
        }
        public static  @C("DWORD") int MetaDataSize$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MetaDataSize$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$VH().set(seg, x);
        }
        public static void MetaDataSize$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$MetaDataSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MetaDataOffset$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$VH();
        }
        public static  @C("DWORD") int MetaDataOffset$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$VH().get(seg);
        }
        public static  @C("DWORD") int MetaDataOffset$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MetaDataOffset$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$VH().set(seg, x);
        }
        public static void MetaDataOffset$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$MetaDataOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfSections$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$VH();
        }
        public static  @C("DWORD") int NumberOfSections$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfSections$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfSections$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$VH().set(seg, x);
        }
        public static void NumberOfSections$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$NumberOfSections$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PointerToSymbolTable$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$VH();
        }
        public static  @C("DWORD") int PointerToSymbolTable$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$VH().get(seg);
        }
        public static  @C("DWORD") int PointerToSymbolTable$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PointerToSymbolTable$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$VH().set(seg, x);
        }
        public static void PointerToSymbolTable$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$PointerToSymbolTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfSymbols$VH() {
            return winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$VH();
        }
        public static  @C("DWORD") int NumberOfSymbols$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfSymbols$get(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfSymbols$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$VH().set(seg, x);
        }
        public static void NumberOfSymbols$set(@C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.ANON_OBJECT_HEADER_BIGOBJ$NumberOfSymbols$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct ANON_OBJECT_HEADER_BIGOBJ[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct ANON_OBJECT_HEADER_BIGOBJ[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct ANON_OBJECT_HEADER_BIGOBJ*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct ANON_OBJECT_HEADER_BIGOBJ*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct ANON_OBJECT_HEADER_BIGOBJ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_SECTION_HEADER")public static class _IMAGE_SECTION_HEADER {

        /* package-private */ _IMAGE_SECTION_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_SECTION_HEADER$struct$LAYOUT();
        }
        public static MemorySegment Name$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        @C("union ")public static class Misc {

            /* package-private */ Misc() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$9._IMAGE_SECTION_HEADER$Misc$union$LAYOUT();
            }
            public static VarHandle PhysicalAddress$VH() {
                return winnt_h$constants$9._IMAGE_SECTION_HEADER$Misc$PhysicalAddress$VH();
            }
            public static  @C("DWORD") int PhysicalAddress$get(@C("union ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$Misc$PhysicalAddress$VH().get(seg);
            }
            public static  @C("DWORD") int PhysicalAddress$get(@C("union ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$Misc$PhysicalAddress$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void PhysicalAddress$set(@C("union ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_SECTION_HEADER$Misc$PhysicalAddress$VH().set(seg, x);
            }
            public static void PhysicalAddress$set(@C("union ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_SECTION_HEADER$Misc$PhysicalAddress$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle VirtualSize$VH() {
                return winnt_h$constants$9._IMAGE_SECTION_HEADER$Misc$VirtualSize$VH();
            }
            public static  @C("DWORD") int VirtualSize$get(@C("union ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$Misc$VirtualSize$VH().get(seg);
            }
            public static  @C("DWORD") int VirtualSize$get(@C("union ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$Misc$VirtualSize$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void VirtualSize$set(@C("union ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_SECTION_HEADER$Misc$VirtualSize$VH().set(seg, x);
            }
            public static void VirtualSize$set(@C("union ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_SECTION_HEADER$Misc$VirtualSize$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Misc$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 4));
        }
        public static VarHandle VirtualAddress$VH() {
            return winnt_h$constants$9._IMAGE_SECTION_HEADER$VirtualAddress$VH();
        }
        public static  @C("DWORD") int VirtualAddress$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$VirtualAddress$VH().get(seg);
        }
        public static  @C("DWORD") int VirtualAddress$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$VirtualAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VirtualAddress$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$VirtualAddress$VH().set(seg, x);
        }
        public static void VirtualAddress$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$VirtualAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfRawData$VH() {
            return winnt_h$constants$9._IMAGE_SECTION_HEADER$SizeOfRawData$VH();
        }
        public static  @C("DWORD") int SizeOfRawData$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$SizeOfRawData$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfRawData$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$SizeOfRawData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfRawData$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$SizeOfRawData$VH().set(seg, x);
        }
        public static void SizeOfRawData$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$SizeOfRawData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PointerToRawData$VH() {
            return winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToRawData$VH();
        }
        public static  @C("DWORD") int PointerToRawData$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToRawData$VH().get(seg);
        }
        public static  @C("DWORD") int PointerToRawData$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToRawData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PointerToRawData$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToRawData$VH().set(seg, x);
        }
        public static void PointerToRawData$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToRawData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PointerToRelocations$VH() {
            return winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToRelocations$VH();
        }
        public static  @C("DWORD") int PointerToRelocations$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToRelocations$VH().get(seg);
        }
        public static  @C("DWORD") int PointerToRelocations$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToRelocations$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PointerToRelocations$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToRelocations$VH().set(seg, x);
        }
        public static void PointerToRelocations$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToRelocations$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PointerToLinenumbers$VH() {
            return winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToLinenumbers$VH();
        }
        public static  @C("DWORD") int PointerToLinenumbers$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToLinenumbers$VH().get(seg);
        }
        public static  @C("DWORD") int PointerToLinenumbers$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToLinenumbers$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PointerToLinenumbers$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToLinenumbers$VH().set(seg, x);
        }
        public static void PointerToLinenumbers$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$PointerToLinenumbers$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfRelocations$VH() {
            return winnt_h$constants$9._IMAGE_SECTION_HEADER$NumberOfRelocations$VH();
        }
        public static  @C("WORD") short NumberOfRelocations$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_SECTION_HEADER$NumberOfRelocations$VH().get(seg);
        }
        public static  @C("WORD") short NumberOfRelocations$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_SECTION_HEADER$NumberOfRelocations$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfRelocations$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$NumberOfRelocations$VH().set(seg, x);
        }
        public static void NumberOfRelocations$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$NumberOfRelocations$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfLinenumbers$VH() {
            return winnt_h$constants$9._IMAGE_SECTION_HEADER$NumberOfLinenumbers$VH();
        }
        public static  @C("WORD") short NumberOfLinenumbers$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_SECTION_HEADER$NumberOfLinenumbers$VH().get(seg);
        }
        public static  @C("WORD") short NumberOfLinenumbers$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_SECTION_HEADER$NumberOfLinenumbers$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfLinenumbers$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$NumberOfLinenumbers$VH().set(seg, x);
        }
        public static void NumberOfLinenumbers$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$NumberOfLinenumbers$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Characteristics$VH() {
            return winnt_h$constants$9._IMAGE_SECTION_HEADER$Characteristics$VH();
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$Characteristics$VH().get(seg);
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_SECTION_HEADER$Characteristics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Characteristics$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$Characteristics$VH().set(seg, x);
        }
        public static void Characteristics$set(@C("struct _IMAGE_SECTION_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SECTION_HEADER$Characteristics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_SECTION_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_SECTION_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_SECTION_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_SECTION_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_SECTION_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_SECTION_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_SECTION_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_SECTION_HEADER")public static class IMAGE_SECTION_HEADER extends _IMAGE_SECTION_HEADER {

        /* package-private */ IMAGE_SECTION_HEADER() {}
    }

    @C("struct _IMAGE_SYMBOL")public static class _IMAGE_SYMBOL {

        /* package-private */ _IMAGE_SYMBOL() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_SYMBOL$struct$LAYOUT();
        }
        @C("union ")public static class N {

            /* package-private */ N() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$9._IMAGE_SYMBOL$N$union$LAYOUT();
            }
            public static MemorySegment ShortName$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
            }
            @C("struct ")public static class Name {

                /* package-private */ Name() {}
                public static MemoryLayout $LAYOUT() {
                    return winnt_h$constants$9._IMAGE_SYMBOL$N$Name$struct$LAYOUT();
                }
                public static VarHandle Short$VH() {
                    return winnt_h$constants$9._IMAGE_SYMBOL$N$Name$Short$VH();
                }
                public static  @C("DWORD") int Short$get(@C("struct ") MemorySegment seg) {
                    return (int)winnt_h$constants$9._IMAGE_SYMBOL$N$Name$Short$VH().get(seg);
                }
                public static  @C("DWORD") int Short$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winnt_h$constants$9._IMAGE_SYMBOL$N$Name$Short$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void Short$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winnt_h$constants$9._IMAGE_SYMBOL$N$Name$Short$VH().set(seg, x);
                }
                public static void Short$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winnt_h$constants$9._IMAGE_SYMBOL$N$Name$Short$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle Long$VH() {
                    return winnt_h$constants$9._IMAGE_SYMBOL$N$Name$Long$VH();
                }
                public static  @C("DWORD") int Long$get(@C("struct ") MemorySegment seg) {
                    return (int)winnt_h$constants$9._IMAGE_SYMBOL$N$Name$Long$VH().get(seg);
                }
                public static  @C("DWORD") int Long$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winnt_h$constants$9._IMAGE_SYMBOL$N$Name$Long$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void Long$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winnt_h$constants$9._IMAGE_SYMBOL$N$Name$Long$VH().set(seg, x);
                }
                public static void Long$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winnt_h$constants$9._IMAGE_SYMBOL$N$Name$Long$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment Name$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
            }
            public static MemorySegment LongName$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment N$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static VarHandle Value$VH() {
            return winnt_h$constants$9._IMAGE_SYMBOL$Value$VH();
        }
        public static  @C("DWORD") int Value$get(@C("struct _IMAGE_SYMBOL") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_SYMBOL$Value$VH().get(seg);
        }
        public static  @C("DWORD") int Value$get(@C("struct _IMAGE_SYMBOL") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_SYMBOL$Value$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Value$set(@C("struct _IMAGE_SYMBOL") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SYMBOL$Value$VH().set(seg, x);
        }
        public static void Value$set(@C("struct _IMAGE_SYMBOL") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SYMBOL$Value$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SectionNumber$VH() {
            return winnt_h$constants$9._IMAGE_SYMBOL$SectionNumber$VH();
        }
        public static  @C("SHORT") short SectionNumber$get(@C("struct _IMAGE_SYMBOL") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_SYMBOL$SectionNumber$VH().get(seg);
        }
        public static  @C("SHORT") short SectionNumber$get(@C("struct _IMAGE_SYMBOL") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_SYMBOL$SectionNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SectionNumber$set(@C("struct _IMAGE_SYMBOL") MemorySegment seg, @C("SHORT") short x) {
            winnt_h$constants$9._IMAGE_SYMBOL$SectionNumber$VH().set(seg, x);
        }
        public static void SectionNumber$set(@C("struct _IMAGE_SYMBOL") MemorySegment seg, long index, @C("SHORT") short x) {
            winnt_h$constants$9._IMAGE_SYMBOL$SectionNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$9._IMAGE_SYMBOL$Type$VH();
        }
        public static  @C("WORD") short Type$get(@C("struct _IMAGE_SYMBOL") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_SYMBOL$Type$VH().get(seg);
        }
        public static  @C("WORD") short Type$get(@C("struct _IMAGE_SYMBOL") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_SYMBOL$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _IMAGE_SYMBOL") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_SYMBOL$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _IMAGE_SYMBOL") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_SYMBOL$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StorageClass$VH() {
            return winnt_h$constants$9._IMAGE_SYMBOL$StorageClass$VH();
        }
        public static  @C("BYTE") byte StorageClass$get(@C("struct _IMAGE_SYMBOL") MemorySegment seg) {
            return (byte)winnt_h$constants$9._IMAGE_SYMBOL$StorageClass$VH().get(seg);
        }
        public static  @C("BYTE") byte StorageClass$get(@C("struct _IMAGE_SYMBOL") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$9._IMAGE_SYMBOL$StorageClass$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StorageClass$set(@C("struct _IMAGE_SYMBOL") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_SYMBOL$StorageClass$VH().set(seg, x);
        }
        public static void StorageClass$set(@C("struct _IMAGE_SYMBOL") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_SYMBOL$StorageClass$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfAuxSymbols$VH() {
            return winnt_h$constants$9._IMAGE_SYMBOL$NumberOfAuxSymbols$VH();
        }
        public static  @C("BYTE") byte NumberOfAuxSymbols$get(@C("struct _IMAGE_SYMBOL") MemorySegment seg) {
            return (byte)winnt_h$constants$9._IMAGE_SYMBOL$NumberOfAuxSymbols$VH().get(seg);
        }
        public static  @C("BYTE") byte NumberOfAuxSymbols$get(@C("struct _IMAGE_SYMBOL") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$9._IMAGE_SYMBOL$NumberOfAuxSymbols$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfAuxSymbols$set(@C("struct _IMAGE_SYMBOL") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_SYMBOL$NumberOfAuxSymbols$VH().set(seg, x);
        }
        public static void NumberOfAuxSymbols$set(@C("struct _IMAGE_SYMBOL") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_SYMBOL$NumberOfAuxSymbols$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_SYMBOL") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_SYMBOL") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_SYMBOL[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_SYMBOL[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_SYMBOL*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_SYMBOL*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_SYMBOL") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_SYMBOL")public static class IMAGE_SYMBOL extends _IMAGE_SYMBOL {

        /* package-private */ IMAGE_SYMBOL() {}
    }

    @C("struct _IMAGE_SYMBOL_EX")public static class _IMAGE_SYMBOL_EX {

        /* package-private */ _IMAGE_SYMBOL_EX() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_SYMBOL_EX$struct$LAYOUT();
        }
        @C("union ")public static class N {

            /* package-private */ N() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$9._IMAGE_SYMBOL_EX$N$union$LAYOUT();
            }
            public static MemorySegment ShortName$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
            }
            @C("struct ")public static class Name {

                /* package-private */ Name() {}
                public static MemoryLayout $LAYOUT() {
                    return winnt_h$constants$9._IMAGE_SYMBOL_EX$N$Name$struct$LAYOUT();
                }
                public static VarHandle Short$VH() {
                    return winnt_h$constants$9._IMAGE_SYMBOL_EX$N$Name$Short$VH();
                }
                public static  @C("DWORD") int Short$get(@C("struct ") MemorySegment seg) {
                    return (int)winnt_h$constants$9._IMAGE_SYMBOL_EX$N$Name$Short$VH().get(seg);
                }
                public static  @C("DWORD") int Short$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winnt_h$constants$9._IMAGE_SYMBOL_EX$N$Name$Short$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void Short$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winnt_h$constants$9._IMAGE_SYMBOL_EX$N$Name$Short$VH().set(seg, x);
                }
                public static void Short$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winnt_h$constants$9._IMAGE_SYMBOL_EX$N$Name$Short$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static VarHandle Long$VH() {
                    return winnt_h$constants$9._IMAGE_SYMBOL_EX$N$Name$Long$VH();
                }
                public static  @C("DWORD") int Long$get(@C("struct ") MemorySegment seg) {
                    return (int)winnt_h$constants$9._IMAGE_SYMBOL_EX$N$Name$Long$VH().get(seg);
                }
                public static  @C("DWORD") int Long$get(@C("struct ") MemorySegment seg, long index) {
                    return (int)winnt_h$constants$9._IMAGE_SYMBOL_EX$N$Name$Long$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void Long$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                    winnt_h$constants$9._IMAGE_SYMBOL_EX$N$Name$Long$VH().set(seg, x);
                }
                public static void Long$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winnt_h$constants$9._IMAGE_SYMBOL_EX$N$Name$Long$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment Name$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
            }
            public static MemorySegment LongName$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment N$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static VarHandle Value$VH() {
            return winnt_h$constants$9._IMAGE_SYMBOL_EX$Value$VH();
        }
        public static  @C("DWORD") int Value$get(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_SYMBOL_EX$Value$VH().get(seg);
        }
        public static  @C("DWORD") int Value$get(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_SYMBOL_EX$Value$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Value$set(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SYMBOL_EX$Value$VH().set(seg, x);
        }
        public static void Value$set(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_SYMBOL_EX$Value$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SectionNumber$VH() {
            return winnt_h$constants$9._IMAGE_SYMBOL_EX$SectionNumber$VH();
        }
        public static  @C("LONG") int SectionNumber$get(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_SYMBOL_EX$SectionNumber$VH().get(seg);
        }
        public static  @C("LONG") int SectionNumber$get(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_SYMBOL_EX$SectionNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SectionNumber$set(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, @C("LONG") int x) {
            winnt_h$constants$9._IMAGE_SYMBOL_EX$SectionNumber$VH().set(seg, x);
        }
        public static void SectionNumber$set(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, long index, @C("LONG") int x) {
            winnt_h$constants$9._IMAGE_SYMBOL_EX$SectionNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$9._IMAGE_SYMBOL_EX$Type$VH();
        }
        public static  @C("WORD") short Type$get(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_SYMBOL_EX$Type$VH().get(seg);
        }
        public static  @C("WORD") short Type$get(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_SYMBOL_EX$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_SYMBOL_EX$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_SYMBOL_EX$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StorageClass$VH() {
            return winnt_h$constants$9._IMAGE_SYMBOL_EX$StorageClass$VH();
        }
        public static  @C("BYTE") byte StorageClass$get(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg) {
            return (byte)winnt_h$constants$9._IMAGE_SYMBOL_EX$StorageClass$VH().get(seg);
        }
        public static  @C("BYTE") byte StorageClass$get(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$9._IMAGE_SYMBOL_EX$StorageClass$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StorageClass$set(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_SYMBOL_EX$StorageClass$VH().set(seg, x);
        }
        public static void StorageClass$set(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_SYMBOL_EX$StorageClass$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfAuxSymbols$VH() {
            return winnt_h$constants$9._IMAGE_SYMBOL_EX$NumberOfAuxSymbols$VH();
        }
        public static  @C("BYTE") byte NumberOfAuxSymbols$get(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg) {
            return (byte)winnt_h$constants$9._IMAGE_SYMBOL_EX$NumberOfAuxSymbols$VH().get(seg);
        }
        public static  @C("BYTE") byte NumberOfAuxSymbols$get(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$9._IMAGE_SYMBOL_EX$NumberOfAuxSymbols$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfAuxSymbols$set(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_SYMBOL_EX$NumberOfAuxSymbols$VH().set(seg, x);
        }
        public static void NumberOfAuxSymbols$set(@C("struct _IMAGE_SYMBOL_EX") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$9._IMAGE_SYMBOL_EX$NumberOfAuxSymbols$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_SYMBOL_EX") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_SYMBOL_EX") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_SYMBOL_EX[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_SYMBOL_EX[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_SYMBOL_EX*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_SYMBOL_EX*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_SYMBOL_EX") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_SYMBOL_EX")public static class IMAGE_SYMBOL_EX extends _IMAGE_SYMBOL_EX {

        /* package-private */ IMAGE_SYMBOL_EX() {}
    }

    @C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF")public static class IMAGE_AUX_SYMBOL_TOKEN_DEF {

        /* package-private */ IMAGE_AUX_SYMBOL_TOKEN_DEF() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$struct$LAYOUT();
        }
        public static VarHandle bAuxType$VH() {
            return winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$VH();
        }
        public static  @C("BYTE") byte bAuxType$get(@C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment seg) {
            return (byte)winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$VH().get(seg);
        }
        public static  @C("BYTE") byte bAuxType$get(@C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bAuxType$set(@C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$VH().set(seg, x);
        }
        public static void bAuxType$set(@C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$bAuxType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle bReserved$VH() {
            return winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$VH();
        }
        public static  @C("BYTE") byte bReserved$get(@C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment seg) {
            return (byte)winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$VH().get(seg);
        }
        public static  @C("BYTE") byte bReserved$get(@C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void bReserved$set(@C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$VH().set(seg, x);
        }
        public static void bReserved$set(@C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$bReserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SymbolTableIndex$VH() {
            return winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$VH();
        }
        public static  @C("DWORD") int SymbolTableIndex$get(@C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment seg) {
            return (int)winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$VH().get(seg);
        }
        public static  @C("DWORD") int SymbolTableIndex$get(@C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SymbolTableIndex$set(@C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$VH().set(seg, x);
        }
        public static void SymbolTableIndex$set(@C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9.IMAGE_AUX_SYMBOL_TOKEN_DEF$SymbolTableIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment rgbReserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(6, 12));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct IMAGE_AUX_SYMBOL_TOKEN_DEF") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("union _IMAGE_AUX_SYMBOL")public static class _IMAGE_AUX_SYMBOL {

        /* package-private */ _IMAGE_AUX_SYMBOL() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_AUX_SYMBOL$union$LAYOUT();
        }
        @C("struct ")public static class Sym {

            /* package-private */ Sym() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$struct$LAYOUT();
            }
            public static VarHandle TagIndex$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$TagIndex$VH();
            }
            public static  @C("DWORD") int TagIndex$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$TagIndex$VH().get(seg);
            }
            public static  @C("DWORD") int TagIndex$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$TagIndex$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void TagIndex$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$TagIndex$VH().set(seg, x);
            }
            public static void TagIndex$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$TagIndex$VH().set(seg.asSlice(index*sizeof()), x);
            }
            @C("union ")public static class Misc {

                /* package-private */ Misc() {}
                public static MemoryLayout $LAYOUT() {
                    return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$union$LAYOUT();
                }
                @C("struct ")public static class LnSz {

                    /* package-private */ LnSz() {}
                    public static MemoryLayout $LAYOUT() {
                        return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$struct$LAYOUT();
                    }
                    public static VarHandle Linenumber$VH() {
                        return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Linenumber$VH();
                    }
                    public static  @C("WORD") short Linenumber$get(@C("struct ") MemorySegment seg) {
                        return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Linenumber$VH().get(seg);
                    }
                    public static  @C("WORD") short Linenumber$get(@C("struct ") MemorySegment seg, long index) {
                        return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Linenumber$VH().get(seg.asSlice(index*sizeof()));
                    }
                    public static void Linenumber$set(@C("struct ") MemorySegment seg, @C("WORD") short x) {
                        winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Linenumber$VH().set(seg, x);
                    }
                    public static void Linenumber$set(@C("struct ") MemorySegment seg, long index, @C("WORD") short x) {
                        winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Linenumber$VH().set(seg.asSlice(index*sizeof()), x);
                    }
                    public static VarHandle Size$VH() {
                        return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Size$VH();
                    }
                    public static  @C("WORD") short Size$get(@C("struct ") MemorySegment seg) {
                        return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Size$VH().get(seg);
                    }
                    public static  @C("WORD") short Size$get(@C("struct ") MemorySegment seg, long index) {
                        return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Size$VH().get(seg.asSlice(index*sizeof()));
                    }
                    public static void Size$set(@C("struct ") MemorySegment seg, @C("WORD") short x) {
                        winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Size$VH().set(seg, x);
                    }
                    public static void Size$set(@C("struct ") MemorySegment seg, long index, @C("WORD") short x) {
                        winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$LnSz$Size$VH().set(seg.asSlice(index*sizeof()), x);
                    }
                    public static long sizeof() { return $LAYOUT().byteSize(); }
                    public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                    public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                    public static @C("struct []") MemorySegment allocateArray(int len) {
                        return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                    }                    public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                        return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                    }
                    public static @C("struct *") MemorySegment allocatePointer() {
                        return MemorySegment.allocateNative(C_POINTER);
                    }
                    public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                        return scope.allocate(C_POINTER);
                    }
                    public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
                }

                public static MemorySegment LnSz$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
                }
                public static VarHandle TotalSize$VH() {
                    return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$TotalSize$VH();
                }
                public static  @C("DWORD") int TotalSize$get(@C("union ") MemorySegment seg) {
                    return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$TotalSize$VH().get(seg);
                }
                public static  @C("DWORD") int TotalSize$get(@C("union ") MemorySegment seg, long index) {
                    return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$TotalSize$VH().get(seg.asSlice(index*sizeof()));
                }
                public static void TotalSize$set(@C("union ") MemorySegment seg, @C("DWORD") int x) {
                    winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$TotalSize$VH().set(seg, x);
                }
                public static void TotalSize$set(@C("union ") MemorySegment seg, long index, @C("DWORD") int x) {
                    winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$Misc$TotalSize$VH().set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("union []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("union *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment Misc$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 4));
            }
            @C("union ")public static class FcnAry {

                /* package-private */ FcnAry() {}
                public static MemoryLayout $LAYOUT() {
                    return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$union$LAYOUT();
                }
                @C("struct ")public static class Function {

                    /* package-private */ Function() {}
                    public static MemoryLayout $LAYOUT() {
                        return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$struct$LAYOUT();
                    }
                    public static VarHandle PointerToLinenumber$VH() {
                        return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToLinenumber$VH();
                    }
                    public static  @C("DWORD") int PointerToLinenumber$get(@C("struct ") MemorySegment seg) {
                        return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToLinenumber$VH().get(seg);
                    }
                    public static  @C("DWORD") int PointerToLinenumber$get(@C("struct ") MemorySegment seg, long index) {
                        return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToLinenumber$VH().get(seg.asSlice(index*sizeof()));
                    }
                    public static void PointerToLinenumber$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                        winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToLinenumber$VH().set(seg, x);
                    }
                    public static void PointerToLinenumber$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                        winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToLinenumber$VH().set(seg.asSlice(index*sizeof()), x);
                    }
                    public static VarHandle PointerToNextFunction$VH() {
                        return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToNextFunction$VH();
                    }
                    public static  @C("DWORD") int PointerToNextFunction$get(@C("struct ") MemorySegment seg) {
                        return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToNextFunction$VH().get(seg);
                    }
                    public static  @C("DWORD") int PointerToNextFunction$get(@C("struct ") MemorySegment seg, long index) {
                        return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToNextFunction$VH().get(seg.asSlice(index*sizeof()));
                    }
                    public static void PointerToNextFunction$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                        winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToNextFunction$VH().set(seg, x);
                    }
                    public static void PointerToNextFunction$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                        winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$Function$PointerToNextFunction$VH().set(seg.asSlice(index*sizeof()), x);
                    }
                    public static long sizeof() { return $LAYOUT().byteSize(); }
                    public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                    public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                    public static @C("struct []") MemorySegment allocateArray(int len) {
                        return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                    }                    public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                        return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                    }
                    public static @C("struct *") MemorySegment allocatePointer() {
                        return MemorySegment.allocateNative(C_POINTER);
                    }
                    public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                        return scope.allocate(C_POINTER);
                    }
                    public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
                }

                public static MemorySegment Function$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
                }
                @C("struct ")public static class Array {

                    /* package-private */ Array() {}
                    public static MemoryLayout $LAYOUT() {
                        return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$FcnAry$Array$struct$LAYOUT();
                    }
                    public static MemorySegment Dimension$slice(MemorySegment seg) {
                        return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
                    }
                    public static long sizeof() { return $LAYOUT().byteSize(); }
                    public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                    public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                    public static @C("struct []") MemorySegment allocateArray(int len) {
                        return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                    }                    public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                        return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                    }
                    public static @C("struct *") MemorySegment allocatePointer() {
                        return MemorySegment.allocateNative(C_POINTER);
                    }
                    public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                        return scope.allocate(C_POINTER);
                    }
                    public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
                }

                public static MemorySegment Array$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("union []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("union *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment FcnAry$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
            }
            public static VarHandle TvIndex$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$TvIndex$VH();
            }
            public static  @C("WORD") short TvIndex$get(@C("struct ") MemorySegment seg) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$TvIndex$VH().get(seg);
            }
            public static  @C("WORD") short TvIndex$get(@C("struct ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$TvIndex$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void TvIndex$set(@C("struct ") MemorySegment seg, @C("WORD") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$TvIndex$VH().set(seg, x);
            }
            public static void TvIndex$set(@C("struct ") MemorySegment seg, long index, @C("WORD") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Sym$TvIndex$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Sym$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 18));
        }
        @C("struct ")public static class File {

            /* package-private */ File() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$File$struct$LAYOUT();
            }
            public static MemorySegment Name$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 18));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment File$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 18));
        }
        @C("struct ")public static class Section {

            /* package-private */ Section() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$struct$LAYOUT();
            }
            public static VarHandle Length$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Length$VH();
            }
            public static  @C("DWORD") int Length$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Length$VH().get(seg);
            }
            public static  @C("DWORD") int Length$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Length$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Length$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Length$VH().set(seg, x);
            }
            public static void Length$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Length$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle NumberOfRelocations$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$NumberOfRelocations$VH();
            }
            public static  @C("WORD") short NumberOfRelocations$get(@C("struct ") MemorySegment seg) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$NumberOfRelocations$VH().get(seg);
            }
            public static  @C("WORD") short NumberOfRelocations$get(@C("struct ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$NumberOfRelocations$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void NumberOfRelocations$set(@C("struct ") MemorySegment seg, @C("WORD") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$NumberOfRelocations$VH().set(seg, x);
            }
            public static void NumberOfRelocations$set(@C("struct ") MemorySegment seg, long index, @C("WORD") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$NumberOfRelocations$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle NumberOfLinenumbers$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$NumberOfLinenumbers$VH();
            }
            public static  @C("WORD") short NumberOfLinenumbers$get(@C("struct ") MemorySegment seg) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$NumberOfLinenumbers$VH().get(seg);
            }
            public static  @C("WORD") short NumberOfLinenumbers$get(@C("struct ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$NumberOfLinenumbers$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void NumberOfLinenumbers$set(@C("struct ") MemorySegment seg, @C("WORD") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$NumberOfLinenumbers$VH().set(seg, x);
            }
            public static void NumberOfLinenumbers$set(@C("struct ") MemorySegment seg, long index, @C("WORD") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$NumberOfLinenumbers$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle CheckSum$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$CheckSum$VH();
            }
            public static  @C("DWORD") int CheckSum$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$CheckSum$VH().get(seg);
            }
            public static  @C("DWORD") int CheckSum$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$CheckSum$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void CheckSum$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$CheckSum$VH().set(seg, x);
            }
            public static void CheckSum$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$CheckSum$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Number$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Number$VH();
            }
            public static  @C("SHORT") short Number$get(@C("struct ") MemorySegment seg) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Number$VH().get(seg);
            }
            public static  @C("SHORT") short Number$get(@C("struct ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Number$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Number$set(@C("struct ") MemorySegment seg, @C("SHORT") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Number$VH().set(seg, x);
            }
            public static void Number$set(@C("struct ") MemorySegment seg, long index, @C("SHORT") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Number$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Selection$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Selection$VH();
            }
            public static  @C("BYTE") byte Selection$get(@C("struct ") MemorySegment seg) {
                return (byte)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Selection$VH().get(seg);
            }
            public static  @C("BYTE") byte Selection$get(@C("struct ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Selection$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Selection$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Selection$VH().set(seg, x);
            }
            public static void Selection$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$Selection$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle bReserved$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$bReserved$VH();
            }
            public static  @C("BYTE") byte bReserved$get(@C("struct ") MemorySegment seg) {
                return (byte)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$bReserved$VH().get(seg);
            }
            public static  @C("BYTE") byte bReserved$get(@C("struct ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$bReserved$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void bReserved$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$bReserved$VH().set(seg, x);
            }
            public static void bReserved$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$bReserved$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle HighNumber$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$HighNumber$VH();
            }
            public static  @C("SHORT") short HighNumber$get(@C("struct ") MemorySegment seg) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$HighNumber$VH().get(seg);
            }
            public static  @C("SHORT") short HighNumber$get(@C("struct ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$HighNumber$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void HighNumber$set(@C("struct ") MemorySegment seg, @C("SHORT") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$HighNumber$VH().set(seg, x);
            }
            public static void HighNumber$set(@C("struct ") MemorySegment seg, long index, @C("SHORT") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$Section$HighNumber$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Section$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 18));
        }
        public static MemorySegment TokenDef$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 18));
        }
        @C("struct ")public static class CRC {

            /* package-private */ CRC() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$CRC$struct$LAYOUT();
            }
            public static VarHandle crc$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL$CRC$crc$VH();
            }
            public static  @C("DWORD") int crc$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$CRC$crc$VH().get(seg);
            }
            public static  @C("DWORD") int crc$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL$CRC$crc$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void crc$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$CRC$crc$VH().set(seg, x);
            }
            public static void crc$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL$CRC$crc$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment rgbReserved$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 14));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment CRC$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 18));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union _IMAGE_AUX_SYMBOL") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union _IMAGE_AUX_SYMBOL") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union _IMAGE_AUX_SYMBOL[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union _IMAGE_AUX_SYMBOL[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union _IMAGE_AUX_SYMBOL*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union _IMAGE_AUX_SYMBOL*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union _IMAGE_AUX_SYMBOL") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("union _IMAGE_AUX_SYMBOL")public static class IMAGE_AUX_SYMBOL extends _IMAGE_AUX_SYMBOL {

        /* package-private */ IMAGE_AUX_SYMBOL() {}
    }

    @C("union _IMAGE_AUX_SYMBOL_EX")public static class _IMAGE_AUX_SYMBOL_EX {

        /* package-private */ _IMAGE_AUX_SYMBOL_EX() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$union$LAYOUT();
        }
        @C("struct ")public static class Sym {

            /* package-private */ Sym() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Sym$struct$LAYOUT();
            }
            public static VarHandle WeakDefaultSymIndex$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Sym$WeakDefaultSymIndex$VH();
            }
            public static  @C("DWORD") int WeakDefaultSymIndex$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Sym$WeakDefaultSymIndex$VH().get(seg);
            }
            public static  @C("DWORD") int WeakDefaultSymIndex$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Sym$WeakDefaultSymIndex$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void WeakDefaultSymIndex$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Sym$WeakDefaultSymIndex$VH().set(seg, x);
            }
            public static void WeakDefaultSymIndex$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Sym$WeakDefaultSymIndex$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle WeakSearchType$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Sym$WeakSearchType$VH();
            }
            public static  @C("DWORD") int WeakSearchType$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Sym$WeakSearchType$VH().get(seg);
            }
            public static  @C("DWORD") int WeakSearchType$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Sym$WeakSearchType$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void WeakSearchType$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Sym$WeakSearchType$VH().set(seg, x);
            }
            public static void WeakSearchType$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Sym$WeakSearchType$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment rgbReserved$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 12));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Sym$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 20));
        }
        @C("struct ")public static class File {

            /* package-private */ File() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$File$struct$LAYOUT();
            }
            public static MemorySegment Name$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 20));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment File$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 20));
        }
        @C("struct ")public static class Section {

            /* package-private */ Section() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$struct$LAYOUT();
            }
            public static VarHandle Length$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Length$VH();
            }
            public static  @C("DWORD") int Length$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Length$VH().get(seg);
            }
            public static  @C("DWORD") int Length$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Length$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Length$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Length$VH().set(seg, x);
            }
            public static void Length$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Length$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle NumberOfRelocations$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$NumberOfRelocations$VH();
            }
            public static  @C("WORD") short NumberOfRelocations$get(@C("struct ") MemorySegment seg) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$NumberOfRelocations$VH().get(seg);
            }
            public static  @C("WORD") short NumberOfRelocations$get(@C("struct ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$NumberOfRelocations$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void NumberOfRelocations$set(@C("struct ") MemorySegment seg, @C("WORD") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$NumberOfRelocations$VH().set(seg, x);
            }
            public static void NumberOfRelocations$set(@C("struct ") MemorySegment seg, long index, @C("WORD") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$NumberOfRelocations$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle NumberOfLinenumbers$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$NumberOfLinenumbers$VH();
            }
            public static  @C("WORD") short NumberOfLinenumbers$get(@C("struct ") MemorySegment seg) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$NumberOfLinenumbers$VH().get(seg);
            }
            public static  @C("WORD") short NumberOfLinenumbers$get(@C("struct ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$NumberOfLinenumbers$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void NumberOfLinenumbers$set(@C("struct ") MemorySegment seg, @C("WORD") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$NumberOfLinenumbers$VH().set(seg, x);
            }
            public static void NumberOfLinenumbers$set(@C("struct ") MemorySegment seg, long index, @C("WORD") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$NumberOfLinenumbers$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle CheckSum$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$CheckSum$VH();
            }
            public static  @C("DWORD") int CheckSum$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$CheckSum$VH().get(seg);
            }
            public static  @C("DWORD") int CheckSum$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$CheckSum$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void CheckSum$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$CheckSum$VH().set(seg, x);
            }
            public static void CheckSum$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$CheckSum$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Number$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Number$VH();
            }
            public static  @C("SHORT") short Number$get(@C("struct ") MemorySegment seg) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Number$VH().get(seg);
            }
            public static  @C("SHORT") short Number$get(@C("struct ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Number$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Number$set(@C("struct ") MemorySegment seg, @C("SHORT") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Number$VH().set(seg, x);
            }
            public static void Number$set(@C("struct ") MemorySegment seg, long index, @C("SHORT") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Number$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Selection$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Selection$VH();
            }
            public static  @C("BYTE") byte Selection$get(@C("struct ") MemorySegment seg) {
                return (byte)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Selection$VH().get(seg);
            }
            public static  @C("BYTE") byte Selection$get(@C("struct ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Selection$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Selection$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Selection$VH().set(seg, x);
            }
            public static void Selection$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$Selection$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle bReserved$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$bReserved$VH();
            }
            public static  @C("BYTE") byte bReserved$get(@C("struct ") MemorySegment seg) {
                return (byte)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$bReserved$VH().get(seg);
            }
            public static  @C("BYTE") byte bReserved$get(@C("struct ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$bReserved$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void bReserved$set(@C("struct ") MemorySegment seg, @C("BYTE") byte x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$bReserved$VH().set(seg, x);
            }
            public static void bReserved$set(@C("struct ") MemorySegment seg, long index, @C("BYTE") byte x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$bReserved$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle HighNumber$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$HighNumber$VH();
            }
            public static  @C("SHORT") short HighNumber$get(@C("struct ") MemorySegment seg) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$HighNumber$VH().get(seg);
            }
            public static  @C("SHORT") short HighNumber$get(@C("struct ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$HighNumber$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void HighNumber$set(@C("struct ") MemorySegment seg, @C("SHORT") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$HighNumber$VH().set(seg, x);
            }
            public static void HighNumber$set(@C("struct ") MemorySegment seg, long index, @C("SHORT") short x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$Section$HighNumber$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment rgbReserved$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(18, 2));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Section$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 20));
        }
        public static MemorySegment TokenDef$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 18));
        }
        public static MemorySegment rgbReserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 2));
        }
        @C("struct ")public static class CRC {

            /* package-private */ CRC() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$CRC$struct$LAYOUT();
            }
            public static VarHandle crc$VH() {
                return winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$CRC$crc$VH();
            }
            public static  @C("DWORD") int crc$get(@C("struct ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$CRC$crc$VH().get(seg);
            }
            public static  @C("DWORD") int crc$get(@C("struct ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$CRC$crc$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void crc$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$CRC$crc$VH().set(seg, x);
            }
            public static void crc$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_AUX_SYMBOL_EX$CRC$crc$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment rgbReserved$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 16));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment CRC$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 20));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union _IMAGE_AUX_SYMBOL_EX") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union _IMAGE_AUX_SYMBOL_EX") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union _IMAGE_AUX_SYMBOL_EX[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union _IMAGE_AUX_SYMBOL_EX[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union _IMAGE_AUX_SYMBOL_EX*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union _IMAGE_AUX_SYMBOL_EX*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union _IMAGE_AUX_SYMBOL_EX") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("union _IMAGE_AUX_SYMBOL_EX")public static class IMAGE_AUX_SYMBOL_EX extends _IMAGE_AUX_SYMBOL_EX {

        /* package-private */ IMAGE_AUX_SYMBOL_EX() {}
    }

    @C("struct _IMAGE_RELOCATION")public static class _IMAGE_RELOCATION {

        /* package-private */ _IMAGE_RELOCATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_RELOCATION$struct$LAYOUT();
        }
        public static VarHandle VirtualAddress$VH() {
            return winnt_h$constants$9._IMAGE_RELOCATION$VirtualAddress$VH();
        }
        public static  @C("DWORD") int VirtualAddress$get(@C("struct _IMAGE_RELOCATION") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_RELOCATION$VirtualAddress$VH().get(seg);
        }
        public static  @C("DWORD") int VirtualAddress$get(@C("struct _IMAGE_RELOCATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_RELOCATION$VirtualAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VirtualAddress$set(@C("struct _IMAGE_RELOCATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_RELOCATION$VirtualAddress$VH().set(seg, x);
        }
        public static void VirtualAddress$set(@C("struct _IMAGE_RELOCATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_RELOCATION$VirtualAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RelocCount$VH() {
            return winnt_h$constants$9._IMAGE_RELOCATION$RelocCount$VH();
        }
        public static  @C("DWORD") int RelocCount$get(@C("struct _IMAGE_RELOCATION") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_RELOCATION$RelocCount$VH().get(seg);
        }
        public static  @C("DWORD") int RelocCount$get(@C("struct _IMAGE_RELOCATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_RELOCATION$RelocCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RelocCount$set(@C("struct _IMAGE_RELOCATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_RELOCATION$RelocCount$VH().set(seg, x);
        }
        public static void RelocCount$set(@C("struct _IMAGE_RELOCATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_RELOCATION$RelocCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SymbolTableIndex$VH() {
            return winnt_h$constants$9._IMAGE_RELOCATION$SymbolTableIndex$VH();
        }
        public static  @C("DWORD") int SymbolTableIndex$get(@C("struct _IMAGE_RELOCATION") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_RELOCATION$SymbolTableIndex$VH().get(seg);
        }
        public static  @C("DWORD") int SymbolTableIndex$get(@C("struct _IMAGE_RELOCATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_RELOCATION$SymbolTableIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SymbolTableIndex$set(@C("struct _IMAGE_RELOCATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_RELOCATION$SymbolTableIndex$VH().set(seg, x);
        }
        public static void SymbolTableIndex$set(@C("struct _IMAGE_RELOCATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_RELOCATION$SymbolTableIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$9._IMAGE_RELOCATION$Type$VH();
        }
        public static  @C("WORD") short Type$get(@C("struct _IMAGE_RELOCATION") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_RELOCATION$Type$VH().get(seg);
        }
        public static  @C("WORD") short Type$get(@C("struct _IMAGE_RELOCATION") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_RELOCATION$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _IMAGE_RELOCATION") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_RELOCATION$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _IMAGE_RELOCATION") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_RELOCATION$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_RELOCATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_RELOCATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_RELOCATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_RELOCATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_RELOCATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_RELOCATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_RELOCATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_RELOCATION")public static class IMAGE_RELOCATION extends _IMAGE_RELOCATION {

        /* package-private */ IMAGE_RELOCATION() {}
    }

    @C("struct _IMAGE_LINENUMBER")public static class _IMAGE_LINENUMBER {

        /* package-private */ _IMAGE_LINENUMBER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_LINENUMBER$struct$LAYOUT();
        }
        @C("union ")public static class Type {

            /* package-private */ Type() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$9._IMAGE_LINENUMBER$Type$union$LAYOUT();
            }
            public static VarHandle SymbolTableIndex$VH() {
                return winnt_h$constants$9._IMAGE_LINENUMBER$Type$SymbolTableIndex$VH();
            }
            public static  @C("DWORD") int SymbolTableIndex$get(@C("union ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_LINENUMBER$Type$SymbolTableIndex$VH().get(seg);
            }
            public static  @C("DWORD") int SymbolTableIndex$get(@C("union ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_LINENUMBER$Type$SymbolTableIndex$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void SymbolTableIndex$set(@C("union ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_LINENUMBER$Type$SymbolTableIndex$VH().set(seg, x);
            }
            public static void SymbolTableIndex$set(@C("union ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_LINENUMBER$Type$SymbolTableIndex$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle VirtualAddress$VH() {
                return winnt_h$constants$9._IMAGE_LINENUMBER$Type$VirtualAddress$VH();
            }
            public static  @C("DWORD") int VirtualAddress$get(@C("union ") MemorySegment seg) {
                return (int)winnt_h$constants$9._IMAGE_LINENUMBER$Type$VirtualAddress$VH().get(seg);
            }
            public static  @C("DWORD") int VirtualAddress$get(@C("union ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$9._IMAGE_LINENUMBER$Type$VirtualAddress$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void VirtualAddress$set(@C("union ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_LINENUMBER$Type$VirtualAddress$VH().set(seg, x);
            }
            public static void VirtualAddress$set(@C("union ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$9._IMAGE_LINENUMBER$Type$VirtualAddress$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Type$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle Linenumber$VH() {
            return winnt_h$constants$9._IMAGE_LINENUMBER$Linenumber$VH();
        }
        public static  @C("WORD") short Linenumber$get(@C("struct _IMAGE_LINENUMBER") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_LINENUMBER$Linenumber$VH().get(seg);
        }
        public static  @C("WORD") short Linenumber$get(@C("struct _IMAGE_LINENUMBER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_LINENUMBER$Linenumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Linenumber$set(@C("struct _IMAGE_LINENUMBER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_LINENUMBER$Linenumber$VH().set(seg, x);
        }
        public static void Linenumber$set(@C("struct _IMAGE_LINENUMBER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_LINENUMBER$Linenumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_LINENUMBER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_LINENUMBER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_LINENUMBER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_LINENUMBER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_LINENUMBER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_LINENUMBER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_LINENUMBER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_LINENUMBER")public static class IMAGE_LINENUMBER extends _IMAGE_LINENUMBER {

        /* package-private */ IMAGE_LINENUMBER() {}
    }

    @C("struct _IMAGE_BASE_RELOCATION")public static class _IMAGE_BASE_RELOCATION {

        /* package-private */ _IMAGE_BASE_RELOCATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_BASE_RELOCATION$struct$LAYOUT();
        }
        public static VarHandle VirtualAddress$VH() {
            return winnt_h$constants$9._IMAGE_BASE_RELOCATION$VirtualAddress$VH();
        }
        public static  @C("DWORD") int VirtualAddress$get(@C("struct _IMAGE_BASE_RELOCATION") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_BASE_RELOCATION$VirtualAddress$VH().get(seg);
        }
        public static  @C("DWORD") int VirtualAddress$get(@C("struct _IMAGE_BASE_RELOCATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_BASE_RELOCATION$VirtualAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VirtualAddress$set(@C("struct _IMAGE_BASE_RELOCATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_BASE_RELOCATION$VirtualAddress$VH().set(seg, x);
        }
        public static void VirtualAddress$set(@C("struct _IMAGE_BASE_RELOCATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_BASE_RELOCATION$VirtualAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfBlock$VH() {
            return winnt_h$constants$9._IMAGE_BASE_RELOCATION$SizeOfBlock$VH();
        }
        public static  @C("DWORD") int SizeOfBlock$get(@C("struct _IMAGE_BASE_RELOCATION") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_BASE_RELOCATION$SizeOfBlock$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfBlock$get(@C("struct _IMAGE_BASE_RELOCATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_BASE_RELOCATION$SizeOfBlock$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfBlock$set(@C("struct _IMAGE_BASE_RELOCATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_BASE_RELOCATION$SizeOfBlock$VH().set(seg, x);
        }
        public static void SizeOfBlock$set(@C("struct _IMAGE_BASE_RELOCATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_BASE_RELOCATION$SizeOfBlock$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_BASE_RELOCATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_BASE_RELOCATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_BASE_RELOCATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_BASE_RELOCATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_BASE_RELOCATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_BASE_RELOCATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_BASE_RELOCATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_BASE_RELOCATION")public static class IMAGE_BASE_RELOCATION extends _IMAGE_BASE_RELOCATION {

        /* package-private */ IMAGE_BASE_RELOCATION() {}
    }

    @C("struct _IMAGE_ARCHIVE_MEMBER_HEADER")public static class _IMAGE_ARCHIVE_MEMBER_HEADER {

        /* package-private */ _IMAGE_ARCHIVE_MEMBER_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_ARCHIVE_MEMBER_HEADER$struct$LAYOUT();
        }
        public static MemorySegment Name$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment Date$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 12));
        }
        public static MemorySegment UserID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 6));
        }
        public static MemorySegment GroupID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(34, 6));
        }
        public static MemorySegment Mode$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static MemorySegment Size$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 10));
        }
        public static MemorySegment EndHeader$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(58, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_ARCHIVE_MEMBER_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_ARCHIVE_MEMBER_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_ARCHIVE_MEMBER_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_ARCHIVE_MEMBER_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_ARCHIVE_MEMBER_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_ARCHIVE_MEMBER_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_ARCHIVE_MEMBER_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_ARCHIVE_MEMBER_HEADER")public static class IMAGE_ARCHIVE_MEMBER_HEADER extends _IMAGE_ARCHIVE_MEMBER_HEADER {

        /* package-private */ IMAGE_ARCHIVE_MEMBER_HEADER() {}
    }

    @C("struct _IMAGE_EXPORT_DIRECTORY")public static class _IMAGE_EXPORT_DIRECTORY {

        /* package-private */ _IMAGE_EXPORT_DIRECTORY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$struct$LAYOUT();
        }
        public static VarHandle Characteristics$VH() {
            return winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Characteristics$VH();
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Characteristics$VH().get(seg);
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Characteristics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Characteristics$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Characteristics$VH().set(seg, x);
        }
        public static void Characteristics$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Characteristics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorVersion$VH() {
            return winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$MajorVersion$VH();
        }
        public static  @C("WORD") short MajorVersion$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$MajorVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorVersion$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$MajorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorVersion$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$MajorVersion$VH().set(seg, x);
        }
        public static void MajorVersion$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$MajorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorVersion$VH() {
            return winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$MinorVersion$VH();
        }
        public static  @C("WORD") short MinorVersion$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg) {
            return (short)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$MinorVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorVersion$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$MinorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorVersion$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$MinorVersion$VH().set(seg, x);
        }
        public static void MinorVersion$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$MinorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Name$VH() {
            return winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Name$VH();
        }
        public static  @C("DWORD") int Name$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Name$VH().get(seg);
        }
        public static  @C("DWORD") int Name$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Name$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Name$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Name$VH().set(seg, x);
        }
        public static void Name$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Name$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Base$VH() {
            return winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Base$VH();
        }
        public static  @C("DWORD") int Base$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Base$VH().get(seg);
        }
        public static  @C("DWORD") int Base$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Base$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Base$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Base$VH().set(seg, x);
        }
        public static void Base$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$Base$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfFunctions$VH() {
            return winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$VH();
        }
        public static  @C("DWORD") int NumberOfFunctions$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfFunctions$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfFunctions$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$VH().set(seg, x);
        }
        public static void NumberOfFunctions$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$NumberOfFunctions$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfNames$VH() {
            return winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$NumberOfNames$VH();
        }
        public static  @C("DWORD") int NumberOfNames$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$NumberOfNames$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfNames$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$NumberOfNames$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfNames$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$NumberOfNames$VH().set(seg, x);
        }
        public static void NumberOfNames$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$NumberOfNames$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AddressOfFunctions$VH() {
            return winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$VH();
        }
        public static  @C("DWORD") int AddressOfFunctions$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$VH().get(seg);
        }
        public static  @C("DWORD") int AddressOfFunctions$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AddressOfFunctions$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$VH().set(seg, x);
        }
        public static void AddressOfFunctions$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$9._IMAGE_EXPORT_DIRECTORY$AddressOfFunctions$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AddressOfNames$VH() {
            return winnt_h$constants$10._IMAGE_EXPORT_DIRECTORY$AddressOfNames$VH();
        }
        public static  @C("DWORD") int AddressOfNames$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_EXPORT_DIRECTORY$AddressOfNames$VH().get(seg);
        }
        public static  @C("DWORD") int AddressOfNames$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_EXPORT_DIRECTORY$AddressOfNames$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AddressOfNames$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_EXPORT_DIRECTORY$AddressOfNames$VH().set(seg, x);
        }
        public static void AddressOfNames$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_EXPORT_DIRECTORY$AddressOfNames$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AddressOfNameOrdinals$VH() {
            return winnt_h$constants$10._IMAGE_EXPORT_DIRECTORY$AddressOfNameOrdinals$VH();
        }
        public static  @C("DWORD") int AddressOfNameOrdinals$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_EXPORT_DIRECTORY$AddressOfNameOrdinals$VH().get(seg);
        }
        public static  @C("DWORD") int AddressOfNameOrdinals$get(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_EXPORT_DIRECTORY$AddressOfNameOrdinals$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AddressOfNameOrdinals$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_EXPORT_DIRECTORY$AddressOfNameOrdinals$VH().set(seg, x);
        }
        public static void AddressOfNameOrdinals$set(@C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_EXPORT_DIRECTORY$AddressOfNameOrdinals$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_EXPORT_DIRECTORY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_EXPORT_DIRECTORY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_EXPORT_DIRECTORY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_EXPORT_DIRECTORY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_EXPORT_DIRECTORY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_EXPORT_DIRECTORY")public static class IMAGE_EXPORT_DIRECTORY extends _IMAGE_EXPORT_DIRECTORY {

        /* package-private */ IMAGE_EXPORT_DIRECTORY() {}
    }

    @C("struct _IMAGE_IMPORT_BY_NAME")public static class _IMAGE_IMPORT_BY_NAME {

        /* package-private */ _IMAGE_IMPORT_BY_NAME() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_IMPORT_BY_NAME$struct$LAYOUT();
        }
        public static VarHandle Hint$VH() {
            return winnt_h$constants$10._IMAGE_IMPORT_BY_NAME$Hint$VH();
        }
        public static  @C("WORD") short Hint$get(@C("struct _IMAGE_IMPORT_BY_NAME") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_IMPORT_BY_NAME$Hint$VH().get(seg);
        }
        public static  @C("WORD") short Hint$get(@C("struct _IMAGE_IMPORT_BY_NAME") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_IMPORT_BY_NAME$Hint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Hint$set(@C("struct _IMAGE_IMPORT_BY_NAME") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_IMPORT_BY_NAME$Hint$VH().set(seg, x);
        }
        public static void Hint$set(@C("struct _IMAGE_IMPORT_BY_NAME") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_IMPORT_BY_NAME$Hint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Name$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2, 1));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_IMPORT_BY_NAME") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_IMPORT_BY_NAME") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_IMPORT_BY_NAME[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_IMPORT_BY_NAME[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_IMPORT_BY_NAME*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_IMPORT_BY_NAME*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_IMPORT_BY_NAME") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_IMPORT_BY_NAME")public static class IMAGE_IMPORT_BY_NAME extends _IMAGE_IMPORT_BY_NAME {

        /* package-private */ IMAGE_IMPORT_BY_NAME() {}
    }

    @C("struct _IMAGE_THUNK_DATA64")public static class _IMAGE_THUNK_DATA64 {

        /* package-private */ _IMAGE_THUNK_DATA64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_THUNK_DATA64$struct$LAYOUT();
        }
        @C("union ")public static class u1 {

            /* package-private */ u1() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$union$LAYOUT();
            }
            public static VarHandle ForwarderString$VH() {
                return winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$ForwarderString$VH();
            }
            public static  @C("ULONGLONG") long ForwarderString$get(@C("union ") MemorySegment seg) {
                return (long)winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$ForwarderString$VH().get(seg);
            }
            public static  @C("ULONGLONG") long ForwarderString$get(@C("union ") MemorySegment seg, long index) {
                return (long)winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$ForwarderString$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void ForwarderString$set(@C("union ") MemorySegment seg, @C("ULONGLONG") long x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$ForwarderString$VH().set(seg, x);
            }
            public static void ForwarderString$set(@C("union ") MemorySegment seg, long index, @C("ULONGLONG") long x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$ForwarderString$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Function$VH() {
                return winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$Function$VH();
            }
            public static  @C("ULONGLONG") long Function$get(@C("union ") MemorySegment seg) {
                return (long)winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$Function$VH().get(seg);
            }
            public static  @C("ULONGLONG") long Function$get(@C("union ") MemorySegment seg, long index) {
                return (long)winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$Function$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Function$set(@C("union ") MemorySegment seg, @C("ULONGLONG") long x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$Function$VH().set(seg, x);
            }
            public static void Function$set(@C("union ") MemorySegment seg, long index, @C("ULONGLONG") long x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$Function$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Ordinal$VH() {
                return winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$Ordinal$VH();
            }
            public static  @C("ULONGLONG") long Ordinal$get(@C("union ") MemorySegment seg) {
                return (long)winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$Ordinal$VH().get(seg);
            }
            public static  @C("ULONGLONG") long Ordinal$get(@C("union ") MemorySegment seg, long index) {
                return (long)winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$Ordinal$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Ordinal$set(@C("union ") MemorySegment seg, @C("ULONGLONG") long x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$Ordinal$VH().set(seg, x);
            }
            public static void Ordinal$set(@C("union ") MemorySegment seg, long index, @C("ULONGLONG") long x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$Ordinal$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle AddressOfData$VH() {
                return winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$AddressOfData$VH();
            }
            public static  @C("ULONGLONG") long AddressOfData$get(@C("union ") MemorySegment seg) {
                return (long)winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$AddressOfData$VH().get(seg);
            }
            public static  @C("ULONGLONG") long AddressOfData$get(@C("union ") MemorySegment seg, long index) {
                return (long)winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$AddressOfData$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void AddressOfData$set(@C("union ") MemorySegment seg, @C("ULONGLONG") long x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$AddressOfData$VH().set(seg, x);
            }
            public static void AddressOfData$set(@C("union ") MemorySegment seg, long index, @C("ULONGLONG") long x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA64$u1$AddressOfData$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment u1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_THUNK_DATA64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_THUNK_DATA64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_THUNK_DATA64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_THUNK_DATA64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_THUNK_DATA64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_THUNK_DATA64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_THUNK_DATA64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_THUNK_DATA64")public static class IMAGE_THUNK_DATA64 extends _IMAGE_THUNK_DATA64 {

        /* package-private */ IMAGE_THUNK_DATA64() {}
    }

    @C("struct _IMAGE_THUNK_DATA32")public static class _IMAGE_THUNK_DATA32 {

        /* package-private */ _IMAGE_THUNK_DATA32() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_THUNK_DATA32$struct$LAYOUT();
        }
        @C("union ")public static class u1 {

            /* package-private */ u1() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$union$LAYOUT();
            }
            public static VarHandle ForwarderString$VH() {
                return winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$ForwarderString$VH();
            }
            public static  @C("DWORD") int ForwarderString$get(@C("union ") MemorySegment seg) {
                return (int)winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$ForwarderString$VH().get(seg);
            }
            public static  @C("DWORD") int ForwarderString$get(@C("union ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$ForwarderString$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void ForwarderString$set(@C("union ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$ForwarderString$VH().set(seg, x);
            }
            public static void ForwarderString$set(@C("union ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$ForwarderString$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Function$VH() {
                return winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$Function$VH();
            }
            public static  @C("DWORD") int Function$get(@C("union ") MemorySegment seg) {
                return (int)winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$Function$VH().get(seg);
            }
            public static  @C("DWORD") int Function$get(@C("union ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$Function$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Function$set(@C("union ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$Function$VH().set(seg, x);
            }
            public static void Function$set(@C("union ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$Function$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Ordinal$VH() {
                return winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$Ordinal$VH();
            }
            public static  @C("DWORD") int Ordinal$get(@C("union ") MemorySegment seg) {
                return (int)winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$Ordinal$VH().get(seg);
            }
            public static  @C("DWORD") int Ordinal$get(@C("union ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$Ordinal$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Ordinal$set(@C("union ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$Ordinal$VH().set(seg, x);
            }
            public static void Ordinal$set(@C("union ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$Ordinal$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle AddressOfData$VH() {
                return winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$AddressOfData$VH();
            }
            public static  @C("DWORD") int AddressOfData$get(@C("union ") MemorySegment seg) {
                return (int)winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$AddressOfData$VH().get(seg);
            }
            public static  @C("DWORD") int AddressOfData$get(@C("union ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$AddressOfData$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void AddressOfData$set(@C("union ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$AddressOfData$VH().set(seg, x);
            }
            public static void AddressOfData$set(@C("union ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$10._IMAGE_THUNK_DATA32$u1$AddressOfData$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment u1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_THUNK_DATA32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_THUNK_DATA32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_THUNK_DATA32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_THUNK_DATA32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_THUNK_DATA32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_THUNK_DATA32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_THUNK_DATA32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_THUNK_DATA32")public static class IMAGE_THUNK_DATA32 extends _IMAGE_THUNK_DATA32 {

        /* package-private */ IMAGE_THUNK_DATA32() {}
    }

    @C("struct _IMAGE_TLS_DIRECTORY64")public static class _IMAGE_TLS_DIRECTORY64 {

        /* package-private */ _IMAGE_TLS_DIRECTORY64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$struct$LAYOUT();
        }
        public static VarHandle StartAddressOfRawData$VH() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$StartAddressOfRawData$VH();
        }
        public static  @C("ULONGLONG") long StartAddressOfRawData$get(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$StartAddressOfRawData$VH().get(seg);
        }
        public static  @C("ULONGLONG") long StartAddressOfRawData$get(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$StartAddressOfRawData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StartAddressOfRawData$set(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$StartAddressOfRawData$VH().set(seg, x);
        }
        public static void StartAddressOfRawData$set(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$StartAddressOfRawData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EndAddressOfRawData$VH() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$EndAddressOfRawData$VH();
        }
        public static  @C("ULONGLONG") long EndAddressOfRawData$get(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$EndAddressOfRawData$VH().get(seg);
        }
        public static  @C("ULONGLONG") long EndAddressOfRawData$get(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$EndAddressOfRawData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EndAddressOfRawData$set(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$EndAddressOfRawData$VH().set(seg, x);
        }
        public static void EndAddressOfRawData$set(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$EndAddressOfRawData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AddressOfIndex$VH() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$AddressOfIndex$VH();
        }
        public static  @C("ULONGLONG") long AddressOfIndex$get(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$AddressOfIndex$VH().get(seg);
        }
        public static  @C("ULONGLONG") long AddressOfIndex$get(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$AddressOfIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AddressOfIndex$set(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$AddressOfIndex$VH().set(seg, x);
        }
        public static void AddressOfIndex$set(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$AddressOfIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AddressOfCallBacks$VH() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$AddressOfCallBacks$VH();
        }
        public static  @C("ULONGLONG") long AddressOfCallBacks$get(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$AddressOfCallBacks$VH().get(seg);
        }
        public static  @C("ULONGLONG") long AddressOfCallBacks$get(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$AddressOfCallBacks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AddressOfCallBacks$set(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$AddressOfCallBacks$VH().set(seg, x);
        }
        public static void AddressOfCallBacks$set(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$AddressOfCallBacks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfZeroFill$VH() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$SizeOfZeroFill$VH();
        }
        public static  @C("DWORD") int SizeOfZeroFill$get(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$SizeOfZeroFill$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfZeroFill$get(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$SizeOfZeroFill$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfZeroFill$set(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$SizeOfZeroFill$VH().set(seg, x);
        }
        public static void SizeOfZeroFill$set(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$SizeOfZeroFill$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Characteristics$VH() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$Characteristics$VH();
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$Characteristics$VH().get(seg);
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$Characteristics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Characteristics$set(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$Characteristics$VH().set(seg, x);
        }
        public static void Characteristics$set(@C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY64$Characteristics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_TLS_DIRECTORY64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_TLS_DIRECTORY64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_TLS_DIRECTORY64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_TLS_DIRECTORY64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_TLS_DIRECTORY64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_TLS_DIRECTORY64")public static class IMAGE_TLS_DIRECTORY64 extends _IMAGE_TLS_DIRECTORY64 {

        /* package-private */ IMAGE_TLS_DIRECTORY64() {}
    }

    @C("struct _IMAGE_TLS_DIRECTORY32")public static class _IMAGE_TLS_DIRECTORY32 {

        /* package-private */ _IMAGE_TLS_DIRECTORY32() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$struct$LAYOUT();
        }
        public static VarHandle StartAddressOfRawData$VH() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$StartAddressOfRawData$VH();
        }
        public static  @C("DWORD") int StartAddressOfRawData$get(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$StartAddressOfRawData$VH().get(seg);
        }
        public static  @C("DWORD") int StartAddressOfRawData$get(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$StartAddressOfRawData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StartAddressOfRawData$set(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$StartAddressOfRawData$VH().set(seg, x);
        }
        public static void StartAddressOfRawData$set(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$StartAddressOfRawData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EndAddressOfRawData$VH() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$EndAddressOfRawData$VH();
        }
        public static  @C("DWORD") int EndAddressOfRawData$get(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$EndAddressOfRawData$VH().get(seg);
        }
        public static  @C("DWORD") int EndAddressOfRawData$get(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$EndAddressOfRawData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EndAddressOfRawData$set(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$EndAddressOfRawData$VH().set(seg, x);
        }
        public static void EndAddressOfRawData$set(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$EndAddressOfRawData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AddressOfIndex$VH() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$AddressOfIndex$VH();
        }
        public static  @C("DWORD") int AddressOfIndex$get(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$AddressOfIndex$VH().get(seg);
        }
        public static  @C("DWORD") int AddressOfIndex$get(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$AddressOfIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AddressOfIndex$set(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$AddressOfIndex$VH().set(seg, x);
        }
        public static void AddressOfIndex$set(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$AddressOfIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AddressOfCallBacks$VH() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$AddressOfCallBacks$VH();
        }
        public static  @C("DWORD") int AddressOfCallBacks$get(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$AddressOfCallBacks$VH().get(seg);
        }
        public static  @C("DWORD") int AddressOfCallBacks$get(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$AddressOfCallBacks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AddressOfCallBacks$set(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$AddressOfCallBacks$VH().set(seg, x);
        }
        public static void AddressOfCallBacks$set(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$AddressOfCallBacks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfZeroFill$VH() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$SizeOfZeroFill$VH();
        }
        public static  @C("DWORD") int SizeOfZeroFill$get(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$SizeOfZeroFill$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfZeroFill$get(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$SizeOfZeroFill$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfZeroFill$set(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$SizeOfZeroFill$VH().set(seg, x);
        }
        public static void SizeOfZeroFill$set(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$SizeOfZeroFill$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Characteristics$VH() {
            return winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$Characteristics$VH();
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$Characteristics$VH().get(seg);
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$Characteristics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Characteristics$set(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$Characteristics$VH().set(seg, x);
        }
        public static void Characteristics$set(@C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_TLS_DIRECTORY32$Characteristics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_TLS_DIRECTORY32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_TLS_DIRECTORY32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_TLS_DIRECTORY32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_TLS_DIRECTORY32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_TLS_DIRECTORY32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_TLS_DIRECTORY32")public static class IMAGE_TLS_DIRECTORY32 extends _IMAGE_TLS_DIRECTORY32 {

        /* package-private */ IMAGE_TLS_DIRECTORY32() {}
    }

    @C("struct _IMAGE_THUNK_DATA64")public static class IMAGE_THUNK_DATA extends _IMAGE_THUNK_DATA64 {

        /* package-private */ IMAGE_THUNK_DATA() {}
    }

    @C("struct _IMAGE_TLS_DIRECTORY64")public static class IMAGE_TLS_DIRECTORY extends _IMAGE_TLS_DIRECTORY64 {

        /* package-private */ IMAGE_TLS_DIRECTORY() {}
    }

    @C("struct _IMAGE_IMPORT_DESCRIPTOR")public static class _IMAGE_IMPORT_DESCRIPTOR {

        /* package-private */ _IMAGE_IMPORT_DESCRIPTOR() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$struct$LAYOUT();
        }
        public static VarHandle Characteristics$VH() {
            return winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$Characteristics$VH();
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$Characteristics$VH().get(seg);
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$Characteristics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Characteristics$set(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$Characteristics$VH().set(seg, x);
        }
        public static void Characteristics$set(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$Characteristics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OriginalFirstThunk$VH() {
            return winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$OriginalFirstThunk$VH();
        }
        public static  @C("DWORD") int OriginalFirstThunk$get(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$OriginalFirstThunk$VH().get(seg);
        }
        public static  @C("DWORD") int OriginalFirstThunk$get(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$OriginalFirstThunk$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OriginalFirstThunk$set(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$OriginalFirstThunk$VH().set(seg, x);
        }
        public static void OriginalFirstThunk$set(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$OriginalFirstThunk$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ForwarderChain$VH() {
            return winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$ForwarderChain$VH();
        }
        public static  @C("DWORD") int ForwarderChain$get(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$ForwarderChain$VH().get(seg);
        }
        public static  @C("DWORD") int ForwarderChain$get(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$ForwarderChain$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ForwarderChain$set(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$ForwarderChain$VH().set(seg, x);
        }
        public static void ForwarderChain$set(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$ForwarderChain$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Name$VH() {
            return winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$Name$VH();
        }
        public static  @C("DWORD") int Name$get(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$Name$VH().get(seg);
        }
        public static  @C("DWORD") int Name$get(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$Name$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Name$set(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$Name$VH().set(seg, x);
        }
        public static void Name$set(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$Name$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FirstThunk$VH() {
            return winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$FirstThunk$VH();
        }
        public static  @C("DWORD") int FirstThunk$get(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$FirstThunk$VH().get(seg);
        }
        public static  @C("DWORD") int FirstThunk$get(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$FirstThunk$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FirstThunk$set(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$FirstThunk$VH().set(seg, x);
        }
        public static void FirstThunk$set(@C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_IMPORT_DESCRIPTOR$FirstThunk$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_IMPORT_DESCRIPTOR[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_IMPORT_DESCRIPTOR[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_IMPORT_DESCRIPTOR*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_IMPORT_DESCRIPTOR*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_IMPORT_DESCRIPTOR") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_IMPORT_DESCRIPTOR")public static class IMAGE_IMPORT_DESCRIPTOR extends _IMAGE_IMPORT_DESCRIPTOR {

        /* package-private */ IMAGE_IMPORT_DESCRIPTOR() {}
    }

    @C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR")public static class _IMAGE_BOUND_IMPORT_DESCRIPTOR {

        /* package-private */ _IMAGE_BOUND_IMPORT_DESCRIPTOR() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$struct$LAYOUT();
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OffsetModuleName$VH() {
            return winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$OffsetModuleName$VH();
        }
        public static  @C("WORD") short OffsetModuleName$get(@C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$OffsetModuleName$VH().get(seg);
        }
        public static  @C("WORD") short OffsetModuleName$get(@C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$OffsetModuleName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OffsetModuleName$set(@C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$OffsetModuleName$VH().set(seg, x);
        }
        public static void OffsetModuleName$set(@C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$OffsetModuleName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfModuleForwarderRefs$VH() {
            return winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$NumberOfModuleForwarderRefs$VH();
        }
        public static  @C("WORD") short NumberOfModuleForwarderRefs$get(@C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$NumberOfModuleForwarderRefs$VH().get(seg);
        }
        public static  @C("WORD") short NumberOfModuleForwarderRefs$get(@C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$NumberOfModuleForwarderRefs$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfModuleForwarderRefs$set(@C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$NumberOfModuleForwarderRefs$VH().set(seg, x);
        }
        public static void NumberOfModuleForwarderRefs$set(@C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_BOUND_IMPORT_DESCRIPTOR$NumberOfModuleForwarderRefs$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_BOUND_IMPORT_DESCRIPTOR")public static class IMAGE_BOUND_IMPORT_DESCRIPTOR extends _IMAGE_BOUND_IMPORT_DESCRIPTOR {

        /* package-private */ IMAGE_BOUND_IMPORT_DESCRIPTOR() {}
    }

    @C("struct _IMAGE_BOUND_FORWARDER_REF")public static class _IMAGE_BOUND_FORWARDER_REF {

        /* package-private */ _IMAGE_BOUND_FORWARDER_REF() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$struct$LAYOUT();
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OffsetModuleName$VH() {
            return winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$OffsetModuleName$VH();
        }
        public static  @C("WORD") short OffsetModuleName$get(@C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$OffsetModuleName$VH().get(seg);
        }
        public static  @C("WORD") short OffsetModuleName$get(@C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$OffsetModuleName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OffsetModuleName$set(@C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$OffsetModuleName$VH().set(seg, x);
        }
        public static void OffsetModuleName$set(@C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$OffsetModuleName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$Reserved$VH();
        }
        public static  @C("WORD") short Reserved$get(@C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$Reserved$VH().get(seg);
        }
        public static  @C("WORD") short Reserved$get(@C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_BOUND_FORWARDER_REF$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_BOUND_FORWARDER_REF[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_BOUND_FORWARDER_REF[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_BOUND_FORWARDER_REF*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_BOUND_FORWARDER_REF*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_BOUND_FORWARDER_REF") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_BOUND_FORWARDER_REF")public static class IMAGE_BOUND_FORWARDER_REF extends _IMAGE_BOUND_FORWARDER_REF {

        /* package-private */ IMAGE_BOUND_FORWARDER_REF() {}
    }

    @C("struct _IMAGE_DELAYLOAD_DESCRIPTOR")public static class _IMAGE_DELAYLOAD_DESCRIPTOR {

        /* package-private */ _IMAGE_DELAYLOAD_DESCRIPTOR() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$struct$LAYOUT();
        }
        @C("union ")public static class Attributes {

            /* package-private */ Attributes() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$Attributes$union$LAYOUT();
            }
            public static VarHandle AllAttributes$VH() {
                return winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$Attributes$AllAttributes$VH();
            }
            public static  @C("DWORD") int AllAttributes$get(@C("union ") MemorySegment seg) {
                return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$Attributes$AllAttributes$VH().get(seg);
            }
            public static  @C("DWORD") int AllAttributes$get(@C("union ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$Attributes$AllAttributes$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void AllAttributes$set(@C("union ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$Attributes$AllAttributes$VH().set(seg, x);
            }
            public static void AllAttributes$set(@C("union ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$Attributes$AllAttributes$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Attributes$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
        }
        public static VarHandle DllNameRVA$VH() {
            return winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$DllNameRVA$VH();
        }
        public static  @C("DWORD") int DllNameRVA$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$DllNameRVA$VH().get(seg);
        }
        public static  @C("DWORD") int DllNameRVA$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$DllNameRVA$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DllNameRVA$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$DllNameRVA$VH().set(seg, x);
        }
        public static void DllNameRVA$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$DllNameRVA$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ModuleHandleRVA$VH() {
            return winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ModuleHandleRVA$VH();
        }
        public static  @C("DWORD") int ModuleHandleRVA$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ModuleHandleRVA$VH().get(seg);
        }
        public static  @C("DWORD") int ModuleHandleRVA$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ModuleHandleRVA$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ModuleHandleRVA$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ModuleHandleRVA$VH().set(seg, x);
        }
        public static void ModuleHandleRVA$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ModuleHandleRVA$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImportAddressTableRVA$VH() {
            return winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ImportAddressTableRVA$VH();
        }
        public static  @C("DWORD") int ImportAddressTableRVA$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ImportAddressTableRVA$VH().get(seg);
        }
        public static  @C("DWORD") int ImportAddressTableRVA$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ImportAddressTableRVA$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImportAddressTableRVA$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ImportAddressTableRVA$VH().set(seg, x);
        }
        public static void ImportAddressTableRVA$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ImportAddressTableRVA$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImportNameTableRVA$VH() {
            return winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ImportNameTableRVA$VH();
        }
        public static  @C("DWORD") int ImportNameTableRVA$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ImportNameTableRVA$VH().get(seg);
        }
        public static  @C("DWORD") int ImportNameTableRVA$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ImportNameTableRVA$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImportNameTableRVA$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ImportNameTableRVA$VH().set(seg, x);
        }
        public static void ImportNameTableRVA$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$ImportNameTableRVA$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BoundImportAddressTableRVA$VH() {
            return winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$BoundImportAddressTableRVA$VH();
        }
        public static  @C("DWORD") int BoundImportAddressTableRVA$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$BoundImportAddressTableRVA$VH().get(seg);
        }
        public static  @C("DWORD") int BoundImportAddressTableRVA$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$BoundImportAddressTableRVA$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BoundImportAddressTableRVA$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$BoundImportAddressTableRVA$VH().set(seg, x);
        }
        public static void BoundImportAddressTableRVA$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$BoundImportAddressTableRVA$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle UnloadInformationTableRVA$VH() {
            return winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$UnloadInformationTableRVA$VH();
        }
        public static  @C("DWORD") int UnloadInformationTableRVA$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$UnloadInformationTableRVA$VH().get(seg);
        }
        public static  @C("DWORD") int UnloadInformationTableRVA$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$UnloadInformationTableRVA$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UnloadInformationTableRVA$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$UnloadInformationTableRVA$VH().set(seg, x);
        }
        public static void UnloadInformationTableRVA$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$UnloadInformationTableRVA$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DELAYLOAD_DESCRIPTOR$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_DELAYLOAD_DESCRIPTOR[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_DELAYLOAD_DESCRIPTOR[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_DELAYLOAD_DESCRIPTOR*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_DELAYLOAD_DESCRIPTOR*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_DELAYLOAD_DESCRIPTOR") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_DELAYLOAD_DESCRIPTOR")public static class IMAGE_DELAYLOAD_DESCRIPTOR extends _IMAGE_DELAYLOAD_DESCRIPTOR {

        /* package-private */ IMAGE_DELAYLOAD_DESCRIPTOR() {}
    }

    @C("struct _IMAGE_RESOURCE_DIRECTORY")public static class _IMAGE_RESOURCE_DIRECTORY {

        /* package-private */ _IMAGE_RESOURCE_DIRECTORY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$struct$LAYOUT();
        }
        public static VarHandle Characteristics$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$Characteristics$VH();
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$Characteristics$VH().get(seg);
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$Characteristics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Characteristics$set(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$Characteristics$VH().set(seg, x);
        }
        public static void Characteristics$set(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$Characteristics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorVersion$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$MajorVersion$VH();
        }
        public static  @C("WORD") short MajorVersion$get(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$MajorVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorVersion$get(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$MajorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorVersion$set(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$MajorVersion$VH().set(seg, x);
        }
        public static void MajorVersion$set(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$MajorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorVersion$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$MinorVersion$VH();
        }
        public static  @C("WORD") short MinorVersion$get(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$MinorVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorVersion$get(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$MinorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorVersion$set(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$MinorVersion$VH().set(seg, x);
        }
        public static void MinorVersion$set(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$MinorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfNamedEntries$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$NumberOfNamedEntries$VH();
        }
        public static  @C("WORD") short NumberOfNamedEntries$get(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$NumberOfNamedEntries$VH().get(seg);
        }
        public static  @C("WORD") short NumberOfNamedEntries$get(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$NumberOfNamedEntries$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfNamedEntries$set(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$NumberOfNamedEntries$VH().set(seg, x);
        }
        public static void NumberOfNamedEntries$set(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$NumberOfNamedEntries$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfIdEntries$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$NumberOfIdEntries$VH();
        }
        public static  @C("WORD") short NumberOfIdEntries$get(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$NumberOfIdEntries$VH().get(seg);
        }
        public static  @C("WORD") short NumberOfIdEntries$get(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$NumberOfIdEntries$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfIdEntries$set(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$NumberOfIdEntries$VH().set(seg, x);
        }
        public static void NumberOfIdEntries$set(@C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY$NumberOfIdEntries$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_RESOURCE_DIRECTORY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_RESOURCE_DIRECTORY")public static class IMAGE_RESOURCE_DIRECTORY extends _IMAGE_RESOURCE_DIRECTORY {

        /* package-private */ IMAGE_RESOURCE_DIRECTORY() {}
    }

    @C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY")public static class _IMAGE_RESOURCE_DIRECTORY_ENTRY {

        /* package-private */ _IMAGE_RESOURCE_DIRECTORY_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$struct$LAYOUT();
        }
        public static VarHandle Name$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$Name$VH();
        }
        public static  @C("DWORD") int Name$get(@C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$Name$VH().get(seg);
        }
        public static  @C("DWORD") int Name$get(@C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$Name$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Name$set(@C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$Name$VH().set(seg, x);
        }
        public static void Name$set(@C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$Name$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Id$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$Id$VH();
        }
        public static  @C("WORD") short Id$get(@C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$Id$VH().get(seg);
        }
        public static  @C("WORD") short Id$get(@C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$Id$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Id$set(@C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$Id$VH().set(seg, x);
        }
        public static void Id$set(@C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$Id$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OffsetToData$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$OffsetToData$VH();
        }
        public static  @C("DWORD") int OffsetToData$get(@C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$OffsetToData$VH().get(seg);
        }
        public static  @C("DWORD") int OffsetToData$get(@C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$OffsetToData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OffsetToData$set(@C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$OffsetToData$VH().set(seg, x);
        }
        public static void OffsetToData$set(@C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_ENTRY$OffsetToData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_RESOURCE_DIRECTORY_ENTRY")public static class IMAGE_RESOURCE_DIRECTORY_ENTRY extends _IMAGE_RESOURCE_DIRECTORY_ENTRY {

        /* package-private */ IMAGE_RESOURCE_DIRECTORY_ENTRY() {}
    }

    @C("struct _IMAGE_RESOURCE_DIRECTORY_STRING")public static class _IMAGE_RESOURCE_DIRECTORY_STRING {

        /* package-private */ _IMAGE_RESOURCE_DIRECTORY_STRING() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_STRING$struct$LAYOUT();
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_STRING$Length$VH();
        }
        public static  @C("WORD") short Length$get(@C("struct _IMAGE_RESOURCE_DIRECTORY_STRING") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_STRING$Length$VH().get(seg);
        }
        public static  @C("WORD") short Length$get(@C("struct _IMAGE_RESOURCE_DIRECTORY_STRING") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_STRING$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _IMAGE_RESOURCE_DIRECTORY_STRING") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_STRING$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _IMAGE_RESOURCE_DIRECTORY_STRING") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIRECTORY_STRING$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment NameString$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2, 1));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_STRING") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_STRING") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_STRING[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_STRING[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_STRING*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_STRING*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_RESOURCE_DIRECTORY_STRING") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_RESOURCE_DIRECTORY_STRING")public static class IMAGE_RESOURCE_DIRECTORY_STRING extends _IMAGE_RESOURCE_DIRECTORY_STRING {

        /* package-private */ IMAGE_RESOURCE_DIRECTORY_STRING() {}
    }

    @C("struct _IMAGE_RESOURCE_DIR_STRING_U")public static class _IMAGE_RESOURCE_DIR_STRING_U {

        /* package-private */ _IMAGE_RESOURCE_DIR_STRING_U() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIR_STRING_U$struct$LAYOUT();
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DIR_STRING_U$Length$VH();
        }
        public static  @C("WORD") short Length$get(@C("struct _IMAGE_RESOURCE_DIR_STRING_U") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIR_STRING_U$Length$VH().get(seg);
        }
        public static  @C("WORD") short Length$get(@C("struct _IMAGE_RESOURCE_DIR_STRING_U") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_RESOURCE_DIR_STRING_U$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _IMAGE_RESOURCE_DIR_STRING_U") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIR_STRING_U$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _IMAGE_RESOURCE_DIR_STRING_U") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DIR_STRING_U$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment NameString$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(2, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_RESOURCE_DIR_STRING_U") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_RESOURCE_DIR_STRING_U") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_RESOURCE_DIR_STRING_U[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_RESOURCE_DIR_STRING_U[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_RESOURCE_DIR_STRING_U*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_RESOURCE_DIR_STRING_U*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_RESOURCE_DIR_STRING_U") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_RESOURCE_DIR_STRING_U")public static class IMAGE_RESOURCE_DIR_STRING_U extends _IMAGE_RESOURCE_DIR_STRING_U {

        /* package-private */ IMAGE_RESOURCE_DIR_STRING_U() {}
    }

    @C("struct _IMAGE_RESOURCE_DATA_ENTRY")public static class _IMAGE_RESOURCE_DATA_ENTRY {

        /* package-private */ _IMAGE_RESOURCE_DATA_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$struct$LAYOUT();
        }
        public static VarHandle OffsetToData$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$OffsetToData$VH();
        }
        public static  @C("DWORD") int OffsetToData$get(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$OffsetToData$VH().get(seg);
        }
        public static  @C("DWORD") int OffsetToData$get(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$OffsetToData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OffsetToData$set(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$OffsetToData$VH().set(seg, x);
        }
        public static void OffsetToData$set(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$OffsetToData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CodePage$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$CodePage$VH();
        }
        public static  @C("DWORD") int CodePage$get(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$CodePage$VH().get(seg);
        }
        public static  @C("DWORD") int CodePage$get(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$CodePage$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CodePage$set(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$CodePage$VH().set(seg, x);
        }
        public static void CodePage$set(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$CodePage$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$Reserved$VH();
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$Reserved$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_RESOURCE_DATA_ENTRY$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_RESOURCE_DATA_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_RESOURCE_DATA_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_RESOURCE_DATA_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_RESOURCE_DATA_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_RESOURCE_DATA_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_RESOURCE_DATA_ENTRY")public static class IMAGE_RESOURCE_DATA_ENTRY extends _IMAGE_RESOURCE_DATA_ENTRY {

        /* package-private */ IMAGE_RESOURCE_DATA_ENTRY() {}
    }

    @C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY")public static class _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {

        /* package-private */ _IMAGE_LOAD_CONFIG_CODE_INTEGRITY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$struct$LAYOUT();
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Flags$VH();
        }
        public static  @C("WORD") short Flags$get(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Flags$VH().get(seg);
        }
        public static  @C("WORD") short Flags$get(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Catalog$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Catalog$VH();
        }
        public static  @C("WORD") short Catalog$get(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Catalog$VH().get(seg);
        }
        public static  @C("WORD") short Catalog$get(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Catalog$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Catalog$set(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Catalog$VH().set(seg, x);
        }
        public static void Catalog$set(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Catalog$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CatalogOffset$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$CatalogOffset$VH();
        }
        public static  @C("DWORD") int CatalogOffset$get(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$CatalogOffset$VH().get(seg);
        }
        public static  @C("DWORD") int CatalogOffset$get(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$CatalogOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CatalogOffset$set(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$CatalogOffset$VH().set(seg, x);
        }
        public static void CatalogOffset$set(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$CatalogOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Reserved$VH();
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Reserved$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_CODE_INTEGRITY$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY")public static class IMAGE_LOAD_CONFIG_CODE_INTEGRITY extends _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {

        /* package-private */ IMAGE_LOAD_CONFIG_CODE_INTEGRITY() {}
    }

    @C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE")public static class _IMAGE_DYNAMIC_RELOCATION_TABLE {

        /* package-private */ _IMAGE_DYNAMIC_RELOCATION_TABLE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION_TABLE$struct$LAYOUT();
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION_TABLE$Version$VH();
        }
        public static  @C("DWORD") int Version$get(@C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION_TABLE$Version$VH().get(seg);
        }
        public static  @C("DWORD") int Version$get(@C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION_TABLE$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION_TABLE$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION_TABLE$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION_TABLE$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION_TABLE$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION_TABLE$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION_TABLE$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION_TABLE$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_DYNAMIC_RELOCATION_TABLE")public static class IMAGE_DYNAMIC_RELOCATION_TABLE extends _IMAGE_DYNAMIC_RELOCATION_TABLE {

        /* package-private */ IMAGE_DYNAMIC_RELOCATION_TABLE() {}
    }

    @C("struct _IMAGE_DYNAMIC_RELOCATION32")public static class _IMAGE_DYNAMIC_RELOCATION32 {

        /* package-private */ _IMAGE_DYNAMIC_RELOCATION32() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32$struct$LAYOUT();
        }
        public static VarHandle Symbol$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32$Symbol$VH();
        }
        public static  @C("DWORD") int Symbol$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32$Symbol$VH().get(seg);
        }
        public static  @C("DWORD") int Symbol$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32$Symbol$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Symbol$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32$Symbol$VH().set(seg, x);
        }
        public static void Symbol$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32$Symbol$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseRelocSize$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32$BaseRelocSize$VH();
        }
        public static  @C("DWORD") int BaseRelocSize$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32$BaseRelocSize$VH().get(seg);
        }
        public static  @C("DWORD") int BaseRelocSize$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32$BaseRelocSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseRelocSize$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32$BaseRelocSize$VH().set(seg, x);
        }
        public static void BaseRelocSize$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32$BaseRelocSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_DYNAMIC_RELOCATION32")public static class IMAGE_DYNAMIC_RELOCATION32 extends _IMAGE_DYNAMIC_RELOCATION32 {

        /* package-private */ IMAGE_DYNAMIC_RELOCATION32() {}
    }

    @C("struct _IMAGE_DYNAMIC_RELOCATION64")public static class _IMAGE_DYNAMIC_RELOCATION64 {

        /* package-private */ _IMAGE_DYNAMIC_RELOCATION64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64$struct$LAYOUT();
        }
        public static VarHandle Symbol$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64$Symbol$VH();
        }
        public static  @C("ULONGLONG") long Symbol$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64$Symbol$VH().get(seg);
        }
        public static  @C("ULONGLONG") long Symbol$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64$Symbol$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Symbol$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64$Symbol$VH().set(seg, x);
        }
        public static void Symbol$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64$Symbol$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseRelocSize$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64$BaseRelocSize$VH();
        }
        public static  @C("DWORD") int BaseRelocSize$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64$BaseRelocSize$VH().get(seg);
        }
        public static  @C("DWORD") int BaseRelocSize$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64$BaseRelocSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseRelocSize$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64$BaseRelocSize$VH().set(seg, x);
        }
        public static void BaseRelocSize$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64$BaseRelocSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_DYNAMIC_RELOCATION64")public static class IMAGE_DYNAMIC_RELOCATION64 extends _IMAGE_DYNAMIC_RELOCATION64 {

        /* package-private */ IMAGE_DYNAMIC_RELOCATION64() {}
    }

    @C("struct _IMAGE_DYNAMIC_RELOCATION32_V2")public static class _IMAGE_DYNAMIC_RELOCATION32_V2 {

        /* package-private */ _IMAGE_DYNAMIC_RELOCATION32_V2() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$struct$LAYOUT();
        }
        public static VarHandle HeaderSize$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$HeaderSize$VH();
        }
        public static  @C("DWORD") int HeaderSize$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$HeaderSize$VH().get(seg);
        }
        public static  @C("DWORD") int HeaderSize$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$HeaderSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HeaderSize$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$HeaderSize$VH().set(seg, x);
        }
        public static void HeaderSize$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$HeaderSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FixupInfoSize$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$FixupInfoSize$VH();
        }
        public static  @C("DWORD") int FixupInfoSize$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$FixupInfoSize$VH().get(seg);
        }
        public static  @C("DWORD") int FixupInfoSize$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$FixupInfoSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FixupInfoSize$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$FixupInfoSize$VH().set(seg, x);
        }
        public static void FixupInfoSize$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$FixupInfoSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Symbol$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$Symbol$VH();
        }
        public static  @C("DWORD") int Symbol$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$Symbol$VH().get(seg);
        }
        public static  @C("DWORD") int Symbol$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$Symbol$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Symbol$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$Symbol$VH().set(seg, x);
        }
        public static void Symbol$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$Symbol$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SymbolGroup$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$SymbolGroup$VH();
        }
        public static  @C("DWORD") int SymbolGroup$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$SymbolGroup$VH().get(seg);
        }
        public static  @C("DWORD") int SymbolGroup$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$SymbolGroup$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SymbolGroup$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$SymbolGroup$VH().set(seg, x);
        }
        public static void SymbolGroup$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$SymbolGroup$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION32_V2$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32_V2[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32_V2[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32_V2*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32_V2*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION32_V2") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_DYNAMIC_RELOCATION32_V2")public static class IMAGE_DYNAMIC_RELOCATION32_V2 extends _IMAGE_DYNAMIC_RELOCATION32_V2 {

        /* package-private */ IMAGE_DYNAMIC_RELOCATION32_V2() {}
    }

    @C("struct _IMAGE_DYNAMIC_RELOCATION64_V2")public static class _IMAGE_DYNAMIC_RELOCATION64_V2 {

        /* package-private */ _IMAGE_DYNAMIC_RELOCATION64_V2() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$struct$LAYOUT();
        }
        public static VarHandle HeaderSize$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$HeaderSize$VH();
        }
        public static  @C("DWORD") int HeaderSize$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$HeaderSize$VH().get(seg);
        }
        public static  @C("DWORD") int HeaderSize$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$HeaderSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HeaderSize$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$HeaderSize$VH().set(seg, x);
        }
        public static void HeaderSize$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$HeaderSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FixupInfoSize$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$FixupInfoSize$VH();
        }
        public static  @C("DWORD") int FixupInfoSize$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$FixupInfoSize$VH().get(seg);
        }
        public static  @C("DWORD") int FixupInfoSize$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$FixupInfoSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FixupInfoSize$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$FixupInfoSize$VH().set(seg, x);
        }
        public static void FixupInfoSize$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$FixupInfoSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Symbol$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$Symbol$VH();
        }
        public static  @C("ULONGLONG") long Symbol$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$Symbol$VH().get(seg);
        }
        public static  @C("ULONGLONG") long Symbol$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$Symbol$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Symbol$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$Symbol$VH().set(seg, x);
        }
        public static void Symbol$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$Symbol$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SymbolGroup$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$SymbolGroup$VH();
        }
        public static  @C("DWORD") int SymbolGroup$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$SymbolGroup$VH().get(seg);
        }
        public static  @C("DWORD") int SymbolGroup$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$SymbolGroup$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SymbolGroup$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$SymbolGroup$VH().set(seg, x);
        }
        public static void SymbolGroup$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$SymbolGroup$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_DYNAMIC_RELOCATION64_V2$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64_V2[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64_V2[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64_V2*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64_V2*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_DYNAMIC_RELOCATION64_V2") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_DYNAMIC_RELOCATION64_V2")public static class IMAGE_DYNAMIC_RELOCATION64_V2 extends _IMAGE_DYNAMIC_RELOCATION64_V2 {

        /* package-private */ IMAGE_DYNAMIC_RELOCATION64_V2() {}
    }

    @C("struct _IMAGE_DYNAMIC_RELOCATION64")public static class IMAGE_DYNAMIC_RELOCATION extends _IMAGE_DYNAMIC_RELOCATION64 {

        /* package-private */ IMAGE_DYNAMIC_RELOCATION() {}
    }

    @C("struct _IMAGE_DYNAMIC_RELOCATION64_V2")public static class IMAGE_DYNAMIC_RELOCATION_V2 extends _IMAGE_DYNAMIC_RELOCATION64_V2 {

        /* package-private */ IMAGE_DYNAMIC_RELOCATION_V2() {}
    }

    @C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER")public static class _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {

        /* package-private */ _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT();
        }
        public static VarHandle PrologueByteCount$VH() {
            return winnt_h$constants$10._IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$PrologueByteCount$VH();
        }
        public static  @C("BYTE") byte PrologueByteCount$get(@C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$10._IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$PrologueByteCount$VH().get(seg);
        }
        public static  @C("BYTE") byte PrologueByteCount$get(@C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$10._IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$PrologueByteCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrologueByteCount$set(@C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$10._IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$PrologueByteCount$VH().set(seg, x);
        }
        public static void PrologueByteCount$set(@C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$10._IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER$PrologueByteCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER")public static class IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER extends _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {

        /* package-private */ IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER() {}
    }

    @C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER")public static class _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {

        /* package-private */ _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$struct$LAYOUT();
        }
        public static VarHandle EpilogueCount$VH() {
            return winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueCount$VH();
        }
        public static  @C("DWORD") int EpilogueCount$get(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueCount$VH().get(seg);
        }
        public static  @C("DWORD") int EpilogueCount$get(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EpilogueCount$set(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueCount$VH().set(seg, x);
        }
        public static void EpilogueCount$set(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EpilogueByteCount$VH() {
            return winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueByteCount$VH();
        }
        public static  @C("BYTE") byte EpilogueByteCount$get(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueByteCount$VH().get(seg);
        }
        public static  @C("BYTE") byte EpilogueByteCount$get(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueByteCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EpilogueByteCount$set(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueByteCount$VH().set(seg, x);
        }
        public static void EpilogueByteCount$set(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$EpilogueByteCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BranchDescriptorElementSize$VH() {
            return winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorElementSize$VH();
        }
        public static  @C("BYTE") byte BranchDescriptorElementSize$get(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg) {
            return (byte)winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorElementSize$VH().get(seg);
        }
        public static  @C("BYTE") byte BranchDescriptorElementSize$get(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorElementSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BranchDescriptorElementSize$set(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorElementSize$VH().set(seg, x);
        }
        public static void BranchDescriptorElementSize$set(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorElementSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BranchDescriptorCount$VH() {
            return winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorCount$VH();
        }
        public static  @C("WORD") short BranchDescriptorCount$get(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorCount$VH().get(seg);
        }
        public static  @C("WORD") short BranchDescriptorCount$get(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BranchDescriptorCount$set(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorCount$VH().set(seg, x);
        }
        public static void BranchDescriptorCount$set(@C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER$BranchDescriptorCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER")public static class IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER extends _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {

        /* package-private */ IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER() {}
    }

    @C("struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION")public static class _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {

        /* package-private */ _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION$struct$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION")public static class IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION extends _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {

        /* package-private */ IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION() {}
    }

    @C("struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION")public static class _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {

        /* package-private */ _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION$struct$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION")public static class IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION extends _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {

        /* package-private */ IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION() {}
    }

    @C("struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION")public static class _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {

        /* package-private */ _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION$struct$LAYOUT();
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION")public static class IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION extends _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {

        /* package-private */ IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION() {}
    }

    @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32")public static class _IMAGE_LOAD_CONFIG_DIRECTORY32 {

        /* package-private */ _IMAGE_LOAD_CONFIG_DIRECTORY32() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorVersion$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MajorVersion$VH();
        }
        public static  @C("WORD") short MajorVersion$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MajorVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorVersion$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MajorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorVersion$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MajorVersion$VH().set(seg, x);
        }
        public static void MajorVersion$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MajorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorVersion$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MinorVersion$VH();
        }
        public static  @C("WORD") short MinorVersion$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MinorVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorVersion$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MinorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorVersion$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MinorVersion$VH().set(seg, x);
        }
        public static void MinorVersion$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MinorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GlobalFlagsClear$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsClear$VH();
        }
        public static  @C("DWORD") int GlobalFlagsClear$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsClear$VH().get(seg);
        }
        public static  @C("DWORD") int GlobalFlagsClear$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsClear$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GlobalFlagsClear$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsClear$VH().set(seg, x);
        }
        public static void GlobalFlagsClear$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsClear$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GlobalFlagsSet$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsSet$VH();
        }
        public static  @C("DWORD") int GlobalFlagsSet$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsSet$VH().get(seg);
        }
        public static  @C("DWORD") int GlobalFlagsSet$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsSet$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GlobalFlagsSet$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsSet$VH().set(seg, x);
        }
        public static void GlobalFlagsSet$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GlobalFlagsSet$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CriticalSectionDefaultTimeout$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CriticalSectionDefaultTimeout$VH();
        }
        public static  @C("DWORD") int CriticalSectionDefaultTimeout$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CriticalSectionDefaultTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int CriticalSectionDefaultTimeout$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CriticalSectionDefaultTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CriticalSectionDefaultTimeout$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CriticalSectionDefaultTimeout$VH().set(seg, x);
        }
        public static void CriticalSectionDefaultTimeout$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CriticalSectionDefaultTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DeCommitFreeBlockThreshold$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitFreeBlockThreshold$VH();
        }
        public static  @C("DWORD") int DeCommitFreeBlockThreshold$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitFreeBlockThreshold$VH().get(seg);
        }
        public static  @C("DWORD") int DeCommitFreeBlockThreshold$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitFreeBlockThreshold$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DeCommitFreeBlockThreshold$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitFreeBlockThreshold$VH().set(seg, x);
        }
        public static void DeCommitFreeBlockThreshold$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitFreeBlockThreshold$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DeCommitTotalFreeThreshold$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitTotalFreeThreshold$VH();
        }
        public static  @C("DWORD") int DeCommitTotalFreeThreshold$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitTotalFreeThreshold$VH().get(seg);
        }
        public static  @C("DWORD") int DeCommitTotalFreeThreshold$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitTotalFreeThreshold$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DeCommitTotalFreeThreshold$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitTotalFreeThreshold$VH().set(seg, x);
        }
        public static void DeCommitTotalFreeThreshold$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DeCommitTotalFreeThreshold$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LockPrefixTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$LockPrefixTable$VH();
        }
        public static  @C("DWORD") int LockPrefixTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$LockPrefixTable$VH().get(seg);
        }
        public static  @C("DWORD") int LockPrefixTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$LockPrefixTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LockPrefixTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$LockPrefixTable$VH().set(seg, x);
        }
        public static void LockPrefixTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$LockPrefixTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaximumAllocationSize$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MaximumAllocationSize$VH();
        }
        public static  @C("DWORD") int MaximumAllocationSize$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MaximumAllocationSize$VH().get(seg);
        }
        public static  @C("DWORD") int MaximumAllocationSize$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MaximumAllocationSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumAllocationSize$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MaximumAllocationSize$VH().set(seg, x);
        }
        public static void MaximumAllocationSize$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$MaximumAllocationSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VirtualMemoryThreshold$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$VirtualMemoryThreshold$VH();
        }
        public static  @C("DWORD") int VirtualMemoryThreshold$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$VirtualMemoryThreshold$VH().get(seg);
        }
        public static  @C("DWORD") int VirtualMemoryThreshold$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$VirtualMemoryThreshold$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VirtualMemoryThreshold$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$VirtualMemoryThreshold$VH().set(seg, x);
        }
        public static void VirtualMemoryThreshold$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$VirtualMemoryThreshold$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProcessHeapFlags$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessHeapFlags$VH();
        }
        public static  @C("DWORD") int ProcessHeapFlags$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessHeapFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ProcessHeapFlags$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessHeapFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProcessHeapFlags$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessHeapFlags$VH().set(seg, x);
        }
        public static void ProcessHeapFlags$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessHeapFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProcessAffinityMask$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessAffinityMask$VH();
        }
        public static  @C("DWORD") int ProcessAffinityMask$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessAffinityMask$VH().get(seg);
        }
        public static  @C("DWORD") int ProcessAffinityMask$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessAffinityMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProcessAffinityMask$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessAffinityMask$VH().set(seg, x);
        }
        public static void ProcessAffinityMask$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$ProcessAffinityMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CSDVersion$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CSDVersion$VH();
        }
        public static  @C("WORD") short CSDVersion$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CSDVersion$VH().get(seg);
        }
        public static  @C("WORD") short CSDVersion$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CSDVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CSDVersion$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CSDVersion$VH().set(seg, x);
        }
        public static void CSDVersion$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CSDVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DependentLoadFlags$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DependentLoadFlags$VH();
        }
        public static  @C("WORD") short DependentLoadFlags$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DependentLoadFlags$VH().get(seg);
        }
        public static  @C("WORD") short DependentLoadFlags$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DependentLoadFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DependentLoadFlags$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DependentLoadFlags$VH().set(seg, x);
        }
        public static void DependentLoadFlags$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DependentLoadFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EditList$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$EditList$VH();
        }
        public static  @C("DWORD") int EditList$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$EditList$VH().get(seg);
        }
        public static  @C("DWORD") int EditList$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$EditList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EditList$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$EditList$VH().set(seg, x);
        }
        public static void EditList$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$EditList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SecurityCookie$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SecurityCookie$VH();
        }
        public static  @C("DWORD") int SecurityCookie$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SecurityCookie$VH().get(seg);
        }
        public static  @C("DWORD") int SecurityCookie$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SecurityCookie$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SecurityCookie$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SecurityCookie$VH().set(seg, x);
        }
        public static void SecurityCookie$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SecurityCookie$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SEHandlerTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerTable$VH();
        }
        public static  @C("DWORD") int SEHandlerTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerTable$VH().get(seg);
        }
        public static  @C("DWORD") int SEHandlerTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SEHandlerTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerTable$VH().set(seg, x);
        }
        public static void SEHandlerTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SEHandlerCount$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerCount$VH();
        }
        public static  @C("DWORD") int SEHandlerCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerCount$VH().get(seg);
        }
        public static  @C("DWORD") int SEHandlerCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SEHandlerCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerCount$VH().set(seg, x);
        }
        public static void SEHandlerCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$SEHandlerCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardCFCheckFunctionPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFCheckFunctionPointer$VH();
        }
        public static  @C("DWORD") int GuardCFCheckFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFCheckFunctionPointer$VH().get(seg);
        }
        public static  @C("DWORD") int GuardCFCheckFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFCheckFunctionPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardCFCheckFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFCheckFunctionPointer$VH().set(seg, x);
        }
        public static void GuardCFCheckFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFCheckFunctionPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardCFDispatchFunctionPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFDispatchFunctionPointer$VH();
        }
        public static  @C("DWORD") int GuardCFDispatchFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFDispatchFunctionPointer$VH().get(seg);
        }
        public static  @C("DWORD") int GuardCFDispatchFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFDispatchFunctionPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardCFDispatchFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFDispatchFunctionPointer$VH().set(seg, x);
        }
        public static void GuardCFDispatchFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFDispatchFunctionPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardCFFunctionTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionTable$VH();
        }
        public static  @C("DWORD") int GuardCFFunctionTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionTable$VH().get(seg);
        }
        public static  @C("DWORD") int GuardCFFunctionTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardCFFunctionTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionTable$VH().set(seg, x);
        }
        public static void GuardCFFunctionTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardCFFunctionCount$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionCount$VH();
        }
        public static  @C("DWORD") int GuardCFFunctionCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionCount$VH().get(seg);
        }
        public static  @C("DWORD") int GuardCFFunctionCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardCFFunctionCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionCount$VH().set(seg, x);
        }
        public static void GuardCFFunctionCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardCFFunctionCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardFlags$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardFlags$VH();
        }
        public static  @C("DWORD") int GuardFlags$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardFlags$VH().get(seg);
        }
        public static  @C("DWORD") int GuardFlags$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardFlags$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardFlags$VH().set(seg, x);
        }
        public static void GuardFlags$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment CodeIntegrity$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(92, 12));
        }
        public static VarHandle GuardAddressTakenIatEntryTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryTable$VH();
        }
        public static  @C("DWORD") int GuardAddressTakenIatEntryTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryTable$VH().get(seg);
        }
        public static  @C("DWORD") int GuardAddressTakenIatEntryTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardAddressTakenIatEntryTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryTable$VH().set(seg, x);
        }
        public static void GuardAddressTakenIatEntryTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardAddressTakenIatEntryCount$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryCount$VH();
        }
        public static  @C("DWORD") int GuardAddressTakenIatEntryCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryCount$VH().get(seg);
        }
        public static  @C("DWORD") int GuardAddressTakenIatEntryCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardAddressTakenIatEntryCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryCount$VH().set(seg, x);
        }
        public static void GuardAddressTakenIatEntryCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardAddressTakenIatEntryCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardLongJumpTargetTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetTable$VH();
        }
        public static  @C("DWORD") int GuardLongJumpTargetTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetTable$VH().get(seg);
        }
        public static  @C("DWORD") int GuardLongJumpTargetTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardLongJumpTargetTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetTable$VH().set(seg, x);
        }
        public static void GuardLongJumpTargetTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardLongJumpTargetCount$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetCount$VH();
        }
        public static  @C("DWORD") int GuardLongJumpTargetCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetCount$VH().get(seg);
        }
        public static  @C("DWORD") int GuardLongJumpTargetCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardLongJumpTargetCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetCount$VH().set(seg, x);
        }
        public static void GuardLongJumpTargetCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardLongJumpTargetCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DynamicValueRelocTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTable$VH();
        }
        public static  @C("DWORD") int DynamicValueRelocTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTable$VH().get(seg);
        }
        public static  @C("DWORD") int DynamicValueRelocTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DynamicValueRelocTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTable$VH().set(seg, x);
        }
        public static void DynamicValueRelocTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CHPEMetadataPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CHPEMetadataPointer$VH();
        }
        public static  @C("DWORD") int CHPEMetadataPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CHPEMetadataPointer$VH().get(seg);
        }
        public static  @C("DWORD") int CHPEMetadataPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CHPEMetadataPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CHPEMetadataPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CHPEMetadataPointer$VH().set(seg, x);
        }
        public static void CHPEMetadataPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$CHPEMetadataPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardRFFailureRoutine$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutine$VH();
        }
        public static  @C("DWORD") int GuardRFFailureRoutine$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutine$VH().get(seg);
        }
        public static  @C("DWORD") int GuardRFFailureRoutine$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardRFFailureRoutine$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutine$VH().set(seg, x);
        }
        public static void GuardRFFailureRoutine$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardRFFailureRoutineFunctionPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutineFunctionPointer$VH();
        }
        public static  @C("DWORD") int GuardRFFailureRoutineFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutineFunctionPointer$VH().get(seg);
        }
        public static  @C("DWORD") int GuardRFFailureRoutineFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutineFunctionPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardRFFailureRoutineFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutineFunctionPointer$VH().set(seg, x);
        }
        public static void GuardRFFailureRoutineFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFFailureRoutineFunctionPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DynamicValueRelocTableOffset$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableOffset$VH();
        }
        public static  @C("DWORD") int DynamicValueRelocTableOffset$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableOffset$VH().get(seg);
        }
        public static  @C("DWORD") int DynamicValueRelocTableOffset$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DynamicValueRelocTableOffset$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableOffset$VH().set(seg, x);
        }
        public static void DynamicValueRelocTableOffset$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DynamicValueRelocTableSection$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableSection$VH();
        }
        public static  @C("WORD") short DynamicValueRelocTableSection$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableSection$VH().get(seg);
        }
        public static  @C("WORD") short DynamicValueRelocTableSection$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableSection$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DynamicValueRelocTableSection$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableSection$VH().set(seg, x);
        }
        public static void DynamicValueRelocTableSection$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$DynamicValueRelocTableSection$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved2$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved2$VH();
        }
        public static  @C("WORD") short Reserved2$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved2$VH().get(seg);
        }
        public static  @C("WORD") short Reserved2$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved2$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved2$VH().set(seg, x);
        }
        public static void Reserved2$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardRFVerifyStackPointerFunctionPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFVerifyStackPointerFunctionPointer$VH();
        }
        public static  @C("DWORD") int GuardRFVerifyStackPointerFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFVerifyStackPointerFunctionPointer$VH().get(seg);
        }
        public static  @C("DWORD") int GuardRFVerifyStackPointerFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFVerifyStackPointerFunctionPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardRFVerifyStackPointerFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFVerifyStackPointerFunctionPointer$VH().set(seg, x);
        }
        public static void GuardRFVerifyStackPointerFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardRFVerifyStackPointerFunctionPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HotPatchTableOffset$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$HotPatchTableOffset$VH();
        }
        public static  @C("DWORD") int HotPatchTableOffset$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$HotPatchTableOffset$VH().get(seg);
        }
        public static  @C("DWORD") int HotPatchTableOffset$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$HotPatchTableOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HotPatchTableOffset$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$HotPatchTableOffset$VH().set(seg, x);
        }
        public static void HotPatchTableOffset$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$HotPatchTableOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved3$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved3$VH();
        }
        public static  @C("DWORD") int Reserved3$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved3$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved3$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved3$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved3$VH().set(seg, x);
        }
        public static void Reserved3$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$Reserved3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EnclaveConfigurationPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$EnclaveConfigurationPointer$VH();
        }
        public static  @C("DWORD") int EnclaveConfigurationPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$EnclaveConfigurationPointer$VH().get(seg);
        }
        public static  @C("DWORD") int EnclaveConfigurationPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$EnclaveConfigurationPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EnclaveConfigurationPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$EnclaveConfigurationPointer$VH().set(seg, x);
        }
        public static void EnclaveConfigurationPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$EnclaveConfigurationPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VolatileMetadataPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$VolatileMetadataPointer$VH();
        }
        public static  @C("DWORD") int VolatileMetadataPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$VolatileMetadataPointer$VH().get(seg);
        }
        public static  @C("DWORD") int VolatileMetadataPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$VolatileMetadataPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VolatileMetadataPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$VolatileMetadataPointer$VH().set(seg, x);
        }
        public static void VolatileMetadataPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$VolatileMetadataPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardEHContinuationTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationTable$VH();
        }
        public static  @C("DWORD") int GuardEHContinuationTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationTable$VH().get(seg);
        }
        public static  @C("DWORD") int GuardEHContinuationTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardEHContinuationTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationTable$VH().set(seg, x);
        }
        public static void GuardEHContinuationTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardEHContinuationCount$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationCount$VH();
        }
        public static  @C("DWORD") int GuardEHContinuationCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationCount$VH().get(seg);
        }
        public static  @C("DWORD") int GuardEHContinuationCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardEHContinuationCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationCount$VH().set(seg, x);
        }
        public static void GuardEHContinuationCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY32$GuardEHContinuationCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY32")public static class IMAGE_LOAD_CONFIG_DIRECTORY32 extends _IMAGE_LOAD_CONFIG_DIRECTORY32 {

        /* package-private */ IMAGE_LOAD_CONFIG_DIRECTORY32() {}
    }

    @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64")public static class _IMAGE_LOAD_CONFIG_DIRECTORY64 {

        /* package-private */ _IMAGE_LOAD_CONFIG_DIRECTORY64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorVersion$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MajorVersion$VH();
        }
        public static  @C("WORD") short MajorVersion$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MajorVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorVersion$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MajorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorVersion$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MajorVersion$VH().set(seg, x);
        }
        public static void MajorVersion$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MajorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorVersion$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MinorVersion$VH();
        }
        public static  @C("WORD") short MinorVersion$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MinorVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorVersion$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MinorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorVersion$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MinorVersion$VH().set(seg, x);
        }
        public static void MinorVersion$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MinorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GlobalFlagsClear$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsClear$VH();
        }
        public static  @C("DWORD") int GlobalFlagsClear$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsClear$VH().get(seg);
        }
        public static  @C("DWORD") int GlobalFlagsClear$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsClear$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GlobalFlagsClear$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsClear$VH().set(seg, x);
        }
        public static void GlobalFlagsClear$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsClear$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GlobalFlagsSet$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsSet$VH();
        }
        public static  @C("DWORD") int GlobalFlagsSet$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsSet$VH().get(seg);
        }
        public static  @C("DWORD") int GlobalFlagsSet$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsSet$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GlobalFlagsSet$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsSet$VH().set(seg, x);
        }
        public static void GlobalFlagsSet$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GlobalFlagsSet$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CriticalSectionDefaultTimeout$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CriticalSectionDefaultTimeout$VH();
        }
        public static  @C("DWORD") int CriticalSectionDefaultTimeout$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CriticalSectionDefaultTimeout$VH().get(seg);
        }
        public static  @C("DWORD") int CriticalSectionDefaultTimeout$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CriticalSectionDefaultTimeout$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CriticalSectionDefaultTimeout$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CriticalSectionDefaultTimeout$VH().set(seg, x);
        }
        public static void CriticalSectionDefaultTimeout$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CriticalSectionDefaultTimeout$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DeCommitFreeBlockThreshold$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitFreeBlockThreshold$VH();
        }
        public static  @C("ULONGLONG") long DeCommitFreeBlockThreshold$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitFreeBlockThreshold$VH().get(seg);
        }
        public static  @C("ULONGLONG") long DeCommitFreeBlockThreshold$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitFreeBlockThreshold$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DeCommitFreeBlockThreshold$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitFreeBlockThreshold$VH().set(seg, x);
        }
        public static void DeCommitFreeBlockThreshold$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitFreeBlockThreshold$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DeCommitTotalFreeThreshold$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitTotalFreeThreshold$VH();
        }
        public static  @C("ULONGLONG") long DeCommitTotalFreeThreshold$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitTotalFreeThreshold$VH().get(seg);
        }
        public static  @C("ULONGLONG") long DeCommitTotalFreeThreshold$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitTotalFreeThreshold$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DeCommitTotalFreeThreshold$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitTotalFreeThreshold$VH().set(seg, x);
        }
        public static void DeCommitTotalFreeThreshold$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DeCommitTotalFreeThreshold$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LockPrefixTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$LockPrefixTable$VH();
        }
        public static  @C("ULONGLONG") long LockPrefixTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$LockPrefixTable$VH().get(seg);
        }
        public static  @C("ULONGLONG") long LockPrefixTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$LockPrefixTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LockPrefixTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$LockPrefixTable$VH().set(seg, x);
        }
        public static void LockPrefixTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$LockPrefixTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaximumAllocationSize$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MaximumAllocationSize$VH();
        }
        public static  @C("ULONGLONG") long MaximumAllocationSize$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MaximumAllocationSize$VH().get(seg);
        }
        public static  @C("ULONGLONG") long MaximumAllocationSize$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MaximumAllocationSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumAllocationSize$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MaximumAllocationSize$VH().set(seg, x);
        }
        public static void MaximumAllocationSize$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$MaximumAllocationSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VirtualMemoryThreshold$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$VirtualMemoryThreshold$VH();
        }
        public static  @C("ULONGLONG") long VirtualMemoryThreshold$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$VirtualMemoryThreshold$VH().get(seg);
        }
        public static  @C("ULONGLONG") long VirtualMemoryThreshold$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$VirtualMemoryThreshold$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VirtualMemoryThreshold$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$VirtualMemoryThreshold$VH().set(seg, x);
        }
        public static void VirtualMemoryThreshold$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$VirtualMemoryThreshold$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProcessAffinityMask$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessAffinityMask$VH();
        }
        public static  @C("ULONGLONG") long ProcessAffinityMask$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessAffinityMask$VH().get(seg);
        }
        public static  @C("ULONGLONG") long ProcessAffinityMask$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessAffinityMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProcessAffinityMask$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessAffinityMask$VH().set(seg, x);
        }
        public static void ProcessAffinityMask$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessAffinityMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProcessHeapFlags$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessHeapFlags$VH();
        }
        public static  @C("DWORD") int ProcessHeapFlags$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessHeapFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ProcessHeapFlags$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessHeapFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProcessHeapFlags$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessHeapFlags$VH().set(seg, x);
        }
        public static void ProcessHeapFlags$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$ProcessHeapFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CSDVersion$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CSDVersion$VH();
        }
        public static  @C("WORD") short CSDVersion$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CSDVersion$VH().get(seg);
        }
        public static  @C("WORD") short CSDVersion$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CSDVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CSDVersion$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CSDVersion$VH().set(seg, x);
        }
        public static void CSDVersion$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CSDVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DependentLoadFlags$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DependentLoadFlags$VH();
        }
        public static  @C("WORD") short DependentLoadFlags$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DependentLoadFlags$VH().get(seg);
        }
        public static  @C("WORD") short DependentLoadFlags$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DependentLoadFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DependentLoadFlags$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DependentLoadFlags$VH().set(seg, x);
        }
        public static void DependentLoadFlags$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DependentLoadFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EditList$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$EditList$VH();
        }
        public static  @C("ULONGLONG") long EditList$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$EditList$VH().get(seg);
        }
        public static  @C("ULONGLONG") long EditList$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$EditList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EditList$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$EditList$VH().set(seg, x);
        }
        public static void EditList$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$EditList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SecurityCookie$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SecurityCookie$VH();
        }
        public static  @C("ULONGLONG") long SecurityCookie$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SecurityCookie$VH().get(seg);
        }
        public static  @C("ULONGLONG") long SecurityCookie$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SecurityCookie$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SecurityCookie$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SecurityCookie$VH().set(seg, x);
        }
        public static void SecurityCookie$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SecurityCookie$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SEHandlerTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerTable$VH();
        }
        public static  @C("ULONGLONG") long SEHandlerTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerTable$VH().get(seg);
        }
        public static  @C("ULONGLONG") long SEHandlerTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SEHandlerTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerTable$VH().set(seg, x);
        }
        public static void SEHandlerTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SEHandlerCount$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerCount$VH();
        }
        public static  @C("ULONGLONG") long SEHandlerCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerCount$VH().get(seg);
        }
        public static  @C("ULONGLONG") long SEHandlerCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SEHandlerCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerCount$VH().set(seg, x);
        }
        public static void SEHandlerCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$SEHandlerCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardCFCheckFunctionPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFCheckFunctionPointer$VH();
        }
        public static  @C("ULONGLONG") long GuardCFCheckFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFCheckFunctionPointer$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardCFCheckFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFCheckFunctionPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardCFCheckFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFCheckFunctionPointer$VH().set(seg, x);
        }
        public static void GuardCFCheckFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFCheckFunctionPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardCFDispatchFunctionPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFDispatchFunctionPointer$VH();
        }
        public static  @C("ULONGLONG") long GuardCFDispatchFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFDispatchFunctionPointer$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardCFDispatchFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFDispatchFunctionPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardCFDispatchFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFDispatchFunctionPointer$VH().set(seg, x);
        }
        public static void GuardCFDispatchFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFDispatchFunctionPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardCFFunctionTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionTable$VH();
        }
        public static  @C("ULONGLONG") long GuardCFFunctionTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionTable$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardCFFunctionTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardCFFunctionTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionTable$VH().set(seg, x);
        }
        public static void GuardCFFunctionTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardCFFunctionCount$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionCount$VH();
        }
        public static  @C("ULONGLONG") long GuardCFFunctionCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionCount$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardCFFunctionCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardCFFunctionCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionCount$VH().set(seg, x);
        }
        public static void GuardCFFunctionCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardCFFunctionCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardFlags$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardFlags$VH();
        }
        public static  @C("DWORD") int GuardFlags$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardFlags$VH().get(seg);
        }
        public static  @C("DWORD") int GuardFlags$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardFlags$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardFlags$VH().set(seg, x);
        }
        public static void GuardFlags$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment CodeIntegrity$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(148, 12));
        }
        public static VarHandle GuardAddressTakenIatEntryTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryTable$VH();
        }
        public static  @C("ULONGLONG") long GuardAddressTakenIatEntryTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryTable$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardAddressTakenIatEntryTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardAddressTakenIatEntryTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryTable$VH().set(seg, x);
        }
        public static void GuardAddressTakenIatEntryTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardAddressTakenIatEntryCount$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryCount$VH();
        }
        public static  @C("ULONGLONG") long GuardAddressTakenIatEntryCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryCount$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardAddressTakenIatEntryCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardAddressTakenIatEntryCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryCount$VH().set(seg, x);
        }
        public static void GuardAddressTakenIatEntryCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardAddressTakenIatEntryCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardLongJumpTargetTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetTable$VH();
        }
        public static  @C("ULONGLONG") long GuardLongJumpTargetTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetTable$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardLongJumpTargetTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardLongJumpTargetTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetTable$VH().set(seg, x);
        }
        public static void GuardLongJumpTargetTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardLongJumpTargetCount$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetCount$VH();
        }
        public static  @C("ULONGLONG") long GuardLongJumpTargetCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetCount$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardLongJumpTargetCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardLongJumpTargetCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetCount$VH().set(seg, x);
        }
        public static void GuardLongJumpTargetCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardLongJumpTargetCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DynamicValueRelocTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTable$VH();
        }
        public static  @C("ULONGLONG") long DynamicValueRelocTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTable$VH().get(seg);
        }
        public static  @C("ULONGLONG") long DynamicValueRelocTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DynamicValueRelocTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTable$VH().set(seg, x);
        }
        public static void DynamicValueRelocTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CHPEMetadataPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CHPEMetadataPointer$VH();
        }
        public static  @C("ULONGLONG") long CHPEMetadataPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CHPEMetadataPointer$VH().get(seg);
        }
        public static  @C("ULONGLONG") long CHPEMetadataPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CHPEMetadataPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CHPEMetadataPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CHPEMetadataPointer$VH().set(seg, x);
        }
        public static void CHPEMetadataPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$CHPEMetadataPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardRFFailureRoutine$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutine$VH();
        }
        public static  @C("ULONGLONG") long GuardRFFailureRoutine$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutine$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardRFFailureRoutine$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardRFFailureRoutine$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutine$VH().set(seg, x);
        }
        public static void GuardRFFailureRoutine$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardRFFailureRoutineFunctionPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutineFunctionPointer$VH();
        }
        public static  @C("ULONGLONG") long GuardRFFailureRoutineFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutineFunctionPointer$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardRFFailureRoutineFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutineFunctionPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardRFFailureRoutineFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutineFunctionPointer$VH().set(seg, x);
        }
        public static void GuardRFFailureRoutineFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFFailureRoutineFunctionPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DynamicValueRelocTableOffset$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableOffset$VH();
        }
        public static  @C("DWORD") int DynamicValueRelocTableOffset$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableOffset$VH().get(seg);
        }
        public static  @C("DWORD") int DynamicValueRelocTableOffset$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DynamicValueRelocTableOffset$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableOffset$VH().set(seg, x);
        }
        public static void DynamicValueRelocTableOffset$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DynamicValueRelocTableSection$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableSection$VH();
        }
        public static  @C("WORD") short DynamicValueRelocTableSection$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableSection$VH().get(seg);
        }
        public static  @C("WORD") short DynamicValueRelocTableSection$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableSection$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DynamicValueRelocTableSection$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableSection$VH().set(seg, x);
        }
        public static void DynamicValueRelocTableSection$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$DynamicValueRelocTableSection$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved2$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved2$VH();
        }
        public static  @C("WORD") short Reserved2$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved2$VH().get(seg);
        }
        public static  @C("WORD") short Reserved2$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (short)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved2$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved2$VH().set(seg, x);
        }
        public static void Reserved2$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardRFVerifyStackPointerFunctionPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFVerifyStackPointerFunctionPointer$VH();
        }
        public static  @C("ULONGLONG") long GuardRFVerifyStackPointerFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFVerifyStackPointerFunctionPointer$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardRFVerifyStackPointerFunctionPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFVerifyStackPointerFunctionPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardRFVerifyStackPointerFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFVerifyStackPointerFunctionPointer$VH().set(seg, x);
        }
        public static void GuardRFVerifyStackPointerFunctionPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardRFVerifyStackPointerFunctionPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HotPatchTableOffset$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$HotPatchTableOffset$VH();
        }
        public static  @C("DWORD") int HotPatchTableOffset$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$HotPatchTableOffset$VH().get(seg);
        }
        public static  @C("DWORD") int HotPatchTableOffset$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$HotPatchTableOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HotPatchTableOffset$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$HotPatchTableOffset$VH().set(seg, x);
        }
        public static void HotPatchTableOffset$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$HotPatchTableOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved3$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved3$VH();
        }
        public static  @C("DWORD") int Reserved3$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved3$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved3$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved3$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved3$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved3$VH().set(seg, x);
        }
        public static void Reserved3$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$Reserved3$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EnclaveConfigurationPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$EnclaveConfigurationPointer$VH();
        }
        public static  @C("ULONGLONG") long EnclaveConfigurationPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$EnclaveConfigurationPointer$VH().get(seg);
        }
        public static  @C("ULONGLONG") long EnclaveConfigurationPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$EnclaveConfigurationPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EnclaveConfigurationPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$EnclaveConfigurationPointer$VH().set(seg, x);
        }
        public static void EnclaveConfigurationPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$EnclaveConfigurationPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VolatileMetadataPointer$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$VolatileMetadataPointer$VH();
        }
        public static  @C("ULONGLONG") long VolatileMetadataPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$VolatileMetadataPointer$VH().get(seg);
        }
        public static  @C("ULONGLONG") long VolatileMetadataPointer$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$VolatileMetadataPointer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VolatileMetadataPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$VolatileMetadataPointer$VH().set(seg, x);
        }
        public static void VolatileMetadataPointer$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$VolatileMetadataPointer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardEHContinuationTable$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationTable$VH();
        }
        public static  @C("ULONGLONG") long GuardEHContinuationTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationTable$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardEHContinuationTable$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardEHContinuationTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationTable$VH().set(seg, x);
        }
        public static void GuardEHContinuationTable$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle GuardEHContinuationCount$VH() {
            return winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationCount$VH();
        }
        public static  @C("ULONGLONG") long GuardEHContinuationCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationCount$VH().get(seg);
        }
        public static  @C("ULONGLONG") long GuardEHContinuationCount$get(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void GuardEHContinuationCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationCount$VH().set(seg, x);
        }
        public static void GuardEHContinuationCount$set(@C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_LOAD_CONFIG_DIRECTORY64$GuardEHContinuationCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64")public static class IMAGE_LOAD_CONFIG_DIRECTORY64 extends _IMAGE_LOAD_CONFIG_DIRECTORY64 {

        /* package-private */ IMAGE_LOAD_CONFIG_DIRECTORY64() {}
    }

    @C("struct _IMAGE_LOAD_CONFIG_DIRECTORY64")public static class IMAGE_LOAD_CONFIG_DIRECTORY extends _IMAGE_LOAD_CONFIG_DIRECTORY64 {

        /* package-private */ IMAGE_LOAD_CONFIG_DIRECTORY() {}
    }

    @C("struct _IMAGE_HOT_PATCH_INFO")public static class _IMAGE_HOT_PATCH_INFO {

        /* package-private */ _IMAGE_HOT_PATCH_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$struct$LAYOUT();
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$Version$VH();
        }
        public static  @C("DWORD") int Version$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$Version$VH().get(seg);
        }
        public static  @C("DWORD") int Version$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SequenceNumber$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$SequenceNumber$VH();
        }
        public static  @C("DWORD") int SequenceNumber$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$SequenceNumber$VH().get(seg);
        }
        public static  @C("DWORD") int SequenceNumber$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$SequenceNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SequenceNumber$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$SequenceNumber$VH().set(seg, x);
        }
        public static void SequenceNumber$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$SequenceNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseImageList$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BaseImageList$VH();
        }
        public static  @C("DWORD") int BaseImageList$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BaseImageList$VH().get(seg);
        }
        public static  @C("DWORD") int BaseImageList$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BaseImageList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseImageList$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BaseImageList$VH().set(seg, x);
        }
        public static void BaseImageList$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BaseImageList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BaseImageCount$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BaseImageCount$VH();
        }
        public static  @C("DWORD") int BaseImageCount$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BaseImageCount$VH().get(seg);
        }
        public static  @C("DWORD") int BaseImageCount$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BaseImageCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseImageCount$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BaseImageCount$VH().set(seg, x);
        }
        public static void BaseImageCount$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BaseImageCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BufferOffset$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BufferOffset$VH();
        }
        public static  @C("DWORD") int BufferOffset$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BufferOffset$VH().get(seg);
        }
        public static  @C("DWORD") int BufferOffset$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BufferOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BufferOffset$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BufferOffset$VH().set(seg, x);
        }
        public static void BufferOffset$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$BufferOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExtraPatchSize$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$ExtraPatchSize$VH();
        }
        public static  @C("DWORD") int ExtraPatchSize$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$ExtraPatchSize$VH().get(seg);
        }
        public static  @C("DWORD") int ExtraPatchSize$get(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$ExtraPatchSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExtraPatchSize$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$ExtraPatchSize$VH().set(seg, x);
        }
        public static void ExtraPatchSize$set(@C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_INFO$ExtraPatchSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_HOT_PATCH_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_HOT_PATCH_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_HOT_PATCH_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_HOT_PATCH_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_HOT_PATCH_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_HOT_PATCH_INFO")public static class IMAGE_HOT_PATCH_INFO extends _IMAGE_HOT_PATCH_INFO {

        /* package-private */ IMAGE_HOT_PATCH_INFO() {}
    }

    @C("struct _IMAGE_HOT_PATCH_BASE")public static class _IMAGE_HOT_PATCH_BASE {

        /* package-private */ _IMAGE_HOT_PATCH_BASE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$struct$LAYOUT();
        }
        public static VarHandle SequenceNumber$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$SequenceNumber$VH();
        }
        public static  @C("DWORD") int SequenceNumber$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$SequenceNumber$VH().get(seg);
        }
        public static  @C("DWORD") int SequenceNumber$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$SequenceNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SequenceNumber$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$SequenceNumber$VH().set(seg, x);
        }
        public static void SequenceNumber$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$SequenceNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OriginalTimeDateStamp$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$OriginalTimeDateStamp$VH();
        }
        public static  @C("DWORD") int OriginalTimeDateStamp$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$OriginalTimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int OriginalTimeDateStamp$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$OriginalTimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OriginalTimeDateStamp$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$OriginalTimeDateStamp$VH().set(seg, x);
        }
        public static void OriginalTimeDateStamp$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$OriginalTimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OriginalCheckSum$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$OriginalCheckSum$VH();
        }
        public static  @C("DWORD") int OriginalCheckSum$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$OriginalCheckSum$VH().get(seg);
        }
        public static  @C("DWORD") int OriginalCheckSum$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$OriginalCheckSum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OriginalCheckSum$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$OriginalCheckSum$VH().set(seg, x);
        }
        public static void OriginalCheckSum$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$OriginalCheckSum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CodeIntegrityInfo$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$CodeIntegrityInfo$VH();
        }
        public static  @C("DWORD") int CodeIntegrityInfo$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$CodeIntegrityInfo$VH().get(seg);
        }
        public static  @C("DWORD") int CodeIntegrityInfo$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$CodeIntegrityInfo$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CodeIntegrityInfo$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$CodeIntegrityInfo$VH().set(seg, x);
        }
        public static void CodeIntegrityInfo$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$CodeIntegrityInfo$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CodeIntegritySize$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$CodeIntegritySize$VH();
        }
        public static  @C("DWORD") int CodeIntegritySize$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$CodeIntegritySize$VH().get(seg);
        }
        public static  @C("DWORD") int CodeIntegritySize$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$CodeIntegritySize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CodeIntegritySize$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$CodeIntegritySize$VH().set(seg, x);
        }
        public static void CodeIntegritySize$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$CodeIntegritySize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PatchTable$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$PatchTable$VH();
        }
        public static  @C("DWORD") int PatchTable$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$PatchTable$VH().get(seg);
        }
        public static  @C("DWORD") int PatchTable$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$PatchTable$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PatchTable$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$PatchTable$VH().set(seg, x);
        }
        public static void PatchTable$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$PatchTable$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle BufferOffset$VH() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$BufferOffset$VH();
        }
        public static  @C("DWORD") int BufferOffset$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$BufferOffset$VH().get(seg);
        }
        public static  @C("DWORD") int BufferOffset$get(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$BufferOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BufferOffset$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$BufferOffset$VH().set(seg, x);
        }
        public static void BufferOffset$set(@C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_HOT_PATCH_BASE$BufferOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_HOT_PATCH_BASE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_HOT_PATCH_BASE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_HOT_PATCH_BASE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_HOT_PATCH_BASE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_HOT_PATCH_BASE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_HOT_PATCH_BASE")public static class IMAGE_HOT_PATCH_BASE extends _IMAGE_HOT_PATCH_BASE {

        /* package-private */ IMAGE_HOT_PATCH_BASE() {}
    }

    @C("struct _IMAGE_HOT_PATCH_HASHES")public static class _IMAGE_HOT_PATCH_HASHES {

        /* package-private */ _IMAGE_HOT_PATCH_HASHES() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_HOT_PATCH_HASHES$struct$LAYOUT();
        }
        public static MemorySegment SHA256$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 32));
        }
        public static MemorySegment SHA1$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 20));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_HOT_PATCH_HASHES") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_HOT_PATCH_HASHES") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_HOT_PATCH_HASHES[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_HOT_PATCH_HASHES[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_HOT_PATCH_HASHES*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_HOT_PATCH_HASHES*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_HOT_PATCH_HASHES") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_HOT_PATCH_HASHES")public static class IMAGE_HOT_PATCH_HASHES extends _IMAGE_HOT_PATCH_HASHES {

        /* package-private */ IMAGE_HOT_PATCH_HASHES() {}
    }

    @C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY")public static class _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ _IMAGE_CE_RUNTIME_FUNCTION_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_CE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT();
        }
        public static VarHandle FuncStart$VH() {
            return winnt_h$constants$10._IMAGE_CE_RUNTIME_FUNCTION_ENTRY$FuncStart$VH();
        }
        public static  @C("DWORD") int FuncStart$get(@C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_CE_RUNTIME_FUNCTION_ENTRY$FuncStart$VH().get(seg);
        }
        public static  @C("DWORD") int FuncStart$get(@C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_CE_RUNTIME_FUNCTION_ENTRY$FuncStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FuncStart$set(@C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_CE_RUNTIME_FUNCTION_ENTRY$FuncStart$VH().set(seg, x);
        }
        public static void FuncStart$set(@C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_CE_RUNTIME_FUNCTION_ENTRY$FuncStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY")public static class IMAGE_CE_RUNTIME_FUNCTION_ENTRY extends _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ IMAGE_CE_RUNTIME_FUNCTION_ENTRY() {}
    }

    @C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY")public static class _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT();
        }
        public static VarHandle BeginAddress$VH() {
            return winnt_h$constants$10._IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH();
        }
        public static  @C("DWORD") int BeginAddress$get(@C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().get(seg);
        }
        public static  @C("DWORD") int BeginAddress$get(@C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BeginAddress$set(@C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().set(seg, x);
        }
        public static void BeginAddress$set(@C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle UnwindData$VH() {
            return winnt_h$constants$10._IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$UnwindData$VH();
        }
        public static  @C("DWORD") int UnwindData$get(@C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$UnwindData$VH().get(seg);
        }
        public static  @C("DWORD") int UnwindData$get(@C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$UnwindData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UnwindData$set(@C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$UnwindData$VH().set(seg, x);
        }
        public static void UnwindData$set(@C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_ARM_RUNTIME_FUNCTION_ENTRY$UnwindData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY")public static class IMAGE_ARM_RUNTIME_FUNCTION_ENTRY extends _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ IMAGE_ARM_RUNTIME_FUNCTION_ENTRY() {}
    }

    @C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY")public static class _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT();
        }
        public static VarHandle BeginAddress$VH() {
            return winnt_h$constants$10._IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH();
        }
        public static  @C("DWORD") int BeginAddress$get(@C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().get(seg);
        }
        public static  @C("DWORD") int BeginAddress$get(@C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BeginAddress$set(@C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().set(seg, x);
        }
        public static void BeginAddress$set(@C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle UnwindData$VH() {
            return winnt_h$constants$10._IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$UnwindData$VH();
        }
        public static  @C("DWORD") int UnwindData$get(@C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$10._IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$UnwindData$VH().get(seg);
        }
        public static  @C("DWORD") int UnwindData$get(@C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10._IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$UnwindData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UnwindData$set(@C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$UnwindData$VH().set(seg, x);
        }
        public static void UnwindData$set(@C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10._IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY$UnwindData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY")public static class IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY extends _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY() {}
    }

    @C("union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA")public static class IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA {

        /* package-private */ IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10.IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$union$LAYOUT();
        }
        public static VarHandle HeaderData$VH() {
            return winnt_h$constants$10.IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$HeaderData$VH();
        }
        public static  @C("DWORD") int HeaderData$get(@C("union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA") MemorySegment seg) {
            return (int)winnt_h$constants$10.IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$HeaderData$VH().get(seg);
        }
        public static  @C("DWORD") int HeaderData$get(@C("union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$10.IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$HeaderData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HeaderData$set(@C("union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$10.IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$HeaderData$VH().set(seg, x);
        }
        public static void HeaderData$set(@C("union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$10.IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA$HeaderData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY")public static class _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$10._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT();
        }
        public static VarHandle BeginAddress$VH() {
            return winnt_h$constants$10._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH();
        }
        public static  @C("ULONGLONG") long BeginAddress$get(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().get(seg);
        }
        public static  @C("ULONGLONG") long BeginAddress$get(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BeginAddress$set(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().set(seg, x);
        }
        public static void BeginAddress$set(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EndAddress$VH() {
            return winnt_h$constants$10._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$EndAddress$VH();
        }
        public static  @C("ULONGLONG") long EndAddress$get(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (long)winnt_h$constants$10._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$EndAddress$VH().get(seg);
        }
        public static  @C("ULONGLONG") long EndAddress$get(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (long)winnt_h$constants$10._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$EndAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EndAddress$set(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$EndAddress$VH().set(seg, x);
        }
        public static void EndAddress$set(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$10._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$EndAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExceptionHandler$VH() {
            return winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH();
        }
        public static  @C("ULONGLONG") long ExceptionHandler$get(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (long)winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH().get(seg);
        }
        public static  @C("ULONGLONG") long ExceptionHandler$get(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (long)winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionHandler$set(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH().set(seg, x);
        }
        public static void ExceptionHandler$set(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HandlerData$VH() {
            return winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$VH();
        }
        public static  @C("ULONGLONG") long HandlerData$get(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (long)winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$VH().get(seg);
        }
        public static  @C("ULONGLONG") long HandlerData$get(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (long)winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HandlerData$set(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$VH().set(seg, x);
        }
        public static void HandlerData$set(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$HandlerData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PrologEndAddress$VH() {
            return winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH();
        }
        public static  @C("ULONGLONG") long PrologEndAddress$get(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (long)winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH().get(seg);
        }
        public static  @C("ULONGLONG") long PrologEndAddress$get(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (long)winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrologEndAddress$set(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH().set(seg, x);
        }
        public static void PrologEndAddress$set(@C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY")public static class IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY extends _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY() {}
    }

    @C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY")public static class _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT();
        }
        public static VarHandle BeginAddress$VH() {
            return winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH();
        }
        public static  @C("DWORD") int BeginAddress$get(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().get(seg);
        }
        public static  @C("DWORD") int BeginAddress$get(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BeginAddress$set(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().set(seg, x);
        }
        public static void BeginAddress$set(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EndAddress$VH() {
            return winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$VH();
        }
        public static  @C("DWORD") int EndAddress$get(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$VH().get(seg);
        }
        public static  @C("DWORD") int EndAddress$get(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EndAddress$set(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$VH().set(seg, x);
        }
        public static void EndAddress$set(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$EndAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExceptionHandler$VH() {
            return winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH();
        }
        public static  @C("DWORD") int ExceptionHandler$get(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH().get(seg);
        }
        public static  @C("DWORD") int ExceptionHandler$get(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExceptionHandler$set(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH().set(seg, x);
        }
        public static void ExceptionHandler$set(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$ExceptionHandler$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HandlerData$VH() {
            return winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$VH();
        }
        public static  @C("DWORD") int HandlerData$get(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$VH().get(seg);
        }
        public static  @C("DWORD") int HandlerData$get(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HandlerData$set(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$VH().set(seg, x);
        }
        public static void HandlerData$set(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$HandlerData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PrologEndAddress$VH() {
            return winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH();
        }
        public static  @C("DWORD") int PrologEndAddress$get(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH().get(seg);
        }
        public static  @C("DWORD") int PrologEndAddress$get(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PrologEndAddress$set(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH().set(seg, x);
        }
        public static void PrologEndAddress$set(@C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY$PrologEndAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY")public static class IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY extends _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY() {}
    }

    @C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY")public static class _IMAGE_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ _IMAGE_RUNTIME_FUNCTION_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$struct$LAYOUT();
        }
        public static VarHandle BeginAddress$VH() {
            return winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH();
        }
        public static  @C("DWORD") int BeginAddress$get(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().get(seg);
        }
        public static  @C("DWORD") int BeginAddress$get(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BeginAddress$set(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().set(seg, x);
        }
        public static void BeginAddress$set(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$BeginAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EndAddress$VH() {
            return winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$VH();
        }
        public static  @C("DWORD") int EndAddress$get(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$VH().get(seg);
        }
        public static  @C("DWORD") int EndAddress$get(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EndAddress$set(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$VH().set(seg, x);
        }
        public static void EndAddress$set(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$EndAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle UnwindInfoAddress$VH() {
            return winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$VH();
        }
        public static  @C("DWORD") int UnwindInfoAddress$get(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$VH().get(seg);
        }
        public static  @C("DWORD") int UnwindInfoAddress$get(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UnwindInfoAddress$set(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$VH().set(seg, x);
        }
        public static void UnwindInfoAddress$set(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindInfoAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle UnwindData$VH() {
            return winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$VH();
        }
        public static  @C("DWORD") int UnwindData$get(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$VH().get(seg);
        }
        public static  @C("DWORD") int UnwindData$get(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UnwindData$set(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$VH().set(seg, x);
        }
        public static void UnwindData$set(@C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_RUNTIME_FUNCTION_ENTRY$UnwindData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY")public static class IMAGE_IA64_RUNTIME_FUNCTION_ENTRY extends _IMAGE_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ IMAGE_IA64_RUNTIME_FUNCTION_ENTRY() {}
    }

    @C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY")public static class IMAGE_RUNTIME_FUNCTION_ENTRY extends _IMAGE_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ IMAGE_RUNTIME_FUNCTION_ENTRY() {}
    }

    @C("struct _IMAGE_ENCLAVE_CONFIG32")public static class _IMAGE_ENCLAVE_CONFIG32 {

        /* package-private */ _IMAGE_ENCLAVE_CONFIG32() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinimumRequiredConfigSize$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$VH();
        }
        public static  @C("DWORD") int MinimumRequiredConfigSize$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$VH().get(seg);
        }
        public static  @C("DWORD") int MinimumRequiredConfigSize$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinimumRequiredConfigSize$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$VH().set(seg, x);
        }
        public static void MinimumRequiredConfigSize$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$MinimumRequiredConfigSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PolicyFlags$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$PolicyFlags$VH();
        }
        public static  @C("DWORD") int PolicyFlags$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$PolicyFlags$VH().get(seg);
        }
        public static  @C("DWORD") int PolicyFlags$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$PolicyFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PolicyFlags$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$PolicyFlags$VH().set(seg, x);
        }
        public static void PolicyFlags$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$PolicyFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfImports$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$NumberOfImports$VH();
        }
        public static  @C("DWORD") int NumberOfImports$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$NumberOfImports$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfImports$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$NumberOfImports$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfImports$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$NumberOfImports$VH().set(seg, x);
        }
        public static void NumberOfImports$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$NumberOfImports$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImportList$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImportList$VH();
        }
        public static  @C("DWORD") int ImportList$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImportList$VH().get(seg);
        }
        public static  @C("DWORD") int ImportList$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImportList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImportList$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImportList$VH().set(seg, x);
        }
        public static void ImportList$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImportList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImportEntrySize$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$VH();
        }
        public static  @C("DWORD") int ImportEntrySize$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$VH().get(seg);
        }
        public static  @C("DWORD") int ImportEntrySize$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImportEntrySize$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$VH().set(seg, x);
        }
        public static void ImportEntrySize$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImportEntrySize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FamilyID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 16));
        }
        public static MemorySegment ImageID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 16));
        }
        public static VarHandle ImageVersion$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImageVersion$VH();
        }
        public static  @C("DWORD") int ImageVersion$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImageVersion$VH().get(seg);
        }
        public static  @C("DWORD") int ImageVersion$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImageVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImageVersion$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImageVersion$VH().set(seg, x);
        }
        public static void ImageVersion$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$ImageVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SecurityVersion$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$SecurityVersion$VH();
        }
        public static  @C("DWORD") int SecurityVersion$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$SecurityVersion$VH().get(seg);
        }
        public static  @C("DWORD") int SecurityVersion$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$SecurityVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SecurityVersion$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$SecurityVersion$VH().set(seg, x);
        }
        public static void SecurityVersion$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$SecurityVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EnclaveSize$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$EnclaveSize$VH();
        }
        public static  @C("DWORD") int EnclaveSize$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$EnclaveSize$VH().get(seg);
        }
        public static  @C("DWORD") int EnclaveSize$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$EnclaveSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EnclaveSize$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$EnclaveSize$VH().set(seg, x);
        }
        public static void EnclaveSize$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$EnclaveSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfThreads$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$VH();
        }
        public static  @C("DWORD") int NumberOfThreads$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfThreads$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfThreads$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$VH().set(seg, x);
        }
        public static void NumberOfThreads$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$NumberOfThreads$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EnclaveFlags$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$VH();
        }
        public static  @C("DWORD") int EnclaveFlags$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$VH().get(seg);
        }
        public static  @C("DWORD") int EnclaveFlags$get(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EnclaveFlags$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$VH().set(seg, x);
        }
        public static void EnclaveFlags$set(@C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG32$EnclaveFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_ENCLAVE_CONFIG32[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_ENCLAVE_CONFIG32[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_ENCLAVE_CONFIG32*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_ENCLAVE_CONFIG32*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_ENCLAVE_CONFIG32") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_ENCLAVE_CONFIG32")public static class IMAGE_ENCLAVE_CONFIG32 extends _IMAGE_ENCLAVE_CONFIG32 {

        /* package-private */ IMAGE_ENCLAVE_CONFIG32() {}
    }

    @C("struct _IMAGE_ENCLAVE_CONFIG64")public static class _IMAGE_ENCLAVE_CONFIG64 {

        /* package-private */ _IMAGE_ENCLAVE_CONFIG64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinimumRequiredConfigSize$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$VH();
        }
        public static  @C("DWORD") int MinimumRequiredConfigSize$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$VH().get(seg);
        }
        public static  @C("DWORD") int MinimumRequiredConfigSize$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinimumRequiredConfigSize$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$VH().set(seg, x);
        }
        public static void MinimumRequiredConfigSize$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$MinimumRequiredConfigSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PolicyFlags$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$PolicyFlags$VH();
        }
        public static  @C("DWORD") int PolicyFlags$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$PolicyFlags$VH().get(seg);
        }
        public static  @C("DWORD") int PolicyFlags$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$PolicyFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PolicyFlags$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$PolicyFlags$VH().set(seg, x);
        }
        public static void PolicyFlags$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$PolicyFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfImports$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$NumberOfImports$VH();
        }
        public static  @C("DWORD") int NumberOfImports$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$NumberOfImports$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfImports$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$NumberOfImports$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfImports$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$NumberOfImports$VH().set(seg, x);
        }
        public static void NumberOfImports$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$NumberOfImports$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImportList$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImportList$VH();
        }
        public static  @C("DWORD") int ImportList$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImportList$VH().get(seg);
        }
        public static  @C("DWORD") int ImportList$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImportList$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImportList$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImportList$VH().set(seg, x);
        }
        public static void ImportList$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImportList$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImportEntrySize$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$VH();
        }
        public static  @C("DWORD") int ImportEntrySize$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$VH().get(seg);
        }
        public static  @C("DWORD") int ImportEntrySize$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImportEntrySize$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$VH().set(seg, x);
        }
        public static void ImportEntrySize$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImportEntrySize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FamilyID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 16));
        }
        public static MemorySegment ImageID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 16));
        }
        public static VarHandle ImageVersion$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImageVersion$VH();
        }
        public static  @C("DWORD") int ImageVersion$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImageVersion$VH().get(seg);
        }
        public static  @C("DWORD") int ImageVersion$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImageVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImageVersion$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImageVersion$VH().set(seg, x);
        }
        public static void ImageVersion$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$ImageVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SecurityVersion$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$SecurityVersion$VH();
        }
        public static  @C("DWORD") int SecurityVersion$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$SecurityVersion$VH().get(seg);
        }
        public static  @C("DWORD") int SecurityVersion$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$SecurityVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SecurityVersion$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$SecurityVersion$VH().set(seg, x);
        }
        public static void SecurityVersion$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$SecurityVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EnclaveSize$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$EnclaveSize$VH();
        }
        public static  @C("ULONGLONG") long EnclaveSize$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg) {
            return (long)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$EnclaveSize$VH().get(seg);
        }
        public static  @C("ULONGLONG") long EnclaveSize$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$EnclaveSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EnclaveSize$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$EnclaveSize$VH().set(seg, x);
        }
        public static void EnclaveSize$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$EnclaveSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfThreads$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$VH();
        }
        public static  @C("DWORD") int NumberOfThreads$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfThreads$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfThreads$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$VH().set(seg, x);
        }
        public static void NumberOfThreads$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$NumberOfThreads$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EnclaveFlags$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$VH();
        }
        public static  @C("DWORD") int EnclaveFlags$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$VH().get(seg);
        }
        public static  @C("DWORD") int EnclaveFlags$get(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EnclaveFlags$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$VH().set(seg, x);
        }
        public static void EnclaveFlags$set(@C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_CONFIG64$EnclaveFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_ENCLAVE_CONFIG64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_ENCLAVE_CONFIG64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_ENCLAVE_CONFIG64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_ENCLAVE_CONFIG64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_ENCLAVE_CONFIG64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_ENCLAVE_CONFIG64")public static class IMAGE_ENCLAVE_CONFIG64 extends _IMAGE_ENCLAVE_CONFIG64 {

        /* package-private */ IMAGE_ENCLAVE_CONFIG64() {}
    }

    @C("struct _IMAGE_ENCLAVE_CONFIG64")public static class IMAGE_ENCLAVE_CONFIG extends _IMAGE_ENCLAVE_CONFIG64 {

        /* package-private */ IMAGE_ENCLAVE_CONFIG() {}
    }

    @C("struct _IMAGE_ENCLAVE_IMPORT")public static class _IMAGE_ENCLAVE_IMPORT {

        /* package-private */ _IMAGE_ENCLAVE_IMPORT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$struct$LAYOUT();
        }
        public static VarHandle MatchType$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$MatchType$VH();
        }
        public static  @C("DWORD") int MatchType$get(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$MatchType$VH().get(seg);
        }
        public static  @C("DWORD") int MatchType$get(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$MatchType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MatchType$set(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$MatchType$VH().set(seg, x);
        }
        public static void MatchType$set(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$MatchType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinimumSecurityVersion$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$VH();
        }
        public static  @C("DWORD") int MinimumSecurityVersion$get(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$VH().get(seg);
        }
        public static  @C("DWORD") int MinimumSecurityVersion$get(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinimumSecurityVersion$set(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$VH().set(seg, x);
        }
        public static void MinimumSecurityVersion$set(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$MinimumSecurityVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment UniqueOrAuthorID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));
        }
        public static MemorySegment FamilyID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 16));
        }
        public static MemorySegment ImageID$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 16));
        }
        public static VarHandle ImportName$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$ImportName$VH();
        }
        public static  @C("DWORD") int ImportName$get(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$ImportName$VH().get(seg);
        }
        public static  @C("DWORD") int ImportName$get(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$ImportName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImportName$set(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$ImportName$VH().set(seg, x);
        }
        public static void ImportName$set(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$ImportName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$Reserved$VH();
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$Reserved$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_ENCLAVE_IMPORT$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_ENCLAVE_IMPORT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_ENCLAVE_IMPORT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_ENCLAVE_IMPORT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_ENCLAVE_IMPORT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_ENCLAVE_IMPORT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_ENCLAVE_IMPORT")public static class IMAGE_ENCLAVE_IMPORT extends _IMAGE_ENCLAVE_IMPORT {

        /* package-private */ IMAGE_ENCLAVE_IMPORT() {}
    }

    @C("struct _IMAGE_DEBUG_DIRECTORY")public static class _IMAGE_DEBUG_DIRECTORY {

        /* package-private */ _IMAGE_DEBUG_DIRECTORY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$struct$LAYOUT();
        }
        public static VarHandle Characteristics$VH() {
            return winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$Characteristics$VH();
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$Characteristics$VH().get(seg);
        }
        public static  @C("DWORD") int Characteristics$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$Characteristics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Characteristics$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$Characteristics$VH().set(seg, x);
        }
        public static void Characteristics$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$Characteristics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorVersion$VH() {
            return winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$MajorVersion$VH();
        }
        public static  @C("WORD") short MajorVersion$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg) {
            return (short)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$MajorVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorVersion$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$MajorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorVersion$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$MajorVersion$VH().set(seg, x);
        }
        public static void MajorVersion$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$MajorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorVersion$VH() {
            return winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$MinorVersion$VH();
        }
        public static  @C("WORD") short MinorVersion$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg) {
            return (short)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$MinorVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorVersion$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$MinorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorVersion$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$MinorVersion$VH().set(seg, x);
        }
        public static void MinorVersion$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$MinorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$Type$VH();
        }
        public static  @C("DWORD") int Type$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$Type$VH().get(seg);
        }
        public static  @C("DWORD") int Type$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfData$VH() {
            return winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$SizeOfData$VH();
        }
        public static  @C("DWORD") int SizeOfData$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$SizeOfData$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfData$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$SizeOfData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfData$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$SizeOfData$VH().set(seg, x);
        }
        public static void SizeOfData$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$SizeOfData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle AddressOfRawData$VH() {
            return winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$AddressOfRawData$VH();
        }
        public static  @C("DWORD") int AddressOfRawData$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$AddressOfRawData$VH().get(seg);
        }
        public static  @C("DWORD") int AddressOfRawData$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$AddressOfRawData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void AddressOfRawData$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$AddressOfRawData$VH().set(seg, x);
        }
        public static void AddressOfRawData$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$AddressOfRawData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PointerToRawData$VH() {
            return winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$PointerToRawData$VH();
        }
        public static  @C("DWORD") int PointerToRawData$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$PointerToRawData$VH().get(seg);
        }
        public static  @C("DWORD") int PointerToRawData$get(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$PointerToRawData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PointerToRawData$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$PointerToRawData$VH().set(seg, x);
        }
        public static void PointerToRawData$set(@C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_DIRECTORY$PointerToRawData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_DEBUG_DIRECTORY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_DEBUG_DIRECTORY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_DEBUG_DIRECTORY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_DEBUG_DIRECTORY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_DEBUG_DIRECTORY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_DEBUG_DIRECTORY")public static class IMAGE_DEBUG_DIRECTORY extends _IMAGE_DEBUG_DIRECTORY {

        /* package-private */ IMAGE_DEBUG_DIRECTORY() {}
    }

    @C("struct _IMAGE_COFF_SYMBOLS_HEADER")public static class _IMAGE_COFF_SYMBOLS_HEADER {

        /* package-private */ _IMAGE_COFF_SYMBOLS_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$struct$LAYOUT();
        }
        public static VarHandle NumberOfSymbols$VH() {
            return winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$VH();
        }
        public static  @C("DWORD") int NumberOfSymbols$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfSymbols$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfSymbols$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$VH().set(seg, x);
        }
        public static void NumberOfSymbols$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$NumberOfSymbols$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LvaToFirstSymbol$VH() {
            return winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$VH();
        }
        public static  @C("DWORD") int LvaToFirstSymbol$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$VH().get(seg);
        }
        public static  @C("DWORD") int LvaToFirstSymbol$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LvaToFirstSymbol$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$VH().set(seg, x);
        }
        public static void LvaToFirstSymbol$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstSymbol$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfLinenumbers$VH() {
            return winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$VH();
        }
        public static  @C("DWORD") int NumberOfLinenumbers$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfLinenumbers$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfLinenumbers$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$VH().set(seg, x);
        }
        public static void NumberOfLinenumbers$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$NumberOfLinenumbers$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LvaToFirstLinenumber$VH() {
            return winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$VH();
        }
        public static  @C("DWORD") int LvaToFirstLinenumber$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$VH().get(seg);
        }
        public static  @C("DWORD") int LvaToFirstLinenumber$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LvaToFirstLinenumber$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$VH().set(seg, x);
        }
        public static void LvaToFirstLinenumber$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$LvaToFirstLinenumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RvaToFirstByteOfCode$VH() {
            return winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$VH();
        }
        public static  @C("DWORD") int RvaToFirstByteOfCode$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$VH().get(seg);
        }
        public static  @C("DWORD") int RvaToFirstByteOfCode$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RvaToFirstByteOfCode$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$VH().set(seg, x);
        }
        public static void RvaToFirstByteOfCode$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RvaToLastByteOfCode$VH() {
            return winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$VH();
        }
        public static  @C("DWORD") int RvaToLastByteOfCode$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$VH().get(seg);
        }
        public static  @C("DWORD") int RvaToLastByteOfCode$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RvaToLastByteOfCode$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$VH().set(seg, x);
        }
        public static void RvaToLastByteOfCode$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfCode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RvaToFirstByteOfData$VH() {
            return winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$VH();
        }
        public static  @C("DWORD") int RvaToFirstByteOfData$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$VH().get(seg);
        }
        public static  @C("DWORD") int RvaToFirstByteOfData$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RvaToFirstByteOfData$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$VH().set(seg, x);
        }
        public static void RvaToFirstByteOfData$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToFirstByteOfData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RvaToLastByteOfData$VH() {
            return winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$VH();
        }
        public static  @C("DWORD") int RvaToLastByteOfData$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$VH().get(seg);
        }
        public static  @C("DWORD") int RvaToLastByteOfData$get(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RvaToLastByteOfData$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$VH().set(seg, x);
        }
        public static void RvaToLastByteOfData$set(@C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_COFF_SYMBOLS_HEADER$RvaToLastByteOfData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_COFF_SYMBOLS_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_COFF_SYMBOLS_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_COFF_SYMBOLS_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_COFF_SYMBOLS_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_COFF_SYMBOLS_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_COFF_SYMBOLS_HEADER")public static class IMAGE_COFF_SYMBOLS_HEADER extends _IMAGE_COFF_SYMBOLS_HEADER {

        /* package-private */ IMAGE_COFF_SYMBOLS_HEADER() {}
    }

    @C("struct _FPO_DATA")public static class _FPO_DATA {

        /* package-private */ _FPO_DATA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._FPO_DATA$struct$LAYOUT();
        }
        public static VarHandle ulOffStart$VH() {
            return winnt_h$constants$11._FPO_DATA$ulOffStart$VH();
        }
        public static  @C("DWORD") int ulOffStart$get(@C("struct _FPO_DATA") MemorySegment seg) {
            return (int)winnt_h$constants$11._FPO_DATA$ulOffStart$VH().get(seg);
        }
        public static  @C("DWORD") int ulOffStart$get(@C("struct _FPO_DATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._FPO_DATA$ulOffStart$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulOffStart$set(@C("struct _FPO_DATA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._FPO_DATA$ulOffStart$VH().set(seg, x);
        }
        public static void ulOffStart$set(@C("struct _FPO_DATA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._FPO_DATA$ulOffStart$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cbProcSize$VH() {
            return winnt_h$constants$11._FPO_DATA$cbProcSize$VH();
        }
        public static  @C("DWORD") int cbProcSize$get(@C("struct _FPO_DATA") MemorySegment seg) {
            return (int)winnt_h$constants$11._FPO_DATA$cbProcSize$VH().get(seg);
        }
        public static  @C("DWORD") int cbProcSize$get(@C("struct _FPO_DATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._FPO_DATA$cbProcSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cbProcSize$set(@C("struct _FPO_DATA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._FPO_DATA$cbProcSize$VH().set(seg, x);
        }
        public static void cbProcSize$set(@C("struct _FPO_DATA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._FPO_DATA$cbProcSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cdwLocals$VH() {
            return winnt_h$constants$11._FPO_DATA$cdwLocals$VH();
        }
        public static  @C("DWORD") int cdwLocals$get(@C("struct _FPO_DATA") MemorySegment seg) {
            return (int)winnt_h$constants$11._FPO_DATA$cdwLocals$VH().get(seg);
        }
        public static  @C("DWORD") int cdwLocals$get(@C("struct _FPO_DATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._FPO_DATA$cdwLocals$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cdwLocals$set(@C("struct _FPO_DATA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._FPO_DATA$cdwLocals$VH().set(seg, x);
        }
        public static void cdwLocals$set(@C("struct _FPO_DATA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._FPO_DATA$cdwLocals$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle cdwParams$VH() {
            return winnt_h$constants$11._FPO_DATA$cdwParams$VH();
        }
        public static  @C("WORD") short cdwParams$get(@C("struct _FPO_DATA") MemorySegment seg) {
            return (short)winnt_h$constants$11._FPO_DATA$cdwParams$VH().get(seg);
        }
        public static  @C("WORD") short cdwParams$get(@C("struct _FPO_DATA") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._FPO_DATA$cdwParams$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cdwParams$set(@C("struct _FPO_DATA") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._FPO_DATA$cdwParams$VH().set(seg, x);
        }
        public static void cdwParams$set(@C("struct _FPO_DATA") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._FPO_DATA$cdwParams$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _FPO_DATA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _FPO_DATA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _FPO_DATA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _FPO_DATA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _FPO_DATA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _FPO_DATA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _FPO_DATA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _FPO_DATA")public static class FPO_DATA extends _FPO_DATA {

        /* package-private */ FPO_DATA() {}
    }

    @C("struct _IMAGE_DEBUG_MISC")public static class _IMAGE_DEBUG_MISC {

        /* package-private */ _IMAGE_DEBUG_MISC() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._IMAGE_DEBUG_MISC$struct$LAYOUT();
        }
        public static VarHandle DataType$VH() {
            return winnt_h$constants$11._IMAGE_DEBUG_MISC$DataType$VH();
        }
        public static  @C("DWORD") int DataType$get(@C("struct _IMAGE_DEBUG_MISC") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_MISC$DataType$VH().get(seg);
        }
        public static  @C("DWORD") int DataType$get(@C("struct _IMAGE_DEBUG_MISC") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_MISC$DataType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DataType$set(@C("struct _IMAGE_DEBUG_MISC") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_MISC$DataType$VH().set(seg, x);
        }
        public static void DataType$set(@C("struct _IMAGE_DEBUG_MISC") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_MISC$DataType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$11._IMAGE_DEBUG_MISC$Length$VH();
        }
        public static  @C("DWORD") int Length$get(@C("struct _IMAGE_DEBUG_MISC") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_MISC$Length$VH().get(seg);
        }
        public static  @C("DWORD") int Length$get(@C("struct _IMAGE_DEBUG_MISC") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_DEBUG_MISC$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _IMAGE_DEBUG_MISC") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_MISC$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _IMAGE_DEBUG_MISC") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_DEBUG_MISC$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Unicode$VH() {
            return winnt_h$constants$11._IMAGE_DEBUG_MISC$Unicode$VH();
        }
        public static  @C("BOOLEAN") byte Unicode$get(@C("struct _IMAGE_DEBUG_MISC") MemorySegment seg) {
            return (byte)winnt_h$constants$11._IMAGE_DEBUG_MISC$Unicode$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Unicode$get(@C("struct _IMAGE_DEBUG_MISC") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$11._IMAGE_DEBUG_MISC$Unicode$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Unicode$set(@C("struct _IMAGE_DEBUG_MISC") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$11._IMAGE_DEBUG_MISC$Unicode$VH().set(seg, x);
        }
        public static void Unicode$set(@C("struct _IMAGE_DEBUG_MISC") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$11._IMAGE_DEBUG_MISC$Unicode$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(9, 3));
        }
        public static MemorySegment Data$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 1));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_DEBUG_MISC") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_DEBUG_MISC") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_DEBUG_MISC[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_DEBUG_MISC[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_DEBUG_MISC*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_DEBUG_MISC*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_DEBUG_MISC") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_DEBUG_MISC")public static class IMAGE_DEBUG_MISC extends _IMAGE_DEBUG_MISC {

        /* package-private */ IMAGE_DEBUG_MISC() {}
    }

    @C("struct _IMAGE_FUNCTION_ENTRY")public static class _IMAGE_FUNCTION_ENTRY {

        /* package-private */ _IMAGE_FUNCTION_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$struct$LAYOUT();
        }
        public static VarHandle StartingAddress$VH() {
            return winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$StartingAddress$VH();
        }
        public static  @C("DWORD") int StartingAddress$get(@C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$StartingAddress$VH().get(seg);
        }
        public static  @C("DWORD") int StartingAddress$get(@C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$StartingAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StartingAddress$set(@C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$StartingAddress$VH().set(seg, x);
        }
        public static void StartingAddress$set(@C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$StartingAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EndingAddress$VH() {
            return winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$EndingAddress$VH();
        }
        public static  @C("DWORD") int EndingAddress$get(@C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$EndingAddress$VH().get(seg);
        }
        public static  @C("DWORD") int EndingAddress$get(@C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$EndingAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EndingAddress$set(@C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$EndingAddress$VH().set(seg, x);
        }
        public static void EndingAddress$set(@C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$EndingAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EndOfPrologue$VH() {
            return winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$EndOfPrologue$VH();
        }
        public static  @C("DWORD") int EndOfPrologue$get(@C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$EndOfPrologue$VH().get(seg);
        }
        public static  @C("DWORD") int EndOfPrologue$get(@C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$EndOfPrologue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EndOfPrologue$set(@C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$EndOfPrologue$VH().set(seg, x);
        }
        public static void EndOfPrologue$set(@C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY$EndOfPrologue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_FUNCTION_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_FUNCTION_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_FUNCTION_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_FUNCTION_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_FUNCTION_ENTRY")public static class IMAGE_FUNCTION_ENTRY extends _IMAGE_FUNCTION_ENTRY {

        /* package-private */ IMAGE_FUNCTION_ENTRY() {}
    }

    @C("struct _IMAGE_FUNCTION_ENTRY64")public static class _IMAGE_FUNCTION_ENTRY64 {

        /* package-private */ _IMAGE_FUNCTION_ENTRY64() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$struct$LAYOUT();
        }
        public static VarHandle StartingAddress$VH() {
            return winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$StartingAddress$VH();
        }
        public static  @C("ULONGLONG") long StartingAddress$get(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg) {
            return (long)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$StartingAddress$VH().get(seg);
        }
        public static  @C("ULONGLONG") long StartingAddress$get(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$StartingAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StartingAddress$set(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$StartingAddress$VH().set(seg, x);
        }
        public static void StartingAddress$set(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$StartingAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EndingAddress$VH() {
            return winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$EndingAddress$VH();
        }
        public static  @C("ULONGLONG") long EndingAddress$get(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg) {
            return (long)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$EndingAddress$VH().get(seg);
        }
        public static  @C("ULONGLONG") long EndingAddress$get(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$EndingAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EndingAddress$set(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$EndingAddress$VH().set(seg, x);
        }
        public static void EndingAddress$set(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$EndingAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EndOfPrologue$VH() {
            return winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$EndOfPrologue$VH();
        }
        public static  @C("ULONGLONG") long EndOfPrologue$get(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg) {
            return (long)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$EndOfPrologue$VH().get(seg);
        }
        public static  @C("ULONGLONG") long EndOfPrologue$get(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$EndOfPrologue$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EndOfPrologue$set(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$EndOfPrologue$VH().set(seg, x);
        }
        public static void EndOfPrologue$set(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$EndOfPrologue$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle UnwindInfoAddress$VH() {
            return winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$VH();
        }
        public static  @C("ULONGLONG") long UnwindInfoAddress$get(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg) {
            return (long)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$VH().get(seg);
        }
        public static  @C("ULONGLONG") long UnwindInfoAddress$get(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg, long index) {
            return (long)winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UnwindInfoAddress$set(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$VH().set(seg, x);
        }
        public static void UnwindInfoAddress$set(@C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$11._IMAGE_FUNCTION_ENTRY64$UnwindInfoAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_FUNCTION_ENTRY64[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_FUNCTION_ENTRY64[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_FUNCTION_ENTRY64*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_FUNCTION_ENTRY64*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_FUNCTION_ENTRY64") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_FUNCTION_ENTRY64")public static class IMAGE_FUNCTION_ENTRY64 extends _IMAGE_FUNCTION_ENTRY64 {

        /* package-private */ IMAGE_FUNCTION_ENTRY64() {}
    }

    @C("struct _IMAGE_SEPARATE_DEBUG_HEADER")public static class _IMAGE_SEPARATE_DEBUG_HEADER {

        /* package-private */ _IMAGE_SEPARATE_DEBUG_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$struct$LAYOUT();
        }
        public static VarHandle Signature$VH() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Signature$VH();
        }
        public static  @C("WORD") short Signature$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Signature$VH().get(seg);
        }
        public static  @C("WORD") short Signature$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Signature$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Signature$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Signature$VH().set(seg, x);
        }
        public static void Signature$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Signature$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Flags$VH();
        }
        public static  @C("WORD") short Flags$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Flags$VH().get(seg);
        }
        public static  @C("WORD") short Flags$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Machine$VH() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Machine$VH();
        }
        public static  @C("WORD") short Machine$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Machine$VH().get(seg);
        }
        public static  @C("WORD") short Machine$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Machine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Machine$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Machine$VH().set(seg, x);
        }
        public static void Machine$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Machine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Characteristics$VH() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$VH();
        }
        public static  @C("WORD") short Characteristics$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$VH().get(seg);
        }
        public static  @C("WORD") short Characteristics$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Characteristics$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$VH().set(seg, x);
        }
        public static void Characteristics$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$Characteristics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CheckSum$VH() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$VH();
        }
        public static  @C("DWORD") int CheckSum$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$VH().get(seg);
        }
        public static  @C("DWORD") int CheckSum$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CheckSum$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$VH().set(seg, x);
        }
        public static void CheckSum$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$CheckSum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImageBase$VH() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$VH();
        }
        public static  @C("DWORD") int ImageBase$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$VH().get(seg);
        }
        public static  @C("DWORD") int ImageBase$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImageBase$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$VH().set(seg, x);
        }
        public static void ImageBase$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$ImageBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfImage$VH() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$VH();
        }
        public static  @C("DWORD") int SizeOfImage$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfImage$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfImage$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$VH().set(seg, x);
        }
        public static void SizeOfImage$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$SizeOfImage$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumberOfSections$VH() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$VH();
        }
        public static  @C("DWORD") int NumberOfSections$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfSections$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfSections$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$VH().set(seg, x);
        }
        public static void NumberOfSections$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$NumberOfSections$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ExportedNamesSize$VH() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$VH();
        }
        public static  @C("DWORD") int ExportedNamesSize$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$VH().get(seg);
        }
        public static  @C("DWORD") int ExportedNamesSize$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ExportedNamesSize$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$VH().set(seg, x);
        }
        public static void ExportedNamesSize$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$ExportedNamesSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DebugDirectorySize$VH() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$VH();
        }
        public static  @C("DWORD") int DebugDirectorySize$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$VH().get(seg);
        }
        public static  @C("DWORD") int DebugDirectorySize$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DebugDirectorySize$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$VH().set(seg, x);
        }
        public static void DebugDirectorySize$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$DebugDirectorySize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SectionAlignment$VH() {
            return winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$VH();
        }
        public static  @C("DWORD") int SectionAlignment$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$VH().get(seg);
        }
        public static  @C("DWORD") int SectionAlignment$get(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SectionAlignment$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$VH().set(seg, x);
        }
        public static void SectionAlignment$set(@C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._IMAGE_SEPARATE_DEBUG_HEADER$SectionAlignment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_SEPARATE_DEBUG_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_SEPARATE_DEBUG_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_SEPARATE_DEBUG_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_SEPARATE_DEBUG_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_SEPARATE_DEBUG_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_SEPARATE_DEBUG_HEADER")public static class IMAGE_SEPARATE_DEBUG_HEADER extends _IMAGE_SEPARATE_DEBUG_HEADER {

        /* package-private */ IMAGE_SEPARATE_DEBUG_HEADER() {}
    }

    @C("struct _NON_PAGED_DEBUG_INFO")public static class _NON_PAGED_DEBUG_INFO {

        /* package-private */ _NON_PAGED_DEBUG_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._NON_PAGED_DEBUG_INFO$struct$LAYOUT();
        }
        public static VarHandle Signature$VH() {
            return winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Signature$VH();
        }
        public static  @C("WORD") short Signature$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg) {
            return (short)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Signature$VH().get(seg);
        }
        public static  @C("WORD") short Signature$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Signature$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Signature$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Signature$VH().set(seg, x);
        }
        public static void Signature$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Signature$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Flags$VH();
        }
        public static  @C("WORD") short Flags$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg) {
            return (short)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Flags$VH().get(seg);
        }
        public static  @C("WORD") short Flags$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Machine$VH() {
            return winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Machine$VH();
        }
        public static  @C("WORD") short Machine$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg) {
            return (short)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Machine$VH().get(seg);
        }
        public static  @C("WORD") short Machine$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Machine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Machine$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Machine$VH().set(seg, x);
        }
        public static void Machine$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Machine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Characteristics$VH() {
            return winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Characteristics$VH();
        }
        public static  @C("WORD") short Characteristics$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg) {
            return (short)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Characteristics$VH().get(seg);
        }
        public static  @C("WORD") short Characteristics$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Characteristics$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Characteristics$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Characteristics$VH().set(seg, x);
        }
        public static void Characteristics$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$Characteristics$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$11._NON_PAGED_DEBUG_INFO$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CheckSum$VH() {
            return winnt_h$constants$11._NON_PAGED_DEBUG_INFO$CheckSum$VH();
        }
        public static  @C("DWORD") int CheckSum$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$CheckSum$VH().get(seg);
        }
        public static  @C("DWORD") int CheckSum$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$CheckSum$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CheckSum$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$CheckSum$VH().set(seg, x);
        }
        public static void CheckSum$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$CheckSum$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfImage$VH() {
            return winnt_h$constants$11._NON_PAGED_DEBUG_INFO$SizeOfImage$VH();
        }
        public static  @C("DWORD") int SizeOfImage$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg) {
            return (int)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$SizeOfImage$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfImage$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$SizeOfImage$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfImage$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$SizeOfImage$VH().set(seg, x);
        }
        public static void SizeOfImage$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$SizeOfImage$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImageBase$VH() {
            return winnt_h$constants$11._NON_PAGED_DEBUG_INFO$ImageBase$VH();
        }
        public static  @C("ULONGLONG") long ImageBase$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg) {
            return (long)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$ImageBase$VH().get(seg);
        }
        public static  @C("ULONGLONG") long ImageBase$get(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index) {
            return (long)winnt_h$constants$11._NON_PAGED_DEBUG_INFO$ImageBase$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImageBase$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$ImageBase$VH().set(seg, x);
        }
        public static void ImageBase$set(@C("struct _NON_PAGED_DEBUG_INFO") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$11._NON_PAGED_DEBUG_INFO$ImageBase$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _NON_PAGED_DEBUG_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _NON_PAGED_DEBUG_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _NON_PAGED_DEBUG_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _NON_PAGED_DEBUG_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _NON_PAGED_DEBUG_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _NON_PAGED_DEBUG_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _NON_PAGED_DEBUG_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _NON_PAGED_DEBUG_INFO")public static class NON_PAGED_DEBUG_INFO extends _NON_PAGED_DEBUG_INFO {

        /* package-private */ NON_PAGED_DEBUG_INFO() {}
    }

    @C("struct _ImageArchitectureHeader")public static class _ImageArchitectureHeader {

        /* package-private */ _ImageArchitectureHeader() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._ImageArchitectureHeader$struct$LAYOUT();
        }
        public static VarHandle FirstEntryRVA$VH() {
            return winnt_h$constants$11._ImageArchitectureHeader$FirstEntryRVA$VH();
        }
        public static  @C("DWORD") int FirstEntryRVA$get(@C("struct _ImageArchitectureHeader") MemorySegment seg) {
            return (int)winnt_h$constants$11._ImageArchitectureHeader$FirstEntryRVA$VH().get(seg);
        }
        public static  @C("DWORD") int FirstEntryRVA$get(@C("struct _ImageArchitectureHeader") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._ImageArchitectureHeader$FirstEntryRVA$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FirstEntryRVA$set(@C("struct _ImageArchitectureHeader") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._ImageArchitectureHeader$FirstEntryRVA$VH().set(seg, x);
        }
        public static void FirstEntryRVA$set(@C("struct _ImageArchitectureHeader") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._ImageArchitectureHeader$FirstEntryRVA$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ImageArchitectureHeader") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ImageArchitectureHeader") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ImageArchitectureHeader[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ImageArchitectureHeader[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ImageArchitectureHeader*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ImageArchitectureHeader*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ImageArchitectureHeader") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ImageArchitectureHeader")public static class IMAGE_ARCHITECTURE_HEADER extends _ImageArchitectureHeader {

        /* package-private */ IMAGE_ARCHITECTURE_HEADER() {}
    }

    @C("struct _ImageArchitectureEntry")public static class _ImageArchitectureEntry {

        /* package-private */ _ImageArchitectureEntry() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._ImageArchitectureEntry$struct$LAYOUT();
        }
        public static VarHandle FixupInstRVA$VH() {
            return winnt_h$constants$11._ImageArchitectureEntry$FixupInstRVA$VH();
        }
        public static  @C("DWORD") int FixupInstRVA$get(@C("struct _ImageArchitectureEntry") MemorySegment seg) {
            return (int)winnt_h$constants$11._ImageArchitectureEntry$FixupInstRVA$VH().get(seg);
        }
        public static  @C("DWORD") int FixupInstRVA$get(@C("struct _ImageArchitectureEntry") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._ImageArchitectureEntry$FixupInstRVA$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FixupInstRVA$set(@C("struct _ImageArchitectureEntry") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._ImageArchitectureEntry$FixupInstRVA$VH().set(seg, x);
        }
        public static void FixupInstRVA$set(@C("struct _ImageArchitectureEntry") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._ImageArchitectureEntry$FixupInstRVA$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NewInst$VH() {
            return winnt_h$constants$11._ImageArchitectureEntry$NewInst$VH();
        }
        public static  @C("DWORD") int NewInst$get(@C("struct _ImageArchitectureEntry") MemorySegment seg) {
            return (int)winnt_h$constants$11._ImageArchitectureEntry$NewInst$VH().get(seg);
        }
        public static  @C("DWORD") int NewInst$get(@C("struct _ImageArchitectureEntry") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._ImageArchitectureEntry$NewInst$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NewInst$set(@C("struct _ImageArchitectureEntry") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._ImageArchitectureEntry$NewInst$VH().set(seg, x);
        }
        public static void NewInst$set(@C("struct _ImageArchitectureEntry") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._ImageArchitectureEntry$NewInst$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ImageArchitectureEntry") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ImageArchitectureEntry") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ImageArchitectureEntry[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ImageArchitectureEntry[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ImageArchitectureEntry*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ImageArchitectureEntry*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ImageArchitectureEntry") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ImageArchitectureEntry")public static class IMAGE_ARCHITECTURE_ENTRY extends _ImageArchitectureEntry {

        /* package-private */ IMAGE_ARCHITECTURE_ENTRY() {}
    }

    @C("struct IMPORT_OBJECT_HEADER")public static class IMPORT_OBJECT_HEADER {

        /* package-private */ IMPORT_OBJECT_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11.IMPORT_OBJECT_HEADER$struct$LAYOUT();
        }
        public static VarHandle Sig1$VH() {
            return winnt_h$constants$11.IMPORT_OBJECT_HEADER$Sig1$VH();
        }
        public static  @C("WORD") short Sig1$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$11.IMPORT_OBJECT_HEADER$Sig1$VH().get(seg);
        }
        public static  @C("WORD") short Sig1$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11.IMPORT_OBJECT_HEADER$Sig1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sig1$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$Sig1$VH().set(seg, x);
        }
        public static void Sig1$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$Sig1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Sig2$VH() {
            return winnt_h$constants$11.IMPORT_OBJECT_HEADER$Sig2$VH();
        }
        public static  @C("WORD") short Sig2$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$11.IMPORT_OBJECT_HEADER$Sig2$VH().get(seg);
        }
        public static  @C("WORD") short Sig2$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11.IMPORT_OBJECT_HEADER$Sig2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Sig2$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$Sig2$VH().set(seg, x);
        }
        public static void Sig2$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$Sig2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$11.IMPORT_OBJECT_HEADER$Version$VH();
        }
        public static  @C("WORD") short Version$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$11.IMPORT_OBJECT_HEADER$Version$VH().get(seg);
        }
        public static  @C("WORD") short Version$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11.IMPORT_OBJECT_HEADER$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Machine$VH() {
            return winnt_h$constants$11.IMPORT_OBJECT_HEADER$Machine$VH();
        }
        public static  @C("WORD") short Machine$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$11.IMPORT_OBJECT_HEADER$Machine$VH().get(seg);
        }
        public static  @C("WORD") short Machine$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11.IMPORT_OBJECT_HEADER$Machine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Machine$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$Machine$VH().set(seg, x);
        }
        public static void Machine$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$Machine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeDateStamp$VH() {
            return winnt_h$constants$11.IMPORT_OBJECT_HEADER$TimeDateStamp$VH();
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11.IMPORT_OBJECT_HEADER$TimeDateStamp$VH().get(seg);
        }
        public static  @C("DWORD") int TimeDateStamp$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11.IMPORT_OBJECT_HEADER$TimeDateStamp$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeDateStamp$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$TimeDateStamp$VH().set(seg, x);
        }
        public static void TimeDateStamp$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$TimeDateStamp$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SizeOfData$VH() {
            return winnt_h$constants$11.IMPORT_OBJECT_HEADER$SizeOfData$VH();
        }
        public static  @C("DWORD") int SizeOfData$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11.IMPORT_OBJECT_HEADER$SizeOfData$VH().get(seg);
        }
        public static  @C("DWORD") int SizeOfData$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11.IMPORT_OBJECT_HEADER$SizeOfData$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SizeOfData$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$SizeOfData$VH().set(seg, x);
        }
        public static void SizeOfData$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$SizeOfData$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Ordinal$VH() {
            return winnt_h$constants$11.IMPORT_OBJECT_HEADER$Ordinal$VH();
        }
        public static  @C("WORD") short Ordinal$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$11.IMPORT_OBJECT_HEADER$Ordinal$VH().get(seg);
        }
        public static  @C("WORD") short Ordinal$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11.IMPORT_OBJECT_HEADER$Ordinal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Ordinal$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$Ordinal$VH().set(seg, x);
        }
        public static void Ordinal$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$Ordinal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Hint$VH() {
            return winnt_h$constants$11.IMPORT_OBJECT_HEADER$Hint$VH();
        }
        public static  @C("WORD") short Hint$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$11.IMPORT_OBJECT_HEADER$Hint$VH().get(seg);
        }
        public static  @C("WORD") short Hint$get(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11.IMPORT_OBJECT_HEADER$Hint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Hint$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$Hint$VH().set(seg, x);
        }
        public static void Hint$set(@C("struct IMPORT_OBJECT_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11.IMPORT_OBJECT_HEADER$Hint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct IMPORT_OBJECT_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct IMPORT_OBJECT_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct IMPORT_OBJECT_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct IMPORT_OBJECT_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct IMPORT_OBJECT_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct IMPORT_OBJECT_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct IMPORT_OBJECT_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct IMAGE_COR20_HEADER")public static class IMAGE_COR20_HEADER {

        /* package-private */ IMAGE_COR20_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11.IMAGE_COR20_HEADER$struct$LAYOUT();
        }
        public static VarHandle cb$VH() {
            return winnt_h$constants$11.IMAGE_COR20_HEADER$cb$VH();
        }
        public static  @C("DWORD") int cb$get(@C("struct IMAGE_COR20_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11.IMAGE_COR20_HEADER$cb$VH().get(seg);
        }
        public static  @C("DWORD") int cb$get(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11.IMAGE_COR20_HEADER$cb$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void cb$set(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11.IMAGE_COR20_HEADER$cb$VH().set(seg, x);
        }
        public static void cb$set(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11.IMAGE_COR20_HEADER$cb$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MajorRuntimeVersion$VH() {
            return winnt_h$constants$11.IMAGE_COR20_HEADER$MajorRuntimeVersion$VH();
        }
        public static  @C("WORD") short MajorRuntimeVersion$get(@C("struct IMAGE_COR20_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$11.IMAGE_COR20_HEADER$MajorRuntimeVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorRuntimeVersion$get(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11.IMAGE_COR20_HEADER$MajorRuntimeVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorRuntimeVersion$set(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11.IMAGE_COR20_HEADER$MajorRuntimeVersion$VH().set(seg, x);
        }
        public static void MajorRuntimeVersion$set(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11.IMAGE_COR20_HEADER$MajorRuntimeVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorRuntimeVersion$VH() {
            return winnt_h$constants$11.IMAGE_COR20_HEADER$MinorRuntimeVersion$VH();
        }
        public static  @C("WORD") short MinorRuntimeVersion$get(@C("struct IMAGE_COR20_HEADER") MemorySegment seg) {
            return (short)winnt_h$constants$11.IMAGE_COR20_HEADER$MinorRuntimeVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorRuntimeVersion$get(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11.IMAGE_COR20_HEADER$MinorRuntimeVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorRuntimeVersion$set(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11.IMAGE_COR20_HEADER$MinorRuntimeVersion$VH().set(seg, x);
        }
        public static void MinorRuntimeVersion$set(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11.IMAGE_COR20_HEADER$MinorRuntimeVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment MetaData$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$11.IMAGE_COR20_HEADER$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct IMAGE_COR20_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11.IMAGE_COR20_HEADER$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11.IMAGE_COR20_HEADER$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11.IMAGE_COR20_HEADER$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11.IMAGE_COR20_HEADER$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EntryPointToken$VH() {
            return winnt_h$constants$11.IMAGE_COR20_HEADER$EntryPointToken$VH();
        }
        public static  @C("DWORD") int EntryPointToken$get(@C("struct IMAGE_COR20_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11.IMAGE_COR20_HEADER$EntryPointToken$VH().get(seg);
        }
        public static  @C("DWORD") int EntryPointToken$get(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11.IMAGE_COR20_HEADER$EntryPointToken$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EntryPointToken$set(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11.IMAGE_COR20_HEADER$EntryPointToken$VH().set(seg, x);
        }
        public static void EntryPointToken$set(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11.IMAGE_COR20_HEADER$EntryPointToken$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EntryPointRVA$VH() {
            return winnt_h$constants$11.IMAGE_COR20_HEADER$EntryPointRVA$VH();
        }
        public static  @C("DWORD") int EntryPointRVA$get(@C("struct IMAGE_COR20_HEADER") MemorySegment seg) {
            return (int)winnt_h$constants$11.IMAGE_COR20_HEADER$EntryPointRVA$VH().get(seg);
        }
        public static  @C("DWORD") int EntryPointRVA$get(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11.IMAGE_COR20_HEADER$EntryPointRVA$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EntryPointRVA$set(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11.IMAGE_COR20_HEADER$EntryPointRVA$VH().set(seg, x);
        }
        public static void EntryPointRVA$set(@C("struct IMAGE_COR20_HEADER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11.IMAGE_COR20_HEADER$EntryPointRVA$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Resources$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 8));
        }
        public static MemorySegment StrongNameSignature$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(36, 8));
        }
        public static MemorySegment CodeManagerTable$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(44, 8));
        }
        public static MemorySegment VTableFixups$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(52, 8));
        }
        public static MemorySegment ExportAddressTableJumps$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(60, 8));
        }
        public static MemorySegment ManagedNativeHeader$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(68, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct IMAGE_COR20_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct IMAGE_COR20_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct IMAGE_COR20_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct IMAGE_COR20_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct IMAGE_COR20_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct IMAGE_COR20_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct IMAGE_COR20_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static interface RtlInstallFunctionTableCallback$Callback {

        jdk.incubator.foreign.MemoryAddress apply(long x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  @C("PGET_RUNTIME_FUNCTION_CALLBACK") MemorySegment allocate(RtlInstallFunctionTableCallback$Callback fi) {
            return RuntimeHelper.upcallStub(RtlInstallFunctionTableCallback$Callback.class, fi, winnt_h$constants$11.RtlInstallFunctionTableCallback$Callback$FUNC(), "(JLjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
        }
        public static  @C("PGET_RUNTIME_FUNCTION_CALLBACK") MemorySegment allocate(RtlInstallFunctionTableCallback$Callback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    @C("struct _SLIST_ENTRY")public static class _SLIST_ENTRY {

        /* package-private */ _SLIST_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._SLIST_ENTRY$struct$LAYOUT();
        }
        public static VarHandle Next$VH() {
            return winnt_h$constants$11._SLIST_ENTRY$Next$VH();
        }
        public static  @C("struct _SLIST_ENTRY*") MemoryAddress Next$get(@C("struct _SLIST_ENTRY") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$11._SLIST_ENTRY$Next$VH().get(seg);
        }
        public static  @C("struct _SLIST_ENTRY*") MemoryAddress Next$get(@C("struct _SLIST_ENTRY") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$11._SLIST_ENTRY$Next$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Next$set(@C("struct _SLIST_ENTRY") MemorySegment seg, @C("struct _SLIST_ENTRY*") MemoryAddress x) {
            winnt_h$constants$11._SLIST_ENTRY$Next$VH().set(seg, x);
        }
        public static void Next$set(@C("struct _SLIST_ENTRY") MemorySegment seg, long index, @C("struct _SLIST_ENTRY*") MemoryAddress x) {
            winnt_h$constants$11._SLIST_ENTRY$Next$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SLIST_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SLIST_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SLIST_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SLIST_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SLIST_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SLIST_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SLIST_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SLIST_ENTRY")public static class SLIST_ENTRY extends _SLIST_ENTRY {

        /* package-private */ SLIST_ENTRY() {}
    }

    @C("union _SLIST_HEADER")public static class _SLIST_HEADER {

        /* package-private */ _SLIST_HEADER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._SLIST_HEADER$union$LAYOUT();
        }
        public static VarHandle Alignment$VH() {
            return winnt_h$constants$11._SLIST_HEADER$Alignment$VH();
        }
        public static  @C("ULONGLONG") long Alignment$get(@C("union _SLIST_HEADER") MemorySegment seg) {
            return (long)winnt_h$constants$11._SLIST_HEADER$Alignment$VH().get(seg);
        }
        public static  @C("ULONGLONG") long Alignment$get(@C("union _SLIST_HEADER") MemorySegment seg, long index) {
            return (long)winnt_h$constants$11._SLIST_HEADER$Alignment$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Alignment$set(@C("union _SLIST_HEADER") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$11._SLIST_HEADER$Alignment$VH().set(seg, x);
        }
        public static void Alignment$set(@C("union _SLIST_HEADER") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$11._SLIST_HEADER$Alignment$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Region$VH() {
            return winnt_h$constants$11._SLIST_HEADER$Region$VH();
        }
        public static  @C("ULONGLONG") long Region$get(@C("union _SLIST_HEADER") MemorySegment seg) {
            return (long)winnt_h$constants$11._SLIST_HEADER$Region$VH().get(seg);
        }
        public static  @C("ULONGLONG") long Region$get(@C("union _SLIST_HEADER") MemorySegment seg, long index) {
            return (long)winnt_h$constants$11._SLIST_HEADER$Region$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Region$set(@C("union _SLIST_HEADER") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$11._SLIST_HEADER$Region$VH().set(seg, x);
        }
        public static void Region$set(@C("union _SLIST_HEADER") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$11._SLIST_HEADER$Region$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("struct ")public static class HeaderX64 {

            /* package-private */ HeaderX64() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$11._SLIST_HEADER$HeaderX64$struct$LAYOUT();
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment HeaderX64$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union _SLIST_HEADER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union _SLIST_HEADER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union _SLIST_HEADER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union _SLIST_HEADER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union _SLIST_HEADER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union _SLIST_HEADER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union _SLIST_HEADER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("union _SLIST_HEADER")public static class SLIST_HEADER extends _SLIST_HEADER {

        /* package-private */ SLIST_HEADER() {}
    }

    @C("union _RTL_RUN_ONCE")public static class _RTL_RUN_ONCE {

        /* package-private */ _RTL_RUN_ONCE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._RTL_RUN_ONCE$union$LAYOUT();
        }
        public static VarHandle Ptr$VH() {
            return winnt_h$constants$11._RTL_RUN_ONCE$Ptr$VH();
        }
        public static  @C("PVOID") MemoryAddress Ptr$get(@C("union _RTL_RUN_ONCE") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$11._RTL_RUN_ONCE$Ptr$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress Ptr$get(@C("union _RTL_RUN_ONCE") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$11._RTL_RUN_ONCE$Ptr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Ptr$set(@C("union _RTL_RUN_ONCE") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$11._RTL_RUN_ONCE$Ptr$VH().set(seg, x);
        }
        public static void Ptr$set(@C("union _RTL_RUN_ONCE") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$11._RTL_RUN_ONCE$Ptr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("union _RTL_RUN_ONCE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("union _RTL_RUN_ONCE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("union _RTL_RUN_ONCE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("union _RTL_RUN_ONCE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("union _RTL_RUN_ONCE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union _RTL_RUN_ONCE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("union _RTL_RUN_ONCE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("union _RTL_RUN_ONCE")public static class RTL_RUN_ONCE extends _RTL_RUN_ONCE {

        /* package-private */ RTL_RUN_ONCE() {}
    }

    @C("struct _RTL_BARRIER")public static class _RTL_BARRIER {

        /* package-private */ _RTL_BARRIER() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._RTL_BARRIER$struct$LAYOUT();
        }
        public static VarHandle Reserved1$VH() {
            return winnt_h$constants$11._RTL_BARRIER$Reserved1$VH();
        }
        public static  @C("DWORD") int Reserved1$get(@C("struct _RTL_BARRIER") MemorySegment seg) {
            return (int)winnt_h$constants$11._RTL_BARRIER$Reserved1$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved1$get(@C("struct _RTL_BARRIER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._RTL_BARRIER$Reserved1$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved1$set(@C("struct _RTL_BARRIER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._RTL_BARRIER$Reserved1$VH().set(seg, x);
        }
        public static void Reserved1$set(@C("struct _RTL_BARRIER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._RTL_BARRIER$Reserved1$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved2$VH() {
            return winnt_h$constants$11._RTL_BARRIER$Reserved2$VH();
        }
        public static  @C("DWORD") int Reserved2$get(@C("struct _RTL_BARRIER") MemorySegment seg) {
            return (int)winnt_h$constants$11._RTL_BARRIER$Reserved2$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved2$get(@C("struct _RTL_BARRIER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._RTL_BARRIER$Reserved2$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved2$set(@C("struct _RTL_BARRIER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._RTL_BARRIER$Reserved2$VH().set(seg, x);
        }
        public static void Reserved2$set(@C("struct _RTL_BARRIER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._RTL_BARRIER$Reserved2$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved3$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 16));
        }
        public static VarHandle Reserved4$VH() {
            return winnt_h$constants$11._RTL_BARRIER$Reserved4$VH();
        }
        public static  @C("DWORD") int Reserved4$get(@C("struct _RTL_BARRIER") MemorySegment seg) {
            return (int)winnt_h$constants$11._RTL_BARRIER$Reserved4$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved4$get(@C("struct _RTL_BARRIER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._RTL_BARRIER$Reserved4$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved4$set(@C("struct _RTL_BARRIER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._RTL_BARRIER$Reserved4$VH().set(seg, x);
        }
        public static void Reserved4$set(@C("struct _RTL_BARRIER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._RTL_BARRIER$Reserved4$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved5$VH() {
            return winnt_h$constants$11._RTL_BARRIER$Reserved5$VH();
        }
        public static  @C("DWORD") int Reserved5$get(@C("struct _RTL_BARRIER") MemorySegment seg) {
            return (int)winnt_h$constants$11._RTL_BARRIER$Reserved5$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved5$get(@C("struct _RTL_BARRIER") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._RTL_BARRIER$Reserved5$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved5$set(@C("struct _RTL_BARRIER") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._RTL_BARRIER$Reserved5$VH().set(seg, x);
        }
        public static void Reserved5$set(@C("struct _RTL_BARRIER") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._RTL_BARRIER$Reserved5$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _RTL_BARRIER") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _RTL_BARRIER") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _RTL_BARRIER[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _RTL_BARRIER[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _RTL_BARRIER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _RTL_BARRIER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _RTL_BARRIER") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _RTL_BARRIER")public static class RTL_BARRIER extends _RTL_BARRIER {

        /* package-private */ RTL_BARRIER() {}
    }

    @C("struct _MESSAGE_RESOURCE_ENTRY")public static class _MESSAGE_RESOURCE_ENTRY {

        /* package-private */ _MESSAGE_RESOURCE_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._MESSAGE_RESOURCE_ENTRY$struct$LAYOUT();
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$11._MESSAGE_RESOURCE_ENTRY$Length$VH();
        }
        public static  @C("WORD") short Length$get(@C("struct _MESSAGE_RESOURCE_ENTRY") MemorySegment seg) {
            return (short)winnt_h$constants$11._MESSAGE_RESOURCE_ENTRY$Length$VH().get(seg);
        }
        public static  @C("WORD") short Length$get(@C("struct _MESSAGE_RESOURCE_ENTRY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._MESSAGE_RESOURCE_ENTRY$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _MESSAGE_RESOURCE_ENTRY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._MESSAGE_RESOURCE_ENTRY$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _MESSAGE_RESOURCE_ENTRY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._MESSAGE_RESOURCE_ENTRY$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$11._MESSAGE_RESOURCE_ENTRY$Flags$VH();
        }
        public static  @C("WORD") short Flags$get(@C("struct _MESSAGE_RESOURCE_ENTRY") MemorySegment seg) {
            return (short)winnt_h$constants$11._MESSAGE_RESOURCE_ENTRY$Flags$VH().get(seg);
        }
        public static  @C("WORD") short Flags$get(@C("struct _MESSAGE_RESOURCE_ENTRY") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._MESSAGE_RESOURCE_ENTRY$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _MESSAGE_RESOURCE_ENTRY") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._MESSAGE_RESOURCE_ENTRY$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _MESSAGE_RESOURCE_ENTRY") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._MESSAGE_RESOURCE_ENTRY$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Text$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 1));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _MESSAGE_RESOURCE_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _MESSAGE_RESOURCE_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _MESSAGE_RESOURCE_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _MESSAGE_RESOURCE_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _MESSAGE_RESOURCE_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _MESSAGE_RESOURCE_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _MESSAGE_RESOURCE_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _MESSAGE_RESOURCE_ENTRY")public static class MESSAGE_RESOURCE_ENTRY extends _MESSAGE_RESOURCE_ENTRY {

        /* package-private */ MESSAGE_RESOURCE_ENTRY() {}
    }

    @C("struct _MESSAGE_RESOURCE_BLOCK")public static class _MESSAGE_RESOURCE_BLOCK {

        /* package-private */ _MESSAGE_RESOURCE_BLOCK() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$struct$LAYOUT();
        }
        public static VarHandle LowId$VH() {
            return winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$LowId$VH();
        }
        public static  @C("DWORD") int LowId$get(@C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment seg) {
            return (int)winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$LowId$VH().get(seg);
        }
        public static  @C("DWORD") int LowId$get(@C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$LowId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LowId$set(@C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$LowId$VH().set(seg, x);
        }
        public static void LowId$set(@C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$LowId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HighId$VH() {
            return winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$HighId$VH();
        }
        public static  @C("DWORD") int HighId$get(@C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment seg) {
            return (int)winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$HighId$VH().get(seg);
        }
        public static  @C("DWORD") int HighId$get(@C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$HighId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HighId$set(@C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$HighId$VH().set(seg, x);
        }
        public static void HighId$set(@C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$HighId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OffsetToEntries$VH() {
            return winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH();
        }
        public static  @C("DWORD") int OffsetToEntries$get(@C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment seg) {
            return (int)winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH().get(seg);
        }
        public static  @C("DWORD") int OffsetToEntries$get(@C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OffsetToEntries$set(@C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH().set(seg, x);
        }
        public static void OffsetToEntries$set(@C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _MESSAGE_RESOURCE_BLOCK[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _MESSAGE_RESOURCE_BLOCK[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _MESSAGE_RESOURCE_BLOCK*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _MESSAGE_RESOURCE_BLOCK*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _MESSAGE_RESOURCE_BLOCK") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _MESSAGE_RESOURCE_BLOCK")public static class MESSAGE_RESOURCE_BLOCK extends _MESSAGE_RESOURCE_BLOCK {

        /* package-private */ MESSAGE_RESOURCE_BLOCK() {}
    }

    @C("struct _MESSAGE_RESOURCE_DATA")public static class _MESSAGE_RESOURCE_DATA {

        /* package-private */ _MESSAGE_RESOURCE_DATA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._MESSAGE_RESOURCE_DATA$struct$LAYOUT();
        }
        public static VarHandle NumberOfBlocks$VH() {
            return winnt_h$constants$11._MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH();
        }
        public static  @C("DWORD") int NumberOfBlocks$get(@C("struct _MESSAGE_RESOURCE_DATA") MemorySegment seg) {
            return (int)winnt_h$constants$11._MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfBlocks$get(@C("struct _MESSAGE_RESOURCE_DATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfBlocks$set(@C("struct _MESSAGE_RESOURCE_DATA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH().set(seg, x);
        }
        public static void NumberOfBlocks$set(@C("struct _MESSAGE_RESOURCE_DATA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Blocks$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 12));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _MESSAGE_RESOURCE_DATA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _MESSAGE_RESOURCE_DATA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _MESSAGE_RESOURCE_DATA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _MESSAGE_RESOURCE_DATA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _MESSAGE_RESOURCE_DATA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _MESSAGE_RESOURCE_DATA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _MESSAGE_RESOURCE_DATA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _MESSAGE_RESOURCE_DATA")public static class MESSAGE_RESOURCE_DATA extends _MESSAGE_RESOURCE_DATA {

        /* package-private */ MESSAGE_RESOURCE_DATA() {}
    }

    @C("struct _OSVERSIONINFOA")public static class _OSVERSIONINFOA {

        /* package-private */ _OSVERSIONINFOA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._OSVERSIONINFOA$struct$LAYOUT();
        }
        public static VarHandle dwOSVersionInfoSize$VH() {
            return winnt_h$constants$11._OSVERSIONINFOA$dwOSVersionInfoSize$VH();
        }
        public static  @C("DWORD") int dwOSVersionInfoSize$get(@C("struct _OSVERSIONINFOA") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOA$dwOSVersionInfoSize$VH().get(seg);
        }
        public static  @C("DWORD") int dwOSVersionInfoSize$get(@C("struct _OSVERSIONINFOA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOA$dwOSVersionInfoSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwOSVersionInfoSize$set(@C("struct _OSVERSIONINFOA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOA$dwOSVersionInfoSize$VH().set(seg, x);
        }
        public static void dwOSVersionInfoSize$set(@C("struct _OSVERSIONINFOA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOA$dwOSVersionInfoSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMajorVersion$VH() {
            return winnt_h$constants$11._OSVERSIONINFOA$dwMajorVersion$VH();
        }
        public static  @C("DWORD") int dwMajorVersion$get(@C("struct _OSVERSIONINFOA") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOA$dwMajorVersion$VH().get(seg);
        }
        public static  @C("DWORD") int dwMajorVersion$get(@C("struct _OSVERSIONINFOA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOA$dwMajorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwMajorVersion$set(@C("struct _OSVERSIONINFOA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOA$dwMajorVersion$VH().set(seg, x);
        }
        public static void dwMajorVersion$set(@C("struct _OSVERSIONINFOA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOA$dwMajorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMinorVersion$VH() {
            return winnt_h$constants$11._OSVERSIONINFOA$dwMinorVersion$VH();
        }
        public static  @C("DWORD") int dwMinorVersion$get(@C("struct _OSVERSIONINFOA") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOA$dwMinorVersion$VH().get(seg);
        }
        public static  @C("DWORD") int dwMinorVersion$get(@C("struct _OSVERSIONINFOA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOA$dwMinorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwMinorVersion$set(@C("struct _OSVERSIONINFOA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOA$dwMinorVersion$VH().set(seg, x);
        }
        public static void dwMinorVersion$set(@C("struct _OSVERSIONINFOA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOA$dwMinorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwBuildNumber$VH() {
            return winnt_h$constants$11._OSVERSIONINFOA$dwBuildNumber$VH();
        }
        public static  @C("DWORD") int dwBuildNumber$get(@C("struct _OSVERSIONINFOA") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOA$dwBuildNumber$VH().get(seg);
        }
        public static  @C("DWORD") int dwBuildNumber$get(@C("struct _OSVERSIONINFOA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOA$dwBuildNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwBuildNumber$set(@C("struct _OSVERSIONINFOA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOA$dwBuildNumber$VH().set(seg, x);
        }
        public static void dwBuildNumber$set(@C("struct _OSVERSIONINFOA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOA$dwBuildNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwPlatformId$VH() {
            return winnt_h$constants$11._OSVERSIONINFOA$dwPlatformId$VH();
        }
        public static  @C("DWORD") int dwPlatformId$get(@C("struct _OSVERSIONINFOA") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOA$dwPlatformId$VH().get(seg);
        }
        public static  @C("DWORD") int dwPlatformId$get(@C("struct _OSVERSIONINFOA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOA$dwPlatformId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwPlatformId$set(@C("struct _OSVERSIONINFOA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOA$dwPlatformId$VH().set(seg, x);
        }
        public static void dwPlatformId$set(@C("struct _OSVERSIONINFOA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOA$dwPlatformId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment szCSDVersion$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 128));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _OSVERSIONINFOA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _OSVERSIONINFOA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _OSVERSIONINFOA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _OSVERSIONINFOA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _OSVERSIONINFOA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _OSVERSIONINFOA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _OSVERSIONINFOA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _OSVERSIONINFOA")public static class OSVERSIONINFOA extends _OSVERSIONINFOA {

        /* package-private */ OSVERSIONINFOA() {}
    }

    @C("struct _OSVERSIONINFOW")public static class _OSVERSIONINFOW {

        /* package-private */ _OSVERSIONINFOW() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._OSVERSIONINFOW$struct$LAYOUT();
        }
        public static VarHandle dwOSVersionInfoSize$VH() {
            return winnt_h$constants$11._OSVERSIONINFOW$dwOSVersionInfoSize$VH();
        }
        public static  @C("DWORD") int dwOSVersionInfoSize$get(@C("struct _OSVERSIONINFOW") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOW$dwOSVersionInfoSize$VH().get(seg);
        }
        public static  @C("DWORD") int dwOSVersionInfoSize$get(@C("struct _OSVERSIONINFOW") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOW$dwOSVersionInfoSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwOSVersionInfoSize$set(@C("struct _OSVERSIONINFOW") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOW$dwOSVersionInfoSize$VH().set(seg, x);
        }
        public static void dwOSVersionInfoSize$set(@C("struct _OSVERSIONINFOW") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOW$dwOSVersionInfoSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMajorVersion$VH() {
            return winnt_h$constants$11._OSVERSIONINFOW$dwMajorVersion$VH();
        }
        public static  @C("DWORD") int dwMajorVersion$get(@C("struct _OSVERSIONINFOW") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOW$dwMajorVersion$VH().get(seg);
        }
        public static  @C("DWORD") int dwMajorVersion$get(@C("struct _OSVERSIONINFOW") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOW$dwMajorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwMajorVersion$set(@C("struct _OSVERSIONINFOW") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOW$dwMajorVersion$VH().set(seg, x);
        }
        public static void dwMajorVersion$set(@C("struct _OSVERSIONINFOW") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOW$dwMajorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMinorVersion$VH() {
            return winnt_h$constants$11._OSVERSIONINFOW$dwMinorVersion$VH();
        }
        public static  @C("DWORD") int dwMinorVersion$get(@C("struct _OSVERSIONINFOW") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOW$dwMinorVersion$VH().get(seg);
        }
        public static  @C("DWORD") int dwMinorVersion$get(@C("struct _OSVERSIONINFOW") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOW$dwMinorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwMinorVersion$set(@C("struct _OSVERSIONINFOW") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOW$dwMinorVersion$VH().set(seg, x);
        }
        public static void dwMinorVersion$set(@C("struct _OSVERSIONINFOW") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOW$dwMinorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwBuildNumber$VH() {
            return winnt_h$constants$11._OSVERSIONINFOW$dwBuildNumber$VH();
        }
        public static  @C("DWORD") int dwBuildNumber$get(@C("struct _OSVERSIONINFOW") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOW$dwBuildNumber$VH().get(seg);
        }
        public static  @C("DWORD") int dwBuildNumber$get(@C("struct _OSVERSIONINFOW") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOW$dwBuildNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwBuildNumber$set(@C("struct _OSVERSIONINFOW") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOW$dwBuildNumber$VH().set(seg, x);
        }
        public static void dwBuildNumber$set(@C("struct _OSVERSIONINFOW") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOW$dwBuildNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwPlatformId$VH() {
            return winnt_h$constants$11._OSVERSIONINFOW$dwPlatformId$VH();
        }
        public static  @C("DWORD") int dwPlatformId$get(@C("struct _OSVERSIONINFOW") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOW$dwPlatformId$VH().get(seg);
        }
        public static  @C("DWORD") int dwPlatformId$get(@C("struct _OSVERSIONINFOW") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOW$dwPlatformId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwPlatformId$set(@C("struct _OSVERSIONINFOW") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOW$dwPlatformId$VH().set(seg, x);
        }
        public static void dwPlatformId$set(@C("struct _OSVERSIONINFOW") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOW$dwPlatformId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment szCSDVersion$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 256));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _OSVERSIONINFOW") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _OSVERSIONINFOW") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _OSVERSIONINFOW[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _OSVERSIONINFOW[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _OSVERSIONINFOW*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _OSVERSIONINFOW*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _OSVERSIONINFOW") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _OSVERSIONINFOW")public static class OSVERSIONINFOW extends _OSVERSIONINFOW {

        /* package-private */ OSVERSIONINFOW() {}
    }

    @C("struct _OSVERSIONINFOW")public static class RTL_OSVERSIONINFOW extends _OSVERSIONINFOW {

        /* package-private */ RTL_OSVERSIONINFOW() {}
    }

    @C("struct _OSVERSIONINFOA")public static class OSVERSIONINFO extends _OSVERSIONINFOA {

        /* package-private */ OSVERSIONINFO() {}
    }

    @C("struct _OSVERSIONINFOEXA")public static class _OSVERSIONINFOEXA {

        /* package-private */ _OSVERSIONINFOEXA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._OSVERSIONINFOEXA$struct$LAYOUT();
        }
        public static VarHandle dwOSVersionInfoSize$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXA$dwOSVersionInfoSize$VH();
        }
        public static  @C("DWORD") int dwOSVersionInfoSize$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXA$dwOSVersionInfoSize$VH().get(seg);
        }
        public static  @C("DWORD") int dwOSVersionInfoSize$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXA$dwOSVersionInfoSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwOSVersionInfoSize$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$dwOSVersionInfoSize$VH().set(seg, x);
        }
        public static void dwOSVersionInfoSize$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$dwOSVersionInfoSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMajorVersion$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXA$dwMajorVersion$VH();
        }
        public static  @C("DWORD") int dwMajorVersion$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXA$dwMajorVersion$VH().get(seg);
        }
        public static  @C("DWORD") int dwMajorVersion$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXA$dwMajorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwMajorVersion$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$dwMajorVersion$VH().set(seg, x);
        }
        public static void dwMajorVersion$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$dwMajorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMinorVersion$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXA$dwMinorVersion$VH();
        }
        public static  @C("DWORD") int dwMinorVersion$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXA$dwMinorVersion$VH().get(seg);
        }
        public static  @C("DWORD") int dwMinorVersion$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXA$dwMinorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwMinorVersion$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$dwMinorVersion$VH().set(seg, x);
        }
        public static void dwMinorVersion$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$dwMinorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwBuildNumber$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXA$dwBuildNumber$VH();
        }
        public static  @C("DWORD") int dwBuildNumber$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXA$dwBuildNumber$VH().get(seg);
        }
        public static  @C("DWORD") int dwBuildNumber$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXA$dwBuildNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwBuildNumber$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$dwBuildNumber$VH().set(seg, x);
        }
        public static void dwBuildNumber$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$dwBuildNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwPlatformId$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXA$dwPlatformId$VH();
        }
        public static  @C("DWORD") int dwPlatformId$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXA$dwPlatformId$VH().get(seg);
        }
        public static  @C("DWORD") int dwPlatformId$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXA$dwPlatformId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwPlatformId$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$dwPlatformId$VH().set(seg, x);
        }
        public static void dwPlatformId$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$dwPlatformId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment szCSDVersion$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 128));
        }
        public static VarHandle wServicePackMajor$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXA$wServicePackMajor$VH();
        }
        public static  @C("WORD") short wServicePackMajor$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg) {
            return (short)winnt_h$constants$11._OSVERSIONINFOEXA$wServicePackMajor$VH().get(seg);
        }
        public static  @C("WORD") short wServicePackMajor$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._OSVERSIONINFOEXA$wServicePackMajor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wServicePackMajor$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$wServicePackMajor$VH().set(seg, x);
        }
        public static void wServicePackMajor$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$wServicePackMajor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wServicePackMinor$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXA$wServicePackMinor$VH();
        }
        public static  @C("WORD") short wServicePackMinor$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg) {
            return (short)winnt_h$constants$11._OSVERSIONINFOEXA$wServicePackMinor$VH().get(seg);
        }
        public static  @C("WORD") short wServicePackMinor$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._OSVERSIONINFOEXA$wServicePackMinor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wServicePackMinor$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$wServicePackMinor$VH().set(seg, x);
        }
        public static void wServicePackMinor$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$wServicePackMinor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wSuiteMask$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXA$wSuiteMask$VH();
        }
        public static  @C("WORD") short wSuiteMask$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg) {
            return (short)winnt_h$constants$11._OSVERSIONINFOEXA$wSuiteMask$VH().get(seg);
        }
        public static  @C("WORD") short wSuiteMask$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._OSVERSIONINFOEXA$wSuiteMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wSuiteMask$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$wSuiteMask$VH().set(seg, x);
        }
        public static void wSuiteMask$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$wSuiteMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wProductType$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXA$wProductType$VH();
        }
        public static  @C("BYTE") byte wProductType$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg) {
            return (byte)winnt_h$constants$11._OSVERSIONINFOEXA$wProductType$VH().get(seg);
        }
        public static  @C("BYTE") byte wProductType$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$11._OSVERSIONINFOEXA$wProductType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wProductType$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$wProductType$VH().set(seg, x);
        }
        public static void wProductType$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$wProductType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wReserved$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXA$wReserved$VH();
        }
        public static  @C("BYTE") byte wReserved$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg) {
            return (byte)winnt_h$constants$11._OSVERSIONINFOEXA$wReserved$VH().get(seg);
        }
        public static  @C("BYTE") byte wReserved$get(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$11._OSVERSIONINFOEXA$wReserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wReserved$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$wReserved$VH().set(seg, x);
        }
        public static void wReserved$set(@C("struct _OSVERSIONINFOEXA") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$11._OSVERSIONINFOEXA$wReserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _OSVERSIONINFOEXA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _OSVERSIONINFOEXA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _OSVERSIONINFOEXA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _OSVERSIONINFOEXA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _OSVERSIONINFOEXA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _OSVERSIONINFOEXA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _OSVERSIONINFOEXA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _OSVERSIONINFOEXA")public static class OSVERSIONINFOEXA extends _OSVERSIONINFOEXA {

        /* package-private */ OSVERSIONINFOEXA() {}
    }

    @C("struct _OSVERSIONINFOEXW")public static class _OSVERSIONINFOEXW {

        /* package-private */ _OSVERSIONINFOEXW() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._OSVERSIONINFOEXW$struct$LAYOUT();
        }
        public static VarHandle dwOSVersionInfoSize$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXW$dwOSVersionInfoSize$VH();
        }
        public static  @C("DWORD") int dwOSVersionInfoSize$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXW$dwOSVersionInfoSize$VH().get(seg);
        }
        public static  @C("DWORD") int dwOSVersionInfoSize$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXW$dwOSVersionInfoSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwOSVersionInfoSize$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$dwOSVersionInfoSize$VH().set(seg, x);
        }
        public static void dwOSVersionInfoSize$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$dwOSVersionInfoSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMajorVersion$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXW$dwMajorVersion$VH();
        }
        public static  @C("DWORD") int dwMajorVersion$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXW$dwMajorVersion$VH().get(seg);
        }
        public static  @C("DWORD") int dwMajorVersion$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXW$dwMajorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwMajorVersion$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$dwMajorVersion$VH().set(seg, x);
        }
        public static void dwMajorVersion$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$dwMajorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwMinorVersion$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXW$dwMinorVersion$VH();
        }
        public static  @C("DWORD") int dwMinorVersion$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXW$dwMinorVersion$VH().get(seg);
        }
        public static  @C("DWORD") int dwMinorVersion$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXW$dwMinorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwMinorVersion$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$dwMinorVersion$VH().set(seg, x);
        }
        public static void dwMinorVersion$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$dwMinorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwBuildNumber$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXW$dwBuildNumber$VH();
        }
        public static  @C("DWORD") int dwBuildNumber$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXW$dwBuildNumber$VH().get(seg);
        }
        public static  @C("DWORD") int dwBuildNumber$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXW$dwBuildNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwBuildNumber$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$dwBuildNumber$VH().set(seg, x);
        }
        public static void dwBuildNumber$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$dwBuildNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle dwPlatformId$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXW$dwPlatformId$VH();
        }
        public static  @C("DWORD") int dwPlatformId$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXW$dwPlatformId$VH().get(seg);
        }
        public static  @C("DWORD") int dwPlatformId$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._OSVERSIONINFOEXW$dwPlatformId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwPlatformId$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$dwPlatformId$VH().set(seg, x);
        }
        public static void dwPlatformId$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$dwPlatformId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment szCSDVersion$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 256));
        }
        public static VarHandle wServicePackMajor$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXW$wServicePackMajor$VH();
        }
        public static  @C("WORD") short wServicePackMajor$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg) {
            return (short)winnt_h$constants$11._OSVERSIONINFOEXW$wServicePackMajor$VH().get(seg);
        }
        public static  @C("WORD") short wServicePackMajor$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._OSVERSIONINFOEXW$wServicePackMajor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wServicePackMajor$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$wServicePackMajor$VH().set(seg, x);
        }
        public static void wServicePackMajor$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$wServicePackMajor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wServicePackMinor$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXW$wServicePackMinor$VH();
        }
        public static  @C("WORD") short wServicePackMinor$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg) {
            return (short)winnt_h$constants$11._OSVERSIONINFOEXW$wServicePackMinor$VH().get(seg);
        }
        public static  @C("WORD") short wServicePackMinor$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._OSVERSIONINFOEXW$wServicePackMinor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wServicePackMinor$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$wServicePackMinor$VH().set(seg, x);
        }
        public static void wServicePackMinor$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$wServicePackMinor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wSuiteMask$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXW$wSuiteMask$VH();
        }
        public static  @C("WORD") short wSuiteMask$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg) {
            return (short)winnt_h$constants$11._OSVERSIONINFOEXW$wSuiteMask$VH().get(seg);
        }
        public static  @C("WORD") short wSuiteMask$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index) {
            return (short)winnt_h$constants$11._OSVERSIONINFOEXW$wSuiteMask$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wSuiteMask$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$wSuiteMask$VH().set(seg, x);
        }
        public static void wSuiteMask$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$wSuiteMask$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wProductType$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXW$wProductType$VH();
        }
        public static  @C("BYTE") byte wProductType$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg) {
            return (byte)winnt_h$constants$11._OSVERSIONINFOEXW$wProductType$VH().get(seg);
        }
        public static  @C("BYTE") byte wProductType$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$11._OSVERSIONINFOEXW$wProductType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wProductType$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$wProductType$VH().set(seg, x);
        }
        public static void wProductType$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$wProductType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle wReserved$VH() {
            return winnt_h$constants$11._OSVERSIONINFOEXW$wReserved$VH();
        }
        public static  @C("BYTE") byte wReserved$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg) {
            return (byte)winnt_h$constants$11._OSVERSIONINFOEXW$wReserved$VH().get(seg);
        }
        public static  @C("BYTE") byte wReserved$get(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$11._OSVERSIONINFOEXW$wReserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void wReserved$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$wReserved$VH().set(seg, x);
        }
        public static void wReserved$set(@C("struct _OSVERSIONINFOEXW") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$11._OSVERSIONINFOEXW$wReserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _OSVERSIONINFOEXW") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _OSVERSIONINFOEXW") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _OSVERSIONINFOEXW[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _OSVERSIONINFOEXW[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _OSVERSIONINFOEXW*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _OSVERSIONINFOEXW*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _OSVERSIONINFOEXW") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _OSVERSIONINFOEXW")public static class OSVERSIONINFOEXW extends _OSVERSIONINFOEXW {

        /* package-private */ OSVERSIONINFOEXW() {}
    }

    @C("struct _OSVERSIONINFOEXW")public static class RTL_OSVERSIONINFOEXW extends _OSVERSIONINFOEXW {

        /* package-private */ RTL_OSVERSIONINFOEXW() {}
    }

    @C("struct _OSVERSIONINFOEXA")public static class OSVERSIONINFOEX extends _OSVERSIONINFOEXA {

        /* package-private */ OSVERSIONINFOEX() {}
    }

    @C("struct _NV_MEMORY_RANGE")public static class _NV_MEMORY_RANGE {

        /* package-private */ _NV_MEMORY_RANGE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._NV_MEMORY_RANGE$struct$LAYOUT();
        }
        public static VarHandle BaseAddress$VH() {
            return winnt_h$constants$11._NV_MEMORY_RANGE$BaseAddress$VH();
        }
        public static  @C("void*") MemoryAddress BaseAddress$get(@C("struct _NV_MEMORY_RANGE") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$11._NV_MEMORY_RANGE$BaseAddress$VH().get(seg);
        }
        public static  @C("void*") MemoryAddress BaseAddress$get(@C("struct _NV_MEMORY_RANGE") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$11._NV_MEMORY_RANGE$BaseAddress$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BaseAddress$set(@C("struct _NV_MEMORY_RANGE") MemorySegment seg, @C("void*") MemoryAddress x) {
            winnt_h$constants$11._NV_MEMORY_RANGE$BaseAddress$VH().set(seg, x);
        }
        public static void BaseAddress$set(@C("struct _NV_MEMORY_RANGE") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
            winnt_h$constants$11._NV_MEMORY_RANGE$BaseAddress$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$11._NV_MEMORY_RANGE$Length$VH();
        }
        public static  @C("SIZE_T") long Length$get(@C("struct _NV_MEMORY_RANGE") MemorySegment seg) {
            return (long)winnt_h$constants$11._NV_MEMORY_RANGE$Length$VH().get(seg);
        }
        public static  @C("SIZE_T") long Length$get(@C("struct _NV_MEMORY_RANGE") MemorySegment seg, long index) {
            return (long)winnt_h$constants$11._NV_MEMORY_RANGE$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _NV_MEMORY_RANGE") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$11._NV_MEMORY_RANGE$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _NV_MEMORY_RANGE") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$11._NV_MEMORY_RANGE$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _NV_MEMORY_RANGE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _NV_MEMORY_RANGE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _NV_MEMORY_RANGE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _NV_MEMORY_RANGE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _NV_MEMORY_RANGE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _NV_MEMORY_RANGE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _NV_MEMORY_RANGE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _NV_MEMORY_RANGE")public static class NV_MEMORY_RANGE extends _NV_MEMORY_RANGE {

        /* package-private */ NV_MEMORY_RANGE() {}
    }

    @C("struct CORRELATION_VECTOR")public static class CORRELATION_VECTOR {

        /* package-private */ CORRELATION_VECTOR() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11.CORRELATION_VECTOR$struct$LAYOUT();
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$11.CORRELATION_VECTOR$Version$VH();
        }
        public static  @C("CHAR") byte Version$get(@C("struct CORRELATION_VECTOR") MemorySegment seg) {
            return (byte)winnt_h$constants$11.CORRELATION_VECTOR$Version$VH().get(seg);
        }
        public static  @C("CHAR") byte Version$get(@C("struct CORRELATION_VECTOR") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$11.CORRELATION_VECTOR$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct CORRELATION_VECTOR") MemorySegment seg, @C("CHAR") byte x) {
            winnt_h$constants$11.CORRELATION_VECTOR$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct CORRELATION_VECTOR") MemorySegment seg, long index, @C("CHAR") byte x) {
            winnt_h$constants$11.CORRELATION_VECTOR$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Vector$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1, 129));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CORRELATION_VECTOR") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CORRELATION_VECTOR") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CORRELATION_VECTOR[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CORRELATION_VECTOR[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CORRELATION_VECTOR*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CORRELATION_VECTOR*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CORRELATION_VECTOR") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG")public static class _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {

        /* package-private */ _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$11._CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") MemorySegment seg) {
            return (int)winnt_h$constants$11._CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$11._CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$11._CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TriggerId$VH() {
            return winnt_h$constants$11._CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH();
        }
        public static  @C("PCWSTR") MemoryAddress TriggerId$get(@C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$11._CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress TriggerId$get(@C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$11._CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TriggerId$set(@C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$11._CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH().set(seg, x);
        }
        public static void TriggerId$set(@C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$11._CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG")public static class CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG extends _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {

        /* package-private */ CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG() {}
    }

    @C("struct _IMAGE_POLICY_ENTRY")public static class _IMAGE_POLICY_ENTRY {

        /* package-private */ _IMAGE_POLICY_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$11._IMAGE_POLICY_ENTRY$struct$LAYOUT();
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$11._IMAGE_POLICY_ENTRY$Type$VH();
        }
        public static  @C("IMAGE_POLICY_ENTRY_TYPE") int Type$get(@C("struct _IMAGE_POLICY_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_POLICY_ENTRY$Type$VH().get(seg);
        }
        public static  @C("IMAGE_POLICY_ENTRY_TYPE") int Type$get(@C("struct _IMAGE_POLICY_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_POLICY_ENTRY$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _IMAGE_POLICY_ENTRY") MemorySegment seg, @C("IMAGE_POLICY_ENTRY_TYPE") int x) {
            winnt_h$constants$11._IMAGE_POLICY_ENTRY$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _IMAGE_POLICY_ENTRY") MemorySegment seg, long index, @C("IMAGE_POLICY_ENTRY_TYPE") int x) {
            winnt_h$constants$11._IMAGE_POLICY_ENTRY$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PolicyId$VH() {
            return winnt_h$constants$11._IMAGE_POLICY_ENTRY$PolicyId$VH();
        }
        public static  @C("IMAGE_POLICY_ID") int PolicyId$get(@C("struct _IMAGE_POLICY_ENTRY") MemorySegment seg) {
            return (int)winnt_h$constants$11._IMAGE_POLICY_ENTRY$PolicyId$VH().get(seg);
        }
        public static  @C("IMAGE_POLICY_ID") int PolicyId$get(@C("struct _IMAGE_POLICY_ENTRY") MemorySegment seg, long index) {
            return (int)winnt_h$constants$11._IMAGE_POLICY_ENTRY$PolicyId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PolicyId$set(@C("struct _IMAGE_POLICY_ENTRY") MemorySegment seg, @C("IMAGE_POLICY_ID") int x) {
            winnt_h$constants$11._IMAGE_POLICY_ENTRY$PolicyId$VH().set(seg, x);
        }
        public static void PolicyId$set(@C("struct _IMAGE_POLICY_ENTRY") MemorySegment seg, long index, @C("IMAGE_POLICY_ID") int x) {
            winnt_h$constants$11._IMAGE_POLICY_ENTRY$PolicyId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("union ")public static class u {

            /* package-private */ u() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$union$LAYOUT();
            }
            public static VarHandle None$VH() {
                return winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$None$VH();
            }
            public static  @C("void*") MemoryAddress None$get(@C("union ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$None$VH().get(seg);
            }
            public static  @C("void*") MemoryAddress None$get(@C("union ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$None$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void None$set(@C("union ") MemorySegment seg, @C("void*") MemoryAddress x) {
                winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$None$VH().set(seg, x);
            }
            public static void None$set(@C("union ") MemorySegment seg, long index, @C("void*") MemoryAddress x) {
                winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$None$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle BoolValue$VH() {
                return winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$BoolValue$VH();
            }
            public static  @C("BOOLEAN") byte BoolValue$get(@C("union ") MemorySegment seg) {
                return (byte)winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$BoolValue$VH().get(seg);
            }
            public static  @C("BOOLEAN") byte BoolValue$get(@C("union ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$BoolValue$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void BoolValue$set(@C("union ") MemorySegment seg, @C("BOOLEAN") byte x) {
                winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$BoolValue$VH().set(seg, x);
            }
            public static void BoolValue$set(@C("union ") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
                winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$BoolValue$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Int8Value$VH() {
                return winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$Int8Value$VH();
            }
            public static  @C("INT8") byte Int8Value$get(@C("union ") MemorySegment seg) {
                return (byte)winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$Int8Value$VH().get(seg);
            }
            public static  @C("INT8") byte Int8Value$get(@C("union ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$Int8Value$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Int8Value$set(@C("union ") MemorySegment seg, @C("INT8") byte x) {
                winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$Int8Value$VH().set(seg, x);
            }
            public static void Int8Value$set(@C("union ") MemorySegment seg, long index, @C("INT8") byte x) {
                winnt_h$constants$11._IMAGE_POLICY_ENTRY$u$Int8Value$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle UInt8Value$VH() {
                return winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt8Value$VH();
            }
            public static  @C("UINT8") byte UInt8Value$get(@C("union ") MemorySegment seg) {
                return (byte)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt8Value$VH().get(seg);
            }
            public static  @C("UINT8") byte UInt8Value$get(@C("union ") MemorySegment seg, long index) {
                return (byte)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt8Value$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void UInt8Value$set(@C("union ") MemorySegment seg, @C("UINT8") byte x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt8Value$VH().set(seg, x);
            }
            public static void UInt8Value$set(@C("union ") MemorySegment seg, long index, @C("UINT8") byte x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt8Value$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Int16Value$VH() {
                return winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int16Value$VH();
            }
            public static  @C("INT16") short Int16Value$get(@C("union ") MemorySegment seg) {
                return (short)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int16Value$VH().get(seg);
            }
            public static  @C("INT16") short Int16Value$get(@C("union ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int16Value$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Int16Value$set(@C("union ") MemorySegment seg, @C("INT16") short x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int16Value$VH().set(seg, x);
            }
            public static void Int16Value$set(@C("union ") MemorySegment seg, long index, @C("INT16") short x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int16Value$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle UInt16Value$VH() {
                return winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt16Value$VH();
            }
            public static  @C("UINT16") short UInt16Value$get(@C("union ") MemorySegment seg) {
                return (short)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt16Value$VH().get(seg);
            }
            public static  @C("UINT16") short UInt16Value$get(@C("union ") MemorySegment seg, long index) {
                return (short)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt16Value$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void UInt16Value$set(@C("union ") MemorySegment seg, @C("UINT16") short x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt16Value$VH().set(seg, x);
            }
            public static void UInt16Value$set(@C("union ") MemorySegment seg, long index, @C("UINT16") short x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt16Value$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Int32Value$VH() {
                return winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int32Value$VH();
            }
            public static  @C("INT32") int Int32Value$get(@C("union ") MemorySegment seg) {
                return (int)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int32Value$VH().get(seg);
            }
            public static  @C("INT32") int Int32Value$get(@C("union ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int32Value$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Int32Value$set(@C("union ") MemorySegment seg, @C("INT32") int x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int32Value$VH().set(seg, x);
            }
            public static void Int32Value$set(@C("union ") MemorySegment seg, long index, @C("INT32") int x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int32Value$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle UInt32Value$VH() {
                return winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt32Value$VH();
            }
            public static  @C("UINT32") int UInt32Value$get(@C("union ") MemorySegment seg) {
                return (int)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt32Value$VH().get(seg);
            }
            public static  @C("UINT32") int UInt32Value$get(@C("union ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt32Value$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void UInt32Value$set(@C("union ") MemorySegment seg, @C("UINT32") int x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt32Value$VH().set(seg, x);
            }
            public static void UInt32Value$set(@C("union ") MemorySegment seg, long index, @C("UINT32") int x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt32Value$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Int64Value$VH() {
                return winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int64Value$VH();
            }
            public static  @C("INT64") long Int64Value$get(@C("union ") MemorySegment seg) {
                return (long)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int64Value$VH().get(seg);
            }
            public static  @C("INT64") long Int64Value$get(@C("union ") MemorySegment seg, long index) {
                return (long)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int64Value$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Int64Value$set(@C("union ") MemorySegment seg, @C("INT64") long x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int64Value$VH().set(seg, x);
            }
            public static void Int64Value$set(@C("union ") MemorySegment seg, long index, @C("INT64") long x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$Int64Value$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle UInt64Value$VH() {
                return winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt64Value$VH();
            }
            public static  @C("UINT64") long UInt64Value$get(@C("union ") MemorySegment seg) {
                return (long)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt64Value$VH().get(seg);
            }
            public static  @C("UINT64") long UInt64Value$get(@C("union ") MemorySegment seg, long index) {
                return (long)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt64Value$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void UInt64Value$set(@C("union ") MemorySegment seg, @C("UINT64") long x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt64Value$VH().set(seg, x);
            }
            public static void UInt64Value$set(@C("union ") MemorySegment seg, long index, @C("UINT64") long x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UInt64Value$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle AnsiStringValue$VH() {
                return winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$AnsiStringValue$VH();
            }
            public static  @C("PCSTR") MemoryAddress AnsiStringValue$get(@C("union ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$AnsiStringValue$VH().get(seg);
            }
            public static  @C("PCSTR") MemoryAddress AnsiStringValue$get(@C("union ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$AnsiStringValue$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void AnsiStringValue$set(@C("union ") MemorySegment seg, @C("PCSTR") MemoryAddress x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$AnsiStringValue$VH().set(seg, x);
            }
            public static void AnsiStringValue$set(@C("union ") MemorySegment seg, long index, @C("PCSTR") MemoryAddress x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$AnsiStringValue$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle UnicodeStringValue$VH() {
                return winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UnicodeStringValue$VH();
            }
            public static  @C("PCWSTR") MemoryAddress UnicodeStringValue$get(@C("union ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UnicodeStringValue$VH().get(seg);
            }
            public static  @C("PCWSTR") MemoryAddress UnicodeStringValue$get(@C("union ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UnicodeStringValue$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void UnicodeStringValue$set(@C("union ") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UnicodeStringValue$VH().set(seg, x);
            }
            public static void UnicodeStringValue$set(@C("union ") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
                winnt_h$constants$12._IMAGE_POLICY_ENTRY$u$UnicodeStringValue$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment u$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_POLICY_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_POLICY_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_POLICY_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_POLICY_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_POLICY_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_POLICY_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_POLICY_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_POLICY_ENTRY")public static class IMAGE_POLICY_ENTRY extends _IMAGE_POLICY_ENTRY {

        /* package-private */ IMAGE_POLICY_ENTRY() {}
    }

    @C("struct _IMAGE_POLICY_METADATA")public static class _IMAGE_POLICY_METADATA {

        /* package-private */ _IMAGE_POLICY_METADATA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._IMAGE_POLICY_METADATA$struct$LAYOUT();
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$12._IMAGE_POLICY_METADATA$Version$VH();
        }
        public static  @C("BYTE") byte Version$get(@C("struct _IMAGE_POLICY_METADATA") MemorySegment seg) {
            return (byte)winnt_h$constants$12._IMAGE_POLICY_METADATA$Version$VH().get(seg);
        }
        public static  @C("BYTE") byte Version$get(@C("struct _IMAGE_POLICY_METADATA") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._IMAGE_POLICY_METADATA$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _IMAGE_POLICY_METADATA") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$12._IMAGE_POLICY_METADATA$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _IMAGE_POLICY_METADATA") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$12._IMAGE_POLICY_METADATA$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Reserved0$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1, 7));
        }
        public static VarHandle ApplicationId$VH() {
            return winnt_h$constants$12._IMAGE_POLICY_METADATA$ApplicationId$VH();
        }
        public static  @C("ULONGLONG") long ApplicationId$get(@C("struct _IMAGE_POLICY_METADATA") MemorySegment seg) {
            return (long)winnt_h$constants$12._IMAGE_POLICY_METADATA$ApplicationId$VH().get(seg);
        }
        public static  @C("ULONGLONG") long ApplicationId$get(@C("struct _IMAGE_POLICY_METADATA") MemorySegment seg, long index) {
            return (long)winnt_h$constants$12._IMAGE_POLICY_METADATA$ApplicationId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ApplicationId$set(@C("struct _IMAGE_POLICY_METADATA") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$12._IMAGE_POLICY_METADATA$ApplicationId$VH().set(seg, x);
        }
        public static void ApplicationId$set(@C("struct _IMAGE_POLICY_METADATA") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$12._IMAGE_POLICY_METADATA$ApplicationId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _IMAGE_POLICY_METADATA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _IMAGE_POLICY_METADATA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _IMAGE_POLICY_METADATA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _IMAGE_POLICY_METADATA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _IMAGE_POLICY_METADATA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _IMAGE_POLICY_METADATA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _IMAGE_POLICY_METADATA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _IMAGE_POLICY_METADATA")public static class IMAGE_POLICY_METADATA extends _IMAGE_POLICY_METADATA {

        /* package-private */ IMAGE_POLICY_METADATA() {}
    }

    @C("struct _RTL_CRITICAL_SECTION_DEBUG")public static class _RTL_CRITICAL_SECTION_DEBUG {

        /* package-private */ _RTL_CRITICAL_SECTION_DEBUG() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT();
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$Type$VH();
        }
        public static  @C("WORD") short Type$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg) {
            return (short)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$Type$VH().get(seg);
        }
        public static  @C("WORD") short Type$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index) {
            return (short)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CreatorBackTraceIndex$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$VH();
        }
        public static  @C("WORD") short CreatorBackTraceIndex$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg) {
            return (short)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$VH().get(seg);
        }
        public static  @C("WORD") short CreatorBackTraceIndex$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index) {
            return (short)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CreatorBackTraceIndex$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$VH().set(seg, x);
        }
        public static void CreatorBackTraceIndex$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CriticalSection$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CriticalSection$VH();
        }
        public static  @C("struct _RTL_CRITICAL_SECTION*") MemoryAddress CriticalSection$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CriticalSection$VH().get(seg);
        }
        public static  @C("struct _RTL_CRITICAL_SECTION*") MemoryAddress CriticalSection$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CriticalSection$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CriticalSection$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, @C("struct _RTL_CRITICAL_SECTION*") MemoryAddress x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CriticalSection$VH().set(seg, x);
        }
        public static void CriticalSection$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index, @C("struct _RTL_CRITICAL_SECTION*") MemoryAddress x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CriticalSection$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ProcessLocksList$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 16));
        }
        public static VarHandle EntryCount$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$EntryCount$VH();
        }
        public static  @C("DWORD") int EntryCount$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg) {
            return (int)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$EntryCount$VH().get(seg);
        }
        public static  @C("DWORD") int EntryCount$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$EntryCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EntryCount$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$EntryCount$VH().set(seg, x);
        }
        public static void EntryCount$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$EntryCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ContentionCount$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$ContentionCount$VH();
        }
        public static  @C("DWORD") int ContentionCount$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg) {
            return (int)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$ContentionCount$VH().get(seg);
        }
        public static  @C("DWORD") int ContentionCount$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$ContentionCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ContentionCount$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$ContentionCount$VH().set(seg, x);
        }
        public static void ContentionCount$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$ContentionCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg) {
            return (int)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CreatorBackTraceIndexHigh$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$VH();
        }
        public static  @C("WORD") short CreatorBackTraceIndexHigh$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg) {
            return (short)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$VH().get(seg);
        }
        public static  @C("WORD") short CreatorBackTraceIndexHigh$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index) {
            return (short)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CreatorBackTraceIndexHigh$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$VH().set(seg, x);
        }
        public static void CreatorBackTraceIndexHigh$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SpareWORD$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$SpareWORD$VH();
        }
        public static  @C("WORD") short SpareWORD$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg) {
            return (short)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$SpareWORD$VH().get(seg);
        }
        public static  @C("WORD") short SpareWORD$get(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index) {
            return (short)winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$SpareWORD$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SpareWORD$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$SpareWORD$VH().set(seg, x);
        }
        public static void SpareWORD$set(@C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION_DEBUG$SpareWORD$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _RTL_CRITICAL_SECTION_DEBUG[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _RTL_CRITICAL_SECTION_DEBUG[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _RTL_CRITICAL_SECTION_DEBUG*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _RTL_CRITICAL_SECTION_DEBUG*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _RTL_CRITICAL_SECTION_DEBUG") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _RTL_CRITICAL_SECTION_DEBUG")public static class RTL_CRITICAL_SECTION_DEBUG extends _RTL_CRITICAL_SECTION_DEBUG {

        /* package-private */ RTL_CRITICAL_SECTION_DEBUG() {}
    }

    @C("struct _RTL_CRITICAL_SECTION_DEBUG")public static class RTL_RESOURCE_DEBUG extends _RTL_CRITICAL_SECTION_DEBUG {

        /* package-private */ RTL_RESOURCE_DEBUG() {}
    }

    @C("struct _RTL_CRITICAL_SECTION")public static class _RTL_CRITICAL_SECTION {

        /* package-private */ _RTL_CRITICAL_SECTION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION$struct$LAYOUT();
        }
        public static VarHandle DebugInfo$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION$DebugInfo$VH();
        }
        public static  @C("PRTL_CRITICAL_SECTION_DEBUG") MemoryAddress DebugInfo$get(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RTL_CRITICAL_SECTION$DebugInfo$VH().get(seg);
        }
        public static  @C("PRTL_CRITICAL_SECTION_DEBUG") MemoryAddress DebugInfo$get(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RTL_CRITICAL_SECTION$DebugInfo$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DebugInfo$set(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, @C("PRTL_CRITICAL_SECTION_DEBUG") MemoryAddress x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION$DebugInfo$VH().set(seg, x);
        }
        public static void DebugInfo$set(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, long index, @C("PRTL_CRITICAL_SECTION_DEBUG") MemoryAddress x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION$DebugInfo$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LockCount$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION$LockCount$VH();
        }
        public static  @C("LONG") int LockCount$get(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg) {
            return (int)winnt_h$constants$12._RTL_CRITICAL_SECTION$LockCount$VH().get(seg);
        }
        public static  @C("LONG") int LockCount$get(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._RTL_CRITICAL_SECTION$LockCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LockCount$set(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, @C("LONG") int x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION$LockCount$VH().set(seg, x);
        }
        public static void LockCount$set(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, long index, @C("LONG") int x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION$LockCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RecursionCount$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION$RecursionCount$VH();
        }
        public static  @C("LONG") int RecursionCount$get(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg) {
            return (int)winnt_h$constants$12._RTL_CRITICAL_SECTION$RecursionCount$VH().get(seg);
        }
        public static  @C("LONG") int RecursionCount$get(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._RTL_CRITICAL_SECTION$RecursionCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RecursionCount$set(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, @C("LONG") int x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION$RecursionCount$VH().set(seg, x);
        }
        public static void RecursionCount$set(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, long index, @C("LONG") int x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION$RecursionCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle OwningThread$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION$OwningThread$VH();
        }
        public static  @C("HANDLE") MemoryAddress OwningThread$get(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RTL_CRITICAL_SECTION$OwningThread$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress OwningThread$get(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RTL_CRITICAL_SECTION$OwningThread$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void OwningThread$set(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION$OwningThread$VH().set(seg, x);
        }
        public static void OwningThread$set(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION$OwningThread$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle LockSemaphore$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION$LockSemaphore$VH();
        }
        public static  @C("HANDLE") MemoryAddress LockSemaphore$get(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RTL_CRITICAL_SECTION$LockSemaphore$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress LockSemaphore$get(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RTL_CRITICAL_SECTION$LockSemaphore$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LockSemaphore$set(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION$LockSemaphore$VH().set(seg, x);
        }
        public static void LockSemaphore$set(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION$LockSemaphore$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SpinCount$VH() {
            return winnt_h$constants$12._RTL_CRITICAL_SECTION$SpinCount$VH();
        }
        public static  @C("ULONG_PTR") long SpinCount$get(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg) {
            return (long)winnt_h$constants$12._RTL_CRITICAL_SECTION$SpinCount$VH().get(seg);
        }
        public static  @C("ULONG_PTR") long SpinCount$get(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$12._RTL_CRITICAL_SECTION$SpinCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SpinCount$set(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, @C("ULONG_PTR") long x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION$SpinCount$VH().set(seg, x);
        }
        public static void SpinCount$set(@C("struct _RTL_CRITICAL_SECTION") MemorySegment seg, long index, @C("ULONG_PTR") long x) {
            winnt_h$constants$12._RTL_CRITICAL_SECTION$SpinCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _RTL_CRITICAL_SECTION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _RTL_CRITICAL_SECTION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _RTL_CRITICAL_SECTION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _RTL_CRITICAL_SECTION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _RTL_CRITICAL_SECTION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _RTL_CRITICAL_SECTION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _RTL_CRITICAL_SECTION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _RTL_CRITICAL_SECTION")public static class RTL_CRITICAL_SECTION extends _RTL_CRITICAL_SECTION {

        /* package-private */ RTL_CRITICAL_SECTION() {}
    }

    @C("struct _RTL_SRWLOCK")public static class _RTL_SRWLOCK {

        /* package-private */ _RTL_SRWLOCK() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._RTL_SRWLOCK$struct$LAYOUT();
        }
        public static VarHandle Ptr$VH() {
            return winnt_h$constants$12._RTL_SRWLOCK$Ptr$VH();
        }
        public static  @C("PVOID") MemoryAddress Ptr$get(@C("struct _RTL_SRWLOCK") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RTL_SRWLOCK$Ptr$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress Ptr$get(@C("struct _RTL_SRWLOCK") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RTL_SRWLOCK$Ptr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Ptr$set(@C("struct _RTL_SRWLOCK") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$12._RTL_SRWLOCK$Ptr$VH().set(seg, x);
        }
        public static void Ptr$set(@C("struct _RTL_SRWLOCK") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$12._RTL_SRWLOCK$Ptr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _RTL_SRWLOCK") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _RTL_SRWLOCK") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _RTL_SRWLOCK[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _RTL_SRWLOCK[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _RTL_SRWLOCK*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _RTL_SRWLOCK*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _RTL_SRWLOCK") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _RTL_SRWLOCK")public static class RTL_SRWLOCK extends _RTL_SRWLOCK {

        /* package-private */ RTL_SRWLOCK() {}
    }

    @C("struct _RTL_CONDITION_VARIABLE")public static class _RTL_CONDITION_VARIABLE {

        /* package-private */ _RTL_CONDITION_VARIABLE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._RTL_CONDITION_VARIABLE$struct$LAYOUT();
        }
        public static VarHandle Ptr$VH() {
            return winnt_h$constants$12._RTL_CONDITION_VARIABLE$Ptr$VH();
        }
        public static  @C("PVOID") MemoryAddress Ptr$get(@C("struct _RTL_CONDITION_VARIABLE") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RTL_CONDITION_VARIABLE$Ptr$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress Ptr$get(@C("struct _RTL_CONDITION_VARIABLE") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RTL_CONDITION_VARIABLE$Ptr$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Ptr$set(@C("struct _RTL_CONDITION_VARIABLE") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$12._RTL_CONDITION_VARIABLE$Ptr$VH().set(seg, x);
        }
        public static void Ptr$set(@C("struct _RTL_CONDITION_VARIABLE") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$12._RTL_CONDITION_VARIABLE$Ptr$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _RTL_CONDITION_VARIABLE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _RTL_CONDITION_VARIABLE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _RTL_CONDITION_VARIABLE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _RTL_CONDITION_VARIABLE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _RTL_CONDITION_VARIABLE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _RTL_CONDITION_VARIABLE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _RTL_CONDITION_VARIABLE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _RTL_CONDITION_VARIABLE")public static class RTL_CONDITION_VARIABLE extends _RTL_CONDITION_VARIABLE {

        /* package-private */ RTL_CONDITION_VARIABLE() {}
    }

    @C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION")public static class _HEAP_OPTIMIZE_RESOURCES_INFORMATION {

        /* package-private */ _HEAP_OPTIMIZE_RESOURCES_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._HEAP_OPTIMIZE_RESOURCES_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$12._HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$VH();
        }
        public static  @C("DWORD") int Version$get(@C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$VH().get(seg);
        }
        public static  @C("DWORD") int Version$get(@C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return winnt_h$constants$12._HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$VH();
        }
        public static  @C("DWORD") int Flags$get(@C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$VH().get(seg);
        }
        public static  @C("DWORD") int Flags$get(@C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION")public static class HEAP_OPTIMIZE_RESOURCES_INFORMATION extends _HEAP_OPTIMIZE_RESOURCES_INFORMATION {

        /* package-private */ HEAP_OPTIMIZE_RESOURCES_INFORMATION() {}
    }

    @C("struct _ACTIVATION_CONTEXT_QUERY_INDEX")public static class _ACTIVATION_CONTEXT_QUERY_INDEX {

        /* package-private */ _ACTIVATION_CONTEXT_QUERY_INDEX() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_QUERY_INDEX$struct$LAYOUT();
        }
        public static VarHandle ulAssemblyIndex$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$VH();
        }
        public static  @C("DWORD") int ulAssemblyIndex$get(@C("struct _ACTIVATION_CONTEXT_QUERY_INDEX") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$VH().get(seg);
        }
        public static  @C("DWORD") int ulAssemblyIndex$get(@C("struct _ACTIVATION_CONTEXT_QUERY_INDEX") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulAssemblyIndex$set(@C("struct _ACTIVATION_CONTEXT_QUERY_INDEX") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$VH().set(seg, x);
        }
        public static void ulAssemblyIndex$set(@C("struct _ACTIVATION_CONTEXT_QUERY_INDEX") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulFileIndexInAssembly$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$VH();
        }
        public static  @C("DWORD") int ulFileIndexInAssembly$get(@C("struct _ACTIVATION_CONTEXT_QUERY_INDEX") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$VH().get(seg);
        }
        public static  @C("DWORD") int ulFileIndexInAssembly$get(@C("struct _ACTIVATION_CONTEXT_QUERY_INDEX") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulFileIndexInAssembly$set(@C("struct _ACTIVATION_CONTEXT_QUERY_INDEX") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$VH().set(seg, x);
        }
        public static void ulFileIndexInAssembly$set(@C("struct _ACTIVATION_CONTEXT_QUERY_INDEX") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACTIVATION_CONTEXT_QUERY_INDEX") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACTIVATION_CONTEXT_QUERY_INDEX") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACTIVATION_CONTEXT_QUERY_INDEX[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACTIVATION_CONTEXT_QUERY_INDEX[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACTIVATION_CONTEXT_QUERY_INDEX*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACTIVATION_CONTEXT_QUERY_INDEX*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACTIVATION_CONTEXT_QUERY_INDEX") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACTIVATION_CONTEXT_QUERY_INDEX")public static class ACTIVATION_CONTEXT_QUERY_INDEX extends _ACTIVATION_CONTEXT_QUERY_INDEX {

        /* package-private */ ACTIVATION_CONTEXT_QUERY_INDEX() {}
    }

    @C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION")public static class _ASSEMBLY_FILE_DETAILED_INFORMATION {

        /* package-private */ _ASSEMBLY_FILE_DETAILED_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle ulFlags$VH() {
            return winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$VH();
        }
        public static  @C("DWORD") int ulFlags$get(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ulFlags$get(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulFlags$set(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$VH().set(seg, x);
        }
        public static void ulFlags$set(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulFilenameLength$VH() {
            return winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$VH();
        }
        public static  @C("DWORD") int ulFilenameLength$get(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$VH().get(seg);
        }
        public static  @C("DWORD") int ulFilenameLength$get(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulFilenameLength$set(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$VH().set(seg, x);
        }
        public static void ulFilenameLength$set(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulPathLength$VH() {
            return winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$VH();
        }
        public static  @C("DWORD") int ulPathLength$get(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$VH().get(seg);
        }
        public static  @C("DWORD") int ulPathLength$get(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulPathLength$set(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$VH().set(seg, x);
        }
        public static void ulPathLength$set(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpFileName$VH() {
            return winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$VH();
        }
        public static  @C("PCWSTR") MemoryAddress lpFileName$get(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress lpFileName$get(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpFileName$set(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$VH().set(seg, x);
        }
        public static void lpFileName$set(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpFilePath$VH() {
            return winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$VH();
        }
        public static  @C("PCWSTR") MemoryAddress lpFilePath$get(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress lpFilePath$get(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpFilePath$set(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$VH().set(seg, x);
        }
        public static void lpFilePath$set(@C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ASSEMBLY_FILE_DETAILED_INFORMATION")public static class ASSEMBLY_FILE_DETAILED_INFORMATION extends _ASSEMBLY_FILE_DETAILED_INFORMATION {

        /* package-private */ ASSEMBLY_FILE_DETAILED_INFORMATION() {}
    }

    @C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION")public static class _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {

        /* package-private */ _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle ulFlags$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$VH();
        }
        public static  @C("DWORD") int ulFlags$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ulFlags$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulFlags$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$VH().set(seg, x);
        }
        public static void ulFlags$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulEncodedAssemblyIdentityLength$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$VH();
        }
        public static  @C("DWORD") int ulEncodedAssemblyIdentityLength$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$VH().get(seg);
        }
        public static  @C("DWORD") int ulEncodedAssemblyIdentityLength$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulEncodedAssemblyIdentityLength$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$VH().set(seg, x);
        }
        public static void ulEncodedAssemblyIdentityLength$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulManifestPathType$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$VH();
        }
        public static  @C("DWORD") int ulManifestPathType$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$VH().get(seg);
        }
        public static  @C("DWORD") int ulManifestPathType$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulManifestPathType$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$VH().set(seg, x);
        }
        public static void ulManifestPathType$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulManifestPathLength$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$VH();
        }
        public static  @C("DWORD") int ulManifestPathLength$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$VH().get(seg);
        }
        public static  @C("DWORD") int ulManifestPathLength$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulManifestPathLength$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$VH().set(seg, x);
        }
        public static void ulManifestPathLength$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment liManifestLastWriteTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static VarHandle ulPolicyPathType$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$VH();
        }
        public static  @C("DWORD") int ulPolicyPathType$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$VH().get(seg);
        }
        public static  @C("DWORD") int ulPolicyPathType$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulPolicyPathType$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$VH().set(seg, x);
        }
        public static void ulPolicyPathType$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulPolicyPathLength$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$VH();
        }
        public static  @C("DWORD") int ulPolicyPathLength$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$VH().get(seg);
        }
        public static  @C("DWORD") int ulPolicyPathLength$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulPolicyPathLength$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$VH().set(seg, x);
        }
        public static void ulPolicyPathLength$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment liPolicyLastWriteTime$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
        }
        public static VarHandle ulMetadataSatelliteRosterIndex$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$VH();
        }
        public static  @C("DWORD") int ulMetadataSatelliteRosterIndex$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$VH().get(seg);
        }
        public static  @C("DWORD") int ulMetadataSatelliteRosterIndex$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulMetadataSatelliteRosterIndex$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$VH().set(seg, x);
        }
        public static void ulMetadataSatelliteRosterIndex$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulManifestVersionMajor$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$VH();
        }
        public static  @C("DWORD") int ulManifestVersionMajor$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$VH().get(seg);
        }
        public static  @C("DWORD") int ulManifestVersionMajor$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulManifestVersionMajor$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$VH().set(seg, x);
        }
        public static void ulManifestVersionMajor$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulManifestVersionMinor$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$VH();
        }
        public static  @C("DWORD") int ulManifestVersionMinor$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$VH().get(seg);
        }
        public static  @C("DWORD") int ulManifestVersionMinor$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulManifestVersionMinor$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$VH().set(seg, x);
        }
        public static void ulManifestVersionMinor$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulPolicyVersionMajor$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$VH();
        }
        public static  @C("DWORD") int ulPolicyVersionMajor$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$VH().get(seg);
        }
        public static  @C("DWORD") int ulPolicyVersionMajor$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulPolicyVersionMajor$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$VH().set(seg, x);
        }
        public static void ulPolicyVersionMajor$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulPolicyVersionMinor$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$VH();
        }
        public static  @C("DWORD") int ulPolicyVersionMinor$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$VH().get(seg);
        }
        public static  @C("DWORD") int ulPolicyVersionMinor$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulPolicyVersionMinor$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$VH().set(seg, x);
        }
        public static void ulPolicyVersionMinor$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulAssemblyDirectoryNameLength$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$VH();
        }
        public static  @C("DWORD") int ulAssemblyDirectoryNameLength$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$VH().get(seg);
        }
        public static  @C("DWORD") int ulAssemblyDirectoryNameLength$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulAssemblyDirectoryNameLength$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$VH().set(seg, x);
        }
        public static void ulAssemblyDirectoryNameLength$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpAssemblyEncodedAssemblyIdentity$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$VH();
        }
        public static  @C("PCWSTR") MemoryAddress lpAssemblyEncodedAssemblyIdentity$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress lpAssemblyEncodedAssemblyIdentity$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpAssemblyEncodedAssemblyIdentity$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$VH().set(seg, x);
        }
        public static void lpAssemblyEncodedAssemblyIdentity$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpAssemblyManifestPath$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$VH();
        }
        public static  @C("PCWSTR") MemoryAddress lpAssemblyManifestPath$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress lpAssemblyManifestPath$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpAssemblyManifestPath$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$VH().set(seg, x);
        }
        public static void lpAssemblyManifestPath$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpAssemblyPolicyPath$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$VH();
        }
        public static  @C("PCWSTR") MemoryAddress lpAssemblyPolicyPath$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress lpAssemblyPolicyPath$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpAssemblyPolicyPath$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$VH().set(seg, x);
        }
        public static void lpAssemblyPolicyPath$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpAssemblyDirectoryName$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$VH();
        }
        public static  @C("PCWSTR") MemoryAddress lpAssemblyDirectoryName$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress lpAssemblyDirectoryName$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpAssemblyDirectoryName$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$VH().set(seg, x);
        }
        public static void lpAssemblyDirectoryName$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulFileCount$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$VH();
        }
        public static  @C("DWORD") int ulFileCount$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$VH().get(seg);
        }
        public static  @C("DWORD") int ulFileCount$get(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulFileCount$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$VH().set(seg, x);
        }
        public static void ulFileCount$set(@C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION")public static class ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION extends _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {

        /* package-private */ ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION() {}
    }

    @C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION")public static class _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {

        /* package-private */ _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle ulFlags$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$VH();
        }
        public static  @C("DWORD") int ulFlags$get(@C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$VH().get(seg);
        }
        public static  @C("DWORD") int ulFlags$get(@C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulFlags$set(@C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$VH().set(seg, x);
        }
        public static void ulFlags$set(@C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RunLevel$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$VH();
        }
        public static  @C("ACTCTX_REQUESTED_RUN_LEVEL") int RunLevel$get(@C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$VH().get(seg);
        }
        public static  @C("ACTCTX_REQUESTED_RUN_LEVEL") int RunLevel$get(@C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RunLevel$set(@C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment seg, @C("ACTCTX_REQUESTED_RUN_LEVEL") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$VH().set(seg, x);
        }
        public static void RunLevel$set(@C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment seg, long index, @C("ACTCTX_REQUESTED_RUN_LEVEL") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle UiAccess$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$VH();
        }
        public static  @C("DWORD") int UiAccess$get(@C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$VH().get(seg);
        }
        public static  @C("DWORD") int UiAccess$get(@C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UiAccess$set(@C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$VH().set(seg, x);
        }
        public static void UiAccess$set(@C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION")public static class ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION extends _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {

        /* package-private */ ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION() {}
    }

    @C("struct _COMPATIBILITY_CONTEXT_ELEMENT")public static class _COMPATIBILITY_CONTEXT_ELEMENT {

        /* package-private */ _COMPATIBILITY_CONTEXT_ELEMENT() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._COMPATIBILITY_CONTEXT_ELEMENT$struct$LAYOUT();
        }
        public static MemorySegment Id$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$12._COMPATIBILITY_CONTEXT_ELEMENT$Type$VH();
        }
        public static  @C("ACTCTX_COMPATIBILITY_ELEMENT_TYPE") int Type$get(@C("struct _COMPATIBILITY_CONTEXT_ELEMENT") MemorySegment seg) {
            return (int)winnt_h$constants$12._COMPATIBILITY_CONTEXT_ELEMENT$Type$VH().get(seg);
        }
        public static  @C("ACTCTX_COMPATIBILITY_ELEMENT_TYPE") int Type$get(@C("struct _COMPATIBILITY_CONTEXT_ELEMENT") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._COMPATIBILITY_CONTEXT_ELEMENT$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _COMPATIBILITY_CONTEXT_ELEMENT") MemorySegment seg, @C("ACTCTX_COMPATIBILITY_ELEMENT_TYPE") int x) {
            winnt_h$constants$12._COMPATIBILITY_CONTEXT_ELEMENT$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _COMPATIBILITY_CONTEXT_ELEMENT") MemorySegment seg, long index, @C("ACTCTX_COMPATIBILITY_ELEMENT_TYPE") int x) {
            winnt_h$constants$12._COMPATIBILITY_CONTEXT_ELEMENT$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaxVersionTested$VH() {
            return winnt_h$constants$12._COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$VH();
        }
        public static  @C("ULONGLONG") long MaxVersionTested$get(@C("struct _COMPATIBILITY_CONTEXT_ELEMENT") MemorySegment seg) {
            return (long)winnt_h$constants$12._COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$VH().get(seg);
        }
        public static  @C("ULONGLONG") long MaxVersionTested$get(@C("struct _COMPATIBILITY_CONTEXT_ELEMENT") MemorySegment seg, long index) {
            return (long)winnt_h$constants$12._COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxVersionTested$set(@C("struct _COMPATIBILITY_CONTEXT_ELEMENT") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$12._COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$VH().set(seg, x);
        }
        public static void MaxVersionTested$set(@C("struct _COMPATIBILITY_CONTEXT_ELEMENT") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$12._COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _COMPATIBILITY_CONTEXT_ELEMENT") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _COMPATIBILITY_CONTEXT_ELEMENT") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _COMPATIBILITY_CONTEXT_ELEMENT[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _COMPATIBILITY_CONTEXT_ELEMENT[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _COMPATIBILITY_CONTEXT_ELEMENT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _COMPATIBILITY_CONTEXT_ELEMENT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _COMPATIBILITY_CONTEXT_ELEMENT") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _COMPATIBILITY_CONTEXT_ELEMENT")public static class COMPATIBILITY_CONTEXT_ELEMENT extends _COMPATIBILITY_CONTEXT_ELEMENT {

        /* package-private */ COMPATIBILITY_CONTEXT_ELEMENT() {}
    }

    @C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION")public static class _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {

        /* package-private */ _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle ElementCount$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$VH();
        }
        public static  @C("DWORD") int ElementCount$get(@C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$VH().get(seg);
        }
        public static  @C("DWORD") int ElementCount$get(@C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ElementCount$set(@C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$VH().set(seg, x);
        }
        public static void ElementCount$set(@C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION")public static class ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION extends _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {

        /* package-private */ ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION() {}
    }

    @C("struct _SUPPORTED_OS_INFO")public static class _SUPPORTED_OS_INFO {

        /* package-private */ _SUPPORTED_OS_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._SUPPORTED_OS_INFO$struct$LAYOUT();
        }
        public static VarHandle MajorVersion$VH() {
            return winnt_h$constants$12._SUPPORTED_OS_INFO$MajorVersion$VH();
        }
        public static  @C("WORD") short MajorVersion$get(@C("struct _SUPPORTED_OS_INFO") MemorySegment seg) {
            return (short)winnt_h$constants$12._SUPPORTED_OS_INFO$MajorVersion$VH().get(seg);
        }
        public static  @C("WORD") short MajorVersion$get(@C("struct _SUPPORTED_OS_INFO") MemorySegment seg, long index) {
            return (short)winnt_h$constants$12._SUPPORTED_OS_INFO$MajorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MajorVersion$set(@C("struct _SUPPORTED_OS_INFO") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$12._SUPPORTED_OS_INFO$MajorVersion$VH().set(seg, x);
        }
        public static void MajorVersion$set(@C("struct _SUPPORTED_OS_INFO") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$12._SUPPORTED_OS_INFO$MajorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinorVersion$VH() {
            return winnt_h$constants$12._SUPPORTED_OS_INFO$MinorVersion$VH();
        }
        public static  @C("WORD") short MinorVersion$get(@C("struct _SUPPORTED_OS_INFO") MemorySegment seg) {
            return (short)winnt_h$constants$12._SUPPORTED_OS_INFO$MinorVersion$VH().get(seg);
        }
        public static  @C("WORD") short MinorVersion$get(@C("struct _SUPPORTED_OS_INFO") MemorySegment seg, long index) {
            return (short)winnt_h$constants$12._SUPPORTED_OS_INFO$MinorVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinorVersion$set(@C("struct _SUPPORTED_OS_INFO") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$12._SUPPORTED_OS_INFO$MinorVersion$VH().set(seg, x);
        }
        public static void MinorVersion$set(@C("struct _SUPPORTED_OS_INFO") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$12._SUPPORTED_OS_INFO$MinorVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _SUPPORTED_OS_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _SUPPORTED_OS_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _SUPPORTED_OS_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _SUPPORTED_OS_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _SUPPORTED_OS_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _SUPPORTED_OS_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _SUPPORTED_OS_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _SUPPORTED_OS_INFO")public static class SUPPORTED_OS_INFO extends _SUPPORTED_OS_INFO {

        /* package-private */ SUPPORTED_OS_INFO() {}
    }

    @C("struct _MAXVERSIONTESTED_INFO")public static class _MAXVERSIONTESTED_INFO {

        /* package-private */ _MAXVERSIONTESTED_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._MAXVERSIONTESTED_INFO$struct$LAYOUT();
        }
        public static VarHandle MaxVersionTested$VH() {
            return winnt_h$constants$12._MAXVERSIONTESTED_INFO$MaxVersionTested$VH();
        }
        public static  @C("ULONGLONG") long MaxVersionTested$get(@C("struct _MAXVERSIONTESTED_INFO") MemorySegment seg) {
            return (long)winnt_h$constants$12._MAXVERSIONTESTED_INFO$MaxVersionTested$VH().get(seg);
        }
        public static  @C("ULONGLONG") long MaxVersionTested$get(@C("struct _MAXVERSIONTESTED_INFO") MemorySegment seg, long index) {
            return (long)winnt_h$constants$12._MAXVERSIONTESTED_INFO$MaxVersionTested$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaxVersionTested$set(@C("struct _MAXVERSIONTESTED_INFO") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$12._MAXVERSIONTESTED_INFO$MaxVersionTested$VH().set(seg, x);
        }
        public static void MaxVersionTested$set(@C("struct _MAXVERSIONTESTED_INFO") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$12._MAXVERSIONTESTED_INFO$MaxVersionTested$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _MAXVERSIONTESTED_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _MAXVERSIONTESTED_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _MAXVERSIONTESTED_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _MAXVERSIONTESTED_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _MAXVERSIONTESTED_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _MAXVERSIONTESTED_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _MAXVERSIONTESTED_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _MAXVERSIONTESTED_INFO")public static class MAXVERSIONTESTED_INFO extends _MAXVERSIONTESTED_INFO {

        /* package-private */ MAXVERSIONTESTED_INFO() {}
    }

    @C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION")public static class _ACTIVATION_CONTEXT_DETAILED_INFORMATION {

        /* package-private */ _ACTIVATION_CONTEXT_DETAILED_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle dwFlags$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$VH();
        }
        public static  @C("DWORD") int dwFlags$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$VH().get(seg);
        }
        public static  @C("DWORD") int dwFlags$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void dwFlags$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$VH().set(seg, x);
        }
        public static void dwFlags$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulFormatVersion$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$VH();
        }
        public static  @C("DWORD") int ulFormatVersion$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$VH().get(seg);
        }
        public static  @C("DWORD") int ulFormatVersion$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulFormatVersion$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$VH().set(seg, x);
        }
        public static void ulFormatVersion$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulAssemblyCount$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$VH();
        }
        public static  @C("DWORD") int ulAssemblyCount$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$VH().get(seg);
        }
        public static  @C("DWORD") int ulAssemblyCount$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulAssemblyCount$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$VH().set(seg, x);
        }
        public static void ulAssemblyCount$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulRootManifestPathType$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$VH();
        }
        public static  @C("DWORD") int ulRootManifestPathType$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$VH().get(seg);
        }
        public static  @C("DWORD") int ulRootManifestPathType$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulRootManifestPathType$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$VH().set(seg, x);
        }
        public static void ulRootManifestPathType$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulRootManifestPathChars$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$VH();
        }
        public static  @C("DWORD") int ulRootManifestPathChars$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$VH().get(seg);
        }
        public static  @C("DWORD") int ulRootManifestPathChars$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulRootManifestPathChars$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$VH().set(seg, x);
        }
        public static void ulRootManifestPathChars$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulRootConfigurationPathType$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$VH();
        }
        public static  @C("DWORD") int ulRootConfigurationPathType$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$VH().get(seg);
        }
        public static  @C("DWORD") int ulRootConfigurationPathType$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulRootConfigurationPathType$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$VH().set(seg, x);
        }
        public static void ulRootConfigurationPathType$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulRootConfigurationPathChars$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$VH();
        }
        public static  @C("DWORD") int ulRootConfigurationPathChars$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$VH().get(seg);
        }
        public static  @C("DWORD") int ulRootConfigurationPathChars$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulRootConfigurationPathChars$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$VH().set(seg, x);
        }
        public static void ulRootConfigurationPathChars$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulAppDirPathType$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$VH();
        }
        public static  @C("DWORD") int ulAppDirPathType$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$VH().get(seg);
        }
        public static  @C("DWORD") int ulAppDirPathType$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulAppDirPathType$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$VH().set(seg, x);
        }
        public static void ulAppDirPathType$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulAppDirPathChars$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$VH();
        }
        public static  @C("DWORD") int ulAppDirPathChars$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$VH().get(seg);
        }
        public static  @C("DWORD") int ulAppDirPathChars$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulAppDirPathChars$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$VH().set(seg, x);
        }
        public static void ulAppDirPathChars$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpRootManifestPath$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$VH();
        }
        public static  @C("PCWSTR") MemoryAddress lpRootManifestPath$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress lpRootManifestPath$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpRootManifestPath$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$VH().set(seg, x);
        }
        public static void lpRootManifestPath$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpRootConfigurationPath$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$VH();
        }
        public static  @C("PCWSTR") MemoryAddress lpRootConfigurationPath$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress lpRootConfigurationPath$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpRootConfigurationPath$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$VH().set(seg, x);
        }
        public static void lpRootConfigurationPath$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle lpAppDirPath$VH() {
            return winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$VH();
        }
        public static  @C("PCWSTR") MemoryAddress lpAppDirPath$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress lpAppDirPath$get(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void lpAppDirPath$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$VH().set(seg, x);
        }
        public static void lpAppDirPath$set(@C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            winnt_h$constants$12._ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION")public static class ACTIVATION_CONTEXT_DETAILED_INFORMATION extends _ACTIVATION_CONTEXT_DETAILED_INFORMATION {

        /* package-private */ ACTIVATION_CONTEXT_DETAILED_INFORMATION() {}
    }

    @C("struct _HARDWARE_COUNTER_DATA")public static class _HARDWARE_COUNTER_DATA {

        /* package-private */ _HARDWARE_COUNTER_DATA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._HARDWARE_COUNTER_DATA$struct$LAYOUT();
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$12._HARDWARE_COUNTER_DATA$Type$VH();
        }
        public static  @C("HARDWARE_COUNTER_TYPE") int Type$get(@C("struct _HARDWARE_COUNTER_DATA") MemorySegment seg) {
            return (int)winnt_h$constants$12._HARDWARE_COUNTER_DATA$Type$VH().get(seg);
        }
        public static  @C("HARDWARE_COUNTER_TYPE") int Type$get(@C("struct _HARDWARE_COUNTER_DATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._HARDWARE_COUNTER_DATA$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _HARDWARE_COUNTER_DATA") MemorySegment seg, @C("HARDWARE_COUNTER_TYPE") int x) {
            winnt_h$constants$12._HARDWARE_COUNTER_DATA$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _HARDWARE_COUNTER_DATA") MemorySegment seg, long index, @C("HARDWARE_COUNTER_TYPE") int x) {
            winnt_h$constants$12._HARDWARE_COUNTER_DATA$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$12._HARDWARE_COUNTER_DATA$Reserved$VH();
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _HARDWARE_COUNTER_DATA") MemorySegment seg) {
            return (int)winnt_h$constants$12._HARDWARE_COUNTER_DATA$Reserved$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _HARDWARE_COUNTER_DATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._HARDWARE_COUNTER_DATA$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _HARDWARE_COUNTER_DATA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._HARDWARE_COUNTER_DATA$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _HARDWARE_COUNTER_DATA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._HARDWARE_COUNTER_DATA$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Value$VH() {
            return winnt_h$constants$12._HARDWARE_COUNTER_DATA$Value$VH();
        }
        public static  @C("DWORD64") long Value$get(@C("struct _HARDWARE_COUNTER_DATA") MemorySegment seg) {
            return (long)winnt_h$constants$12._HARDWARE_COUNTER_DATA$Value$VH().get(seg);
        }
        public static  @C("DWORD64") long Value$get(@C("struct _HARDWARE_COUNTER_DATA") MemorySegment seg, long index) {
            return (long)winnt_h$constants$12._HARDWARE_COUNTER_DATA$Value$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Value$set(@C("struct _HARDWARE_COUNTER_DATA") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$12._HARDWARE_COUNTER_DATA$Value$VH().set(seg, x);
        }
        public static void Value$set(@C("struct _HARDWARE_COUNTER_DATA") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$12._HARDWARE_COUNTER_DATA$Value$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _HARDWARE_COUNTER_DATA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _HARDWARE_COUNTER_DATA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _HARDWARE_COUNTER_DATA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _HARDWARE_COUNTER_DATA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _HARDWARE_COUNTER_DATA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _HARDWARE_COUNTER_DATA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _HARDWARE_COUNTER_DATA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _HARDWARE_COUNTER_DATA")public static class HARDWARE_COUNTER_DATA extends _HARDWARE_COUNTER_DATA {

        /* package-private */ HARDWARE_COUNTER_DATA() {}
    }

    @C("struct _PERFORMANCE_DATA")public static class _PERFORMANCE_DATA {

        /* package-private */ _PERFORMANCE_DATA() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._PERFORMANCE_DATA$struct$LAYOUT();
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$12._PERFORMANCE_DATA$Size$VH();
        }
        public static  @C("WORD") short Size$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg) {
            return (short)winnt_h$constants$12._PERFORMANCE_DATA$Size$VH().get(seg);
        }
        public static  @C("WORD") short Size$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index) {
            return (short)winnt_h$constants$12._PERFORMANCE_DATA$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$12._PERFORMANCE_DATA$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$12._PERFORMANCE_DATA$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$12._PERFORMANCE_DATA$Version$VH();
        }
        public static  @C("BYTE") byte Version$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg) {
            return (byte)winnt_h$constants$12._PERFORMANCE_DATA$Version$VH().get(seg);
        }
        public static  @C("BYTE") byte Version$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._PERFORMANCE_DATA$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$12._PERFORMANCE_DATA$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$12._PERFORMANCE_DATA$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HwCountersCount$VH() {
            return winnt_h$constants$12._PERFORMANCE_DATA$HwCountersCount$VH();
        }
        public static  @C("BYTE") byte HwCountersCount$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg) {
            return (byte)winnt_h$constants$12._PERFORMANCE_DATA$HwCountersCount$VH().get(seg);
        }
        public static  @C("BYTE") byte HwCountersCount$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._PERFORMANCE_DATA$HwCountersCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HwCountersCount$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, @C("BYTE") byte x) {
            winnt_h$constants$12._PERFORMANCE_DATA$HwCountersCount$VH().set(seg, x);
        }
        public static void HwCountersCount$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index, @C("BYTE") byte x) {
            winnt_h$constants$12._PERFORMANCE_DATA$HwCountersCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ContextSwitchCount$VH() {
            return winnt_h$constants$12._PERFORMANCE_DATA$ContextSwitchCount$VH();
        }
        public static  @C("DWORD") int ContextSwitchCount$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg) {
            return (int)winnt_h$constants$12._PERFORMANCE_DATA$ContextSwitchCount$VH().get(seg);
        }
        public static  @C("DWORD") int ContextSwitchCount$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._PERFORMANCE_DATA$ContextSwitchCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ContextSwitchCount$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._PERFORMANCE_DATA$ContextSwitchCount$VH().set(seg, x);
        }
        public static void ContextSwitchCount$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._PERFORMANCE_DATA$ContextSwitchCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle WaitReasonBitMap$VH() {
            return winnt_h$constants$12._PERFORMANCE_DATA$WaitReasonBitMap$VH();
        }
        public static  @C("DWORD64") long WaitReasonBitMap$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg) {
            return (long)winnt_h$constants$12._PERFORMANCE_DATA$WaitReasonBitMap$VH().get(seg);
        }
        public static  @C("DWORD64") long WaitReasonBitMap$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index) {
            return (long)winnt_h$constants$12._PERFORMANCE_DATA$WaitReasonBitMap$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void WaitReasonBitMap$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$12._PERFORMANCE_DATA$WaitReasonBitMap$VH().set(seg, x);
        }
        public static void WaitReasonBitMap$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$12._PERFORMANCE_DATA$WaitReasonBitMap$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CycleTime$VH() {
            return winnt_h$constants$12._PERFORMANCE_DATA$CycleTime$VH();
        }
        public static  @C("DWORD64") long CycleTime$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg) {
            return (long)winnt_h$constants$12._PERFORMANCE_DATA$CycleTime$VH().get(seg);
        }
        public static  @C("DWORD64") long CycleTime$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index) {
            return (long)winnt_h$constants$12._PERFORMANCE_DATA$CycleTime$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CycleTime$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, @C("DWORD64") long x) {
            winnt_h$constants$12._PERFORMANCE_DATA$CycleTime$VH().set(seg, x);
        }
        public static void CycleTime$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index, @C("DWORD64") long x) {
            winnt_h$constants$12._PERFORMANCE_DATA$CycleTime$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RetryCount$VH() {
            return winnt_h$constants$12._PERFORMANCE_DATA$RetryCount$VH();
        }
        public static  @C("DWORD") int RetryCount$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg) {
            return (int)winnt_h$constants$12._PERFORMANCE_DATA$RetryCount$VH().get(seg);
        }
        public static  @C("DWORD") int RetryCount$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._PERFORMANCE_DATA$RetryCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RetryCount$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._PERFORMANCE_DATA$RetryCount$VH().set(seg, x);
        }
        public static void RetryCount$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._PERFORMANCE_DATA$RetryCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$12._PERFORMANCE_DATA$Reserved$VH();
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg) {
            return (int)winnt_h$constants$12._PERFORMANCE_DATA$Reserved$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._PERFORMANCE_DATA$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._PERFORMANCE_DATA$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _PERFORMANCE_DATA") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._PERFORMANCE_DATA$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment HwCounters$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 256));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PERFORMANCE_DATA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PERFORMANCE_DATA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PERFORMANCE_DATA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PERFORMANCE_DATA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PERFORMANCE_DATA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PERFORMANCE_DATA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PERFORMANCE_DATA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PERFORMANCE_DATA")public static class PERFORMANCE_DATA extends _PERFORMANCE_DATA {

        /* package-private */ PERFORMANCE_DATA() {}
    }

    @C("struct _EVENTLOGRECORD")public static class _EVENTLOGRECORD {

        /* package-private */ _EVENTLOGRECORD() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._EVENTLOGRECORD$struct$LAYOUT();
        }
        public static VarHandle Length$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$Length$VH();
        }
        public static  @C("DWORD") int Length$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$Length$VH().get(seg);
        }
        public static  @C("DWORD") int Length$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$Length$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$Length$VH().set(seg, x);
        }
        public static void Length$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$Length$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Reserved$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$Reserved$VH();
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$Reserved$VH().get(seg);
        }
        public static  @C("DWORD") int Reserved$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$Reserved$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$Reserved$VH().set(seg, x);
        }
        public static void Reserved$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$Reserved$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RecordNumber$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$RecordNumber$VH();
        }
        public static  @C("DWORD") int RecordNumber$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$RecordNumber$VH().get(seg);
        }
        public static  @C("DWORD") int RecordNumber$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$RecordNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RecordNumber$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$RecordNumber$VH().set(seg, x);
        }
        public static void RecordNumber$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$RecordNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeGenerated$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$TimeGenerated$VH();
        }
        public static  @C("DWORD") int TimeGenerated$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$TimeGenerated$VH().get(seg);
        }
        public static  @C("DWORD") int TimeGenerated$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$TimeGenerated$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeGenerated$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$TimeGenerated$VH().set(seg, x);
        }
        public static void TimeGenerated$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$TimeGenerated$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle TimeWritten$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$TimeWritten$VH();
        }
        public static  @C("DWORD") int TimeWritten$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$TimeWritten$VH().get(seg);
        }
        public static  @C("DWORD") int TimeWritten$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$TimeWritten$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TimeWritten$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$TimeWritten$VH().set(seg, x);
        }
        public static void TimeWritten$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$TimeWritten$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EventID$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$EventID$VH();
        }
        public static  @C("DWORD") int EventID$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$EventID$VH().get(seg);
        }
        public static  @C("DWORD") int EventID$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$EventID$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EventID$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$EventID$VH().set(seg, x);
        }
        public static void EventID$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$EventID$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EventType$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$EventType$VH();
        }
        public static  @C("WORD") short EventType$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (short)winnt_h$constants$12._EVENTLOGRECORD$EventType$VH().get(seg);
        }
        public static  @C("WORD") short EventType$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (short)winnt_h$constants$12._EVENTLOGRECORD$EventType$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EventType$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$12._EVENTLOGRECORD$EventType$VH().set(seg, x);
        }
        public static void EventType$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$12._EVENTLOGRECORD$EventType$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NumStrings$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$NumStrings$VH();
        }
        public static  @C("WORD") short NumStrings$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (short)winnt_h$constants$12._EVENTLOGRECORD$NumStrings$VH().get(seg);
        }
        public static  @C("WORD") short NumStrings$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (short)winnt_h$constants$12._EVENTLOGRECORD$NumStrings$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumStrings$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$12._EVENTLOGRECORD$NumStrings$VH().set(seg, x);
        }
        public static void NumStrings$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$12._EVENTLOGRECORD$NumStrings$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EventCategory$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$EventCategory$VH();
        }
        public static  @C("WORD") short EventCategory$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (short)winnt_h$constants$12._EVENTLOGRECORD$EventCategory$VH().get(seg);
        }
        public static  @C("WORD") short EventCategory$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (short)winnt_h$constants$12._EVENTLOGRECORD$EventCategory$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EventCategory$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$12._EVENTLOGRECORD$EventCategory$VH().set(seg, x);
        }
        public static void EventCategory$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$12._EVENTLOGRECORD$EventCategory$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReservedFlags$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$ReservedFlags$VH();
        }
        public static  @C("WORD") short ReservedFlags$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (short)winnt_h$constants$12._EVENTLOGRECORD$ReservedFlags$VH().get(seg);
        }
        public static  @C("WORD") short ReservedFlags$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (short)winnt_h$constants$12._EVENTLOGRECORD$ReservedFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReservedFlags$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("WORD") short x) {
            winnt_h$constants$12._EVENTLOGRECORD$ReservedFlags$VH().set(seg, x);
        }
        public static void ReservedFlags$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("WORD") short x) {
            winnt_h$constants$12._EVENTLOGRECORD$ReservedFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ClosingRecordNumber$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$ClosingRecordNumber$VH();
        }
        public static  @C("DWORD") int ClosingRecordNumber$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$ClosingRecordNumber$VH().get(seg);
        }
        public static  @C("DWORD") int ClosingRecordNumber$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$ClosingRecordNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ClosingRecordNumber$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$ClosingRecordNumber$VH().set(seg, x);
        }
        public static void ClosingRecordNumber$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$ClosingRecordNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StringOffset$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$StringOffset$VH();
        }
        public static  @C("DWORD") int StringOffset$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$StringOffset$VH().get(seg);
        }
        public static  @C("DWORD") int StringOffset$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$StringOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StringOffset$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$StringOffset$VH().set(seg, x);
        }
        public static void StringOffset$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$StringOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle UserSidLength$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$UserSidLength$VH();
        }
        public static  @C("DWORD") int UserSidLength$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$UserSidLength$VH().get(seg);
        }
        public static  @C("DWORD") int UserSidLength$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$UserSidLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UserSidLength$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$UserSidLength$VH().set(seg, x);
        }
        public static void UserSidLength$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$UserSidLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle UserSidOffset$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$UserSidOffset$VH();
        }
        public static  @C("DWORD") int UserSidOffset$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$UserSidOffset$VH().get(seg);
        }
        public static  @C("DWORD") int UserSidOffset$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$UserSidOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void UserSidOffset$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$UserSidOffset$VH().set(seg, x);
        }
        public static void UserSidOffset$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$UserSidOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DataLength$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$DataLength$VH();
        }
        public static  @C("DWORD") int DataLength$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$DataLength$VH().get(seg);
        }
        public static  @C("DWORD") int DataLength$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$DataLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DataLength$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$DataLength$VH().set(seg, x);
        }
        public static void DataLength$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$DataLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DataOffset$VH() {
            return winnt_h$constants$12._EVENTLOGRECORD$DataOffset$VH();
        }
        public static  @C("DWORD") int DataOffset$get(@C("struct _EVENTLOGRECORD") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$DataOffset$VH().get(seg);
        }
        public static  @C("DWORD") int DataOffset$get(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTLOGRECORD$DataOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DataOffset$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$DataOffset$VH().set(seg, x);
        }
        public static void DataOffset$set(@C("struct _EVENTLOGRECORD") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTLOGRECORD$DataOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _EVENTLOGRECORD") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _EVENTLOGRECORD") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _EVENTLOGRECORD[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _EVENTLOGRECORD[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _EVENTLOGRECORD*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _EVENTLOGRECORD*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _EVENTLOGRECORD") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _EVENTLOGRECORD")public static class EVENTLOGRECORD extends _EVENTLOGRECORD {

        /* package-private */ EVENTLOGRECORD() {}
    }

    @C("struct _EVENTSFORLOGFILE")public static class _EVENTSFORLOGFILE {

        /* package-private */ _EVENTSFORLOGFILE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._EVENTSFORLOGFILE$struct$LAYOUT();
        }
        public static VarHandle ulSize$VH() {
            return winnt_h$constants$12._EVENTSFORLOGFILE$ulSize$VH();
        }
        public static  @C("DWORD") int ulSize$get(@C("struct _EVENTSFORLOGFILE") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTSFORLOGFILE$ulSize$VH().get(seg);
        }
        public static  @C("DWORD") int ulSize$get(@C("struct _EVENTSFORLOGFILE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTSFORLOGFILE$ulSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulSize$set(@C("struct _EVENTSFORLOGFILE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTSFORLOGFILE$ulSize$VH().set(seg, x);
        }
        public static void ulSize$set(@C("struct _EVENTSFORLOGFILE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTSFORLOGFILE$ulSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment szLogicalLogFile$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 512));
        }
        public static VarHandle ulNumRecords$VH() {
            return winnt_h$constants$12._EVENTSFORLOGFILE$ulNumRecords$VH();
        }
        public static  @C("DWORD") int ulNumRecords$get(@C("struct _EVENTSFORLOGFILE") MemorySegment seg) {
            return (int)winnt_h$constants$12._EVENTSFORLOGFILE$ulNumRecords$VH().get(seg);
        }
        public static  @C("DWORD") int ulNumRecords$get(@C("struct _EVENTSFORLOGFILE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._EVENTSFORLOGFILE$ulNumRecords$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulNumRecords$set(@C("struct _EVENTSFORLOGFILE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTSFORLOGFILE$ulNumRecords$VH().set(seg, x);
        }
        public static void ulNumRecords$set(@C("struct _EVENTSFORLOGFILE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._EVENTSFORLOGFILE$ulNumRecords$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _EVENTSFORLOGFILE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _EVENTSFORLOGFILE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _EVENTSFORLOGFILE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _EVENTSFORLOGFILE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _EVENTSFORLOGFILE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _EVENTSFORLOGFILE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _EVENTSFORLOGFILE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _PACKEDEVENTINFO")public static class _PACKEDEVENTINFO {

        /* package-private */ _PACKEDEVENTINFO() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._PACKEDEVENTINFO$struct$LAYOUT();
        }
        public static VarHandle ulSize$VH() {
            return winnt_h$constants$12._PACKEDEVENTINFO$ulSize$VH();
        }
        public static  @C("DWORD") int ulSize$get(@C("struct _PACKEDEVENTINFO") MemorySegment seg) {
            return (int)winnt_h$constants$12._PACKEDEVENTINFO$ulSize$VH().get(seg);
        }
        public static  @C("DWORD") int ulSize$get(@C("struct _PACKEDEVENTINFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._PACKEDEVENTINFO$ulSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulSize$set(@C("struct _PACKEDEVENTINFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._PACKEDEVENTINFO$ulSize$VH().set(seg, x);
        }
        public static void ulSize$set(@C("struct _PACKEDEVENTINFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._PACKEDEVENTINFO$ulSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ulNumEventsForLogFile$VH() {
            return winnt_h$constants$12._PACKEDEVENTINFO$ulNumEventsForLogFile$VH();
        }
        public static  @C("DWORD") int ulNumEventsForLogFile$get(@C("struct _PACKEDEVENTINFO") MemorySegment seg) {
            return (int)winnt_h$constants$12._PACKEDEVENTINFO$ulNumEventsForLogFile$VH().get(seg);
        }
        public static  @C("DWORD") int ulNumEventsForLogFile$get(@C("struct _PACKEDEVENTINFO") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._PACKEDEVENTINFO$ulNumEventsForLogFile$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ulNumEventsForLogFile$set(@C("struct _PACKEDEVENTINFO") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._PACKEDEVENTINFO$ulNumEventsForLogFile$VH().set(seg, x);
        }
        public static void ulNumEventsForLogFile$set(@C("struct _PACKEDEVENTINFO") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._PACKEDEVENTINFO$ulNumEventsForLogFile$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _PACKEDEVENTINFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _PACKEDEVENTINFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _PACKEDEVENTINFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _PACKEDEVENTINFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _PACKEDEVENTINFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _PACKEDEVENTINFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _PACKEDEVENTINFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TAPE_ERASE")public static class _TAPE_ERASE {

        /* package-private */ _TAPE_ERASE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TAPE_ERASE$struct$LAYOUT();
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$12._TAPE_ERASE$Type$VH();
        }
        public static  @C("DWORD") int Type$get(@C("struct _TAPE_ERASE") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_ERASE$Type$VH().get(seg);
        }
        public static  @C("DWORD") int Type$get(@C("struct _TAPE_ERASE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_ERASE$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _TAPE_ERASE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_ERASE$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _TAPE_ERASE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_ERASE$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Immediate$VH() {
            return winnt_h$constants$12._TAPE_ERASE$Immediate$VH();
        }
        public static  @C("BOOLEAN") byte Immediate$get(@C("struct _TAPE_ERASE") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_ERASE$Immediate$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Immediate$get(@C("struct _TAPE_ERASE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_ERASE$Immediate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Immediate$set(@C("struct _TAPE_ERASE") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_ERASE$Immediate$VH().set(seg, x);
        }
        public static void Immediate$set(@C("struct _TAPE_ERASE") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_ERASE$Immediate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TAPE_ERASE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TAPE_ERASE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TAPE_ERASE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TAPE_ERASE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TAPE_ERASE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TAPE_ERASE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TAPE_ERASE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TAPE_ERASE")public static class TAPE_ERASE extends _TAPE_ERASE {

        /* package-private */ TAPE_ERASE() {}
    }

    @C("struct _TAPE_PREPARE")public static class _TAPE_PREPARE {

        /* package-private */ _TAPE_PREPARE() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TAPE_PREPARE$struct$LAYOUT();
        }
        public static VarHandle Operation$VH() {
            return winnt_h$constants$12._TAPE_PREPARE$Operation$VH();
        }
        public static  @C("DWORD") int Operation$get(@C("struct _TAPE_PREPARE") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_PREPARE$Operation$VH().get(seg);
        }
        public static  @C("DWORD") int Operation$get(@C("struct _TAPE_PREPARE") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_PREPARE$Operation$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Operation$set(@C("struct _TAPE_PREPARE") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_PREPARE$Operation$VH().set(seg, x);
        }
        public static void Operation$set(@C("struct _TAPE_PREPARE") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_PREPARE$Operation$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Immediate$VH() {
            return winnt_h$constants$12._TAPE_PREPARE$Immediate$VH();
        }
        public static  @C("BOOLEAN") byte Immediate$get(@C("struct _TAPE_PREPARE") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_PREPARE$Immediate$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Immediate$get(@C("struct _TAPE_PREPARE") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_PREPARE$Immediate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Immediate$set(@C("struct _TAPE_PREPARE") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_PREPARE$Immediate$VH().set(seg, x);
        }
        public static void Immediate$set(@C("struct _TAPE_PREPARE") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_PREPARE$Immediate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TAPE_PREPARE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TAPE_PREPARE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TAPE_PREPARE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TAPE_PREPARE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TAPE_PREPARE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TAPE_PREPARE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TAPE_PREPARE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TAPE_PREPARE")public static class TAPE_PREPARE extends _TAPE_PREPARE {

        /* package-private */ TAPE_PREPARE() {}
    }

    @C("struct _TAPE_WRITE_MARKS")public static class _TAPE_WRITE_MARKS {

        /* package-private */ _TAPE_WRITE_MARKS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TAPE_WRITE_MARKS$struct$LAYOUT();
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$12._TAPE_WRITE_MARKS$Type$VH();
        }
        public static  @C("DWORD") int Type$get(@C("struct _TAPE_WRITE_MARKS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_WRITE_MARKS$Type$VH().get(seg);
        }
        public static  @C("DWORD") int Type$get(@C("struct _TAPE_WRITE_MARKS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_WRITE_MARKS$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _TAPE_WRITE_MARKS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_WRITE_MARKS$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _TAPE_WRITE_MARKS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_WRITE_MARKS$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Count$VH() {
            return winnt_h$constants$12._TAPE_WRITE_MARKS$Count$VH();
        }
        public static  @C("DWORD") int Count$get(@C("struct _TAPE_WRITE_MARKS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_WRITE_MARKS$Count$VH().get(seg);
        }
        public static  @C("DWORD") int Count$get(@C("struct _TAPE_WRITE_MARKS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_WRITE_MARKS$Count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Count$set(@C("struct _TAPE_WRITE_MARKS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_WRITE_MARKS$Count$VH().set(seg, x);
        }
        public static void Count$set(@C("struct _TAPE_WRITE_MARKS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_WRITE_MARKS$Count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Immediate$VH() {
            return winnt_h$constants$12._TAPE_WRITE_MARKS$Immediate$VH();
        }
        public static  @C("BOOLEAN") byte Immediate$get(@C("struct _TAPE_WRITE_MARKS") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_WRITE_MARKS$Immediate$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Immediate$get(@C("struct _TAPE_WRITE_MARKS") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_WRITE_MARKS$Immediate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Immediate$set(@C("struct _TAPE_WRITE_MARKS") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_WRITE_MARKS$Immediate$VH().set(seg, x);
        }
        public static void Immediate$set(@C("struct _TAPE_WRITE_MARKS") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_WRITE_MARKS$Immediate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TAPE_WRITE_MARKS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TAPE_WRITE_MARKS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TAPE_WRITE_MARKS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TAPE_WRITE_MARKS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TAPE_WRITE_MARKS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TAPE_WRITE_MARKS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TAPE_WRITE_MARKS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TAPE_WRITE_MARKS")public static class TAPE_WRITE_MARKS extends _TAPE_WRITE_MARKS {

        /* package-private */ TAPE_WRITE_MARKS() {}
    }

    @C("struct _TAPE_GET_POSITION")public static class _TAPE_GET_POSITION {

        /* package-private */ _TAPE_GET_POSITION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TAPE_GET_POSITION$struct$LAYOUT();
        }
        public static VarHandle Type$VH() {
            return winnt_h$constants$12._TAPE_GET_POSITION$Type$VH();
        }
        public static  @C("DWORD") int Type$get(@C("struct _TAPE_GET_POSITION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_GET_POSITION$Type$VH().get(seg);
        }
        public static  @C("DWORD") int Type$get(@C("struct _TAPE_GET_POSITION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_GET_POSITION$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct _TAPE_GET_POSITION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_POSITION$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct _TAPE_GET_POSITION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_POSITION$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Partition$VH() {
            return winnt_h$constants$12._TAPE_GET_POSITION$Partition$VH();
        }
        public static  @C("DWORD") int Partition$get(@C("struct _TAPE_GET_POSITION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_GET_POSITION$Partition$VH().get(seg);
        }
        public static  @C("DWORD") int Partition$get(@C("struct _TAPE_GET_POSITION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_GET_POSITION$Partition$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Partition$set(@C("struct _TAPE_GET_POSITION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_POSITION$Partition$VH().set(seg, x);
        }
        public static void Partition$set(@C("struct _TAPE_GET_POSITION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_POSITION$Partition$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Offset$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TAPE_GET_POSITION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TAPE_GET_POSITION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TAPE_GET_POSITION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TAPE_GET_POSITION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TAPE_GET_POSITION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TAPE_GET_POSITION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TAPE_GET_POSITION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TAPE_GET_POSITION")public static class TAPE_GET_POSITION extends _TAPE_GET_POSITION {

        /* package-private */ TAPE_GET_POSITION() {}
    }

    @C("struct _TAPE_SET_POSITION")public static class _TAPE_SET_POSITION {

        /* package-private */ _TAPE_SET_POSITION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TAPE_SET_POSITION$struct$LAYOUT();
        }
        public static VarHandle Method$VH() {
            return winnt_h$constants$12._TAPE_SET_POSITION$Method$VH();
        }
        public static  @C("DWORD") int Method$get(@C("struct _TAPE_SET_POSITION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_SET_POSITION$Method$VH().get(seg);
        }
        public static  @C("DWORD") int Method$get(@C("struct _TAPE_SET_POSITION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_SET_POSITION$Method$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Method$set(@C("struct _TAPE_SET_POSITION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_SET_POSITION$Method$VH().set(seg, x);
        }
        public static void Method$set(@C("struct _TAPE_SET_POSITION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_SET_POSITION$Method$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Partition$VH() {
            return winnt_h$constants$12._TAPE_SET_POSITION$Partition$VH();
        }
        public static  @C("DWORD") int Partition$get(@C("struct _TAPE_SET_POSITION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_SET_POSITION$Partition$VH().get(seg);
        }
        public static  @C("DWORD") int Partition$get(@C("struct _TAPE_SET_POSITION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_SET_POSITION$Partition$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Partition$set(@C("struct _TAPE_SET_POSITION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_SET_POSITION$Partition$VH().set(seg, x);
        }
        public static void Partition$set(@C("struct _TAPE_SET_POSITION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_SET_POSITION$Partition$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Offset$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static VarHandle Immediate$VH() {
            return winnt_h$constants$12._TAPE_SET_POSITION$Immediate$VH();
        }
        public static  @C("BOOLEAN") byte Immediate$get(@C("struct _TAPE_SET_POSITION") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_SET_POSITION$Immediate$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Immediate$get(@C("struct _TAPE_SET_POSITION") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_SET_POSITION$Immediate$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Immediate$set(@C("struct _TAPE_SET_POSITION") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_SET_POSITION$Immediate$VH().set(seg, x);
        }
        public static void Immediate$set(@C("struct _TAPE_SET_POSITION") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_SET_POSITION$Immediate$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TAPE_SET_POSITION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TAPE_SET_POSITION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TAPE_SET_POSITION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TAPE_SET_POSITION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TAPE_SET_POSITION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TAPE_SET_POSITION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TAPE_SET_POSITION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TAPE_SET_POSITION")public static class TAPE_SET_POSITION extends _TAPE_SET_POSITION {

        /* package-private */ TAPE_SET_POSITION() {}
    }

    @C("struct _TAPE_GET_DRIVE_PARAMETERS")public static class _TAPE_GET_DRIVE_PARAMETERS {

        /* package-private */ _TAPE_GET_DRIVE_PARAMETERS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT();
        }
        public static VarHandle ECC$VH() {
            return winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$ECC$VH();
        }
        public static  @C("BOOLEAN") byte ECC$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$ECC$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte ECC$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$ECC$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ECC$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$ECC$VH().set(seg, x);
        }
        public static void ECC$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$ECC$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Compression$VH() {
            return winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$Compression$VH();
        }
        public static  @C("BOOLEAN") byte Compression$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$Compression$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Compression$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$Compression$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Compression$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$Compression$VH().set(seg, x);
        }
        public static void Compression$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$Compression$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DataPadding$VH() {
            return winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$DataPadding$VH();
        }
        public static  @C("BOOLEAN") byte DataPadding$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$DataPadding$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte DataPadding$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$DataPadding$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DataPadding$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$DataPadding$VH().set(seg, x);
        }
        public static void DataPadding$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$DataPadding$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReportSetmarks$VH() {
            return winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$ReportSetmarks$VH();
        }
        public static  @C("BOOLEAN") byte ReportSetmarks$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$ReportSetmarks$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte ReportSetmarks$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$ReportSetmarks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReportSetmarks$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$ReportSetmarks$VH().set(seg, x);
        }
        public static void ReportSetmarks$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$ReportSetmarks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DefaultBlockSize$VH() {
            return winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$DefaultBlockSize$VH();
        }
        public static  @C("DWORD") int DefaultBlockSize$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$DefaultBlockSize$VH().get(seg);
        }
        public static  @C("DWORD") int DefaultBlockSize$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$DefaultBlockSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DefaultBlockSize$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$DefaultBlockSize$VH().set(seg, x);
        }
        public static void DefaultBlockSize$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$DefaultBlockSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaximumBlockSize$VH() {
            return winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MaximumBlockSize$VH();
        }
        public static  @C("DWORD") int MaximumBlockSize$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MaximumBlockSize$VH().get(seg);
        }
        public static  @C("DWORD") int MaximumBlockSize$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MaximumBlockSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumBlockSize$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MaximumBlockSize$VH().set(seg, x);
        }
        public static void MaximumBlockSize$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MaximumBlockSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MinimumBlockSize$VH() {
            return winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MinimumBlockSize$VH();
        }
        public static  @C("DWORD") int MinimumBlockSize$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MinimumBlockSize$VH().get(seg);
        }
        public static  @C("DWORD") int MinimumBlockSize$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MinimumBlockSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MinimumBlockSize$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MinimumBlockSize$VH().set(seg, x);
        }
        public static void MinimumBlockSize$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MinimumBlockSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle MaximumPartitionCount$VH() {
            return winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MaximumPartitionCount$VH();
        }
        public static  @C("DWORD") int MaximumPartitionCount$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MaximumPartitionCount$VH().get(seg);
        }
        public static  @C("DWORD") int MaximumPartitionCount$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MaximumPartitionCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void MaximumPartitionCount$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MaximumPartitionCount$VH().set(seg, x);
        }
        public static void MaximumPartitionCount$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$MaximumPartitionCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FeaturesLow$VH() {
            return winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$FeaturesLow$VH();
        }
        public static  @C("DWORD") int FeaturesLow$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$FeaturesLow$VH().get(seg);
        }
        public static  @C("DWORD") int FeaturesLow$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$FeaturesLow$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FeaturesLow$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$FeaturesLow$VH().set(seg, x);
        }
        public static void FeaturesLow$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$FeaturesLow$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FeaturesHigh$VH() {
            return winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$FeaturesHigh$VH();
        }
        public static  @C("DWORD") int FeaturesHigh$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$FeaturesHigh$VH().get(seg);
        }
        public static  @C("DWORD") int FeaturesHigh$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$FeaturesHigh$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FeaturesHigh$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$FeaturesHigh$VH().set(seg, x);
        }
        public static void FeaturesHigh$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$FeaturesHigh$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EOTWarningZoneSize$VH() {
            return winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH();
        }
        public static  @C("DWORD") int EOTWarningZoneSize$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH().get(seg);
        }
        public static  @C("DWORD") int EOTWarningZoneSize$get(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EOTWarningZoneSize$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH().set(seg, x);
        }
        public static void EOTWarningZoneSize$set(@C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TAPE_GET_DRIVE_PARAMETERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TAPE_GET_DRIVE_PARAMETERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TAPE_GET_DRIVE_PARAMETERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TAPE_GET_DRIVE_PARAMETERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TAPE_GET_DRIVE_PARAMETERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TAPE_GET_DRIVE_PARAMETERS")public static class TAPE_GET_DRIVE_PARAMETERS extends _TAPE_GET_DRIVE_PARAMETERS {

        /* package-private */ TAPE_GET_DRIVE_PARAMETERS() {}
    }

    @C("struct _TAPE_SET_DRIVE_PARAMETERS")public static class _TAPE_SET_DRIVE_PARAMETERS {

        /* package-private */ _TAPE_SET_DRIVE_PARAMETERS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$struct$LAYOUT();
        }
        public static VarHandle ECC$VH() {
            return winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$ECC$VH();
        }
        public static  @C("BOOLEAN") byte ECC$get(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$ECC$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte ECC$get(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$ECC$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ECC$set(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$ECC$VH().set(seg, x);
        }
        public static void ECC$set(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$ECC$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Compression$VH() {
            return winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$Compression$VH();
        }
        public static  @C("BOOLEAN") byte Compression$get(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$Compression$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte Compression$get(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$Compression$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Compression$set(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$Compression$VH().set(seg, x);
        }
        public static void Compression$set(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$Compression$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DataPadding$VH() {
            return winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$DataPadding$VH();
        }
        public static  @C("BOOLEAN") byte DataPadding$get(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$DataPadding$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte DataPadding$get(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$DataPadding$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DataPadding$set(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$DataPadding$VH().set(seg, x);
        }
        public static void DataPadding$set(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$DataPadding$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ReportSetmarks$VH() {
            return winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$ReportSetmarks$VH();
        }
        public static  @C("BOOLEAN") byte ReportSetmarks$get(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$ReportSetmarks$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte ReportSetmarks$get(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$ReportSetmarks$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ReportSetmarks$set(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$ReportSetmarks$VH().set(seg, x);
        }
        public static void ReportSetmarks$set(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$ReportSetmarks$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle EOTWarningZoneSize$VH() {
            return winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH();
        }
        public static  @C("DWORD") int EOTWarningZoneSize$get(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH().get(seg);
        }
        public static  @C("DWORD") int EOTWarningZoneSize$get(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void EOTWarningZoneSize$set(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH().set(seg, x);
        }
        public static void EOTWarningZoneSize$set(@C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_SET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TAPE_SET_DRIVE_PARAMETERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TAPE_SET_DRIVE_PARAMETERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TAPE_SET_DRIVE_PARAMETERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TAPE_SET_DRIVE_PARAMETERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TAPE_SET_DRIVE_PARAMETERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TAPE_SET_DRIVE_PARAMETERS")public static class TAPE_SET_DRIVE_PARAMETERS extends _TAPE_SET_DRIVE_PARAMETERS {

        /* package-private */ TAPE_SET_DRIVE_PARAMETERS() {}
    }

    @C("struct _TAPE_GET_MEDIA_PARAMETERS")public static class _TAPE_GET_MEDIA_PARAMETERS {

        /* package-private */ _TAPE_GET_MEDIA_PARAMETERS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$struct$LAYOUT();
        }
        public static MemorySegment Capacity$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment Remaining$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static VarHandle BlockSize$VH() {
            return winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$BlockSize$VH();
        }
        public static  @C("DWORD") int BlockSize$get(@C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$BlockSize$VH().get(seg);
        }
        public static  @C("DWORD") int BlockSize$get(@C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$BlockSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BlockSize$set(@C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$BlockSize$VH().set(seg, x);
        }
        public static void BlockSize$set(@C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$BlockSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PartitionCount$VH() {
            return winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$PartitionCount$VH();
        }
        public static  @C("DWORD") int PartitionCount$get(@C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$PartitionCount$VH().get(seg);
        }
        public static  @C("DWORD") int PartitionCount$get(@C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$PartitionCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PartitionCount$set(@C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$PartitionCount$VH().set(seg, x);
        }
        public static void PartitionCount$set(@C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$PartitionCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle WriteProtected$VH() {
            return winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$WriteProtected$VH();
        }
        public static  @C("BOOLEAN") byte WriteProtected$get(@C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment seg) {
            return (byte)winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$WriteProtected$VH().get(seg);
        }
        public static  @C("BOOLEAN") byte WriteProtected$get(@C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment seg, long index) {
            return (byte)winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$WriteProtected$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void WriteProtected$set(@C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment seg, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$WriteProtected$VH().set(seg, x);
        }
        public static void WriteProtected$set(@C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment seg, long index, @C("BOOLEAN") byte x) {
            winnt_h$constants$12._TAPE_GET_MEDIA_PARAMETERS$WriteProtected$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TAPE_GET_MEDIA_PARAMETERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TAPE_GET_MEDIA_PARAMETERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TAPE_GET_MEDIA_PARAMETERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TAPE_GET_MEDIA_PARAMETERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TAPE_GET_MEDIA_PARAMETERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TAPE_GET_MEDIA_PARAMETERS")public static class TAPE_GET_MEDIA_PARAMETERS extends _TAPE_GET_MEDIA_PARAMETERS {

        /* package-private */ TAPE_GET_MEDIA_PARAMETERS() {}
    }

    @C("struct _TAPE_SET_MEDIA_PARAMETERS")public static class _TAPE_SET_MEDIA_PARAMETERS {

        /* package-private */ _TAPE_SET_MEDIA_PARAMETERS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TAPE_SET_MEDIA_PARAMETERS$struct$LAYOUT();
        }
        public static VarHandle BlockSize$VH() {
            return winnt_h$constants$12._TAPE_SET_MEDIA_PARAMETERS$BlockSize$VH();
        }
        public static  @C("DWORD") int BlockSize$get(@C("struct _TAPE_SET_MEDIA_PARAMETERS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_SET_MEDIA_PARAMETERS$BlockSize$VH().get(seg);
        }
        public static  @C("DWORD") int BlockSize$get(@C("struct _TAPE_SET_MEDIA_PARAMETERS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_SET_MEDIA_PARAMETERS$BlockSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BlockSize$set(@C("struct _TAPE_SET_MEDIA_PARAMETERS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_SET_MEDIA_PARAMETERS$BlockSize$VH().set(seg, x);
        }
        public static void BlockSize$set(@C("struct _TAPE_SET_MEDIA_PARAMETERS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_SET_MEDIA_PARAMETERS$BlockSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TAPE_SET_MEDIA_PARAMETERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TAPE_SET_MEDIA_PARAMETERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TAPE_SET_MEDIA_PARAMETERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TAPE_SET_MEDIA_PARAMETERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TAPE_SET_MEDIA_PARAMETERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TAPE_SET_MEDIA_PARAMETERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TAPE_SET_MEDIA_PARAMETERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TAPE_SET_MEDIA_PARAMETERS")public static class TAPE_SET_MEDIA_PARAMETERS extends _TAPE_SET_MEDIA_PARAMETERS {

        /* package-private */ TAPE_SET_MEDIA_PARAMETERS() {}
    }

    @C("struct _TAPE_CREATE_PARTITION")public static class _TAPE_CREATE_PARTITION {

        /* package-private */ _TAPE_CREATE_PARTITION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TAPE_CREATE_PARTITION$struct$LAYOUT();
        }
        public static VarHandle Method$VH() {
            return winnt_h$constants$12._TAPE_CREATE_PARTITION$Method$VH();
        }
        public static  @C("DWORD") int Method$get(@C("struct _TAPE_CREATE_PARTITION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_CREATE_PARTITION$Method$VH().get(seg);
        }
        public static  @C("DWORD") int Method$get(@C("struct _TAPE_CREATE_PARTITION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_CREATE_PARTITION$Method$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Method$set(@C("struct _TAPE_CREATE_PARTITION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_CREATE_PARTITION$Method$VH().set(seg, x);
        }
        public static void Method$set(@C("struct _TAPE_CREATE_PARTITION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_CREATE_PARTITION$Method$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Count$VH() {
            return winnt_h$constants$12._TAPE_CREATE_PARTITION$Count$VH();
        }
        public static  @C("DWORD") int Count$get(@C("struct _TAPE_CREATE_PARTITION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_CREATE_PARTITION$Count$VH().get(seg);
        }
        public static  @C("DWORD") int Count$get(@C("struct _TAPE_CREATE_PARTITION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_CREATE_PARTITION$Count$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Count$set(@C("struct _TAPE_CREATE_PARTITION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_CREATE_PARTITION$Count$VH().set(seg, x);
        }
        public static void Count$set(@C("struct _TAPE_CREATE_PARTITION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_CREATE_PARTITION$Count$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$12._TAPE_CREATE_PARTITION$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _TAPE_CREATE_PARTITION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_CREATE_PARTITION$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _TAPE_CREATE_PARTITION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_CREATE_PARTITION$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _TAPE_CREATE_PARTITION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_CREATE_PARTITION$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _TAPE_CREATE_PARTITION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_CREATE_PARTITION$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TAPE_CREATE_PARTITION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TAPE_CREATE_PARTITION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TAPE_CREATE_PARTITION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TAPE_CREATE_PARTITION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TAPE_CREATE_PARTITION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TAPE_CREATE_PARTITION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TAPE_CREATE_PARTITION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TAPE_CREATE_PARTITION")public static class TAPE_CREATE_PARTITION extends _TAPE_CREATE_PARTITION {

        /* package-private */ TAPE_CREATE_PARTITION() {}
    }

    @C("struct _TAPE_WMI_OPERATIONS")public static class _TAPE_WMI_OPERATIONS {

        /* package-private */ _TAPE_WMI_OPERATIONS() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TAPE_WMI_OPERATIONS$struct$LAYOUT();
        }
        public static VarHandle Method$VH() {
            return winnt_h$constants$12._TAPE_WMI_OPERATIONS$Method$VH();
        }
        public static  @C("DWORD") int Method$get(@C("struct _TAPE_WMI_OPERATIONS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_WMI_OPERATIONS$Method$VH().get(seg);
        }
        public static  @C("DWORD") int Method$get(@C("struct _TAPE_WMI_OPERATIONS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_WMI_OPERATIONS$Method$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Method$set(@C("struct _TAPE_WMI_OPERATIONS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_WMI_OPERATIONS$Method$VH().set(seg, x);
        }
        public static void Method$set(@C("struct _TAPE_WMI_OPERATIONS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_WMI_OPERATIONS$Method$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DataBufferSize$VH() {
            return winnt_h$constants$12._TAPE_WMI_OPERATIONS$DataBufferSize$VH();
        }
        public static  @C("DWORD") int DataBufferSize$get(@C("struct _TAPE_WMI_OPERATIONS") MemorySegment seg) {
            return (int)winnt_h$constants$12._TAPE_WMI_OPERATIONS$DataBufferSize$VH().get(seg);
        }
        public static  @C("DWORD") int DataBufferSize$get(@C("struct _TAPE_WMI_OPERATIONS") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TAPE_WMI_OPERATIONS$DataBufferSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DataBufferSize$set(@C("struct _TAPE_WMI_OPERATIONS") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_WMI_OPERATIONS$DataBufferSize$VH().set(seg, x);
        }
        public static void DataBufferSize$set(@C("struct _TAPE_WMI_OPERATIONS") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TAPE_WMI_OPERATIONS$DataBufferSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DataBuffer$VH() {
            return winnt_h$constants$12._TAPE_WMI_OPERATIONS$DataBuffer$VH();
        }
        public static  @C("PVOID") MemoryAddress DataBuffer$get(@C("struct _TAPE_WMI_OPERATIONS") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TAPE_WMI_OPERATIONS$DataBuffer$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress DataBuffer$get(@C("struct _TAPE_WMI_OPERATIONS") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TAPE_WMI_OPERATIONS$DataBuffer$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DataBuffer$set(@C("struct _TAPE_WMI_OPERATIONS") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$12._TAPE_WMI_OPERATIONS$DataBuffer$VH().set(seg, x);
        }
        public static void DataBuffer$set(@C("struct _TAPE_WMI_OPERATIONS") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$12._TAPE_WMI_OPERATIONS$DataBuffer$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TAPE_WMI_OPERATIONS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TAPE_WMI_OPERATIONS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TAPE_WMI_OPERATIONS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TAPE_WMI_OPERATIONS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TAPE_WMI_OPERATIONS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TAPE_WMI_OPERATIONS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TAPE_WMI_OPERATIONS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TAPE_WMI_OPERATIONS")public static class TAPE_WMI_OPERATIONS extends _TAPE_WMI_OPERATIONS {

        /* package-private */ TAPE_WMI_OPERATIONS() {}
    }

    @C("struct _TRANSACTION_BASIC_INFORMATION")public static class _TRANSACTION_BASIC_INFORMATION {

        /* package-private */ _TRANSACTION_BASIC_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTION_BASIC_INFORMATION$struct$LAYOUT();
        }
        public static MemorySegment TransactionId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle State$VH() {
            return winnt_h$constants$12._TRANSACTION_BASIC_INFORMATION$State$VH();
        }
        public static  @C("DWORD") int State$get(@C("struct _TRANSACTION_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TRANSACTION_BASIC_INFORMATION$State$VH().get(seg);
        }
        public static  @C("DWORD") int State$get(@C("struct _TRANSACTION_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TRANSACTION_BASIC_INFORMATION$State$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void State$set(@C("struct _TRANSACTION_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_BASIC_INFORMATION$State$VH().set(seg, x);
        }
        public static void State$set(@C("struct _TRANSACTION_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_BASIC_INFORMATION$State$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Outcome$VH() {
            return winnt_h$constants$12._TRANSACTION_BASIC_INFORMATION$Outcome$VH();
        }
        public static  @C("DWORD") int Outcome$get(@C("struct _TRANSACTION_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TRANSACTION_BASIC_INFORMATION$Outcome$VH().get(seg);
        }
        public static  @C("DWORD") int Outcome$get(@C("struct _TRANSACTION_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TRANSACTION_BASIC_INFORMATION$Outcome$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Outcome$set(@C("struct _TRANSACTION_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_BASIC_INFORMATION$Outcome$VH().set(seg, x);
        }
        public static void Outcome$set(@C("struct _TRANSACTION_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_BASIC_INFORMATION$Outcome$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTION_BASIC_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTION_BASIC_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTION_BASIC_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTION_BASIC_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTION_BASIC_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTION_BASIC_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTION_BASIC_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTION_BASIC_INFORMATION")public static class TRANSACTION_BASIC_INFORMATION extends _TRANSACTION_BASIC_INFORMATION {

        /* package-private */ TRANSACTION_BASIC_INFORMATION() {}
    }

    @C("struct _TRANSACTIONMANAGER_BASIC_INFORMATION")public static class _TRANSACTIONMANAGER_BASIC_INFORMATION {

        /* package-private */ _TRANSACTIONMANAGER_BASIC_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTIONMANAGER_BASIC_INFORMATION$struct$LAYOUT();
        }
        public static MemorySegment TmIdentity$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment VirtualClock$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTIONMANAGER_BASIC_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTIONMANAGER_BASIC_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTIONMANAGER_BASIC_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTIONMANAGER_BASIC_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTIONMANAGER_BASIC_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTIONMANAGER_BASIC_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTIONMANAGER_BASIC_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTIONMANAGER_BASIC_INFORMATION")public static class TRANSACTIONMANAGER_BASIC_INFORMATION extends _TRANSACTIONMANAGER_BASIC_INFORMATION {

        /* package-private */ TRANSACTIONMANAGER_BASIC_INFORMATION() {}
    }

    @C("struct _TRANSACTIONMANAGER_LOG_INFORMATION")public static class _TRANSACTIONMANAGER_LOG_INFORMATION {

        /* package-private */ _TRANSACTIONMANAGER_LOG_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTIONMANAGER_LOG_INFORMATION$struct$LAYOUT();
        }
        public static MemorySegment LogIdentity$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTIONMANAGER_LOG_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTIONMANAGER_LOG_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTIONMANAGER_LOG_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTIONMANAGER_LOG_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTIONMANAGER_LOG_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTIONMANAGER_LOG_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTIONMANAGER_LOG_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTIONMANAGER_LOG_INFORMATION")public static class TRANSACTIONMANAGER_LOG_INFORMATION extends _TRANSACTIONMANAGER_LOG_INFORMATION {

        /* package-private */ TRANSACTIONMANAGER_LOG_INFORMATION() {}
    }

    @C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION")public static class _TRANSACTIONMANAGER_LOGPATH_INFORMATION {

        /* package-private */ _TRANSACTIONMANAGER_LOGPATH_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTIONMANAGER_LOGPATH_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle LogPathLength$VH() {
            return winnt_h$constants$12._TRANSACTIONMANAGER_LOGPATH_INFORMATION$LogPathLength$VH();
        }
        public static  @C("DWORD") int LogPathLength$get(@C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TRANSACTIONMANAGER_LOGPATH_INFORMATION$LogPathLength$VH().get(seg);
        }
        public static  @C("DWORD") int LogPathLength$get(@C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TRANSACTIONMANAGER_LOGPATH_INFORMATION$LogPathLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LogPathLength$set(@C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTIONMANAGER_LOGPATH_INFORMATION$LogPathLength$VH().set(seg, x);
        }
        public static void LogPathLength$set(@C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTIONMANAGER_LOGPATH_INFORMATION$LogPathLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment LogPath$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION")public static class TRANSACTIONMANAGER_LOGPATH_INFORMATION extends _TRANSACTIONMANAGER_LOGPATH_INFORMATION {

        /* package-private */ TRANSACTIONMANAGER_LOGPATH_INFORMATION() {}
    }

    @C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION")public static class _TRANSACTIONMANAGER_RECOVERY_INFORMATION {

        /* package-private */ _TRANSACTIONMANAGER_RECOVERY_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTIONMANAGER_RECOVERY_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle LastRecoveredLsn$VH() {
            return winnt_h$constants$12._TRANSACTIONMANAGER_RECOVERY_INFORMATION$LastRecoveredLsn$VH();
        }
        public static  @C("ULONGLONG") long LastRecoveredLsn$get(@C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$12._TRANSACTIONMANAGER_RECOVERY_INFORMATION$LastRecoveredLsn$VH().get(seg);
        }
        public static  @C("ULONGLONG") long LastRecoveredLsn$get(@C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$12._TRANSACTIONMANAGER_RECOVERY_INFORMATION$LastRecoveredLsn$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void LastRecoveredLsn$set(@C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION") MemorySegment seg, @C("ULONGLONG") long x) {
            winnt_h$constants$12._TRANSACTIONMANAGER_RECOVERY_INFORMATION$LastRecoveredLsn$VH().set(seg, x);
        }
        public static void LastRecoveredLsn$set(@C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION") MemorySegment seg, long index, @C("ULONGLONG") long x) {
            winnt_h$constants$12._TRANSACTIONMANAGER_RECOVERY_INFORMATION$LastRecoveredLsn$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION")public static class TRANSACTIONMANAGER_RECOVERY_INFORMATION extends _TRANSACTIONMANAGER_RECOVERY_INFORMATION {

        /* package-private */ TRANSACTIONMANAGER_RECOVERY_INFORMATION() {}
    }

    @C("struct _TRANSACTIONMANAGER_OLDEST_INFORMATION")public static class _TRANSACTIONMANAGER_OLDEST_INFORMATION {

        /* package-private */ _TRANSACTIONMANAGER_OLDEST_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTIONMANAGER_OLDEST_INFORMATION$struct$LAYOUT();
        }
        public static MemorySegment OldestTransactionGuid$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTIONMANAGER_OLDEST_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTIONMANAGER_OLDEST_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTIONMANAGER_OLDEST_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTIONMANAGER_OLDEST_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTIONMANAGER_OLDEST_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTIONMANAGER_OLDEST_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTIONMANAGER_OLDEST_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTIONMANAGER_OLDEST_INFORMATION")public static class TRANSACTIONMANAGER_OLDEST_INFORMATION extends _TRANSACTIONMANAGER_OLDEST_INFORMATION {

        /* package-private */ TRANSACTIONMANAGER_OLDEST_INFORMATION() {}
    }

    @C("struct _TRANSACTION_PROPERTIES_INFORMATION")public static class _TRANSACTION_PROPERTIES_INFORMATION {

        /* package-private */ _TRANSACTION_PROPERTIES_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle IsolationLevel$VH() {
            return winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$IsolationLevel$VH();
        }
        public static  @C("DWORD") int IsolationLevel$get(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$IsolationLevel$VH().get(seg);
        }
        public static  @C("DWORD") int IsolationLevel$get(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$IsolationLevel$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IsolationLevel$set(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$IsolationLevel$VH().set(seg, x);
        }
        public static void IsolationLevel$set(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$IsolationLevel$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IsolationFlags$VH() {
            return winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$IsolationFlags$VH();
        }
        public static  @C("DWORD") int IsolationFlags$get(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$IsolationFlags$VH().get(seg);
        }
        public static  @C("DWORD") int IsolationFlags$get(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$IsolationFlags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IsolationFlags$set(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$IsolationFlags$VH().set(seg, x);
        }
        public static void IsolationFlags$set(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$IsolationFlags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Timeout$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static VarHandle Outcome$VH() {
            return winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$Outcome$VH();
        }
        public static  @C("DWORD") int Outcome$get(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$Outcome$VH().get(seg);
        }
        public static  @C("DWORD") int Outcome$get(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$Outcome$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Outcome$set(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$Outcome$VH().set(seg, x);
        }
        public static void Outcome$set(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$Outcome$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DescriptionLength$VH() {
            return winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$DescriptionLength$VH();
        }
        public static  @C("DWORD") int DescriptionLength$get(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$DescriptionLength$VH().get(seg);
        }
        public static  @C("DWORD") int DescriptionLength$get(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$DescriptionLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DescriptionLength$set(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$DescriptionLength$VH().set(seg, x);
        }
        public static void DescriptionLength$set(@C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_PROPERTIES_INFORMATION$DescriptionLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Description$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTION_PROPERTIES_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTION_PROPERTIES_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTION_PROPERTIES_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTION_PROPERTIES_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTION_PROPERTIES_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTION_PROPERTIES_INFORMATION")public static class TRANSACTION_PROPERTIES_INFORMATION extends _TRANSACTION_PROPERTIES_INFORMATION {

        /* package-private */ TRANSACTION_PROPERTIES_INFORMATION() {}
    }

    @C("struct _TRANSACTION_BIND_INFORMATION")public static class _TRANSACTION_BIND_INFORMATION {

        /* package-private */ _TRANSACTION_BIND_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTION_BIND_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle TmHandle$VH() {
            return winnt_h$constants$12._TRANSACTION_BIND_INFORMATION$TmHandle$VH();
        }
        public static  @C("HANDLE") MemoryAddress TmHandle$get(@C("struct _TRANSACTION_BIND_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TRANSACTION_BIND_INFORMATION$TmHandle$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress TmHandle$get(@C("struct _TRANSACTION_BIND_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TRANSACTION_BIND_INFORMATION$TmHandle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void TmHandle$set(@C("struct _TRANSACTION_BIND_INFORMATION") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$12._TRANSACTION_BIND_INFORMATION$TmHandle$VH().set(seg, x);
        }
        public static void TmHandle$set(@C("struct _TRANSACTION_BIND_INFORMATION") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$12._TRANSACTION_BIND_INFORMATION$TmHandle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTION_BIND_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTION_BIND_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTION_BIND_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTION_BIND_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTION_BIND_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTION_BIND_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTION_BIND_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTION_BIND_INFORMATION")public static class TRANSACTION_BIND_INFORMATION extends _TRANSACTION_BIND_INFORMATION {

        /* package-private */ TRANSACTION_BIND_INFORMATION() {}
    }

    @C("struct _TRANSACTION_ENLISTMENT_PAIR")public static class _TRANSACTION_ENLISTMENT_PAIR {

        /* package-private */ _TRANSACTION_ENLISTMENT_PAIR() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTION_ENLISTMENT_PAIR$struct$LAYOUT();
        }
        public static MemorySegment EnlistmentId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment ResourceManagerId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTION_ENLISTMENT_PAIR") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTION_ENLISTMENT_PAIR") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTION_ENLISTMENT_PAIR[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTION_ENLISTMENT_PAIR[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTION_ENLISTMENT_PAIR*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTION_ENLISTMENT_PAIR*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTION_ENLISTMENT_PAIR") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTION_ENLISTMENT_PAIR")public static class TRANSACTION_ENLISTMENT_PAIR extends _TRANSACTION_ENLISTMENT_PAIR {

        /* package-private */ TRANSACTION_ENLISTMENT_PAIR() {}
    }

    @C("struct _TRANSACTION_ENLISTMENTS_INFORMATION")public static class _TRANSACTION_ENLISTMENTS_INFORMATION {

        /* package-private */ _TRANSACTION_ENLISTMENTS_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTION_ENLISTMENTS_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle NumberOfEnlistments$VH() {
            return winnt_h$constants$12._TRANSACTION_ENLISTMENTS_INFORMATION$NumberOfEnlistments$VH();
        }
        public static  @C("DWORD") int NumberOfEnlistments$get(@C("struct _TRANSACTION_ENLISTMENTS_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TRANSACTION_ENLISTMENTS_INFORMATION$NumberOfEnlistments$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfEnlistments$get(@C("struct _TRANSACTION_ENLISTMENTS_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TRANSACTION_ENLISTMENTS_INFORMATION$NumberOfEnlistments$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfEnlistments$set(@C("struct _TRANSACTION_ENLISTMENTS_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_ENLISTMENTS_INFORMATION$NumberOfEnlistments$VH().set(seg, x);
        }
        public static void NumberOfEnlistments$set(@C("struct _TRANSACTION_ENLISTMENTS_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_ENLISTMENTS_INFORMATION$NumberOfEnlistments$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment EnlistmentPair$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 32));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTION_ENLISTMENTS_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTION_ENLISTMENTS_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTION_ENLISTMENTS_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTION_ENLISTMENTS_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTION_ENLISTMENTS_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTION_ENLISTMENTS_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTION_ENLISTMENTS_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTION_ENLISTMENTS_INFORMATION")public static class TRANSACTION_ENLISTMENTS_INFORMATION extends _TRANSACTION_ENLISTMENTS_INFORMATION {

        /* package-private */ TRANSACTION_ENLISTMENTS_INFORMATION() {}
    }

    @C("struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION")public static class _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {

        /* package-private */ _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION$struct$LAYOUT();
        }
        public static MemorySegment SuperiorEnlistmentPair$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 32));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION")public static class TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION extends _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {

        /* package-private */ TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION() {}
    }

    @C("struct _RESOURCEMANAGER_BASIC_INFORMATION")public static class _RESOURCEMANAGER_BASIC_INFORMATION {

        /* package-private */ _RESOURCEMANAGER_BASIC_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._RESOURCEMANAGER_BASIC_INFORMATION$struct$LAYOUT();
        }
        public static MemorySegment ResourceManagerId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle DescriptionLength$VH() {
            return winnt_h$constants$12._RESOURCEMANAGER_BASIC_INFORMATION$DescriptionLength$VH();
        }
        public static  @C("DWORD") int DescriptionLength$get(@C("struct _RESOURCEMANAGER_BASIC_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._RESOURCEMANAGER_BASIC_INFORMATION$DescriptionLength$VH().get(seg);
        }
        public static  @C("DWORD") int DescriptionLength$get(@C("struct _RESOURCEMANAGER_BASIC_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._RESOURCEMANAGER_BASIC_INFORMATION$DescriptionLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DescriptionLength$set(@C("struct _RESOURCEMANAGER_BASIC_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._RESOURCEMANAGER_BASIC_INFORMATION$DescriptionLength$VH().set(seg, x);
        }
        public static void DescriptionLength$set(@C("struct _RESOURCEMANAGER_BASIC_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._RESOURCEMANAGER_BASIC_INFORMATION$DescriptionLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Description$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 2));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _RESOURCEMANAGER_BASIC_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _RESOURCEMANAGER_BASIC_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _RESOURCEMANAGER_BASIC_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _RESOURCEMANAGER_BASIC_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _RESOURCEMANAGER_BASIC_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _RESOURCEMANAGER_BASIC_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _RESOURCEMANAGER_BASIC_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _RESOURCEMANAGER_BASIC_INFORMATION")public static class RESOURCEMANAGER_BASIC_INFORMATION extends _RESOURCEMANAGER_BASIC_INFORMATION {

        /* package-private */ RESOURCEMANAGER_BASIC_INFORMATION() {}
    }

    @C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION")public static class _RESOURCEMANAGER_COMPLETION_INFORMATION {

        /* package-private */ _RESOURCEMANAGER_COMPLETION_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._RESOURCEMANAGER_COMPLETION_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle IoCompletionPortHandle$VH() {
            return winnt_h$constants$12._RESOURCEMANAGER_COMPLETION_INFORMATION$IoCompletionPortHandle$VH();
        }
        public static  @C("HANDLE") MemoryAddress IoCompletionPortHandle$get(@C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RESOURCEMANAGER_COMPLETION_INFORMATION$IoCompletionPortHandle$VH().get(seg);
        }
        public static  @C("HANDLE") MemoryAddress IoCompletionPortHandle$get(@C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._RESOURCEMANAGER_COMPLETION_INFORMATION$IoCompletionPortHandle$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IoCompletionPortHandle$set(@C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION") MemorySegment seg, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$12._RESOURCEMANAGER_COMPLETION_INFORMATION$IoCompletionPortHandle$VH().set(seg, x);
        }
        public static void IoCompletionPortHandle$set(@C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION") MemorySegment seg, long index, @C("HANDLE") MemoryAddress x) {
            winnt_h$constants$12._RESOURCEMANAGER_COMPLETION_INFORMATION$IoCompletionPortHandle$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CompletionKey$VH() {
            return winnt_h$constants$12._RESOURCEMANAGER_COMPLETION_INFORMATION$CompletionKey$VH();
        }
        public static  @C("ULONG_PTR") long CompletionKey$get(@C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$12._RESOURCEMANAGER_COMPLETION_INFORMATION$CompletionKey$VH().get(seg);
        }
        public static  @C("ULONG_PTR") long CompletionKey$get(@C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$12._RESOURCEMANAGER_COMPLETION_INFORMATION$CompletionKey$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CompletionKey$set(@C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION") MemorySegment seg, @C("ULONG_PTR") long x) {
            winnt_h$constants$12._RESOURCEMANAGER_COMPLETION_INFORMATION$CompletionKey$VH().set(seg, x);
        }
        public static void CompletionKey$set(@C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION") MemorySegment seg, long index, @C("ULONG_PTR") long x) {
            winnt_h$constants$12._RESOURCEMANAGER_COMPLETION_INFORMATION$CompletionKey$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _RESOURCEMANAGER_COMPLETION_INFORMATION")public static class RESOURCEMANAGER_COMPLETION_INFORMATION extends _RESOURCEMANAGER_COMPLETION_INFORMATION {

        /* package-private */ RESOURCEMANAGER_COMPLETION_INFORMATION() {}
    }

    @C("struct _ENLISTMENT_BASIC_INFORMATION")public static class _ENLISTMENT_BASIC_INFORMATION {

        /* package-private */ _ENLISTMENT_BASIC_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._ENLISTMENT_BASIC_INFORMATION$struct$LAYOUT();
        }
        public static MemorySegment EnlistmentId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment TransactionId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 16));
        }
        public static MemorySegment ResourceManagerId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ENLISTMENT_BASIC_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ENLISTMENT_BASIC_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ENLISTMENT_BASIC_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ENLISTMENT_BASIC_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ENLISTMENT_BASIC_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ENLISTMENT_BASIC_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ENLISTMENT_BASIC_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ENLISTMENT_BASIC_INFORMATION")public static class ENLISTMENT_BASIC_INFORMATION extends _ENLISTMENT_BASIC_INFORMATION {

        /* package-private */ ENLISTMENT_BASIC_INFORMATION() {}
    }

    @C("struct _ENLISTMENT_CRM_INFORMATION")public static class _ENLISTMENT_CRM_INFORMATION {

        /* package-private */ _ENLISTMENT_CRM_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._ENLISTMENT_CRM_INFORMATION$struct$LAYOUT();
        }
        public static MemorySegment CrmTransactionManagerId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static MemorySegment CrmResourceManagerId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 16));
        }
        public static MemorySegment CrmEnlistmentId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _ENLISTMENT_CRM_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _ENLISTMENT_CRM_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _ENLISTMENT_CRM_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _ENLISTMENT_CRM_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _ENLISTMENT_CRM_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _ENLISTMENT_CRM_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _ENLISTMENT_CRM_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _ENLISTMENT_CRM_INFORMATION")public static class ENLISTMENT_CRM_INFORMATION extends _ENLISTMENT_CRM_INFORMATION {

        /* package-private */ ENLISTMENT_CRM_INFORMATION() {}
    }

    @C("struct _TRANSACTION_LIST_ENTRY")public static class _TRANSACTION_LIST_ENTRY {

        /* package-private */ _TRANSACTION_LIST_ENTRY() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTION_LIST_ENTRY$struct$LAYOUT();
        }
        public static MemorySegment UOW$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTION_LIST_ENTRY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTION_LIST_ENTRY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTION_LIST_ENTRY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTION_LIST_ENTRY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTION_LIST_ENTRY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTION_LIST_ENTRY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTION_LIST_ENTRY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTION_LIST_ENTRY")public static class TRANSACTION_LIST_ENTRY extends _TRANSACTION_LIST_ENTRY {

        /* package-private */ TRANSACTION_LIST_ENTRY() {}
    }

    @C("struct _TRANSACTION_LIST_INFORMATION")public static class _TRANSACTION_LIST_INFORMATION {

        /* package-private */ _TRANSACTION_LIST_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TRANSACTION_LIST_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle NumberOfTransactions$VH() {
            return winnt_h$constants$12._TRANSACTION_LIST_INFORMATION$NumberOfTransactions$VH();
        }
        public static  @C("DWORD") int NumberOfTransactions$get(@C("struct _TRANSACTION_LIST_INFORMATION") MemorySegment seg) {
            return (int)winnt_h$constants$12._TRANSACTION_LIST_INFORMATION$NumberOfTransactions$VH().get(seg);
        }
        public static  @C("DWORD") int NumberOfTransactions$get(@C("struct _TRANSACTION_LIST_INFORMATION") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TRANSACTION_LIST_INFORMATION$NumberOfTransactions$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfTransactions$set(@C("struct _TRANSACTION_LIST_INFORMATION") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_LIST_INFORMATION$NumberOfTransactions$VH().set(seg, x);
        }
        public static void NumberOfTransactions$set(@C("struct _TRANSACTION_LIST_INFORMATION") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TRANSACTION_LIST_INFORMATION$NumberOfTransactions$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment TransactionInformation$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TRANSACTION_LIST_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TRANSACTION_LIST_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TRANSACTION_LIST_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TRANSACTION_LIST_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TRANSACTION_LIST_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TRANSACTION_LIST_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TRANSACTION_LIST_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TRANSACTION_LIST_INFORMATION")public static class TRANSACTION_LIST_INFORMATION extends _TRANSACTION_LIST_INFORMATION {

        /* package-private */ TRANSACTION_LIST_INFORMATION() {}
    }

    @C("struct _KTMOBJECT_CURSOR")public static class _KTMOBJECT_CURSOR {

        /* package-private */ _KTMOBJECT_CURSOR() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._KTMOBJECT_CURSOR$struct$LAYOUT();
        }
        public static MemorySegment LastQuery$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 16));
        }
        public static VarHandle ObjectIdCount$VH() {
            return winnt_h$constants$12._KTMOBJECT_CURSOR$ObjectIdCount$VH();
        }
        public static  @C("DWORD") int ObjectIdCount$get(@C("struct _KTMOBJECT_CURSOR") MemorySegment seg) {
            return (int)winnt_h$constants$12._KTMOBJECT_CURSOR$ObjectIdCount$VH().get(seg);
        }
        public static  @C("DWORD") int ObjectIdCount$get(@C("struct _KTMOBJECT_CURSOR") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._KTMOBJECT_CURSOR$ObjectIdCount$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ObjectIdCount$set(@C("struct _KTMOBJECT_CURSOR") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._KTMOBJECT_CURSOR$ObjectIdCount$VH().set(seg, x);
        }
        public static void ObjectIdCount$set(@C("struct _KTMOBJECT_CURSOR") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._KTMOBJECT_CURSOR$ObjectIdCount$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ObjectIds$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(20, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _KTMOBJECT_CURSOR") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _KTMOBJECT_CURSOR") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _KTMOBJECT_CURSOR[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _KTMOBJECT_CURSOR[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _KTMOBJECT_CURSOR*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _KTMOBJECT_CURSOR*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _KTMOBJECT_CURSOR") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _KTMOBJECT_CURSOR")public static class KTMOBJECT_CURSOR extends _KTMOBJECT_CURSOR {

        /* package-private */ KTMOBJECT_CURSOR() {}
    }

    @C("struct _TP_POOL_STACK_INFORMATION")public static class _TP_POOL_STACK_INFORMATION {

        /* package-private */ _TP_POOL_STACK_INFORMATION() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TP_POOL_STACK_INFORMATION$struct$LAYOUT();
        }
        public static VarHandle StackReserve$VH() {
            return winnt_h$constants$12._TP_POOL_STACK_INFORMATION$StackReserve$VH();
        }
        public static  @C("SIZE_T") long StackReserve$get(@C("struct _TP_POOL_STACK_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$12._TP_POOL_STACK_INFORMATION$StackReserve$VH().get(seg);
        }
        public static  @C("SIZE_T") long StackReserve$get(@C("struct _TP_POOL_STACK_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$12._TP_POOL_STACK_INFORMATION$StackReserve$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StackReserve$set(@C("struct _TP_POOL_STACK_INFORMATION") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$12._TP_POOL_STACK_INFORMATION$StackReserve$VH().set(seg, x);
        }
        public static void StackReserve$set(@C("struct _TP_POOL_STACK_INFORMATION") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$12._TP_POOL_STACK_INFORMATION$StackReserve$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle StackCommit$VH() {
            return winnt_h$constants$12._TP_POOL_STACK_INFORMATION$StackCommit$VH();
        }
        public static  @C("SIZE_T") long StackCommit$get(@C("struct _TP_POOL_STACK_INFORMATION") MemorySegment seg) {
            return (long)winnt_h$constants$12._TP_POOL_STACK_INFORMATION$StackCommit$VH().get(seg);
        }
        public static  @C("SIZE_T") long StackCommit$get(@C("struct _TP_POOL_STACK_INFORMATION") MemorySegment seg, long index) {
            return (long)winnt_h$constants$12._TP_POOL_STACK_INFORMATION$StackCommit$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StackCommit$set(@C("struct _TP_POOL_STACK_INFORMATION") MemorySegment seg, @C("SIZE_T") long x) {
            winnt_h$constants$12._TP_POOL_STACK_INFORMATION$StackCommit$VH().set(seg, x);
        }
        public static void StackCommit$set(@C("struct _TP_POOL_STACK_INFORMATION") MemorySegment seg, long index, @C("SIZE_T") long x) {
            winnt_h$constants$12._TP_POOL_STACK_INFORMATION$StackCommit$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TP_POOL_STACK_INFORMATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TP_POOL_STACK_INFORMATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TP_POOL_STACK_INFORMATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TP_POOL_STACK_INFORMATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TP_POOL_STACK_INFORMATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TP_POOL_STACK_INFORMATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TP_POOL_STACK_INFORMATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TP_POOL_STACK_INFORMATION")public static class TP_POOL_STACK_INFORMATION extends _TP_POOL_STACK_INFORMATION {

        /* package-private */ TP_POOL_STACK_INFORMATION() {}
    }

    @C("struct _TP_CALLBACK_ENVIRON_V3")public static class _TP_CALLBACK_ENVIRON_V3 {

        /* package-private */ _TP_CALLBACK_ENVIRON_V3() {}
        public static MemoryLayout $LAYOUT() {
            return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$struct$LAYOUT();
        }
        public static VarHandle Version$VH() {
            return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Version$VH();
        }
        public static  @C("TP_VERSION") int Version$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg) {
            return (int)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Version$VH().get(seg);
        }
        public static  @C("TP_VERSION") int Version$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Version$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Version$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, @C("TP_VERSION") int x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Version$VH().set(seg, x);
        }
        public static void Version$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index, @C("TP_VERSION") int x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Version$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Pool$VH() {
            return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Pool$VH();
        }
        public static  @C("PTP_POOL") MemoryAddress Pool$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Pool$VH().get(seg);
        }
        public static  @C("PTP_POOL") MemoryAddress Pool$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Pool$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Pool$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, @C("PTP_POOL") MemoryAddress x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Pool$VH().set(seg, x);
        }
        public static void Pool$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index, @C("PTP_POOL") MemoryAddress x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Pool$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CleanupGroup$VH() {
            return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CleanupGroup$VH();
        }
        public static  @C("PTP_CLEANUP_GROUP") MemoryAddress CleanupGroup$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CleanupGroup$VH().get(seg);
        }
        public static  @C("PTP_CLEANUP_GROUP") MemoryAddress CleanupGroup$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CleanupGroup$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CleanupGroup$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, @C("PTP_CLEANUP_GROUP") MemoryAddress x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CleanupGroup$VH().set(seg, x);
        }
        public static void CleanupGroup$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index, @C("PTP_CLEANUP_GROUP") MemoryAddress x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CleanupGroup$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CleanupGroupCancelCallback$VH() {
            return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CleanupGroupCancelCallback$VH();
        }
        public static  @C("PTP_CLEANUP_GROUP_CANCEL_CALLBACK") MemoryAddress CleanupGroupCancelCallback$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CleanupGroupCancelCallback$VH().get(seg);
        }
        public static  @C("PTP_CLEANUP_GROUP_CANCEL_CALLBACK") MemoryAddress CleanupGroupCancelCallback$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CleanupGroupCancelCallback$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CleanupGroupCancelCallback$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, @C("PTP_CLEANUP_GROUP_CANCEL_CALLBACK") MemoryAddress x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CleanupGroupCancelCallback$VH().set(seg, x);
        }
        public static void CleanupGroupCancelCallback$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index, @C("PTP_CLEANUP_GROUP_CANCEL_CALLBACK") MemoryAddress x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CleanupGroupCancelCallback$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RaceDll$VH() {
            return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$RaceDll$VH();
        }
        public static  @C("PVOID") MemoryAddress RaceDll$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$RaceDll$VH().get(seg);
        }
        public static  @C("PVOID") MemoryAddress RaceDll$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$RaceDll$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RaceDll$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$RaceDll$VH().set(seg, x);
        }
        public static void RaceDll$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index, @C("PVOID") MemoryAddress x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$RaceDll$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ActivationContext$VH() {
            return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$ActivationContext$VH();
        }
        public static  @C("struct _ACTIVATION_CONTEXT*") MemoryAddress ActivationContext$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$ActivationContext$VH().get(seg);
        }
        public static  @C("struct _ACTIVATION_CONTEXT*") MemoryAddress ActivationContext$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$ActivationContext$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ActivationContext$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, @C("struct _ACTIVATION_CONTEXT*") MemoryAddress x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$ActivationContext$VH().set(seg, x);
        }
        public static void ActivationContext$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index, @C("struct _ACTIVATION_CONTEXT*") MemoryAddress x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$ActivationContext$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FinalizationCallback$VH() {
            return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$FinalizationCallback$VH();
        }
        public static  @C("PTP_SIMPLE_CALLBACK") MemoryAddress FinalizationCallback$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$FinalizationCallback$VH().get(seg);
        }
        public static  @C("PTP_SIMPLE_CALLBACK") MemoryAddress FinalizationCallback$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$FinalizationCallback$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FinalizationCallback$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, @C("PTP_SIMPLE_CALLBACK") MemoryAddress x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$FinalizationCallback$VH().set(seg, x);
        }
        public static void FinalizationCallback$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index, @C("PTP_SIMPLE_CALLBACK") MemoryAddress x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$FinalizationCallback$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("union ")public static class u {

            /* package-private */ u() {}
            public static MemoryLayout $LAYOUT() {
                return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$u$union$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$u$Flags$VH();
            }
            public static  @C("DWORD") int Flags$get(@C("union ") MemorySegment seg) {
                return (int)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$u$Flags$VH().get(seg);
            }
            public static  @C("DWORD") int Flags$get(@C("union ") MemorySegment seg, long index) {
                return (int)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$u$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("union ") MemorySegment seg, @C("DWORD") int x) {
                winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$u$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("union ") MemorySegment seg, long index, @C("DWORD") int x) {
                winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$u$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            @C("struct ")public static class s {

                /* package-private */ s() {}
                public static MemoryLayout $LAYOUT() {
                    return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$u$s$struct$LAYOUT();
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment s$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 4));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("union ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("union ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("union []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("union []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("union *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("union *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("union ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment u$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(56, 4));
        }
        public static VarHandle CallbackPriority$VH() {
            return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CallbackPriority$VH();
        }
        public static  @C("TP_CALLBACK_PRIORITY") int CallbackPriority$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg) {
            return (int)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CallbackPriority$VH().get(seg);
        }
        public static  @C("TP_CALLBACK_PRIORITY") int CallbackPriority$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CallbackPriority$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CallbackPriority$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, @C("TP_CALLBACK_PRIORITY") int x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CallbackPriority$VH().set(seg, x);
        }
        public static void CallbackPriority$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index, @C("TP_CALLBACK_PRIORITY") int x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$CallbackPriority$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Size$VH() {
            return winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Size$VH();
        }
        public static  @C("DWORD") int Size$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg) {
            return (int)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Size$VH().get(seg);
        }
        public static  @C("DWORD") int Size$get(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index) {
            return (int)winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Size$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Size$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, @C("DWORD") int x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Size$VH().set(seg, x);
        }
        public static void Size$set(@C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment seg, long index, @C("DWORD") int x) {
            winnt_h$constants$12._TP_CALLBACK_ENVIRON_V3$Size$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct _TP_CALLBACK_ENVIRON_V3[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct _TP_CALLBACK_ENVIRON_V3[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct _TP_CALLBACK_ENVIRON_V3*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TP_CALLBACK_ENVIRON_V3*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct _TP_CALLBACK_ENVIRON_V3") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct _TP_CALLBACK_ENVIRON_V3")public static class TP_CALLBACK_ENVIRON_V3 extends _TP_CALLBACK_ENVIRON_V3 {

        /* package-private */ TP_CALLBACK_ENVIRON_V3() {}
    }

    @C("struct _TP_CALLBACK_ENVIRON_V3")public static class TP_CALLBACK_ENVIRON extends _TP_CALLBACK_ENVIRON_V3 {

        /* package-private */ TP_CALLBACK_ENVIRON() {}
    }

    public static interface TpSetCallbackCleanupGroup$CleanupGroupCancelCallback {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  @C("PTP_CLEANUP_GROUP_CANCEL_CALLBACK") MemorySegment allocate(TpSetCallbackCleanupGroup$CleanupGroupCancelCallback fi) {
            return RuntimeHelper.upcallStub(TpSetCallbackCleanupGroup$CleanupGroupCancelCallback.class, fi, winnt_h$constants$13.TpSetCallbackCleanupGroup$CleanupGroupCancelCallback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  @C("PTP_CLEANUP_GROUP_CANCEL_CALLBACK") MemorySegment allocate(TpSetCallbackCleanupGroup$CleanupGroupCancelCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static interface TpSetCallbackFinalizationCallback$FinalizationCallback {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  @C("PTP_SIMPLE_CALLBACK") MemorySegment allocate(TpSetCallbackFinalizationCallback$FinalizationCallback fi) {
            return RuntimeHelper.upcallStub(TpSetCallbackFinalizationCallback$FinalizationCallback.class, fi, winnt_h$constants$13.TpSetCallbackFinalizationCallback$FinalizationCallback$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  @C("PTP_SIMPLE_CALLBACK") MemorySegment allocate(TpSetCallbackFinalizationCallback$FinalizationCallback fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    @C("struct _TP_CALLBACK_INSTANCE")public static class TP_CALLBACK_INSTANCE {

        /* package-private */ TP_CALLBACK_INSTANCE() {}
        public static @C("struct _TP_CALLBACK_INSTANCE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TP_CALLBACK_INSTANCE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
    }

    @C("struct _IMAGE_RUNTIME_FUNCTION_ENTRY")public static class RUNTIME_FUNCTION extends _IMAGE_RUNTIME_FUNCTION_ENTRY {

        /* package-private */ RUNTIME_FUNCTION() {}
    }

    @C("struct _TP_WORK")public static class TP_WORK {

        /* package-private */ TP_WORK() {}
        public static @C("struct _TP_WORK*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TP_WORK*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
    }

    @C("struct _TP_WAIT")public static class TP_WAIT {

        /* package-private */ TP_WAIT() {}
        public static @C("struct _TP_WAIT*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TP_WAIT*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
    }

    @C("struct _PACKEDEVENTINFO")public static class PACKEDEVENTINFO extends _PACKEDEVENTINFO {

        /* package-private */ PACKEDEVENTINFO() {}
    }

    @C("struct _EVENTSFORLOGFILE")public static class EVENTSFORLOGFILE extends _EVENTSFORLOGFILE {

        /* package-private */ EVENTSFORLOGFILE() {}
    }

    @C("struct _TP_IO")public static class TP_IO {

        /* package-private */ TP_IO() {}
        public static @C("struct _TP_IO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TP_IO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
    }

    @C("struct _TP_POOL")public static class TP_POOL {

        /* package-private */ TP_POOL() {}
        public static @C("struct _TP_POOL*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TP_POOL*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
    }

    @C("struct _TP_CLEANUP_GROUP")public static class TP_CLEANUP_GROUP {

        /* package-private */ TP_CLEANUP_GROUP() {}
        public static @C("struct _TP_CLEANUP_GROUP*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TP_CLEANUP_GROUP*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
    }

    @C("struct _TP_TIMER")public static class TP_TIMER {

        /* package-private */ TP_TIMER() {}
        public static @C("struct _TP_TIMER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct _TP_TIMER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
    }

}


