// Generated by jextract

package com.github.tornaia.foreign.win.api.winnt.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class winnt_h$constants$8 extends winnt_h$constants$7 {

    /* package-private */ winnt_h$constants$8() {}
    static final MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$Processors$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_PERFSTATE_DOMAIN_EVENT$Processors$LAYOUT() { return PPM_PERFSTATE_DOMAIN_EVENT$Processors$LAYOUT_; }

    static final VarHandle PPM_PERFSTATE_DOMAIN_EVENT$Processors$VH_ = PPM_PERFSTATE_DOMAIN_EVENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Processors"));
    static final java.lang.invoke.VarHandle PPM_PERFSTATE_DOMAIN_EVENT$Processors$VH() { return PPM_PERFSTATE_DOMAIN_EVENT$Processors$VH_; }

    static final MemoryLayout PPM_IDLESTATE_EVENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NewState"),
        C_LONG.withName("OldState"),
        C_LONGLONG.withName("Processors")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLESTATE_EVENT$struct$LAYOUT() { return PPM_IDLESTATE_EVENT$struct$LAYOUT_; }

    static final MemoryLayout PPM_IDLESTATE_EVENT$NewState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLESTATE_EVENT$NewState$LAYOUT() { return PPM_IDLESTATE_EVENT$NewState$LAYOUT_; }

    static final VarHandle PPM_IDLESTATE_EVENT$NewState$VH_ = PPM_IDLESTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NewState"));
    static final java.lang.invoke.VarHandle PPM_IDLESTATE_EVENT$NewState$VH() { return PPM_IDLESTATE_EVENT$NewState$VH_; }

    static final MemoryLayout PPM_IDLESTATE_EVENT$OldState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLESTATE_EVENT$OldState$LAYOUT() { return PPM_IDLESTATE_EVENT$OldState$LAYOUT_; }

    static final VarHandle PPM_IDLESTATE_EVENT$OldState$VH_ = PPM_IDLESTATE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OldState"));
    static final java.lang.invoke.VarHandle PPM_IDLESTATE_EVENT$OldState$VH() { return PPM_IDLESTATE_EVENT$OldState$VH_; }

    static final MemoryLayout PPM_IDLESTATE_EVENT$Processors$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_IDLESTATE_EVENT$Processors$LAYOUT() { return PPM_IDLESTATE_EVENT$Processors$LAYOUT_; }

    static final VarHandle PPM_IDLESTATE_EVENT$Processors$VH_ = PPM_IDLESTATE_EVENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Processors"));
    static final java.lang.invoke.VarHandle PPM_IDLESTATE_EVENT$Processors$VH() { return PPM_IDLESTATE_EVENT$Processors$VH_; }

    static final MemoryLayout PPM_THERMALCHANGE_EVENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ThermalConstraint"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Processors")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_THERMALCHANGE_EVENT$struct$LAYOUT() { return PPM_THERMALCHANGE_EVENT$struct$LAYOUT_; }

    static final MemoryLayout PPM_THERMALCHANGE_EVENT$ThermalConstraint$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_THERMALCHANGE_EVENT$ThermalConstraint$LAYOUT() { return PPM_THERMALCHANGE_EVENT$ThermalConstraint$LAYOUT_; }

    static final VarHandle PPM_THERMALCHANGE_EVENT$ThermalConstraint$VH_ = PPM_THERMALCHANGE_EVENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ThermalConstraint"));
    static final java.lang.invoke.VarHandle PPM_THERMALCHANGE_EVENT$ThermalConstraint$VH() { return PPM_THERMALCHANGE_EVENT$ThermalConstraint$VH_; }

    static final MemoryLayout PPM_THERMALCHANGE_EVENT$Processors$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_THERMALCHANGE_EVENT$Processors$LAYOUT() { return PPM_THERMALCHANGE_EVENT$Processors$LAYOUT_; }

    static final VarHandle PPM_THERMALCHANGE_EVENT$Processors$VH_ = PPM_THERMALCHANGE_EVENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Processors"));
    static final java.lang.invoke.VarHandle PPM_THERMALCHANGE_EVENT$Processors$VH() { return PPM_THERMALCHANGE_EVENT$Processors$VH_; }

    static final MemoryLayout PPM_THERMAL_POLICY_EVENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Mode"),
        MemoryLayout.ofPaddingBits(56),
        C_LONGLONG.withName("Processors")
    );
    static final jdk.incubator.foreign.MemoryLayout PPM_THERMAL_POLICY_EVENT$struct$LAYOUT() { return PPM_THERMAL_POLICY_EVENT$struct$LAYOUT_; }

    static final MemoryLayout PPM_THERMAL_POLICY_EVENT$Mode$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PPM_THERMAL_POLICY_EVENT$Mode$LAYOUT() { return PPM_THERMAL_POLICY_EVENT$Mode$LAYOUT_; }

    static final VarHandle PPM_THERMAL_POLICY_EVENT$Mode$VH_ = PPM_THERMAL_POLICY_EVENT$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Mode"));
    static final java.lang.invoke.VarHandle PPM_THERMAL_POLICY_EVENT$Mode$VH() { return PPM_THERMAL_POLICY_EVENT$Mode$VH_; }

    static final MemoryLayout PPM_THERMAL_POLICY_EVENT$Processors$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout PPM_THERMAL_POLICY_EVENT$Processors$LAYOUT() { return PPM_THERMAL_POLICY_EVENT$Processors$LAYOUT_; }

    static final VarHandle PPM_THERMAL_POLICY_EVENT$Processors$VH_ = PPM_THERMAL_POLICY_EVENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Processors"));
    static final java.lang.invoke.VarHandle PPM_THERMAL_POLICY_EVENT$Processors$VH() { return PPM_THERMAL_POLICY_EVENT$Processors$VH_; }

    static final MemoryLayout POWER_ACTION_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Action"),
        C_LONG.withName("Flags"),
        C_LONG.withName("EventCode")
    );
    static final jdk.incubator.foreign.MemoryLayout POWER_ACTION_POLICY$struct$LAYOUT() { return POWER_ACTION_POLICY$struct$LAYOUT_; }

    static final MemoryLayout POWER_ACTION_POLICY$Action$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout POWER_ACTION_POLICY$Action$LAYOUT() { return POWER_ACTION_POLICY$Action$LAYOUT_; }

    static final VarHandle POWER_ACTION_POLICY$Action$VH_ = POWER_ACTION_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Action"));
    static final java.lang.invoke.VarHandle POWER_ACTION_POLICY$Action$VH() { return POWER_ACTION_POLICY$Action$VH_; }

    static final MemoryLayout POWER_ACTION_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout POWER_ACTION_POLICY$Flags$LAYOUT() { return POWER_ACTION_POLICY$Flags$LAYOUT_; }

    static final VarHandle POWER_ACTION_POLICY$Flags$VH_ = POWER_ACTION_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle POWER_ACTION_POLICY$Flags$VH() { return POWER_ACTION_POLICY$Flags$VH_; }

    static final MemoryLayout POWER_ACTION_POLICY$EventCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout POWER_ACTION_POLICY$EventCode$LAYOUT() { return POWER_ACTION_POLICY$EventCode$LAYOUT_; }

    static final VarHandle POWER_ACTION_POLICY$EventCode$VH_ = POWER_ACTION_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EventCode"));
    static final java.lang.invoke.VarHandle POWER_ACTION_POLICY$EventCode$VH() { return POWER_ACTION_POLICY$EventCode$VH_; }

    static final MemoryLayout SYSTEM_POWER_LEVEL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Enable"),
        MemoryLayout.ofSequence(3, C_CHAR).withName("Spare"),
        C_LONG.withName("BatteryLevel"),
        MemoryLayout.ofStruct(
            C_INT.withName("Action"),
            C_LONG.withName("Flags"),
            C_LONG.withName("EventCode")
        ).withName("PowerPolicy"),
        C_INT.withName("MinSystemState")
    );
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_LEVEL$struct$LAYOUT() { return SYSTEM_POWER_LEVEL$struct$LAYOUT_; }

    static final MemoryLayout SYSTEM_POWER_LEVEL$Enable$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_LEVEL$Enable$LAYOUT() { return SYSTEM_POWER_LEVEL$Enable$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_LEVEL$Enable$VH_ = SYSTEM_POWER_LEVEL$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Enable"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_LEVEL$Enable$VH() { return SYSTEM_POWER_LEVEL$Enable$VH_; }

    static final MemoryLayout SYSTEM_POWER_LEVEL$BatteryLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_LEVEL$BatteryLevel$LAYOUT() { return SYSTEM_POWER_LEVEL$BatteryLevel$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_LEVEL$BatteryLevel$VH_ = SYSTEM_POWER_LEVEL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BatteryLevel"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_LEVEL$BatteryLevel$VH() { return SYSTEM_POWER_LEVEL$BatteryLevel$VH_; }

    static final MemoryLayout SYSTEM_POWER_LEVEL$MinSystemState$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_LEVEL$MinSystemState$LAYOUT() { return SYSTEM_POWER_LEVEL$MinSystemState$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_LEVEL$MinSystemState$VH_ = SYSTEM_POWER_LEVEL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinSystemState"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_LEVEL$MinSystemState$VH() { return SYSTEM_POWER_LEVEL$MinSystemState$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Revision"),
        MemoryLayout.ofStruct(
            C_INT.withName("Action"),
            C_LONG.withName("Flags"),
            C_LONG.withName("EventCode")
        ).withName("PowerButton"),
        MemoryLayout.ofStruct(
            C_INT.withName("Action"),
            C_LONG.withName("Flags"),
            C_LONG.withName("EventCode")
        ).withName("SleepButton"),
        MemoryLayout.ofStruct(
            C_INT.withName("Action"),
            C_LONG.withName("Flags"),
            C_LONG.withName("EventCode")
        ).withName("LidClose"),
        C_INT.withName("LidOpenWake"),
        C_LONG.withName("Reserved"),
        MemoryLayout.ofStruct(
            C_INT.withName("Action"),
            C_LONG.withName("Flags"),
            C_LONG.withName("EventCode")
        ).withName("Idle"),
        C_LONG.withName("IdleTimeout"),
        C_CHAR.withName("IdleSensitivity"),
        C_CHAR.withName("DynamicThrottle"),
        MemoryLayout.ofSequence(2, C_CHAR).withName("Spare2"),
        C_INT.withName("MinSleep"),
        C_INT.withName("MaxSleep"),
        C_INT.withName("ReducedLatencySleep"),
        C_LONG.withName("WinLogonFlags"),
        C_LONG.withName("Spare3"),
        C_LONG.withName("DozeS4Timeout"),
        C_LONG.withName("BroadcastCapacityResolution"),
        MemoryLayout.ofSequence(4, MemoryLayout.ofStruct(
            C_CHAR.withName("Enable"),
            MemoryLayout.ofSequence(3, C_CHAR).withName("Spare"),
            C_LONG.withName("BatteryLevel"),
            MemoryLayout.ofStruct(
                C_INT.withName("Action"),
                C_LONG.withName("Flags"),
                C_LONG.withName("EventCode")
            ).withName("PowerPolicy"),
            C_INT.withName("MinSystemState")
        )).withName("DischargePolicy"),
        C_LONG.withName("VideoTimeout"),
        C_CHAR.withName("VideoDimDisplay"),
        MemoryLayout.ofPaddingBits(24),
        MemoryLayout.ofSequence(3, C_LONG).withName("VideoReserved"),
        C_LONG.withName("SpindownTimeout"),
        C_CHAR.withName("OptimizeForPower"),
        C_CHAR.withName("FanThrottleTolerance"),
        C_CHAR.withName("ForcedThrottle"),
        C_CHAR.withName("MinThrottle"),
        MemoryLayout.ofStruct(
            C_INT.withName("Action"),
            C_LONG.withName("Flags"),
            C_LONG.withName("EventCode")
        ).withName("OverThrottled")
    ).withName("_SYSTEM_POWER_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$struct$LAYOUT() { return _SYSTEM_POWER_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$Revision$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$Revision$LAYOUT() { return _SYSTEM_POWER_POLICY$Revision$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$Revision$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Revision"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$Revision$VH() { return _SYSTEM_POWER_POLICY$Revision$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$LidOpenWake$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$LidOpenWake$LAYOUT() { return _SYSTEM_POWER_POLICY$LidOpenWake$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$LidOpenWake$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LidOpenWake"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$LidOpenWake$VH() { return _SYSTEM_POWER_POLICY$LidOpenWake$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$Reserved$LAYOUT() { return _SYSTEM_POWER_POLICY$Reserved$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$Reserved$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$Reserved$VH() { return _SYSTEM_POWER_POLICY$Reserved$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$IdleTimeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$IdleTimeout$LAYOUT() { return _SYSTEM_POWER_POLICY$IdleTimeout$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$IdleTimeout$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IdleTimeout"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$IdleTimeout$VH() { return _SYSTEM_POWER_POLICY$IdleTimeout$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$IdleSensitivity$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$IdleSensitivity$LAYOUT() { return _SYSTEM_POWER_POLICY$IdleSensitivity$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$IdleSensitivity$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IdleSensitivity"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$IdleSensitivity$VH() { return _SYSTEM_POWER_POLICY$IdleSensitivity$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$DynamicThrottle$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$DynamicThrottle$LAYOUT() { return _SYSTEM_POWER_POLICY$DynamicThrottle$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$DynamicThrottle$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DynamicThrottle"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$DynamicThrottle$VH() { return _SYSTEM_POWER_POLICY$DynamicThrottle$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$MinSleep$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$MinSleep$LAYOUT() { return _SYSTEM_POWER_POLICY$MinSleep$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$MinSleep$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinSleep"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$MinSleep$VH() { return _SYSTEM_POWER_POLICY$MinSleep$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$MaxSleep$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$MaxSleep$LAYOUT() { return _SYSTEM_POWER_POLICY$MaxSleep$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$MaxSleep$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxSleep"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$MaxSleep$VH() { return _SYSTEM_POWER_POLICY$MaxSleep$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$ReducedLatencySleep$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$ReducedLatencySleep$LAYOUT() { return _SYSTEM_POWER_POLICY$ReducedLatencySleep$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$ReducedLatencySleep$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReducedLatencySleep"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$ReducedLatencySleep$VH() { return _SYSTEM_POWER_POLICY$ReducedLatencySleep$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$WinLogonFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$WinLogonFlags$LAYOUT() { return _SYSTEM_POWER_POLICY$WinLogonFlags$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$WinLogonFlags$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WinLogonFlags"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$WinLogonFlags$VH() { return _SYSTEM_POWER_POLICY$WinLogonFlags$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$Spare3$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$Spare3$LAYOUT() { return _SYSTEM_POWER_POLICY$Spare3$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$Spare3$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Spare3"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$Spare3$VH() { return _SYSTEM_POWER_POLICY$Spare3$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$DozeS4Timeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$DozeS4Timeout$LAYOUT() { return _SYSTEM_POWER_POLICY$DozeS4Timeout$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$DozeS4Timeout$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DozeS4Timeout"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$DozeS4Timeout$VH() { return _SYSTEM_POWER_POLICY$DozeS4Timeout$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$BroadcastCapacityResolution$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$BroadcastCapacityResolution$LAYOUT() { return _SYSTEM_POWER_POLICY$BroadcastCapacityResolution$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$BroadcastCapacityResolution$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BroadcastCapacityResolution"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$BroadcastCapacityResolution$VH() { return _SYSTEM_POWER_POLICY$BroadcastCapacityResolution$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$VideoTimeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$VideoTimeout$LAYOUT() { return _SYSTEM_POWER_POLICY$VideoTimeout$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$VideoTimeout$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VideoTimeout"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$VideoTimeout$VH() { return _SYSTEM_POWER_POLICY$VideoTimeout$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$VideoDimDisplay$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$VideoDimDisplay$LAYOUT() { return _SYSTEM_POWER_POLICY$VideoDimDisplay$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$VideoDimDisplay$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("VideoDimDisplay"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$VideoDimDisplay$VH() { return _SYSTEM_POWER_POLICY$VideoDimDisplay$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$SpindownTimeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$SpindownTimeout$LAYOUT() { return _SYSTEM_POWER_POLICY$SpindownTimeout$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$SpindownTimeout$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SpindownTimeout"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$SpindownTimeout$VH() { return _SYSTEM_POWER_POLICY$SpindownTimeout$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$OptimizeForPower$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$OptimizeForPower$LAYOUT() { return _SYSTEM_POWER_POLICY$OptimizeForPower$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$OptimizeForPower$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("OptimizeForPower"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$OptimizeForPower$VH() { return _SYSTEM_POWER_POLICY$OptimizeForPower$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$FanThrottleTolerance$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$FanThrottleTolerance$LAYOUT() { return _SYSTEM_POWER_POLICY$FanThrottleTolerance$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$FanThrottleTolerance$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("FanThrottleTolerance"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$FanThrottleTolerance$VH() { return _SYSTEM_POWER_POLICY$FanThrottleTolerance$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$ForcedThrottle$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$ForcedThrottle$LAYOUT() { return _SYSTEM_POWER_POLICY$ForcedThrottle$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$ForcedThrottle$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ForcedThrottle"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$ForcedThrottle$VH() { return _SYSTEM_POWER_POLICY$ForcedThrottle$VH_; }

    static final MemoryLayout _SYSTEM_POWER_POLICY$MinThrottle$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_POWER_POLICY$MinThrottle$LAYOUT() { return _SYSTEM_POWER_POLICY$MinThrottle$LAYOUT_; }

    static final VarHandle _SYSTEM_POWER_POLICY$MinThrottle$VH_ = _SYSTEM_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinThrottle"));
    static final java.lang.invoke.VarHandle _SYSTEM_POWER_POLICY$MinThrottle$VH() { return _SYSTEM_POWER_POLICY$MinThrottle$VH_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("TimeCheck"),
        C_CHAR.withName("DemotePercent"),
        C_CHAR.withName("PromotePercent"),
        MemoryLayout.ofSequence(2, C_CHAR).withName("Spare")
    );
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_INFO$struct$LAYOUT() { return PROCESSOR_IDLESTATE_INFO$struct$LAYOUT_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_INFO$TimeCheck$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_INFO$TimeCheck$LAYOUT() { return PROCESSOR_IDLESTATE_INFO$TimeCheck$LAYOUT_; }

    static final VarHandle PROCESSOR_IDLESTATE_INFO$TimeCheck$VH_ = PROCESSOR_IDLESTATE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeCheck"));
    static final java.lang.invoke.VarHandle PROCESSOR_IDLESTATE_INFO$TimeCheck$VH() { return PROCESSOR_IDLESTATE_INFO$TimeCheck$VH_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_INFO$DemotePercent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_INFO$DemotePercent$LAYOUT() { return PROCESSOR_IDLESTATE_INFO$DemotePercent$LAYOUT_; }

    static final VarHandle PROCESSOR_IDLESTATE_INFO$DemotePercent$VH_ = PROCESSOR_IDLESTATE_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DemotePercent"));
    static final java.lang.invoke.VarHandle PROCESSOR_IDLESTATE_INFO$DemotePercent$VH() { return PROCESSOR_IDLESTATE_INFO$DemotePercent$VH_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_INFO$PromotePercent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_INFO$PromotePercent$LAYOUT() { return PROCESSOR_IDLESTATE_INFO$PromotePercent$LAYOUT_; }

    static final VarHandle PROCESSOR_IDLESTATE_INFO$PromotePercent$VH_ = PROCESSOR_IDLESTATE_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PromotePercent"));
    static final java.lang.invoke.VarHandle PROCESSOR_IDLESTATE_INFO$PromotePercent$VH() { return PROCESSOR_IDLESTATE_INFO$PromotePercent$VH_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Revision"),
        MemoryLayout.ofUnion(
            C_SHORT.withName("AsWORD"),
            C_SHORT
        ).withName("Flags"),
        C_LONG.withName("PolicyCount"),
        MemoryLayout.ofSequence(3, MemoryLayout.ofStruct(
            C_LONG.withName("TimeCheck"),
            C_CHAR.withName("DemotePercent"),
            C_CHAR.withName("PromotePercent"),
            MemoryLayout.ofSequence(2, C_CHAR).withName("Spare")
        )).withName("Policy")
    );
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_POLICY$struct$LAYOUT() { return PROCESSOR_IDLESTATE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_POLICY$Revision$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_POLICY$Revision$LAYOUT() { return PROCESSOR_IDLESTATE_POLICY$Revision$LAYOUT_; }

    static final VarHandle PROCESSOR_IDLESTATE_POLICY$Revision$VH_ = PROCESSOR_IDLESTATE_POLICY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Revision"));
    static final java.lang.invoke.VarHandle PROCESSOR_IDLESTATE_POLICY$Revision$VH() { return PROCESSOR_IDLESTATE_POLICY$Revision$VH_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_POLICY$Flags$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_SHORT.withName("AsWORD"),
        C_SHORT
    );
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_POLICY$Flags$union$LAYOUT() { return PROCESSOR_IDLESTATE_POLICY$Flags$union$LAYOUT_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_POLICY$Flags$AsWORD$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_POLICY$Flags$AsWORD$LAYOUT() { return PROCESSOR_IDLESTATE_POLICY$Flags$AsWORD$LAYOUT_; }

    static final VarHandle PROCESSOR_IDLESTATE_POLICY$Flags$AsWORD$VH_ = PROCESSOR_IDLESTATE_POLICY$Flags$union$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("AsWORD"));
    static final java.lang.invoke.VarHandle PROCESSOR_IDLESTATE_POLICY$Flags$AsWORD$VH() { return PROCESSOR_IDLESTATE_POLICY$Flags$AsWORD$VH_; }

    static final MemoryLayout PROCESSOR_IDLESTATE_POLICY$PolicyCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_IDLESTATE_POLICY$PolicyCount$LAYOUT() { return PROCESSOR_IDLESTATE_POLICY$PolicyCount$LAYOUT_; }

    static final VarHandle PROCESSOR_IDLESTATE_POLICY$PolicyCount$VH_ = PROCESSOR_IDLESTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PolicyCount"));
    static final java.lang.invoke.VarHandle PROCESSOR_IDLESTATE_POLICY$PolicyCount$VH() { return PROCESSOR_IDLESTATE_POLICY$PolicyCount$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("TimeCheck"),
        C_LONG.withName("DemoteLimit"),
        C_LONG.withName("PromoteLimit"),
        C_CHAR.withName("DemotePercent"),
        C_CHAR.withName("PromotePercent"),
        MemoryLayout.ofSequence(2, C_CHAR).withName("Spare"),
        C_INT
    ).withName("_PROCESSOR_POWER_POLICY_INFO");
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT() { return _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY_INFO$TimeCheck$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY_INFO$TimeCheck$LAYOUT() { return _PROCESSOR_POWER_POLICY_INFO$TimeCheck$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY_INFO$TimeCheck$VH_ = _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeCheck"));
    static final java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY_INFO$TimeCheck$VH() { return _PROCESSOR_POWER_POLICY_INFO$TimeCheck$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY_INFO$DemoteLimit$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY_INFO$DemoteLimit$LAYOUT() { return _PROCESSOR_POWER_POLICY_INFO$DemoteLimit$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY_INFO$DemoteLimit$VH_ = _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DemoteLimit"));
    static final java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY_INFO$DemoteLimit$VH() { return _PROCESSOR_POWER_POLICY_INFO$DemoteLimit$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY_INFO$PromoteLimit$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY_INFO$PromoteLimit$LAYOUT() { return _PROCESSOR_POWER_POLICY_INFO$PromoteLimit$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY_INFO$PromoteLimit$VH_ = _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PromoteLimit"));
    static final java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY_INFO$PromoteLimit$VH() { return _PROCESSOR_POWER_POLICY_INFO$PromoteLimit$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY_INFO$DemotePercent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY_INFO$DemotePercent$LAYOUT() { return _PROCESSOR_POWER_POLICY_INFO$DemotePercent$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY_INFO$DemotePercent$VH_ = _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DemotePercent"));
    static final java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY_INFO$DemotePercent$VH() { return _PROCESSOR_POWER_POLICY_INFO$DemotePercent$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY_INFO$PromotePercent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY_INFO$PromotePercent$LAYOUT() { return _PROCESSOR_POWER_POLICY_INFO$PromotePercent$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY_INFO$PromotePercent$VH_ = _PROCESSOR_POWER_POLICY_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PromotePercent"));
    static final java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY_INFO$PromotePercent$VH() { return _PROCESSOR_POWER_POLICY_INFO$PromotePercent$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Revision"),
        C_CHAR.withName("DynamicThrottle"),
        MemoryLayout.ofSequence(3, C_CHAR).withName("Spare"),
        C_INT,
        C_LONG.withName("PolicyCount"),
        MemoryLayout.ofSequence(3, MemoryLayout.ofStruct(
            C_LONG.withName("TimeCheck"),
            C_LONG.withName("DemoteLimit"),
            C_LONG.withName("PromoteLimit"),
            C_CHAR.withName("DemotePercent"),
            C_CHAR.withName("PromotePercent"),
            MemoryLayout.ofSequence(2, C_CHAR).withName("Spare"),
            C_INT
        ).withName("_PROCESSOR_POWER_POLICY_INFO")).withName("Policy")
    ).withName("_PROCESSOR_POWER_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY$struct$LAYOUT() { return _PROCESSOR_POWER_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY$Revision$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY$Revision$LAYOUT() { return _PROCESSOR_POWER_POLICY$Revision$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY$Revision$VH_ = _PROCESSOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Revision"));
    static final java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY$Revision$VH() { return _PROCESSOR_POWER_POLICY$Revision$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY$DynamicThrottle$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY$DynamicThrottle$LAYOUT() { return _PROCESSOR_POWER_POLICY$DynamicThrottle$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY$DynamicThrottle$VH_ = _PROCESSOR_POWER_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DynamicThrottle"));
    static final java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY$DynamicThrottle$VH() { return _PROCESSOR_POWER_POLICY$DynamicThrottle$VH_; }

    static final MemoryLayout _PROCESSOR_POWER_POLICY$PolicyCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_POWER_POLICY$PolicyCount$LAYOUT() { return _PROCESSOR_POWER_POLICY$PolicyCount$LAYOUT_; }

    static final VarHandle _PROCESSOR_POWER_POLICY$PolicyCount$VH_ = _PROCESSOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PolicyCount"));
    static final java.lang.invoke.VarHandle _PROCESSOR_POWER_POLICY$PolicyCount$VH() { return _PROCESSOR_POWER_POLICY$PolicyCount$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Revision"),
        C_CHAR.withName("MaxThrottle"),
        C_CHAR.withName("MinThrottle"),
        C_CHAR.withName("BusyAdjThreshold"),
        C_CHAR.withName("Spare"),
        MemoryLayout.ofUnion(
            C_CHAR.withName("AsBYTE"),
            C_CHAR
        ).withName("Flags"),
        C_LONG.withName("TimeCheck"),
        C_LONG.withName("IncreaseTime"),
        C_LONG.withName("DecreaseTime"),
        C_LONG.withName("IncreasePercent"),
        C_LONG.withName("DecreasePercent")
    );
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$Revision$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$Revision$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$Revision$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$Revision$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Revision"));
    static final java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$Revision$VH() { return PROCESSOR_PERFSTATE_POLICY$Revision$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$MaxThrottle$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$MaxThrottle$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$MaxThrottle$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$MaxThrottle$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MaxThrottle"));
    static final java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$MaxThrottle$VH() { return PROCESSOR_PERFSTATE_POLICY$MaxThrottle$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$MinThrottle$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$MinThrottle$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$MinThrottle$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$MinThrottle$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinThrottle"));
    static final java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$MinThrottle$VH() { return PROCESSOR_PERFSTATE_POLICY$MinThrottle$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BusyAdjThreshold"));
    static final java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$VH() { return PROCESSOR_PERFSTATE_POLICY$BusyAdjThreshold$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$Spare$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$Spare$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$Spare$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$Spare$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Spare"));
    static final java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$Spare$VH() { return PROCESSOR_PERFSTATE_POLICY$Spare$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$Flags$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_CHAR.withName("AsBYTE"),
        C_CHAR
    );
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$Flags$union$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$Flags$union$LAYOUT_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$Flags$AsBYTE$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$Flags$AsBYTE$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$Flags$AsBYTE$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$Flags$AsBYTE$VH_ = PROCESSOR_PERFSTATE_POLICY$Flags$union$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AsBYTE"));
    static final java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$Flags$AsBYTE$VH() { return PROCESSOR_PERFSTATE_POLICY$Flags$AsBYTE$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$TimeCheck$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$TimeCheck$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$TimeCheck$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$TimeCheck$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeCheck"));
    static final java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$TimeCheck$VH() { return PROCESSOR_PERFSTATE_POLICY$TimeCheck$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$IncreaseTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$IncreaseTime$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$IncreaseTime$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$IncreaseTime$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IncreaseTime"));
    static final java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$IncreaseTime$VH() { return PROCESSOR_PERFSTATE_POLICY$IncreaseTime$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$DecreaseTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$DecreaseTime$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$DecreaseTime$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$DecreaseTime$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DecreaseTime"));
    static final java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$DecreaseTime$VH() { return PROCESSOR_PERFSTATE_POLICY$DecreaseTime$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$IncreasePercent$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$IncreasePercent$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$IncreasePercent$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$IncreasePercent$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IncreasePercent"));
    static final java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$IncreasePercent$VH() { return PROCESSOR_PERFSTATE_POLICY$IncreasePercent$VH_; }

    static final MemoryLayout PROCESSOR_PERFSTATE_POLICY$DecreasePercent$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout PROCESSOR_PERFSTATE_POLICY$DecreasePercent$LAYOUT() { return PROCESSOR_PERFSTATE_POLICY$DecreasePercent$LAYOUT_; }

    static final VarHandle PROCESSOR_PERFSTATE_POLICY$DecreasePercent$VH_ = PROCESSOR_PERFSTATE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DecreasePercent"));
    static final java.lang.invoke.VarHandle PROCESSOR_PERFSTATE_POLICY$DecreasePercent$VH() { return PROCESSOR_PERFSTATE_POLICY$DecreasePercent$VH_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MinSleep"),
        C_INT.withName("MaxSleep"),
        C_LONG.withName("MinVideoTimeout"),
        C_LONG.withName("MaxVideoTimeout"),
        C_LONG.withName("MinSpindownTimeout"),
        C_LONG.withName("MaxSpindownTimeout")
    ).withName("_ADMINISTRATOR_POWER_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$MinSleep$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$MinSleep$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$MinSleep$LAYOUT_; }

    static final VarHandle _ADMINISTRATOR_POWER_POLICY$MinSleep$VH_ = _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinSleep"));
    static final java.lang.invoke.VarHandle _ADMINISTRATOR_POWER_POLICY$MinSleep$VH() { return _ADMINISTRATOR_POWER_POLICY$MinSleep$VH_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$MaxSleep$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$MaxSleep$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$MaxSleep$LAYOUT_; }

    static final VarHandle _ADMINISTRATOR_POWER_POLICY$MaxSleep$VH_ = _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxSleep"));
    static final java.lang.invoke.VarHandle _ADMINISTRATOR_POWER_POLICY$MaxSleep$VH() { return _ADMINISTRATOR_POWER_POLICY$MaxSleep$VH_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$LAYOUT_; }

    static final VarHandle _ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$VH_ = _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinVideoTimeout"));
    static final java.lang.invoke.VarHandle _ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$VH() { return _ADMINISTRATOR_POWER_POLICY$MinVideoTimeout$VH_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$LAYOUT_; }

    static final VarHandle _ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$VH_ = _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxVideoTimeout"));
    static final java.lang.invoke.VarHandle _ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$VH() { return _ADMINISTRATOR_POWER_POLICY$MaxVideoTimeout$VH_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$LAYOUT_; }

    static final VarHandle _ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$VH_ = _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinSpindownTimeout"));
    static final java.lang.invoke.VarHandle _ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$VH() { return _ADMINISTRATOR_POWER_POLICY$MinSpindownTimeout$VH_; }

    static final MemoryLayout _ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$LAYOUT() { return _ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$LAYOUT_; }

    static final VarHandle _ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$VH_ = _ADMINISTRATOR_POWER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxSpindownTimeout"));
    static final java.lang.invoke.VarHandle _ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$VH() { return _ADMINISTRATOR_POWER_POLICY$MaxSpindownTimeout$VH_; }

    static final int HiberFileBucket1GB() { return (int)0L; }

    static final int HiberFileBucket2GB() { return (int)1L; }

    static final int HiberFileBucket4GB() { return (int)2L; }

    static final int HiberFileBucket8GB() { return (int)3L; }

    static final int HiberFileBucket16GB() { return (int)4L; }

    static final int HiberFileBucket32GB() { return (int)5L; }

    static final int HiberFileBucketUnlimited() { return (int)6L; }

    static final int HiberFileBucketMax() { return (int)7L; }

    static final MemoryLayout _HIBERFILE_BUCKET$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxPhysicalMemory"),
        MemoryLayout.ofSequence(3, C_LONG).withName("PhysicalMemoryPercent"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_HIBERFILE_BUCKET");
    static final jdk.incubator.foreign.MemoryLayout _HIBERFILE_BUCKET$struct$LAYOUT() { return _HIBERFILE_BUCKET$struct$LAYOUT_; }

    static final MemoryLayout _HIBERFILE_BUCKET$MaxPhysicalMemory$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _HIBERFILE_BUCKET$MaxPhysicalMemory$LAYOUT() { return _HIBERFILE_BUCKET$MaxPhysicalMemory$LAYOUT_; }

    static final VarHandle _HIBERFILE_BUCKET$MaxPhysicalMemory$VH_ = _HIBERFILE_BUCKET$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxPhysicalMemory"));
    static final java.lang.invoke.VarHandle _HIBERFILE_BUCKET$MaxPhysicalMemory$VH() { return _HIBERFILE_BUCKET$MaxPhysicalMemory$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("PowerButtonPresent"),
        C_CHAR.withName("SleepButtonPresent"),
        C_CHAR.withName("LidPresent"),
        C_CHAR.withName("SystemS1"),
        C_CHAR.withName("SystemS2"),
        C_CHAR.withName("SystemS3"),
        C_CHAR.withName("SystemS4"),
        C_CHAR.withName("SystemS5"),
        C_CHAR.withName("HiberFilePresent"),
        C_CHAR.withName("FullWake"),
        C_CHAR.withName("VideoDimPresent"),
        C_CHAR.withName("ApmPresent"),
        C_CHAR.withName("UpsPresent"),
        C_CHAR.withName("ThermalControl"),
        C_CHAR.withName("ProcessorThrottle"),
        C_CHAR.withName("ProcessorMinThrottle"),
        C_CHAR.withName("ProcessorMaxThrottle"),
        C_CHAR.withName("FastSystemS4"),
        C_CHAR.withName("Hiberboot"),
        C_CHAR.withName("WakeAlarmPresent"),
        C_CHAR.withName("AoAc"),
        C_CHAR.withName("DiskSpinDown"),
        C_CHAR.withName("HiberFileType"),
        C_CHAR.withName("AoAcConnectivitySupported"),
        MemoryLayout.ofSequence(6, C_CHAR).withName("spare3"),
        C_CHAR.withName("SystemBatteriesPresent"),
        C_CHAR.withName("BatteriesAreShortTerm"),
        MemoryLayout.ofSequence(3, MemoryLayout.ofStruct(
            C_LONG.withName("Granularity"),
            C_LONG.withName("Capacity")
        )).withName("BatteryScale"),
        C_INT.withName("AcOnLineWake"),
        C_INT.withName("SoftLidWake"),
        C_INT.withName("RtcWake"),
        C_INT.withName("MinDeviceWakeState"),
        C_INT.withName("DefaultLowLatencyWake")
    );
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$struct$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PowerButtonPresent"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$VH() { return SYSTEM_POWER_CAPABILITIES$PowerButtonPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SleepButtonPresent"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$VH() { return SYSTEM_POWER_CAPABILITIES$SleepButtonPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$LidPresent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$LidPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$LidPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$LidPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("LidPresent"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$LidPresent$VH() { return SYSTEM_POWER_CAPABILITIES$LidPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS1$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemS1$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemS1$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemS1"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemS1$VH() { return SYSTEM_POWER_CAPABILITIES$SystemS1$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS2$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS2$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemS2$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemS2$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemS2"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemS2$VH() { return SYSTEM_POWER_CAPABILITIES$SystemS2$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS3$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS3$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemS3$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemS3$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemS3"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemS3$VH() { return SYSTEM_POWER_CAPABILITIES$SystemS3$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS4$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS4$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemS4$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemS4$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemS4"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemS4$VH() { return SYSTEM_POWER_CAPABILITIES$SystemS4$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS5$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemS5$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemS5$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemS5$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemS5"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemS5$VH() { return SYSTEM_POWER_CAPABILITIES$SystemS5$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$HiberFilePresent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$HiberFilePresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$HiberFilePresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$HiberFilePresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("HiberFilePresent"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$HiberFilePresent$VH() { return SYSTEM_POWER_CAPABILITIES$HiberFilePresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$FullWake$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$FullWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$FullWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$FullWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("FullWake"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$FullWake$VH() { return SYSTEM_POWER_CAPABILITIES$FullWake$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$VideoDimPresent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$VideoDimPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$VideoDimPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$VideoDimPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("VideoDimPresent"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$VideoDimPresent$VH() { return SYSTEM_POWER_CAPABILITIES$VideoDimPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$ApmPresent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$ApmPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$ApmPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$ApmPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ApmPresent"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$ApmPresent$VH() { return SYSTEM_POWER_CAPABILITIES$ApmPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$UpsPresent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$UpsPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$UpsPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$UpsPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("UpsPresent"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$UpsPresent$VH() { return SYSTEM_POWER_CAPABILITIES$UpsPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$ThermalControl$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$ThermalControl$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$ThermalControl$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$ThermalControl$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ThermalControl"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$ThermalControl$VH() { return SYSTEM_POWER_CAPABILITIES$ThermalControl$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ProcessorThrottle"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$VH() { return SYSTEM_POWER_CAPABILITIES$ProcessorThrottle$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ProcessorMinThrottle"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$VH() { return SYSTEM_POWER_CAPABILITIES$ProcessorMinThrottle$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ProcessorMaxThrottle"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$VH() { return SYSTEM_POWER_CAPABILITIES$ProcessorMaxThrottle$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$FastSystemS4$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$FastSystemS4$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$FastSystemS4$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$FastSystemS4$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("FastSystemS4"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$FastSystemS4$VH() { return SYSTEM_POWER_CAPABILITIES$FastSystemS4$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$Hiberboot$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$Hiberboot$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$Hiberboot$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$Hiberboot$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Hiberboot"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$Hiberboot$VH() { return SYSTEM_POWER_CAPABILITIES$Hiberboot$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("WakeAlarmPresent"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$VH() { return SYSTEM_POWER_CAPABILITIES$WakeAlarmPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$AoAc$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$AoAc$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$AoAc$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$AoAc$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AoAc"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$AoAc$VH() { return SYSTEM_POWER_CAPABILITIES$AoAc$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$DiskSpinDown$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$DiskSpinDown$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$DiskSpinDown$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DiskSpinDown"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH() { return SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$HiberFileType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$HiberFileType$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$HiberFileType$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$HiberFileType$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("HiberFileType"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$HiberFileType$VH() { return SYSTEM_POWER_CAPABILITIES$HiberFileType$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AoAcConnectivitySupported"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH() { return SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemBatteriesPresent"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH() { return SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BatteriesAreShortTerm"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH() { return SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$AcOnLineWake$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$AcOnLineWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$AcOnLineWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AcOnLineWake"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH() { return SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SoftLidWake$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SoftLidWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SoftLidWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SoftLidWake"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH() { return SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$RtcWake$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$RtcWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$RtcWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$RtcWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RtcWake"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$RtcWake$VH() { return SYSTEM_POWER_CAPABILITIES$RtcWake$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinDeviceWakeState"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH() { return SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DefaultLowLatencyWake"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH() { return SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("AcOnLine"),
        C_CHAR.withName("BatteryPresent"),
        C_CHAR.withName("Charging"),
        C_CHAR.withName("Discharging"),
        MemoryLayout.ofSequence(3, C_CHAR).withName("Spare1"),
        C_CHAR.withName("Tag"),
        C_LONG.withName("MaxCapacity"),
        C_LONG.withName("RemainingCapacity"),
        C_LONG.withName("Rate"),
        C_LONG.withName("EstimatedTime"),
        C_LONG.withName("DefaultAlert1"),
        C_LONG.withName("DefaultAlert2")
    );
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$struct$LAYOUT() { return SYSTEM_BATTERY_STATE$struct$LAYOUT_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$AcOnLine$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$AcOnLine$LAYOUT() { return SYSTEM_BATTERY_STATE$AcOnLine$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$AcOnLine$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AcOnLine"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$AcOnLine$VH() { return SYSTEM_BATTERY_STATE$AcOnLine$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$BatteryPresent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$BatteryPresent$LAYOUT() { return SYSTEM_BATTERY_STATE$BatteryPresent$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$BatteryPresent$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BatteryPresent"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$BatteryPresent$VH() { return SYSTEM_BATTERY_STATE$BatteryPresent$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$Charging$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$Charging$LAYOUT() { return SYSTEM_BATTERY_STATE$Charging$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$Charging$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Charging"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$Charging$VH() { return SYSTEM_BATTERY_STATE$Charging$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$Discharging$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$Discharging$LAYOUT() { return SYSTEM_BATTERY_STATE$Discharging$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$Discharging$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Discharging"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$Discharging$VH() { return SYSTEM_BATTERY_STATE$Discharging$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$Tag$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$Tag$LAYOUT() { return SYSTEM_BATTERY_STATE$Tag$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$Tag$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Tag"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$Tag$VH() { return SYSTEM_BATTERY_STATE$Tag$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$MaxCapacity$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$MaxCapacity$LAYOUT() { return SYSTEM_BATTERY_STATE$MaxCapacity$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$MaxCapacity$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxCapacity"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$MaxCapacity$VH() { return SYSTEM_BATTERY_STATE$MaxCapacity$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$RemainingCapacity$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$RemainingCapacity$LAYOUT() { return SYSTEM_BATTERY_STATE$RemainingCapacity$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$RemainingCapacity$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RemainingCapacity"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$RemainingCapacity$VH() { return SYSTEM_BATTERY_STATE$RemainingCapacity$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$Rate$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$Rate$LAYOUT() { return SYSTEM_BATTERY_STATE$Rate$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$Rate$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Rate"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$Rate$VH() { return SYSTEM_BATTERY_STATE$Rate$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$EstimatedTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$EstimatedTime$LAYOUT() { return SYSTEM_BATTERY_STATE$EstimatedTime$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$EstimatedTime$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EstimatedTime"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$EstimatedTime$VH() { return SYSTEM_BATTERY_STATE$EstimatedTime$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$DefaultAlert1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$DefaultAlert1$LAYOUT() { return SYSTEM_BATTERY_STATE$DefaultAlert1$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$DefaultAlert1$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DefaultAlert1"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$DefaultAlert1$VH() { return SYSTEM_BATTERY_STATE$DefaultAlert1$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$DefaultAlert2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$DefaultAlert2$LAYOUT() { return SYSTEM_BATTERY_STATE$DefaultAlert2$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$DefaultAlert2$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DefaultAlert2"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$DefaultAlert2$VH() { return SYSTEM_BATTERY_STATE$DefaultAlert2$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("e_magic"),
        C_SHORT.withName("e_cblp"),
        C_SHORT.withName("e_cp"),
        C_SHORT.withName("e_crlc"),
        C_SHORT.withName("e_cparhdr"),
        C_SHORT.withName("e_minalloc"),
        C_SHORT.withName("e_maxalloc"),
        C_SHORT.withName("e_ss"),
        C_SHORT.withName("e_sp"),
        C_SHORT.withName("e_csum"),
        C_SHORT.withName("e_ip"),
        C_SHORT.withName("e_cs"),
        C_SHORT.withName("e_lfarlc"),
        C_SHORT.withName("e_ovno"),
        MemoryLayout.ofSequence(4, C_SHORT).withName("e_res"),
        C_SHORT.withName("e_oemid"),
        C_SHORT.withName("e_oeminfo"),
        MemoryLayout.ofSequence(10, C_SHORT).withName("e_res2"),
        C_LONG.withName("e_lfanew")
    ).withName("_IMAGE_DOS_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$struct$LAYOUT() { return _IMAGE_DOS_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_magic$LAYOUT() { return _IMAGE_DOS_HEADER$e_magic$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_magic$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_magic"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_magic$VH() { return _IMAGE_DOS_HEADER$e_magic$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_cblp$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_cblp$LAYOUT() { return _IMAGE_DOS_HEADER$e_cblp$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_cblp$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_cblp"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_cblp$VH() { return _IMAGE_DOS_HEADER$e_cblp$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_cp$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_cp$LAYOUT() { return _IMAGE_DOS_HEADER$e_cp$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_cp$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_cp"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_cp$VH() { return _IMAGE_DOS_HEADER$e_cp$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_crlc$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_crlc$LAYOUT() { return _IMAGE_DOS_HEADER$e_crlc$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_crlc$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_crlc"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_crlc$VH() { return _IMAGE_DOS_HEADER$e_crlc$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_cparhdr$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_cparhdr$LAYOUT() { return _IMAGE_DOS_HEADER$e_cparhdr$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_cparhdr$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_cparhdr"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_cparhdr$VH() { return _IMAGE_DOS_HEADER$e_cparhdr$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_minalloc$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_minalloc$LAYOUT() { return _IMAGE_DOS_HEADER$e_minalloc$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_minalloc$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_minalloc"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_minalloc$VH() { return _IMAGE_DOS_HEADER$e_minalloc$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_maxalloc$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_maxalloc$LAYOUT() { return _IMAGE_DOS_HEADER$e_maxalloc$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_maxalloc$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_maxalloc"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_maxalloc$VH() { return _IMAGE_DOS_HEADER$e_maxalloc$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_ss$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_ss$LAYOUT() { return _IMAGE_DOS_HEADER$e_ss$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_ss$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_ss"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_ss$VH() { return _IMAGE_DOS_HEADER$e_ss$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_sp$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_sp$LAYOUT() { return _IMAGE_DOS_HEADER$e_sp$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_sp$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_sp"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_sp$VH() { return _IMAGE_DOS_HEADER$e_sp$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_csum$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_csum$LAYOUT() { return _IMAGE_DOS_HEADER$e_csum$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_csum$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_csum"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_csum$VH() { return _IMAGE_DOS_HEADER$e_csum$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_ip$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_ip$LAYOUT() { return _IMAGE_DOS_HEADER$e_ip$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_ip$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_ip"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_ip$VH() { return _IMAGE_DOS_HEADER$e_ip$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_cs$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_cs$LAYOUT() { return _IMAGE_DOS_HEADER$e_cs$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_cs$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_cs"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_cs$VH() { return _IMAGE_DOS_HEADER$e_cs$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_lfarlc$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_lfarlc$LAYOUT() { return _IMAGE_DOS_HEADER$e_lfarlc$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_lfarlc$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_lfarlc"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_lfarlc$VH() { return _IMAGE_DOS_HEADER$e_lfarlc$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_ovno$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_ovno$LAYOUT() { return _IMAGE_DOS_HEADER$e_ovno$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_ovno$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_ovno"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_ovno$VH() { return _IMAGE_DOS_HEADER$e_ovno$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_oemid$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_oemid$LAYOUT() { return _IMAGE_DOS_HEADER$e_oemid$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_oemid$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_oemid"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_oemid$VH() { return _IMAGE_DOS_HEADER$e_oemid$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_oeminfo$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_oeminfo$LAYOUT() { return _IMAGE_DOS_HEADER$e_oeminfo$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_oeminfo$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_oeminfo"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_oeminfo$VH() { return _IMAGE_DOS_HEADER$e_oeminfo$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_lfanew$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_lfanew$LAYOUT() { return _IMAGE_DOS_HEADER$e_lfanew$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_lfanew$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e_lfanew"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_lfanew$VH() { return _IMAGE_DOS_HEADER$e_lfanew$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("ne_magic"),
        C_CHAR.withName("ne_ver"),
        C_CHAR.withName("ne_rev"),
        C_SHORT.withName("ne_enttab"),
        C_SHORT.withName("ne_cbenttab"),
        C_LONG.withName("ne_crc"),
        C_SHORT.withName("ne_flags"),
        C_SHORT.withName("ne_autodata"),
        C_SHORT.withName("ne_heap"),
        C_SHORT.withName("ne_stack"),
        C_LONG.withName("ne_csip"),
        C_LONG.withName("ne_sssp"),
        C_SHORT.withName("ne_cseg"),
        C_SHORT.withName("ne_cmod"),
        C_SHORT.withName("ne_cbnrestab"),
        C_SHORT.withName("ne_segtab"),
        C_SHORT.withName("ne_rsrctab"),
        C_SHORT.withName("ne_restab"),
        C_SHORT.withName("ne_modtab"),
        C_SHORT.withName("ne_imptab"),
        C_LONG.withName("ne_nrestab"),
        C_SHORT.withName("ne_cmovent"),
        C_SHORT.withName("ne_align"),
        C_SHORT.withName("ne_cres"),
        C_CHAR.withName("ne_exetyp"),
        C_CHAR.withName("ne_flagsothers"),
        C_SHORT.withName("ne_pretthunks"),
        C_SHORT.withName("ne_psegrefbytes"),
        C_SHORT.withName("ne_swaparea"),
        C_SHORT.withName("ne_expver")
    ).withName("_IMAGE_OS2_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$struct$LAYOUT() { return _IMAGE_OS2_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_magic$LAYOUT() { return _IMAGE_OS2_HEADER$ne_magic$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_magic$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_magic"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_magic$VH() { return _IMAGE_OS2_HEADER$ne_magic$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_ver$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_ver$LAYOUT() { return _IMAGE_OS2_HEADER$ne_ver$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_ver$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ne_ver"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_ver$VH() { return _IMAGE_OS2_HEADER$ne_ver$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_rev$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_rev$LAYOUT() { return _IMAGE_OS2_HEADER$ne_rev$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_rev$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ne_rev"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_rev$VH() { return _IMAGE_OS2_HEADER$ne_rev$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_enttab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_enttab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_enttab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_enttab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_enttab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_enttab$VH() { return _IMAGE_OS2_HEADER$ne_enttab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cbenttab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cbenttab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cbenttab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cbenttab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cbenttab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cbenttab$VH() { return _IMAGE_OS2_HEADER$ne_cbenttab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_crc$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_crc$LAYOUT() { return _IMAGE_OS2_HEADER$ne_crc$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_crc$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ne_crc"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_crc$VH() { return _IMAGE_OS2_HEADER$ne_crc$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_flags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_flags$LAYOUT() { return _IMAGE_OS2_HEADER$ne_flags$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_flags$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_flags"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_flags$VH() { return _IMAGE_OS2_HEADER$ne_flags$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_autodata$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_autodata$LAYOUT() { return _IMAGE_OS2_HEADER$ne_autodata$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_autodata$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_autodata"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_autodata$VH() { return _IMAGE_OS2_HEADER$ne_autodata$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_heap$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_heap$LAYOUT() { return _IMAGE_OS2_HEADER$ne_heap$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_heap$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_heap"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_heap$VH() { return _IMAGE_OS2_HEADER$ne_heap$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_stack$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_stack$LAYOUT() { return _IMAGE_OS2_HEADER$ne_stack$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_stack$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_stack"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_stack$VH() { return _IMAGE_OS2_HEADER$ne_stack$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_csip$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_csip$LAYOUT() { return _IMAGE_OS2_HEADER$ne_csip$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_csip$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ne_csip"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_csip$VH() { return _IMAGE_OS2_HEADER$ne_csip$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_sssp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_sssp$LAYOUT() { return _IMAGE_OS2_HEADER$ne_sssp$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_sssp$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ne_sssp"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_sssp$VH() { return _IMAGE_OS2_HEADER$ne_sssp$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cseg$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cseg$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cseg$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cseg$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cseg"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cseg$VH() { return _IMAGE_OS2_HEADER$ne_cseg$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cmod$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cmod$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cmod$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cmod$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cmod"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cmod$VH() { return _IMAGE_OS2_HEADER$ne_cmod$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cbnrestab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cbnrestab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cbnrestab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cbnrestab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cbnrestab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cbnrestab$VH() { return _IMAGE_OS2_HEADER$ne_cbnrestab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_segtab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_segtab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_segtab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_segtab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_segtab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_segtab$VH() { return _IMAGE_OS2_HEADER$ne_segtab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_rsrctab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_rsrctab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_rsrctab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_rsrctab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_rsrctab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_rsrctab$VH() { return _IMAGE_OS2_HEADER$ne_rsrctab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_restab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_restab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_restab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_restab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_restab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_restab$VH() { return _IMAGE_OS2_HEADER$ne_restab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_modtab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_modtab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_modtab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_modtab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_modtab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_modtab$VH() { return _IMAGE_OS2_HEADER$ne_modtab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_imptab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_imptab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_imptab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_imptab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_imptab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_imptab$VH() { return _IMAGE_OS2_HEADER$ne_imptab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_nrestab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_nrestab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_nrestab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_nrestab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ne_nrestab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_nrestab$VH() { return _IMAGE_OS2_HEADER$ne_nrestab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cmovent$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cmovent$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cmovent$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cmovent$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cmovent"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cmovent$VH() { return _IMAGE_OS2_HEADER$ne_cmovent$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_align$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_align$LAYOUT() { return _IMAGE_OS2_HEADER$ne_align$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_align$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_align"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_align$VH() { return _IMAGE_OS2_HEADER$ne_align$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cres$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cres$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cres$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cres$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cres"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cres$VH() { return _IMAGE_OS2_HEADER$ne_cres$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_exetyp$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_exetyp$LAYOUT() { return _IMAGE_OS2_HEADER$ne_exetyp$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_exetyp$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ne_exetyp"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_exetyp$VH() { return _IMAGE_OS2_HEADER$ne_exetyp$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_flagsothers$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_flagsothers$LAYOUT() { return _IMAGE_OS2_HEADER$ne_flagsothers$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_flagsothers$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ne_flagsothers"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_flagsothers$VH() { return _IMAGE_OS2_HEADER$ne_flagsothers$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_pretthunks$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_pretthunks$LAYOUT() { return _IMAGE_OS2_HEADER$ne_pretthunks$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_pretthunks$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_pretthunks"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_pretthunks$VH() { return _IMAGE_OS2_HEADER$ne_pretthunks$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_psegrefbytes$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_psegrefbytes$LAYOUT() { return _IMAGE_OS2_HEADER$ne_psegrefbytes$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_psegrefbytes$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_psegrefbytes"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_psegrefbytes$VH() { return _IMAGE_OS2_HEADER$ne_psegrefbytes$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_swaparea$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_swaparea$LAYOUT() { return _IMAGE_OS2_HEADER$ne_swaparea$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_swaparea$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_swaparea"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_swaparea$VH() { return _IMAGE_OS2_HEADER$ne_swaparea$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_expver$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_expver$LAYOUT() { return _IMAGE_OS2_HEADER$ne_expver$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_expver$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_expver"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_expver$VH() { return _IMAGE_OS2_HEADER$ne_expver$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("e32_magic"),
        C_CHAR.withName("e32_border"),
        C_CHAR.withName("e32_worder"),
        C_LONG.withName("e32_level"),
        C_SHORT.withName("e32_cpu"),
        C_SHORT.withName("e32_os"),
        C_LONG.withName("e32_ver"),
        C_LONG.withName("e32_mflags"),
        C_LONG.withName("e32_mpages"),
        C_LONG.withName("e32_startobj"),
        C_LONG.withName("e32_eip"),
        C_LONG.withName("e32_stackobj"),
        C_LONG.withName("e32_esp"),
        C_LONG.withName("e32_pagesize"),
        C_LONG.withName("e32_lastpagesize"),
        C_LONG.withName("e32_fixupsize"),
        C_LONG.withName("e32_fixupsum"),
        C_LONG.withName("e32_ldrsize"),
        C_LONG.withName("e32_ldrsum"),
        C_LONG.withName("e32_objtab"),
        C_LONG.withName("e32_objcnt"),
        C_LONG.withName("e32_objmap"),
        C_LONG.withName("e32_itermap"),
        C_LONG.withName("e32_rsrctab"),
        C_LONG.withName("e32_rsrccnt"),
        C_LONG.withName("e32_restab"),
        C_LONG.withName("e32_enttab"),
        C_LONG.withName("e32_dirtab"),
        C_LONG.withName("e32_dircnt"),
        C_LONG.withName("e32_fpagetab"),
        C_LONG.withName("e32_frectab"),
        C_LONG.withName("e32_impmod"),
        C_LONG.withName("e32_impmodcnt"),
        C_LONG.withName("e32_impproc"),
        C_LONG.withName("e32_pagesum"),
        C_LONG.withName("e32_datapage"),
        C_LONG.withName("e32_preload"),
        C_LONG.withName("e32_nrestab"),
        C_LONG.withName("e32_cbnrestab"),
        C_LONG.withName("e32_nressum"),
        C_LONG.withName("e32_autodata"),
        C_LONG.withName("e32_debuginfo"),
        C_LONG.withName("e32_debuglen"),
        C_LONG.withName("e32_instpreload"),
        C_LONG.withName("e32_instdemand"),
        C_LONG.withName("e32_heapsize"),
        MemoryLayout.ofSequence(12, C_CHAR).withName("e32_res3"),
        C_LONG.withName("e32_winresoff"),
        C_LONG.withName("e32_winreslen"),
        C_SHORT.withName("e32_devid"),
        C_SHORT.withName("e32_ddkver")
    ).withName("_IMAGE_VXD_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$struct$LAYOUT() { return _IMAGE_VXD_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_magic$LAYOUT() { return _IMAGE_VXD_HEADER$e32_magic$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_magic$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_magic"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_magic$VH() { return _IMAGE_VXD_HEADER$e32_magic$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_border$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_border$LAYOUT() { return _IMAGE_VXD_HEADER$e32_border$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_border$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("e32_border"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_border$VH() { return _IMAGE_VXD_HEADER$e32_border$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_worder$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_worder$LAYOUT() { return _IMAGE_VXD_HEADER$e32_worder$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_worder$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("e32_worder"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_worder$VH() { return _IMAGE_VXD_HEADER$e32_worder$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_level$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_level$LAYOUT() { return _IMAGE_VXD_HEADER$e32_level$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_level$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_level"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_level$VH() { return _IMAGE_VXD_HEADER$e32_level$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_cpu$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_cpu$LAYOUT() { return _IMAGE_VXD_HEADER$e32_cpu$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_cpu$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_cpu"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_cpu$VH() { return _IMAGE_VXD_HEADER$e32_cpu$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_os$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_os$LAYOUT() { return _IMAGE_VXD_HEADER$e32_os$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_os$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_os"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_os$VH() { return _IMAGE_VXD_HEADER$e32_os$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_ver$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_ver$LAYOUT() { return _IMAGE_VXD_HEADER$e32_ver$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_ver$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_ver"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_ver$VH() { return _IMAGE_VXD_HEADER$e32_ver$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_mflags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_mflags$LAYOUT() { return _IMAGE_VXD_HEADER$e32_mflags$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_mflags$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_mflags"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_mflags$VH() { return _IMAGE_VXD_HEADER$e32_mflags$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_mpages$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_mpages$LAYOUT() { return _IMAGE_VXD_HEADER$e32_mpages$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_mpages$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_mpages"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_mpages$VH() { return _IMAGE_VXD_HEADER$e32_mpages$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_startobj$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_startobj$LAYOUT() { return _IMAGE_VXD_HEADER$e32_startobj$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_startobj$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_startobj"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_startobj$VH() { return _IMAGE_VXD_HEADER$e32_startobj$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_eip$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_eip$LAYOUT() { return _IMAGE_VXD_HEADER$e32_eip$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_eip$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_eip"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_eip$VH() { return _IMAGE_VXD_HEADER$e32_eip$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_stackobj$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_stackobj$LAYOUT() { return _IMAGE_VXD_HEADER$e32_stackobj$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_stackobj$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_stackobj"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_stackobj$VH() { return _IMAGE_VXD_HEADER$e32_stackobj$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_esp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_esp$LAYOUT() { return _IMAGE_VXD_HEADER$e32_esp$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_esp$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_esp"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_esp$VH() { return _IMAGE_VXD_HEADER$e32_esp$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_pagesize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_pagesize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_pagesize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_pagesize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_pagesize"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_pagesize$VH() { return _IMAGE_VXD_HEADER$e32_pagesize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_lastpagesize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_lastpagesize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_lastpagesize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_lastpagesize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_lastpagesize"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_lastpagesize$VH() { return _IMAGE_VXD_HEADER$e32_lastpagesize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_fixupsize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_fixupsize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_fixupsize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_fixupsize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_fixupsize"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_fixupsize$VH() { return _IMAGE_VXD_HEADER$e32_fixupsize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_fixupsum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_fixupsum$LAYOUT() { return _IMAGE_VXD_HEADER$e32_fixupsum$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_fixupsum$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_fixupsum"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_fixupsum$VH() { return _IMAGE_VXD_HEADER$e32_fixupsum$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_ldrsize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_ldrsize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_ldrsize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_ldrsize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_ldrsize"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_ldrsize$VH() { return _IMAGE_VXD_HEADER$e32_ldrsize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_ldrsum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_ldrsum$LAYOUT() { return _IMAGE_VXD_HEADER$e32_ldrsum$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_ldrsum$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_ldrsum"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_ldrsum$VH() { return _IMAGE_VXD_HEADER$e32_ldrsum$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_objtab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_objtab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_objtab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_objtab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_objtab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_objtab$VH() { return _IMAGE_VXD_HEADER$e32_objtab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_objcnt$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_objcnt$LAYOUT() { return _IMAGE_VXD_HEADER$e32_objcnt$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_objcnt$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_objcnt"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_objcnt$VH() { return _IMAGE_VXD_HEADER$e32_objcnt$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_objmap$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_objmap$LAYOUT() { return _IMAGE_VXD_HEADER$e32_objmap$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_objmap$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_objmap"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_objmap$VH() { return _IMAGE_VXD_HEADER$e32_objmap$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_itermap$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_itermap$LAYOUT() { return _IMAGE_VXD_HEADER$e32_itermap$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_itermap$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_itermap"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_itermap$VH() { return _IMAGE_VXD_HEADER$e32_itermap$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_rsrctab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_rsrctab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_rsrctab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_rsrctab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_rsrctab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_rsrctab$VH() { return _IMAGE_VXD_HEADER$e32_rsrctab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_rsrccnt$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_rsrccnt$LAYOUT() { return _IMAGE_VXD_HEADER$e32_rsrccnt$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_rsrccnt$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_rsrccnt"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_rsrccnt$VH() { return _IMAGE_VXD_HEADER$e32_rsrccnt$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_restab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_restab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_restab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_restab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_restab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_restab$VH() { return _IMAGE_VXD_HEADER$e32_restab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_enttab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_enttab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_enttab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_enttab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_enttab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_enttab$VH() { return _IMAGE_VXD_HEADER$e32_enttab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_dirtab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_dirtab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_dirtab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_dirtab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_dirtab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_dirtab$VH() { return _IMAGE_VXD_HEADER$e32_dirtab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_dircnt$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_dircnt$LAYOUT() { return _IMAGE_VXD_HEADER$e32_dircnt$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_dircnt$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_dircnt"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_dircnt$VH() { return _IMAGE_VXD_HEADER$e32_dircnt$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_fpagetab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_fpagetab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_fpagetab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_fpagetab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_fpagetab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_fpagetab$VH() { return _IMAGE_VXD_HEADER$e32_fpagetab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_frectab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_frectab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_frectab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_frectab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_frectab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_frectab$VH() { return _IMAGE_VXD_HEADER$e32_frectab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_impmod$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_impmod$LAYOUT() { return _IMAGE_VXD_HEADER$e32_impmod$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_impmod$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_impmod"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_impmod$VH() { return _IMAGE_VXD_HEADER$e32_impmod$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_impmodcnt$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_impmodcnt$LAYOUT() { return _IMAGE_VXD_HEADER$e32_impmodcnt$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_impmodcnt$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_impmodcnt"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_impmodcnt$VH() { return _IMAGE_VXD_HEADER$e32_impmodcnt$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_impproc$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_impproc$LAYOUT() { return _IMAGE_VXD_HEADER$e32_impproc$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_impproc$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_impproc"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_impproc$VH() { return _IMAGE_VXD_HEADER$e32_impproc$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_pagesum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_pagesum$LAYOUT() { return _IMAGE_VXD_HEADER$e32_pagesum$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_pagesum$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_pagesum"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_pagesum$VH() { return _IMAGE_VXD_HEADER$e32_pagesum$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_datapage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_datapage$LAYOUT() { return _IMAGE_VXD_HEADER$e32_datapage$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_datapage$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_datapage"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_datapage$VH() { return _IMAGE_VXD_HEADER$e32_datapage$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_preload$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_preload$LAYOUT() { return _IMAGE_VXD_HEADER$e32_preload$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_preload$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_preload"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_preload$VH() { return _IMAGE_VXD_HEADER$e32_preload$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_nrestab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_nrestab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_nrestab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_nrestab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_nrestab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_nrestab$VH() { return _IMAGE_VXD_HEADER$e32_nrestab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_cbnrestab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_cbnrestab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_cbnrestab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_cbnrestab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_cbnrestab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_cbnrestab$VH() { return _IMAGE_VXD_HEADER$e32_cbnrestab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_nressum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_nressum$LAYOUT() { return _IMAGE_VXD_HEADER$e32_nressum$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_nressum$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_nressum"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_nressum$VH() { return _IMAGE_VXD_HEADER$e32_nressum$VH_; }

}

