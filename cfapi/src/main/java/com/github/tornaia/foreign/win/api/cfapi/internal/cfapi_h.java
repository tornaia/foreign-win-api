// Generated by jextract

package com.github.tornaia.foreign.win.api.cfapi.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
public final class cfapi_h  {

    /* package-private */ cfapi_h() {}
    public static @C("int") int CF_PLACEHOLDER_MAX_FILE_IDENTITY_LENGTH() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_MAX_FILE_IDENTITY_LENGTH();
    }
    public static @C("int") int CF_MAX_PRIORITY_HINT() {
        return cfapi_h$constants$0.CF_MAX_PRIORITY_HINT();
    }
    public static @C("int") int CF_MAX_PROVIDER_NAME_LENGTH() {
        return cfapi_h$constants$0.CF_MAX_PROVIDER_NAME_LENGTH();
    }
    public static @C("int") int CF_MAX_PROVIDER_VERSION_LENGTH() {
        return cfapi_h$constants$0.CF_MAX_PROVIDER_VERSION_LENGTH();
    }
    @C("struct CF_CONNECTION_KEY__")public static class CF_CONNECTION_KEY__ {

        /* package-private */ CF_CONNECTION_KEY__() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_CONNECTION_KEY__$struct$LAYOUT();
        }
        public static VarHandle Internal$VH() {
            return cfapi_h$constants$0.CF_CONNECTION_KEY__$Internal$VH();
        }
        public static  @C("LONGLONG") long Internal$get(@C("struct CF_CONNECTION_KEY__") MemorySegment seg) {
            return (long)cfapi_h$constants$0.CF_CONNECTION_KEY__$Internal$VH().get(seg);
        }
        public static  @C("LONGLONG") long Internal$get(@C("struct CF_CONNECTION_KEY__") MemorySegment seg, long index) {
            return (long)cfapi_h$constants$0.CF_CONNECTION_KEY__$Internal$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Internal$set(@C("struct CF_CONNECTION_KEY__") MemorySegment seg, @C("LONGLONG") long x) {
            cfapi_h$constants$0.CF_CONNECTION_KEY__$Internal$VH().set(seg, x);
        }
        public static void Internal$set(@C("struct CF_CONNECTION_KEY__") MemorySegment seg, long index, @C("LONGLONG") long x) {
            cfapi_h$constants$0.CF_CONNECTION_KEY__$Internal$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_CONNECTION_KEY__") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_CONNECTION_KEY__") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_CONNECTION_KEY__[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_CONNECTION_KEY__[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_CONNECTION_KEY__*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_CONNECTION_KEY__*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_CONNECTION_KEY__") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct CF_CONNECTION_KEY__")public static class CF_CONNECTION_KEY extends CF_CONNECTION_KEY__ {

        /* package-private */ CF_CONNECTION_KEY() {}
    }

    @C("struct CF_FS_METADATA")public static class CF_FS_METADATA {

        /* package-private */ CF_FS_METADATA() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_FS_METADATA$struct$LAYOUT();
        }
        public static MemorySegment BasicInfo$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 40));
        }
        public static MemorySegment FileSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_FS_METADATA") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_FS_METADATA") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_FS_METADATA[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_FS_METADATA[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_FS_METADATA*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_FS_METADATA*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_FS_METADATA") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static @C("int") int CF_PLACEHOLDER_CREATE_FLAG_NONE() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_FLAG_NONE();
    }
    public static @C("int") int CF_PLACEHOLDER_CREATE_FLAG_DISABLE_ON_DEMAND_POPULATION() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_FLAG_DISABLE_ON_DEMAND_POPULATION();
    }
    public static @C("int") int CF_PLACEHOLDER_CREATE_FLAG_MARK_IN_SYNC() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_FLAG_MARK_IN_SYNC();
    }
    public static @C("int") int CF_PLACEHOLDER_CREATE_FLAG_SUPERSEDE() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_FLAG_SUPERSEDE();
    }
    public static @C("int") int CF_PLACEHOLDER_CREATE_FLAG_ALWAYS_FULL() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_FLAG_ALWAYS_FULL();
    }
    @C("struct CF_PLACEHOLDER_CREATE_INFO")public static class CF_PLACEHOLDER_CREATE_INFO {

        /* package-private */ CF_PLACEHOLDER_CREATE_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$struct$LAYOUT();
        }
        public static VarHandle RelativeFileName$VH() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$RelativeFileName$VH();
        }
        public static  @C("LPCWSTR") MemoryAddress RelativeFileName$get(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$RelativeFileName$VH().get(seg);
        }
        public static  @C("LPCWSTR") MemoryAddress RelativeFileName$get(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$RelativeFileName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RelativeFileName$set(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, @C("LPCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$RelativeFileName$VH().set(seg, x);
        }
        public static void RelativeFileName$set(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, long index, @C("LPCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$RelativeFileName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FsMetadata$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 48));
        }
        public static VarHandle FileIdentity$VH() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$FileIdentity$VH();
        }
        public static  @C("LPCVOID") MemoryAddress FileIdentity$get(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$FileIdentity$VH().get(seg);
        }
        public static  @C("LPCVOID") MemoryAddress FileIdentity$get(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$FileIdentity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileIdentity$set(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, @C("LPCVOID") MemoryAddress x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$FileIdentity$VH().set(seg, x);
        }
        public static void FileIdentity$set(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, long index, @C("LPCVOID") MemoryAddress x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$FileIdentity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileIdentityLength$VH() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$FileIdentityLength$VH();
        }
        public static  @C("DWORD") int FileIdentityLength$get(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$FileIdentityLength$VH().get(seg);
        }
        public static  @C("DWORD") int FileIdentityLength$get(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$FileIdentityLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileIdentityLength$set(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$FileIdentityLength$VH().set(seg, x);
        }
        public static void FileIdentityLength$set(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$FileIdentityLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Flags$VH() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$Flags$VH();
        }
        public static  @C("CF_PLACEHOLDER_CREATE_FLAGS") int Flags$get(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$Flags$VH().get(seg);
        }
        public static  @C("CF_PLACEHOLDER_CREATE_FLAGS") int Flags$get(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$Flags$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, @C("CF_PLACEHOLDER_CREATE_FLAGS") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$Flags$VH().set(seg, x);
        }
        public static void Flags$set(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, long index, @C("CF_PLACEHOLDER_CREATE_FLAGS") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$Flags$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Result$VH() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$Result$VH();
        }
        public static  @C("HRESULT") int Result$get(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$Result$VH().get(seg);
        }
        public static  @C("HRESULT") int Result$get(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$Result$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Result$set(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, @C("HRESULT") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$Result$VH().set(seg, x);
        }
        public static void Result$set(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, long index, @C("HRESULT") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$Result$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CreateUsn$VH() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$CreateUsn$VH();
        }
        public static  @C("USN") long CreateUsn$get(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg) {
            return (long)cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$CreateUsn$VH().get(seg);
        }
        public static  @C("USN") long CreateUsn$get(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, long index) {
            return (long)cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$CreateUsn$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CreateUsn$set(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, @C("USN") long x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$CreateUsn$VH().set(seg, x);
        }
        public static void CreateUsn$set(@C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment seg, long index, @C("USN") long x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_CREATE_INFO$CreateUsn$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_PLACEHOLDER_CREATE_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_PLACEHOLDER_CREATE_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_PLACEHOLDER_CREATE_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_PLACEHOLDER_CREATE_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_PLACEHOLDER_CREATE_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static @C("int") int CF_PROVIDER_STATUS_DISCONNECTED() {
        return cfapi_h$constants$0.CF_PROVIDER_STATUS_DISCONNECTED();
    }
    public static @C("int") int CF_PROVIDER_STATUS_IDLE() {
        return cfapi_h$constants$0.CF_PROVIDER_STATUS_IDLE();
    }
    public static @C("int") int CF_PROVIDER_STATUS_POPULATE_NAMESPACE() {
        return cfapi_h$constants$0.CF_PROVIDER_STATUS_POPULATE_NAMESPACE();
    }
    public static @C("int") int CF_PROVIDER_STATUS_POPULATE_METADATA() {
        return cfapi_h$constants$0.CF_PROVIDER_STATUS_POPULATE_METADATA();
    }
    public static @C("int") int CF_PROVIDER_STATUS_POPULATE_CONTENT() {
        return cfapi_h$constants$0.CF_PROVIDER_STATUS_POPULATE_CONTENT();
    }
    public static @C("int") int CF_PROVIDER_STATUS_SYNC_INCREMENTAL() {
        return cfapi_h$constants$0.CF_PROVIDER_STATUS_SYNC_INCREMENTAL();
    }
    public static @C("int") int CF_PROVIDER_STATUS_SYNC_FULL() {
        return cfapi_h$constants$0.CF_PROVIDER_STATUS_SYNC_FULL();
    }
    public static @C("int") int CF_PROVIDER_STATUS_CONNECTIVITY_LOST() {
        return cfapi_h$constants$0.CF_PROVIDER_STATUS_CONNECTIVITY_LOST();
    }
    public static @C("int") int CF_PROVIDER_STATUS_CLEAR_FLAGS() {
        return cfapi_h$constants$0.CF_PROVIDER_STATUS_CLEAR_FLAGS();
    }
    public static @C("int") int CF_PROVIDER_STATUS_TERMINATED() {
        return cfapi_h$constants$0.CF_PROVIDER_STATUS_TERMINATED();
    }
    public static @C("int") int CF_PROVIDER_STATUS_ERROR() {
        return cfapi_h$constants$0.CF_PROVIDER_STATUS_ERROR();
    }
    @C("struct CF_PROCESS_INFO")public static class CF_PROCESS_INFO {

        /* package-private */ CF_PROCESS_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_PROCESS_INFO$struct$LAYOUT();
        }
        public static VarHandle StructSize$VH() {
            return cfapi_h$constants$0.CF_PROCESS_INFO$StructSize$VH();
        }
        public static  @C("DWORD") int StructSize$get(@C("struct CF_PROCESS_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PROCESS_INFO$StructSize$VH().get(seg);
        }
        public static  @C("DWORD") int StructSize$get(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PROCESS_INFO$StructSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StructSize$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$StructSize$VH().set(seg, x);
        }
        public static void StructSize$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$StructSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProcessId$VH() {
            return cfapi_h$constants$0.CF_PROCESS_INFO$ProcessId$VH();
        }
        public static  @C("DWORD") int ProcessId$get(@C("struct CF_PROCESS_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PROCESS_INFO$ProcessId$VH().get(seg);
        }
        public static  @C("DWORD") int ProcessId$get(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PROCESS_INFO$ProcessId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProcessId$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$ProcessId$VH().set(seg, x);
        }
        public static void ProcessId$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$ProcessId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ImagePath$VH() {
            return cfapi_h$constants$0.CF_PROCESS_INFO$ImagePath$VH();
        }
        public static  @C("PCWSTR") MemoryAddress ImagePath$get(@C("struct CF_PROCESS_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_PROCESS_INFO$ImagePath$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress ImagePath$get(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_PROCESS_INFO$ImagePath$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ImagePath$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$ImagePath$VH().set(seg, x);
        }
        public static void ImagePath$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$ImagePath$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PackageName$VH() {
            return cfapi_h$constants$0.CF_PROCESS_INFO$PackageName$VH();
        }
        public static  @C("PCWSTR") MemoryAddress PackageName$get(@C("struct CF_PROCESS_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_PROCESS_INFO$PackageName$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress PackageName$get(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_PROCESS_INFO$PackageName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PackageName$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$PackageName$VH().set(seg, x);
        }
        public static void PackageName$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$PackageName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ApplicationId$VH() {
            return cfapi_h$constants$0.CF_PROCESS_INFO$ApplicationId$VH();
        }
        public static  @C("PCWSTR") MemoryAddress ApplicationId$get(@C("struct CF_PROCESS_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_PROCESS_INFO$ApplicationId$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress ApplicationId$get(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_PROCESS_INFO$ApplicationId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ApplicationId$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$ApplicationId$VH().set(seg, x);
        }
        public static void ApplicationId$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$ApplicationId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CommandLine$VH() {
            return cfapi_h$constants$0.CF_PROCESS_INFO$CommandLine$VH();
        }
        public static  @C("PCWSTR") MemoryAddress CommandLine$get(@C("struct CF_PROCESS_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_PROCESS_INFO$CommandLine$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress CommandLine$get(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_PROCESS_INFO$CommandLine$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CommandLine$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$CommandLine$VH().set(seg, x);
        }
        public static void CommandLine$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$CommandLine$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SessionId$VH() {
            return cfapi_h$constants$0.CF_PROCESS_INFO$SessionId$VH();
        }
        public static  @C("DWORD") int SessionId$get(@C("struct CF_PROCESS_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PROCESS_INFO$SessionId$VH().get(seg);
        }
        public static  @C("DWORD") int SessionId$get(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PROCESS_INFO$SessionId$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SessionId$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$SessionId$VH().set(seg, x);
        }
        public static void SessionId$set(@C("struct CF_PROCESS_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PROCESS_INFO$SessionId$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_PROCESS_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_PROCESS_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_PROCESS_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_PROCESS_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_PROCESS_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_PROCESS_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_PROCESS_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct CF_PLATFORM_INFO")public static class CF_PLATFORM_INFO {

        /* package-private */ CF_PLATFORM_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_PLATFORM_INFO$struct$LAYOUT();
        }
        public static VarHandle BuildNumber$VH() {
            return cfapi_h$constants$0.CF_PLATFORM_INFO$BuildNumber$VH();
        }
        public static  @C("DWORD") int BuildNumber$get(@C("struct CF_PLATFORM_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PLATFORM_INFO$BuildNumber$VH().get(seg);
        }
        public static  @C("DWORD") int BuildNumber$get(@C("struct CF_PLATFORM_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PLATFORM_INFO$BuildNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void BuildNumber$set(@C("struct CF_PLATFORM_INFO") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PLATFORM_INFO$BuildNumber$VH().set(seg, x);
        }
        public static void BuildNumber$set(@C("struct CF_PLATFORM_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PLATFORM_INFO$BuildNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle RevisionNumber$VH() {
            return cfapi_h$constants$0.CF_PLATFORM_INFO$RevisionNumber$VH();
        }
        public static  @C("DWORD") int RevisionNumber$get(@C("struct CF_PLATFORM_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PLATFORM_INFO$RevisionNumber$VH().get(seg);
        }
        public static  @C("DWORD") int RevisionNumber$get(@C("struct CF_PLATFORM_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PLATFORM_INFO$RevisionNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void RevisionNumber$set(@C("struct CF_PLATFORM_INFO") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PLATFORM_INFO$RevisionNumber$VH().set(seg, x);
        }
        public static void RevisionNumber$set(@C("struct CF_PLATFORM_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PLATFORM_INFO$RevisionNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle IntegrationNumber$VH() {
            return cfapi_h$constants$0.CF_PLATFORM_INFO$IntegrationNumber$VH();
        }
        public static  @C("DWORD") int IntegrationNumber$get(@C("struct CF_PLATFORM_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PLATFORM_INFO$IntegrationNumber$VH().get(seg);
        }
        public static  @C("DWORD") int IntegrationNumber$get(@C("struct CF_PLATFORM_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PLATFORM_INFO$IntegrationNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void IntegrationNumber$set(@C("struct CF_PLATFORM_INFO") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PLATFORM_INFO$IntegrationNumber$VH().set(seg, x);
        }
        public static void IntegrationNumber$set(@C("struct CF_PLATFORM_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_PLATFORM_INFO$IntegrationNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_PLATFORM_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_PLATFORM_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_PLATFORM_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_PLATFORM_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_PLATFORM_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_PLATFORM_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_PLATFORM_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle CfGetPlatformInfo$MH() {
        return cfapi_h$constants$0.CfGetPlatformInfo$MH();
    }
    public static @C("HRESULT") int CfGetPlatformInfo (@C("CF_PLATFORM_INFO*") Addressable PlatformVersion) {
        try {
            return (int)cfapi_h$constants$0.CfGetPlatformInfo$MH().invokeExact(PlatformVersion.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_REGISTER_FLAG_NONE() {
        return cfapi_h$constants$0.CF_REGISTER_FLAG_NONE();
    }
    public static @C("int") int CF_REGISTER_FLAG_UPDATE() {
        return cfapi_h$constants$0.CF_REGISTER_FLAG_UPDATE();
    }
    public static @C("int") int CF_REGISTER_FLAG_DISABLE_ON_DEMAND_POPULATION_ON_ROOT() {
        return cfapi_h$constants$0.CF_REGISTER_FLAG_DISABLE_ON_DEMAND_POPULATION_ON_ROOT();
    }
    public static @C("int") int CF_REGISTER_FLAG_MARK_IN_SYNC_ON_ROOT() {
        return cfapi_h$constants$0.CF_REGISTER_FLAG_MARK_IN_SYNC_ON_ROOT();
    }
    public static @C("int") int CF_HYDRATION_POLICY_PARTIAL() {
        return cfapi_h$constants$0.CF_HYDRATION_POLICY_PARTIAL();
    }
    public static @C("int") int CF_HYDRATION_POLICY_PROGRESSIVE() {
        return cfapi_h$constants$0.CF_HYDRATION_POLICY_PROGRESSIVE();
    }
    public static @C("int") int CF_HYDRATION_POLICY_FULL() {
        return cfapi_h$constants$0.CF_HYDRATION_POLICY_FULL();
    }
    public static @C("int") int CF_HYDRATION_POLICY_ALWAYS_FULL() {
        return cfapi_h$constants$0.CF_HYDRATION_POLICY_ALWAYS_FULL();
    }
    public static @C("int") int CF_HYDRATION_POLICY_MODIFIER_NONE() {
        return cfapi_h$constants$0.CF_HYDRATION_POLICY_MODIFIER_NONE();
    }
    public static @C("int") int CF_HYDRATION_POLICY_MODIFIER_VALIDATION_REQUIRED() {
        return cfapi_h$constants$0.CF_HYDRATION_POLICY_MODIFIER_VALIDATION_REQUIRED();
    }
    public static @C("int") int CF_HYDRATION_POLICY_MODIFIER_STREAMING_ALLOWED() {
        return cfapi_h$constants$0.CF_HYDRATION_POLICY_MODIFIER_STREAMING_ALLOWED();
    }
    public static @C("int") int CF_HYDRATION_POLICY_MODIFIER_AUTO_DEHYDRATION_ALLOWED() {
        return cfapi_h$constants$0.CF_HYDRATION_POLICY_MODIFIER_AUTO_DEHYDRATION_ALLOWED();
    }
    @C("struct CF_HYDRATION_POLICY")public static class CF_HYDRATION_POLICY {

        /* package-private */ CF_HYDRATION_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_HYDRATION_POLICY$struct$LAYOUT();
        }
        public static VarHandle Primary$VH() {
            return cfapi_h$constants$0.CF_HYDRATION_POLICY$Primary$VH();
        }
        public static  @C("CF_HYDRATION_POLICY_PRIMARY_USHORT") short Primary$get(@C("struct CF_HYDRATION_POLICY") MemorySegment seg) {
            return (short)cfapi_h$constants$0.CF_HYDRATION_POLICY$Primary$VH().get(seg);
        }
        public static  @C("CF_HYDRATION_POLICY_PRIMARY_USHORT") short Primary$get(@C("struct CF_HYDRATION_POLICY") MemorySegment seg, long index) {
            return (short)cfapi_h$constants$0.CF_HYDRATION_POLICY$Primary$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Primary$set(@C("struct CF_HYDRATION_POLICY") MemorySegment seg, @C("CF_HYDRATION_POLICY_PRIMARY_USHORT") short x) {
            cfapi_h$constants$0.CF_HYDRATION_POLICY$Primary$VH().set(seg, x);
        }
        public static void Primary$set(@C("struct CF_HYDRATION_POLICY") MemorySegment seg, long index, @C("CF_HYDRATION_POLICY_PRIMARY_USHORT") short x) {
            cfapi_h$constants$0.CF_HYDRATION_POLICY$Primary$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Modifier$VH() {
            return cfapi_h$constants$0.CF_HYDRATION_POLICY$Modifier$VH();
        }
        public static  @C("CF_HYDRATION_POLICY_MODIFIER_USHORT") short Modifier$get(@C("struct CF_HYDRATION_POLICY") MemorySegment seg) {
            return (short)cfapi_h$constants$0.CF_HYDRATION_POLICY$Modifier$VH().get(seg);
        }
        public static  @C("CF_HYDRATION_POLICY_MODIFIER_USHORT") short Modifier$get(@C("struct CF_HYDRATION_POLICY") MemorySegment seg, long index) {
            return (short)cfapi_h$constants$0.CF_HYDRATION_POLICY$Modifier$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Modifier$set(@C("struct CF_HYDRATION_POLICY") MemorySegment seg, @C("CF_HYDRATION_POLICY_MODIFIER_USHORT") short x) {
            cfapi_h$constants$0.CF_HYDRATION_POLICY$Modifier$VH().set(seg, x);
        }
        public static void Modifier$set(@C("struct CF_HYDRATION_POLICY") MemorySegment seg, long index, @C("CF_HYDRATION_POLICY_MODIFIER_USHORT") short x) {
            cfapi_h$constants$0.CF_HYDRATION_POLICY$Modifier$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_HYDRATION_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_HYDRATION_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_HYDRATION_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_HYDRATION_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_HYDRATION_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_HYDRATION_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_HYDRATION_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static @C("int") int CF_POPULATION_POLICY_PARTIAL() {
        return cfapi_h$constants$0.CF_POPULATION_POLICY_PARTIAL();
    }
    public static @C("int") int CF_POPULATION_POLICY_FULL() {
        return cfapi_h$constants$0.CF_POPULATION_POLICY_FULL();
    }
    public static @C("int") int CF_POPULATION_POLICY_ALWAYS_FULL() {
        return cfapi_h$constants$0.CF_POPULATION_POLICY_ALWAYS_FULL();
    }
    public static @C("int") int CF_POPULATION_POLICY_MODIFIER_NONE() {
        return cfapi_h$constants$0.CF_POPULATION_POLICY_MODIFIER_NONE();
    }
    @C("struct CF_POPULATION_POLICY")public static class CF_POPULATION_POLICY {

        /* package-private */ CF_POPULATION_POLICY() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_POPULATION_POLICY$struct$LAYOUT();
        }
        public static VarHandle Primary$VH() {
            return cfapi_h$constants$0.CF_POPULATION_POLICY$Primary$VH();
        }
        public static  @C("CF_POPULATION_POLICY_PRIMARY_USHORT") short Primary$get(@C("struct CF_POPULATION_POLICY") MemorySegment seg) {
            return (short)cfapi_h$constants$0.CF_POPULATION_POLICY$Primary$VH().get(seg);
        }
        public static  @C("CF_POPULATION_POLICY_PRIMARY_USHORT") short Primary$get(@C("struct CF_POPULATION_POLICY") MemorySegment seg, long index) {
            return (short)cfapi_h$constants$0.CF_POPULATION_POLICY$Primary$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Primary$set(@C("struct CF_POPULATION_POLICY") MemorySegment seg, @C("CF_POPULATION_POLICY_PRIMARY_USHORT") short x) {
            cfapi_h$constants$0.CF_POPULATION_POLICY$Primary$VH().set(seg, x);
        }
        public static void Primary$set(@C("struct CF_POPULATION_POLICY") MemorySegment seg, long index, @C("CF_POPULATION_POLICY_PRIMARY_USHORT") short x) {
            cfapi_h$constants$0.CF_POPULATION_POLICY$Primary$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Modifier$VH() {
            return cfapi_h$constants$0.CF_POPULATION_POLICY$Modifier$VH();
        }
        public static  @C("CF_POPULATION_POLICY_MODIFIER_USHORT") short Modifier$get(@C("struct CF_POPULATION_POLICY") MemorySegment seg) {
            return (short)cfapi_h$constants$0.CF_POPULATION_POLICY$Modifier$VH().get(seg);
        }
        public static  @C("CF_POPULATION_POLICY_MODIFIER_USHORT") short Modifier$get(@C("struct CF_POPULATION_POLICY") MemorySegment seg, long index) {
            return (short)cfapi_h$constants$0.CF_POPULATION_POLICY$Modifier$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Modifier$set(@C("struct CF_POPULATION_POLICY") MemorySegment seg, @C("CF_POPULATION_POLICY_MODIFIER_USHORT") short x) {
            cfapi_h$constants$0.CF_POPULATION_POLICY$Modifier$VH().set(seg, x);
        }
        public static void Modifier$set(@C("struct CF_POPULATION_POLICY") MemorySegment seg, long index, @C("CF_POPULATION_POLICY_MODIFIER_USHORT") short x) {
            cfapi_h$constants$0.CF_POPULATION_POLICY$Modifier$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_POPULATION_POLICY") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_POPULATION_POLICY") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_POPULATION_POLICY[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_POPULATION_POLICY[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_POPULATION_POLICY*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_POPULATION_POLICY*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_POPULATION_POLICY") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static @C("int") int CF_PLACEHOLDER_MANAGEMENT_POLICY_DEFAULT() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_MANAGEMENT_POLICY_DEFAULT();
    }
    public static @C("int") int CF_PLACEHOLDER_MANAGEMENT_POLICY_CREATE_UNRESTRICTED() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_MANAGEMENT_POLICY_CREATE_UNRESTRICTED();
    }
    public static @C("int") int CF_PLACEHOLDER_MANAGEMENT_POLICY_CONVERT_TO_UNRESTRICTED() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_MANAGEMENT_POLICY_CONVERT_TO_UNRESTRICTED();
    }
    public static @C("int") int CF_PLACEHOLDER_MANAGEMENT_POLICY_UPDATE_UNRESTRICTED() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_MANAGEMENT_POLICY_UPDATE_UNRESTRICTED();
    }
    public static @C("int") int CF_INSYNC_POLICY_NONE() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_NONE();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_FILE_CREATION_TIME() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_FILE_CREATION_TIME();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_FILE_READONLY_ATTRIBUTE() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_FILE_READONLY_ATTRIBUTE();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_FILE_HIDDEN_ATTRIBUTE() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_FILE_HIDDEN_ATTRIBUTE();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_FILE_SYSTEM_ATTRIBUTE() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_FILE_SYSTEM_ATTRIBUTE();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_DIRECTORY_CREATION_TIME() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_DIRECTORY_CREATION_TIME();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_DIRECTORY_READONLY_ATTRIBUTE() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_DIRECTORY_READONLY_ATTRIBUTE();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_DIRECTORY_HIDDEN_ATTRIBUTE() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_DIRECTORY_HIDDEN_ATTRIBUTE();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_DIRECTORY_SYSTEM_ATTRIBUTE() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_DIRECTORY_SYSTEM_ATTRIBUTE();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_FILE_LAST_WRITE_TIME() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_FILE_LAST_WRITE_TIME();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_DIRECTORY_LAST_WRITE_TIME() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_DIRECTORY_LAST_WRITE_TIME();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_FILE_ALL() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_FILE_ALL();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_DIRECTORY_ALL() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_DIRECTORY_ALL();
    }
    public static @C("int") int CF_INSYNC_POLICY_TRACK_ALL() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_TRACK_ALL();
    }
    public static @C("int") int CF_INSYNC_POLICY_PRESERVE_INSYNC_FOR_SYNC_ENGINE() {
        return cfapi_h$constants$0.CF_INSYNC_POLICY_PRESERVE_INSYNC_FOR_SYNC_ENGINE();
    }
    public static @C("int") int CF_HARDLINK_POLICY_NONE() {
        return cfapi_h$constants$0.CF_HARDLINK_POLICY_NONE();
    }
    public static @C("int") int CF_HARDLINK_POLICY_ALLOWED() {
        return cfapi_h$constants$0.CF_HARDLINK_POLICY_ALLOWED();
    }
    @C("struct CF_SYNC_POLICIES")public static class CF_SYNC_POLICIES {

        /* package-private */ CF_SYNC_POLICIES() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_SYNC_POLICIES$struct$LAYOUT();
        }
        public static VarHandle StructSize$VH() {
            return cfapi_h$constants$0.CF_SYNC_POLICIES$StructSize$VH();
        }
        public static  @C("ULONG") int StructSize$get(@C("struct CF_SYNC_POLICIES") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_POLICIES$StructSize$VH().get(seg);
        }
        public static  @C("ULONG") int StructSize$get(@C("struct CF_SYNC_POLICIES") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_POLICIES$StructSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StructSize$set(@C("struct CF_SYNC_POLICIES") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_POLICIES$StructSize$VH().set(seg, x);
        }
        public static void StructSize$set(@C("struct CF_SYNC_POLICIES") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_POLICIES$StructSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment Hydration$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 4));
        }
        public static MemorySegment Population$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 4));
        }
        public static VarHandle InSync$VH() {
            return cfapi_h$constants$0.CF_SYNC_POLICIES$InSync$VH();
        }
        public static  @C("CF_INSYNC_POLICY") int InSync$get(@C("struct CF_SYNC_POLICIES") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_POLICIES$InSync$VH().get(seg);
        }
        public static  @C("CF_INSYNC_POLICY") int InSync$get(@C("struct CF_SYNC_POLICIES") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_POLICIES$InSync$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void InSync$set(@C("struct CF_SYNC_POLICIES") MemorySegment seg, @C("CF_INSYNC_POLICY") int x) {
            cfapi_h$constants$0.CF_SYNC_POLICIES$InSync$VH().set(seg, x);
        }
        public static void InSync$set(@C("struct CF_SYNC_POLICIES") MemorySegment seg, long index, @C("CF_INSYNC_POLICY") int x) {
            cfapi_h$constants$0.CF_SYNC_POLICIES$InSync$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HardLink$VH() {
            return cfapi_h$constants$0.CF_SYNC_POLICIES$HardLink$VH();
        }
        public static  @C("CF_HARDLINK_POLICY") int HardLink$get(@C("struct CF_SYNC_POLICIES") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_POLICIES$HardLink$VH().get(seg);
        }
        public static  @C("CF_HARDLINK_POLICY") int HardLink$get(@C("struct CF_SYNC_POLICIES") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_POLICIES$HardLink$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HardLink$set(@C("struct CF_SYNC_POLICIES") MemorySegment seg, @C("CF_HARDLINK_POLICY") int x) {
            cfapi_h$constants$0.CF_SYNC_POLICIES$HardLink$VH().set(seg, x);
        }
        public static void HardLink$set(@C("struct CF_SYNC_POLICIES") MemorySegment seg, long index, @C("CF_HARDLINK_POLICY") int x) {
            cfapi_h$constants$0.CF_SYNC_POLICIES$HardLink$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle PlaceholderManagement$VH() {
            return cfapi_h$constants$0.CF_SYNC_POLICIES$PlaceholderManagement$VH();
        }
        public static  @C("CF_PLACEHOLDER_MANAGEMENT_POLICY") int PlaceholderManagement$get(@C("struct CF_SYNC_POLICIES") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_POLICIES$PlaceholderManagement$VH().get(seg);
        }
        public static  @C("CF_PLACEHOLDER_MANAGEMENT_POLICY") int PlaceholderManagement$get(@C("struct CF_SYNC_POLICIES") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_POLICIES$PlaceholderManagement$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PlaceholderManagement$set(@C("struct CF_SYNC_POLICIES") MemorySegment seg, @C("CF_PLACEHOLDER_MANAGEMENT_POLICY") int x) {
            cfapi_h$constants$0.CF_SYNC_POLICIES$PlaceholderManagement$VH().set(seg, x);
        }
        public static void PlaceholderManagement$set(@C("struct CF_SYNC_POLICIES") MemorySegment seg, long index, @C("CF_PLACEHOLDER_MANAGEMENT_POLICY") int x) {
            cfapi_h$constants$0.CF_SYNC_POLICIES$PlaceholderManagement$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_SYNC_POLICIES") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_SYNC_POLICIES") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_SYNC_POLICIES[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_SYNC_POLICIES[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_SYNC_POLICIES*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_SYNC_POLICIES*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_SYNC_POLICIES") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct CF_SYNC_REGISTRATION")public static class CF_SYNC_REGISTRATION {

        /* package-private */ CF_SYNC_REGISTRATION() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_SYNC_REGISTRATION$struct$LAYOUT();
        }
        public static VarHandle StructSize$VH() {
            return cfapi_h$constants$0.CF_SYNC_REGISTRATION$StructSize$VH();
        }
        public static  @C("ULONG") int StructSize$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_REGISTRATION$StructSize$VH().get(seg);
        }
        public static  @C("ULONG") int StructSize$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_REGISTRATION$StructSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StructSize$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$StructSize$VH().set(seg, x);
        }
        public static void StructSize$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$StructSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProviderName$VH() {
            return cfapi_h$constants$0.CF_SYNC_REGISTRATION$ProviderName$VH();
        }
        public static  @C("LPCWSTR") MemoryAddress ProviderName$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_SYNC_REGISTRATION$ProviderName$VH().get(seg);
        }
        public static  @C("LPCWSTR") MemoryAddress ProviderName$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_SYNC_REGISTRATION$ProviderName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProviderName$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, @C("LPCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$ProviderName$VH().set(seg, x);
        }
        public static void ProviderName$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index, @C("LPCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$ProviderName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProviderVersion$VH() {
            return cfapi_h$constants$0.CF_SYNC_REGISTRATION$ProviderVersion$VH();
        }
        public static  @C("LPCWSTR") MemoryAddress ProviderVersion$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_SYNC_REGISTRATION$ProviderVersion$VH().get(seg);
        }
        public static  @C("LPCWSTR") MemoryAddress ProviderVersion$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_SYNC_REGISTRATION$ProviderVersion$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProviderVersion$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, @C("LPCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$ProviderVersion$VH().set(seg, x);
        }
        public static void ProviderVersion$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index, @C("LPCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$ProviderVersion$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SyncRootIdentity$VH() {
            return cfapi_h$constants$0.CF_SYNC_REGISTRATION$SyncRootIdentity$VH();
        }
        public static  @C("LPCVOID") MemoryAddress SyncRootIdentity$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_SYNC_REGISTRATION$SyncRootIdentity$VH().get(seg);
        }
        public static  @C("LPCVOID") MemoryAddress SyncRootIdentity$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_SYNC_REGISTRATION$SyncRootIdentity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SyncRootIdentity$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, @C("LPCVOID") MemoryAddress x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$SyncRootIdentity$VH().set(seg, x);
        }
        public static void SyncRootIdentity$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index, @C("LPCVOID") MemoryAddress x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$SyncRootIdentity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SyncRootIdentityLength$VH() {
            return cfapi_h$constants$0.CF_SYNC_REGISTRATION$SyncRootIdentityLength$VH();
        }
        public static  @C("DWORD") int SyncRootIdentityLength$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_REGISTRATION$SyncRootIdentityLength$VH().get(seg);
        }
        public static  @C("DWORD") int SyncRootIdentityLength$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_REGISTRATION$SyncRootIdentityLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SyncRootIdentityLength$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$SyncRootIdentityLength$VH().set(seg, x);
        }
        public static void SyncRootIdentityLength$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$SyncRootIdentityLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileIdentity$VH() {
            return cfapi_h$constants$0.CF_SYNC_REGISTRATION$FileIdentity$VH();
        }
        public static  @C("LPCVOID") MemoryAddress FileIdentity$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_SYNC_REGISTRATION$FileIdentity$VH().get(seg);
        }
        public static  @C("LPCVOID") MemoryAddress FileIdentity$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_SYNC_REGISTRATION$FileIdentity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileIdentity$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, @C("LPCVOID") MemoryAddress x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$FileIdentity$VH().set(seg, x);
        }
        public static void FileIdentity$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index, @C("LPCVOID") MemoryAddress x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$FileIdentity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileIdentityLength$VH() {
            return cfapi_h$constants$0.CF_SYNC_REGISTRATION$FileIdentityLength$VH();
        }
        public static  @C("DWORD") int FileIdentityLength$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_REGISTRATION$FileIdentityLength$VH().get(seg);
        }
        public static  @C("DWORD") int FileIdentityLength$get(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_REGISTRATION$FileIdentityLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileIdentityLength$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$FileIdentityLength$VH().set(seg, x);
        }
        public static void FileIdentityLength$set(@C("struct CF_SYNC_REGISTRATION") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_SYNC_REGISTRATION$FileIdentityLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ProviderId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(52, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_SYNC_REGISTRATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_SYNC_REGISTRATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_SYNC_REGISTRATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_SYNC_REGISTRATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_SYNC_REGISTRATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_SYNC_REGISTRATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_SYNC_REGISTRATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle CfRegisterSyncRoot$MH() {
        return cfapi_h$constants$0.CfRegisterSyncRoot$MH();
    }
    public static @C("HRESULT") int CfRegisterSyncRoot (@C("LPCWSTR") Addressable SyncRootPath, @C("const CF_SYNC_REGISTRATION*") Addressable Registration, @C("const CF_SYNC_POLICIES*") Addressable Policies, @C("CF_REGISTER_FLAGS") int RegisterFlags) {
        try {
            return (int)cfapi_h$constants$0.CfRegisterSyncRoot$MH().invokeExact(SyncRootPath.address(), Registration.address(), Policies.address(), RegisterFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfUnregisterSyncRoot$MH() {
        return cfapi_h$constants$0.CfUnregisterSyncRoot$MH();
    }
    public static @C("HRESULT") int CfUnregisterSyncRoot (@C("LPCWSTR") Addressable SyncRootPath) {
        try {
            return (int)cfapi_h$constants$0.CfUnregisterSyncRoot$MH().invokeExact(SyncRootPath.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    @C("struct CF_CALLBACK_INFO")public static class CF_CALLBACK_INFO {

        /* package-private */ CF_CALLBACK_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$struct$LAYOUT();
        }
        public static VarHandle StructSize$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$StructSize$VH();
        }
        public static  @C("DWORD") int StructSize$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_CALLBACK_INFO$StructSize$VH().get(seg);
        }
        public static  @C("DWORD") int StructSize$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_CALLBACK_INFO$StructSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StructSize$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$StructSize$VH().set(seg, x);
        }
        public static void StructSize$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$StructSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ConnectionKey$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static VarHandle CallbackContext$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$CallbackContext$VH();
        }
        public static  @C("LPVOID") MemoryAddress CallbackContext$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$CallbackContext$VH().get(seg);
        }
        public static  @C("LPVOID") MemoryAddress CallbackContext$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$CallbackContext$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CallbackContext$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("LPVOID") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$CallbackContext$VH().set(seg, x);
        }
        public static void CallbackContext$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("LPVOID") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$CallbackContext$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VolumeGuidName$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeGuidName$VH();
        }
        public static  @C("PCWSTR") MemoryAddress VolumeGuidName$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeGuidName$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress VolumeGuidName$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeGuidName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VolumeGuidName$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeGuidName$VH().set(seg, x);
        }
        public static void VolumeGuidName$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeGuidName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VolumeDosName$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeDosName$VH();
        }
        public static  @C("PCWSTR") MemoryAddress VolumeDosName$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeDosName$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress VolumeDosName$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeDosName$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VolumeDosName$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeDosName$VH().set(seg, x);
        }
        public static void VolumeDosName$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeDosName$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle VolumeSerialNumber$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeSerialNumber$VH();
        }
        public static  @C("DWORD") int VolumeSerialNumber$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeSerialNumber$VH().get(seg);
        }
        public static  @C("DWORD") int VolumeSerialNumber$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeSerialNumber$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void VolumeSerialNumber$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeSerialNumber$VH().set(seg, x);
        }
        public static void VolumeSerialNumber$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$VolumeSerialNumber$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment SyncRootFileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
        }
        public static VarHandle SyncRootIdentity$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$SyncRootIdentity$VH();
        }
        public static  @C("LPCVOID") MemoryAddress SyncRootIdentity$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$SyncRootIdentity$VH().get(seg);
        }
        public static  @C("LPCVOID") MemoryAddress SyncRootIdentity$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$SyncRootIdentity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SyncRootIdentity$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("LPCVOID") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$SyncRootIdentity$VH().set(seg, x);
        }
        public static void SyncRootIdentity$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("LPCVOID") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$SyncRootIdentity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SyncRootIdentityLength$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$SyncRootIdentityLength$VH();
        }
        public static  @C("DWORD") int SyncRootIdentityLength$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_CALLBACK_INFO$SyncRootIdentityLength$VH().get(seg);
        }
        public static  @C("DWORD") int SyncRootIdentityLength$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_CALLBACK_INFO$SyncRootIdentityLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SyncRootIdentityLength$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$SyncRootIdentityLength$VH().set(seg, x);
        }
        public static void SyncRootIdentityLength$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$SyncRootIdentityLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(72, 8));
        }
        public static MemorySegment FileSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(80, 8));
        }
        public static VarHandle FileIdentity$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$FileIdentity$VH();
        }
        public static  @C("LPCVOID") MemoryAddress FileIdentity$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$FileIdentity$VH().get(seg);
        }
        public static  @C("LPCVOID") MemoryAddress FileIdentity$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$FileIdentity$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileIdentity$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("LPCVOID") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$FileIdentity$VH().set(seg, x);
        }
        public static void FileIdentity$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("LPCVOID") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$FileIdentity$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle FileIdentityLength$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$FileIdentityLength$VH();
        }
        public static  @C("DWORD") int FileIdentityLength$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_CALLBACK_INFO$FileIdentityLength$VH().get(seg);
        }
        public static  @C("DWORD") int FileIdentityLength$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_CALLBACK_INFO$FileIdentityLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileIdentityLength$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$FileIdentityLength$VH().set(seg, x);
        }
        public static void FileIdentityLength$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("DWORD") int x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$FileIdentityLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle NormalizedPath$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$NormalizedPath$VH();
        }
        public static  @C("PCWSTR") MemoryAddress NormalizedPath$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$NormalizedPath$VH().get(seg);
        }
        public static  @C("PCWSTR") MemoryAddress NormalizedPath$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$NormalizedPath$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void NormalizedPath$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$NormalizedPath$VH().set(seg, x);
        }
        public static void NormalizedPath$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$NormalizedPath$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment TransferKey$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(112, 8));
        }
        public static VarHandle PriorityHint$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$PriorityHint$VH();
        }
        public static  @C("UCHAR") byte PriorityHint$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (byte)cfapi_h$constants$0.CF_CALLBACK_INFO$PriorityHint$VH().get(seg);
        }
        public static  @C("UCHAR") byte PriorityHint$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (byte)cfapi_h$constants$0.CF_CALLBACK_INFO$PriorityHint$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PriorityHint$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("UCHAR") byte x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$PriorityHint$VH().set(seg, x);
        }
        public static void PriorityHint$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("UCHAR") byte x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$PriorityHint$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle CorrelationVector$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$CorrelationVector$VH();
        }
        public static  @C("PCORRELATION_VECTOR") MemoryAddress CorrelationVector$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$CorrelationVector$VH().get(seg);
        }
        public static  @C("PCORRELATION_VECTOR") MemoryAddress CorrelationVector$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$CorrelationVector$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CorrelationVector$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("PCORRELATION_VECTOR") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$CorrelationVector$VH().set(seg, x);
        }
        public static void CorrelationVector$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("PCORRELATION_VECTOR") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$CorrelationVector$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProcessInfo$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_INFO$ProcessInfo$VH();
        }
        public static  @C("CF_PROCESS_INFO*") MemoryAddress ProcessInfo$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$ProcessInfo$VH().get(seg);
        }
        public static  @C("CF_PROCESS_INFO*") MemoryAddress ProcessInfo$get(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_INFO$ProcessInfo$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProcessInfo$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, @C("CF_PROCESS_INFO*") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$ProcessInfo$VH().set(seg, x);
        }
        public static void ProcessInfo$set(@C("struct CF_CALLBACK_INFO") MemorySegment seg, long index, @C("CF_PROCESS_INFO*") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_INFO$ProcessInfo$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment RequestKey$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(144, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_CALLBACK_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_CALLBACK_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_CALLBACK_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_CALLBACK_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_CALLBACK_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_CALLBACK_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_CALLBACK_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static @C("int") int CF_CALLBACK_CANCEL_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_CANCEL_FLAG_NONE();
    }
    public static @C("int") int CF_CALLBACK_CANCEL_FLAG_IO_TIMEOUT() {
        return cfapi_h$constants$0.CF_CALLBACK_CANCEL_FLAG_IO_TIMEOUT();
    }
    public static @C("int") int CF_CALLBACK_CANCEL_FLAG_IO_ABORTED() {
        return cfapi_h$constants$0.CF_CALLBACK_CANCEL_FLAG_IO_ABORTED();
    }
    public static @C("int") int CF_CALLBACK_FETCH_DATA_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_FETCH_DATA_FLAG_NONE();
    }
    public static @C("int") int CF_CALLBACK_FETCH_DATA_FLAG_RECOVERY() {
        return cfapi_h$constants$0.CF_CALLBACK_FETCH_DATA_FLAG_RECOVERY();
    }
    public static @C("int") int CF_CALLBACK_FETCH_DATA_FLAG_EXPLICIT_HYDRATION() {
        return cfapi_h$constants$0.CF_CALLBACK_FETCH_DATA_FLAG_EXPLICIT_HYDRATION();
    }
    public static @C("int") int CF_CALLBACK_VALIDATE_DATA_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_VALIDATE_DATA_FLAG_NONE();
    }
    public static @C("int") int CF_CALLBACK_VALIDATE_DATA_FLAG_EXPLICIT_HYDRATION() {
        return cfapi_h$constants$0.CF_CALLBACK_VALIDATE_DATA_FLAG_EXPLICIT_HYDRATION();
    }
    public static @C("int") int CF_CALLBACK_FETCH_PLACEHOLDERS_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_FETCH_PLACEHOLDERS_FLAG_NONE();
    }
    public static @C("int") int CF_CALLBACK_OPEN_COMPLETION_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_OPEN_COMPLETION_FLAG_NONE();
    }
    public static @C("int") int CF_CALLBACK_OPEN_COMPLETION_FLAG_PLACEHOLDER_UNKNOWN() {
        return cfapi_h$constants$0.CF_CALLBACK_OPEN_COMPLETION_FLAG_PLACEHOLDER_UNKNOWN();
    }
    public static @C("int") int CF_CALLBACK_OPEN_COMPLETION_FLAG_PLACEHOLDER_UNSUPPORTED() {
        return cfapi_h$constants$0.CF_CALLBACK_OPEN_COMPLETION_FLAG_PLACEHOLDER_UNSUPPORTED();
    }
    public static @C("int") int CF_CALLBACK_CLOSE_COMPLETION_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_CLOSE_COMPLETION_FLAG_NONE();
    }
    public static @C("int") int CF_CALLBACK_CLOSE_COMPLETION_FLAG_DELETED() {
        return cfapi_h$constants$0.CF_CALLBACK_CLOSE_COMPLETION_FLAG_DELETED();
    }
    public static @C("int") int CF_CALLBACK_DEHYDRATE_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_DEHYDRATE_FLAG_NONE();
    }
    public static @C("int") int CF_CALLBACK_DEHYDRATE_FLAG_BACKGROUND() {
        return cfapi_h$constants$0.CF_CALLBACK_DEHYDRATE_FLAG_BACKGROUND();
    }
    public static @C("int") int CF_CALLBACK_DEHYDRATE_COMPLETION_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_DEHYDRATE_COMPLETION_FLAG_NONE();
    }
    public static @C("int") int CF_CALLBACK_DEHYDRATE_COMPLETION_FLAG_BACKGROUND() {
        return cfapi_h$constants$0.CF_CALLBACK_DEHYDRATE_COMPLETION_FLAG_BACKGROUND();
    }
    public static @C("int") int CF_CALLBACK_DEHYDRATE_COMPLETION_FLAG_DEHYDRATED() {
        return cfapi_h$constants$0.CF_CALLBACK_DEHYDRATE_COMPLETION_FLAG_DEHYDRATED();
    }
    public static @C("int") int CF_CALLBACK_DELETE_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_DELETE_FLAG_NONE();
    }
    public static @C("int") int CF_CALLBACK_DELETE_FLAG_IS_DIRECTORY() {
        return cfapi_h$constants$0.CF_CALLBACK_DELETE_FLAG_IS_DIRECTORY();
    }
    public static @C("int") int CF_CALLBACK_DELETE_FLAG_IS_UNDELETE() {
        return cfapi_h$constants$0.CF_CALLBACK_DELETE_FLAG_IS_UNDELETE();
    }
    public static @C("int") int CF_CALLBACK_DELETE_COMPLETION_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_DELETE_COMPLETION_FLAG_NONE();
    }
    public static @C("int") int CF_CALLBACK_RENAME_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_RENAME_FLAG_NONE();
    }
    public static @C("int") int CF_CALLBACK_RENAME_FLAG_IS_DIRECTORY() {
        return cfapi_h$constants$0.CF_CALLBACK_RENAME_FLAG_IS_DIRECTORY();
    }
    public static @C("int") int CF_CALLBACK_RENAME_FLAG_SOURCE_IN_SCOPE() {
        return cfapi_h$constants$0.CF_CALLBACK_RENAME_FLAG_SOURCE_IN_SCOPE();
    }
    public static @C("int") int CF_CALLBACK_RENAME_FLAG_TARGET_IN_SCOPE() {
        return cfapi_h$constants$0.CF_CALLBACK_RENAME_FLAG_TARGET_IN_SCOPE();
    }
    public static @C("int") int CF_CALLBACK_RENAME_COMPLETION_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_RENAME_COMPLETION_FLAG_NONE();
    }
    public static @C("int") int CF_CALLBACK_DEHYDRATION_REASON_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_DEHYDRATION_REASON_NONE();
    }
    public static @C("int") int CF_CALLBACK_DEHYDRATION_REASON_USER_MANUAL() {
        return cfapi_h$constants$0.CF_CALLBACK_DEHYDRATION_REASON_USER_MANUAL();
    }
    public static @C("int") int CF_CALLBACK_DEHYDRATION_REASON_SYSTEM_LOW_SPACE() {
        return cfapi_h$constants$0.CF_CALLBACK_DEHYDRATION_REASON_SYSTEM_LOW_SPACE();
    }
    public static @C("int") int CF_CALLBACK_DEHYDRATION_REASON_SYSTEM_INACTIVITY() {
        return cfapi_h$constants$0.CF_CALLBACK_DEHYDRATION_REASON_SYSTEM_INACTIVITY();
    }
    public static @C("int") int CF_CALLBACK_DEHYDRATION_REASON_SYSTEM_OS_UPGRADE() {
        return cfapi_h$constants$0.CF_CALLBACK_DEHYDRATION_REASON_SYSTEM_OS_UPGRADE();
    }
    @C("struct CF_CALLBACK_PARAMETERS")public static class CF_CALLBACK_PARAMETERS {

        /* package-private */ CF_CALLBACK_PARAMETERS() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$struct$LAYOUT();
        }
        public static VarHandle ParamSize$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$ParamSize$VH();
        }
        public static  @C("ULONG") int ParamSize$get(@C("struct CF_CALLBACK_PARAMETERS") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$ParamSize$VH().get(seg);
        }
        public static  @C("ULONG") int ParamSize$get(@C("struct CF_CALLBACK_PARAMETERS") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$ParamSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ParamSize$set(@C("struct CF_CALLBACK_PARAMETERS") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$ParamSize$VH().set(seg, x);
        }
        public static void ParamSize$set(@C("struct CF_CALLBACK_PARAMETERS") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$ParamSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("struct ")public static class Cancel {

            /* package-private */ Cancel() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Cancel$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Cancel$Flags$VH();
            }
            public static  @C("CF_CALLBACK_CANCEL_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Cancel$Flags$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_CANCEL_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Cancel$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_CANCEL_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Cancel$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_CANCEL_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Cancel$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            @C("struct ")public static class FetchData {

                /* package-private */ FetchData() {}
                public static MemoryLayout $LAYOUT() {
                    return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Cancel$FetchData$struct$LAYOUT();
                }
                public static MemorySegment FileOffset$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
                }
                public static MemorySegment Length$slice(MemorySegment seg) {
                    return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
                public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
                public static @C("struct []") MemorySegment allocateArray(int len) {
                    return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
                }                public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                    return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
                }
                public static @C("struct *") MemorySegment allocatePointer() {
                    return MemorySegment.allocateNative(C_POINTER);
                }
                public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                    return scope.allocate(C_POINTER);
                }
                public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
            }

            public static MemorySegment FetchData$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 16));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Cancel$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 24));
        }
        @C("struct ")public static class FetchData {

            /* package-private */ FetchData() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchData$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchData$Flags$VH();
            }
            public static  @C("CF_CALLBACK_FETCH_DATA_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchData$Flags$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_FETCH_DATA_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchData$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_FETCH_DATA_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchData$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_FETCH_DATA_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchData$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment RequiredFileOffset$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
            }
            public static MemorySegment RequiredLength$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
            }
            public static MemorySegment OptionalFileOffset$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
            }
            public static MemorySegment OptionalLength$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
            }
            public static MemorySegment LastDehydrationTime$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
            }
            public static VarHandle LastDehydrationReason$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchData$LastDehydrationReason$VH();
            }
            public static  @C("CF_CALLBACK_DEHYDRATION_REASON") int LastDehydrationReason$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchData$LastDehydrationReason$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_DEHYDRATION_REASON") int LastDehydrationReason$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchData$LastDehydrationReason$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void LastDehydrationReason$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_DEHYDRATION_REASON") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchData$LastDehydrationReason$VH().set(seg, x);
            }
            public static void LastDehydrationReason$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_DEHYDRATION_REASON") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchData$LastDehydrationReason$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment FetchData$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 56));
        }
        @C("struct ")public static class ValidateData {

            /* package-private */ ValidateData() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$ValidateData$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$ValidateData$Flags$VH();
            }
            public static  @C("CF_CALLBACK_VALIDATE_DATA_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$ValidateData$Flags$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_VALIDATE_DATA_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$ValidateData$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_VALIDATE_DATA_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$ValidateData$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_VALIDATE_DATA_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$ValidateData$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment RequiredFileOffset$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
            }
            public static MemorySegment RequiredLength$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment ValidateData$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(88, 24));
        }
        @C("struct ")public static class FetchPlaceholders {

            /* package-private */ FetchPlaceholders() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchPlaceholders$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchPlaceholders$Flags$VH();
            }
            public static  @C("CF_CALLBACK_FETCH_PLACEHOLDERS_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchPlaceholders$Flags$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_FETCH_PLACEHOLDERS_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchPlaceholders$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_FETCH_PLACEHOLDERS_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchPlaceholders$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_FETCH_PLACEHOLDERS_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchPlaceholders$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Pattern$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchPlaceholders$Pattern$VH();
            }
            public static  @C("PCWSTR") MemoryAddress Pattern$get(@C("struct ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchPlaceholders$Pattern$VH().get(seg);
            }
            public static  @C("PCWSTR") MemoryAddress Pattern$get(@C("struct ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchPlaceholders$Pattern$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Pattern$set(@C("struct ") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchPlaceholders$Pattern$VH().set(seg, x);
            }
            public static void Pattern$set(@C("struct ") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$FetchPlaceholders$Pattern$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment FetchPlaceholders$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(112, 16));
        }
        @C("struct ")public static class OpenCompletion {

            /* package-private */ OpenCompletion() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$OpenCompletion$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$OpenCompletion$Flags$VH();
            }
            public static  @C("CF_CALLBACK_OPEN_COMPLETION_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$OpenCompletion$Flags$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_OPEN_COMPLETION_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$OpenCompletion$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_OPEN_COMPLETION_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$OpenCompletion$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_OPEN_COMPLETION_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$OpenCompletion$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment OpenCompletion$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(128, 4));
        }
        @C("struct ")public static class CloseCompletion {

            /* package-private */ CloseCompletion() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$CloseCompletion$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$CloseCompletion$Flags$VH();
            }
            public static  @C("CF_CALLBACK_CLOSE_COMPLETION_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$CloseCompletion$Flags$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_CLOSE_COMPLETION_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$CloseCompletion$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_CLOSE_COMPLETION_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$CloseCompletion$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_CLOSE_COMPLETION_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$CloseCompletion$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment CloseCompletion$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(132, 4));
        }
        @C("struct ")public static class Dehydrate {

            /* package-private */ Dehydrate() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Dehydrate$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Dehydrate$Flags$VH();
            }
            public static  @C("CF_CALLBACK_DEHYDRATE_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Dehydrate$Flags$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_DEHYDRATE_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Dehydrate$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_DEHYDRATE_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Dehydrate$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_DEHYDRATE_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Dehydrate$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Reason$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Dehydrate$Reason$VH();
            }
            public static  @C("CF_CALLBACK_DEHYDRATION_REASON") int Reason$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Dehydrate$Reason$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_DEHYDRATION_REASON") int Reason$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Dehydrate$Reason$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Reason$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_DEHYDRATION_REASON") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Dehydrate$Reason$VH().set(seg, x);
            }
            public static void Reason$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_DEHYDRATION_REASON") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Dehydrate$Reason$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Dehydrate$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(136, 8));
        }
        @C("struct ")public static class DehydrateCompletion {

            /* package-private */ DehydrateCompletion() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DehydrateCompletion$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DehydrateCompletion$Flags$VH();
            }
            public static  @C("CF_CALLBACK_DEHYDRATE_COMPLETION_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DehydrateCompletion$Flags$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_DEHYDRATE_COMPLETION_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DehydrateCompletion$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_DEHYDRATE_COMPLETION_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DehydrateCompletion$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_DEHYDRATE_COMPLETION_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DehydrateCompletion$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Reason$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DehydrateCompletion$Reason$VH();
            }
            public static  @C("CF_CALLBACK_DEHYDRATION_REASON") int Reason$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DehydrateCompletion$Reason$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_DEHYDRATION_REASON") int Reason$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DehydrateCompletion$Reason$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Reason$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_DEHYDRATION_REASON") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DehydrateCompletion$Reason$VH().set(seg, x);
            }
            public static void Reason$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_DEHYDRATION_REASON") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DehydrateCompletion$Reason$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment DehydrateCompletion$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(144, 8));
        }
        @C("struct ")public static class Delete {

            /* package-private */ Delete() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Delete$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Delete$Flags$VH();
            }
            public static  @C("CF_CALLBACK_DELETE_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Delete$Flags$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_DELETE_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Delete$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_DELETE_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Delete$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_DELETE_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Delete$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Delete$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(152, 4));
        }
        @C("struct ")public static class DeleteCompletion {

            /* package-private */ DeleteCompletion() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DeleteCompletion$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DeleteCompletion$Flags$VH();
            }
            public static  @C("CF_CALLBACK_DELETE_COMPLETION_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DeleteCompletion$Flags$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_DELETE_COMPLETION_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DeleteCompletion$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_DELETE_COMPLETION_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DeleteCompletion$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_DELETE_COMPLETION_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$DeleteCompletion$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment DeleteCompletion$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(156, 4));
        }
        @C("struct ")public static class Rename {

            /* package-private */ Rename() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Rename$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Rename$Flags$VH();
            }
            public static  @C("CF_CALLBACK_RENAME_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Rename$Flags$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_RENAME_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Rename$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_RENAME_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Rename$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_RENAME_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Rename$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle TargetPath$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Rename$TargetPath$VH();
            }
            public static  @C("PCWSTR") MemoryAddress TargetPath$get(@C("struct ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Rename$TargetPath$VH().get(seg);
            }
            public static  @C("PCWSTR") MemoryAddress TargetPath$get(@C("struct ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Rename$TargetPath$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void TargetPath$set(@C("struct ") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Rename$TargetPath$VH().set(seg, x);
            }
            public static void TargetPath$set(@C("struct ") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$Rename$TargetPath$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment Rename$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(160, 16));
        }
        @C("struct ")public static class RenameCompletion {

            /* package-private */ RenameCompletion() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$RenameCompletion$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$RenameCompletion$Flags$VH();
            }
            public static  @C("CF_CALLBACK_RENAME_COMPLETION_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$RenameCompletion$Flags$VH().get(seg);
            }
            public static  @C("CF_CALLBACK_RENAME_COMPLETION_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$RenameCompletion$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_CALLBACK_RENAME_COMPLETION_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$RenameCompletion$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_CALLBACK_RENAME_COMPLETION_FLAGS") int x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$RenameCompletion$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle SourcePath$VH() {
                return cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$RenameCompletion$SourcePath$VH();
            }
            public static  @C("PCWSTR") MemoryAddress SourcePath$get(@C("struct ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$RenameCompletion$SourcePath$VH().get(seg);
            }
            public static  @C("PCWSTR") MemoryAddress SourcePath$get(@C("struct ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$RenameCompletion$SourcePath$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void SourcePath$set(@C("struct ") MemorySegment seg, @C("PCWSTR") MemoryAddress x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$RenameCompletion$SourcePath$VH().set(seg, x);
            }
            public static void SourcePath$set(@C("struct ") MemorySegment seg, long index, @C("PCWSTR") MemoryAddress x) {
                cfapi_h$constants$0.CF_CALLBACK_PARAMETERS$RenameCompletion$SourcePath$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment RenameCompletion$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(176, 16));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_CALLBACK_PARAMETERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_CALLBACK_PARAMETERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_CALLBACK_PARAMETERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_CALLBACK_PARAMETERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_CALLBACK_PARAMETERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_CALLBACK_PARAMETERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_CALLBACK_PARAMETERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static @C("int") int CF_CALLBACK_TYPE_FETCH_DATA() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_FETCH_DATA();
    }
    public static @C("int") int CF_CALLBACK_TYPE_VALIDATE_DATA() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_VALIDATE_DATA();
    }
    public static @C("int") int CF_CALLBACK_TYPE_CANCEL_FETCH_DATA() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_CANCEL_FETCH_DATA();
    }
    public static @C("int") int CF_CALLBACK_TYPE_FETCH_PLACEHOLDERS() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_FETCH_PLACEHOLDERS();
    }
    public static @C("int") int CF_CALLBACK_TYPE_CANCEL_FETCH_PLACEHOLDERS() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_CANCEL_FETCH_PLACEHOLDERS();
    }
    public static @C("int") int CF_CALLBACK_TYPE_NOTIFY_FILE_OPEN_COMPLETION() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_NOTIFY_FILE_OPEN_COMPLETION();
    }
    public static @C("int") int CF_CALLBACK_TYPE_NOTIFY_FILE_CLOSE_COMPLETION() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_NOTIFY_FILE_CLOSE_COMPLETION();
    }
    public static @C("int") int CF_CALLBACK_TYPE_NOTIFY_DEHYDRATE() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_NOTIFY_DEHYDRATE();
    }
    public static @C("int") int CF_CALLBACK_TYPE_NOTIFY_DEHYDRATE_COMPLETION() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_NOTIFY_DEHYDRATE_COMPLETION();
    }
    public static @C("int") int CF_CALLBACK_TYPE_NOTIFY_DELETE() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_NOTIFY_DELETE();
    }
    public static @C("int") int CF_CALLBACK_TYPE_NOTIFY_DELETE_COMPLETION() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_NOTIFY_DELETE_COMPLETION();
    }
    public static @C("int") int CF_CALLBACK_TYPE_NOTIFY_RENAME() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_NOTIFY_RENAME();
    }
    public static @C("int") int CF_CALLBACK_TYPE_NOTIFY_RENAME_COMPLETION() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_NOTIFY_RENAME_COMPLETION();
    }
    public static @C("int") int CF_CALLBACK_TYPE_NONE() {
        return cfapi_h$constants$0.CF_CALLBACK_TYPE_NONE();
    }
    @C("struct CF_CALLBACK_REGISTRATION")public static class CF_CALLBACK_REGISTRATION {

        /* package-private */ CF_CALLBACK_REGISTRATION() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_CALLBACK_REGISTRATION$struct$LAYOUT();
        }
        public static VarHandle Type$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_REGISTRATION$Type$VH();
        }
        public static  @C("CF_CALLBACK_TYPE") int Type$get(@C("struct CF_CALLBACK_REGISTRATION") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_CALLBACK_REGISTRATION$Type$VH().get(seg);
        }
        public static  @C("CF_CALLBACK_TYPE") int Type$get(@C("struct CF_CALLBACK_REGISTRATION") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_CALLBACK_REGISTRATION$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct CF_CALLBACK_REGISTRATION") MemorySegment seg, @C("CF_CALLBACK_TYPE") int x) {
            cfapi_h$constants$0.CF_CALLBACK_REGISTRATION$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct CF_CALLBACK_REGISTRATION") MemorySegment seg, long index, @C("CF_CALLBACK_TYPE") int x) {
            cfapi_h$constants$0.CF_CALLBACK_REGISTRATION$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Callback$VH() {
            return cfapi_h$constants$0.CF_CALLBACK_REGISTRATION$Callback$VH();
        }
        public static  @C("CF_CALLBACK") MemoryAddress Callback$get(@C("struct CF_CALLBACK_REGISTRATION") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_REGISTRATION$Callback$VH().get(seg);
        }
        public static  @C("CF_CALLBACK") MemoryAddress Callback$get(@C("struct CF_CALLBACK_REGISTRATION") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_CALLBACK_REGISTRATION$Callback$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Callback$set(@C("struct CF_CALLBACK_REGISTRATION") MemorySegment seg, @C("CF_CALLBACK") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_REGISTRATION$Callback$VH().set(seg, x);
        }
        public static void Callback$set(@C("struct CF_CALLBACK_REGISTRATION") MemorySegment seg, long index, @C("CF_CALLBACK") MemoryAddress x) {
            cfapi_h$constants$0.CF_CALLBACK_REGISTRATION$Callback$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_CALLBACK_REGISTRATION") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_CALLBACK_REGISTRATION") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_CALLBACK_REGISTRATION[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_CALLBACK_REGISTRATION[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_CALLBACK_REGISTRATION*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_CALLBACK_REGISTRATION*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_CALLBACK_REGISTRATION") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static @C("int") int CF_CONNECT_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CONNECT_FLAG_NONE();
    }
    public static @C("int") int CF_CONNECT_FLAG_REQUIRE_PROCESS_INFO() {
        return cfapi_h$constants$0.CF_CONNECT_FLAG_REQUIRE_PROCESS_INFO();
    }
    public static @C("int") int CF_CONNECT_FLAG_REQUIRE_FULL_FILE_PATH() {
        return cfapi_h$constants$0.CF_CONNECT_FLAG_REQUIRE_FULL_FILE_PATH();
    }
    public static @C("int") int CF_CONNECT_FLAG_BLOCK_SELF_IMPLICIT_HYDRATION() {
        return cfapi_h$constants$0.CF_CONNECT_FLAG_BLOCK_SELF_IMPLICIT_HYDRATION();
    }
    public static  MethodHandle CfConnectSyncRoot$MH() {
        return cfapi_h$constants$0.CfConnectSyncRoot$MH();
    }
    public static @C("HRESULT") int CfConnectSyncRoot (@C("LPCWSTR") Addressable SyncRootPath, @C("const CF_CALLBACK_REGISTRATION*") Addressable CallbackTable, @C("LPCVOID") Addressable CallbackContext, @C("CF_CONNECT_FLAGS") int ConnectFlags, @C("CF_CONNECTION_KEY*") Addressable ConnectionKey) {
        try {
            return (int)cfapi_h$constants$0.CfConnectSyncRoot$MH().invokeExact(SyncRootPath.address(), CallbackTable.address(), CallbackContext.address(), ConnectFlags, ConnectionKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfDisconnectSyncRoot$MH() {
        return cfapi_h$constants$0.CfDisconnectSyncRoot$MH();
    }
    public static @C("HRESULT") int CfDisconnectSyncRoot (@C("CF_CONNECTION_KEY") MemorySegment ConnectionKey) {
        try {
            return (int)cfapi_h$constants$0.CfDisconnectSyncRoot$MH().invokeExact(ConnectionKey);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfGetTransferKey$MH() {
        return cfapi_h$constants$0.CfGetTransferKey$MH();
    }
    public static @C("HRESULT") int CfGetTransferKey (@C("HANDLE") Addressable FileHandle, @C("CF_TRANSFER_KEY*") Addressable TransferKey) {
        try {
            return (int)cfapi_h$constants$0.CfGetTransferKey$MH().invokeExact(FileHandle.address(), TransferKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfReleaseTransferKey$MH() {
        return cfapi_h$constants$0.CfReleaseTransferKey$MH();
    }
    public static void CfReleaseTransferKey (@C("HANDLE") Addressable FileHandle, @C("CF_TRANSFER_KEY*") Addressable TransferKey) {
        try {
            cfapi_h$constants$0.CfReleaseTransferKey$MH().invokeExact(FileHandle.address(), TransferKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_OPERATION_TYPE_TRANSFER_DATA() {
        return cfapi_h$constants$0.CF_OPERATION_TYPE_TRANSFER_DATA();
    }
    public static @C("int") int CF_OPERATION_TYPE_RETRIEVE_DATA() {
        return cfapi_h$constants$0.CF_OPERATION_TYPE_RETRIEVE_DATA();
    }
    public static @C("int") int CF_OPERATION_TYPE_ACK_DATA() {
        return cfapi_h$constants$0.CF_OPERATION_TYPE_ACK_DATA();
    }
    public static @C("int") int CF_OPERATION_TYPE_RESTART_HYDRATION() {
        return cfapi_h$constants$0.CF_OPERATION_TYPE_RESTART_HYDRATION();
    }
    public static @C("int") int CF_OPERATION_TYPE_TRANSFER_PLACEHOLDERS() {
        return cfapi_h$constants$0.CF_OPERATION_TYPE_TRANSFER_PLACEHOLDERS();
    }
    public static @C("int") int CF_OPERATION_TYPE_ACK_DEHYDRATE() {
        return cfapi_h$constants$0.CF_OPERATION_TYPE_ACK_DEHYDRATE();
    }
    public static @C("int") int CF_OPERATION_TYPE_ACK_DELETE() {
        return cfapi_h$constants$0.CF_OPERATION_TYPE_ACK_DELETE();
    }
    public static @C("int") int CF_OPERATION_TYPE_ACK_RENAME() {
        return cfapi_h$constants$0.CF_OPERATION_TYPE_ACK_RENAME();
    }
    @C("struct CF_SYNC_STATUS")public static class CF_SYNC_STATUS {

        /* package-private */ CF_SYNC_STATUS() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_SYNC_STATUS$struct$LAYOUT();
        }
        public static VarHandle StructSize$VH() {
            return cfapi_h$constants$0.CF_SYNC_STATUS$StructSize$VH();
        }
        public static  @C("ULONG") int StructSize$get(@C("struct CF_SYNC_STATUS") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_STATUS$StructSize$VH().get(seg);
        }
        public static  @C("ULONG") int StructSize$get(@C("struct CF_SYNC_STATUS") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_STATUS$StructSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StructSize$set(@C("struct CF_SYNC_STATUS") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_STATUS$StructSize$VH().set(seg, x);
        }
        public static void StructSize$set(@C("struct CF_SYNC_STATUS") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_STATUS$StructSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Code$VH() {
            return cfapi_h$constants$0.CF_SYNC_STATUS$Code$VH();
        }
        public static  @C("ULONG") int Code$get(@C("struct CF_SYNC_STATUS") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_STATUS$Code$VH().get(seg);
        }
        public static  @C("ULONG") int Code$get(@C("struct CF_SYNC_STATUS") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_STATUS$Code$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Code$set(@C("struct CF_SYNC_STATUS") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_STATUS$Code$VH().set(seg, x);
        }
        public static void Code$set(@C("struct CF_SYNC_STATUS") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_STATUS$Code$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DescriptionOffset$VH() {
            return cfapi_h$constants$0.CF_SYNC_STATUS$DescriptionOffset$VH();
        }
        public static  @C("ULONG") int DescriptionOffset$get(@C("struct CF_SYNC_STATUS") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_STATUS$DescriptionOffset$VH().get(seg);
        }
        public static  @C("ULONG") int DescriptionOffset$get(@C("struct CF_SYNC_STATUS") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_STATUS$DescriptionOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DescriptionOffset$set(@C("struct CF_SYNC_STATUS") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_STATUS$DescriptionOffset$VH().set(seg, x);
        }
        public static void DescriptionOffset$set(@C("struct CF_SYNC_STATUS") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_STATUS$DescriptionOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DescriptionLength$VH() {
            return cfapi_h$constants$0.CF_SYNC_STATUS$DescriptionLength$VH();
        }
        public static  @C("ULONG") int DescriptionLength$get(@C("struct CF_SYNC_STATUS") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_STATUS$DescriptionLength$VH().get(seg);
        }
        public static  @C("ULONG") int DescriptionLength$get(@C("struct CF_SYNC_STATUS") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_STATUS$DescriptionLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DescriptionLength$set(@C("struct CF_SYNC_STATUS") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_STATUS$DescriptionLength$VH().set(seg, x);
        }
        public static void DescriptionLength$set(@C("struct CF_SYNC_STATUS") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_STATUS$DescriptionLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DeviceIdOffset$VH() {
            return cfapi_h$constants$0.CF_SYNC_STATUS$DeviceIdOffset$VH();
        }
        public static  @C("ULONG") int DeviceIdOffset$get(@C("struct CF_SYNC_STATUS") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_STATUS$DeviceIdOffset$VH().get(seg);
        }
        public static  @C("ULONG") int DeviceIdOffset$get(@C("struct CF_SYNC_STATUS") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_STATUS$DeviceIdOffset$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DeviceIdOffset$set(@C("struct CF_SYNC_STATUS") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_STATUS$DeviceIdOffset$VH().set(seg, x);
        }
        public static void DeviceIdOffset$set(@C("struct CF_SYNC_STATUS") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_STATUS$DeviceIdOffset$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle DeviceIdLength$VH() {
            return cfapi_h$constants$0.CF_SYNC_STATUS$DeviceIdLength$VH();
        }
        public static  @C("ULONG") int DeviceIdLength$get(@C("struct CF_SYNC_STATUS") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_STATUS$DeviceIdLength$VH().get(seg);
        }
        public static  @C("ULONG") int DeviceIdLength$get(@C("struct CF_SYNC_STATUS") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_STATUS$DeviceIdLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void DeviceIdLength$set(@C("struct CF_SYNC_STATUS") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_STATUS$DeviceIdLength$VH().set(seg, x);
        }
        public static void DeviceIdLength$set(@C("struct CF_SYNC_STATUS") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_STATUS$DeviceIdLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_SYNC_STATUS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_SYNC_STATUS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_SYNC_STATUS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_SYNC_STATUS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_SYNC_STATUS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_SYNC_STATUS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_SYNC_STATUS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct CF_OPERATION_INFO")public static class CF_OPERATION_INFO {

        /* package-private */ CF_OPERATION_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_OPERATION_INFO$struct$LAYOUT();
        }
        public static VarHandle StructSize$VH() {
            return cfapi_h$constants$0.CF_OPERATION_INFO$StructSize$VH();
        }
        public static  @C("ULONG") int StructSize$get(@C("struct CF_OPERATION_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_OPERATION_INFO$StructSize$VH().get(seg);
        }
        public static  @C("ULONG") int StructSize$get(@C("struct CF_OPERATION_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_OPERATION_INFO$StructSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void StructSize$set(@C("struct CF_OPERATION_INFO") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_OPERATION_INFO$StructSize$VH().set(seg, x);
        }
        public static void StructSize$set(@C("struct CF_OPERATION_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_OPERATION_INFO$StructSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle Type$VH() {
            return cfapi_h$constants$0.CF_OPERATION_INFO$Type$VH();
        }
        public static  @C("CF_OPERATION_TYPE") int Type$get(@C("struct CF_OPERATION_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_OPERATION_INFO$Type$VH().get(seg);
        }
        public static  @C("CF_OPERATION_TYPE") int Type$get(@C("struct CF_OPERATION_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_OPERATION_INFO$Type$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void Type$set(@C("struct CF_OPERATION_INFO") MemorySegment seg, @C("CF_OPERATION_TYPE") int x) {
            cfapi_h$constants$0.CF_OPERATION_INFO$Type$VH().set(seg, x);
        }
        public static void Type$set(@C("struct CF_OPERATION_INFO") MemorySegment seg, long index, @C("CF_OPERATION_TYPE") int x) {
            cfapi_h$constants$0.CF_OPERATION_INFO$Type$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ConnectionKey$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment TransferKey$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static VarHandle CorrelationVector$VH() {
            return cfapi_h$constants$0.CF_OPERATION_INFO$CorrelationVector$VH();
        }
        public static  @C("const CORRELATION_VECTOR*") MemoryAddress CorrelationVector$get(@C("struct CF_OPERATION_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_INFO$CorrelationVector$VH().get(seg);
        }
        public static  @C("const CORRELATION_VECTOR*") MemoryAddress CorrelationVector$get(@C("struct CF_OPERATION_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_INFO$CorrelationVector$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void CorrelationVector$set(@C("struct CF_OPERATION_INFO") MemorySegment seg, @C("const CORRELATION_VECTOR*") MemoryAddress x) {
            cfapi_h$constants$0.CF_OPERATION_INFO$CorrelationVector$VH().set(seg, x);
        }
        public static void CorrelationVector$set(@C("struct CF_OPERATION_INFO") MemorySegment seg, long index, @C("const CORRELATION_VECTOR*") MemoryAddress x) {
            cfapi_h$constants$0.CF_OPERATION_INFO$CorrelationVector$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle SyncStatus$VH() {
            return cfapi_h$constants$0.CF_OPERATION_INFO$SyncStatus$VH();
        }
        public static  @C("const CF_SYNC_STATUS*") MemoryAddress SyncStatus$get(@C("struct CF_OPERATION_INFO") MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_INFO$SyncStatus$VH().get(seg);
        }
        public static  @C("const CF_SYNC_STATUS*") MemoryAddress SyncStatus$get(@C("struct CF_OPERATION_INFO") MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_INFO$SyncStatus$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SyncStatus$set(@C("struct CF_OPERATION_INFO") MemorySegment seg, @C("const CF_SYNC_STATUS*") MemoryAddress x) {
            cfapi_h$constants$0.CF_OPERATION_INFO$SyncStatus$VH().set(seg, x);
        }
        public static void SyncStatus$set(@C("struct CF_OPERATION_INFO") MemorySegment seg, long index, @C("const CF_SYNC_STATUS*") MemoryAddress x) {
            cfapi_h$constants$0.CF_OPERATION_INFO$SyncStatus$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment RequestKey$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_OPERATION_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_OPERATION_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_OPERATION_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_OPERATION_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_OPERATION_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_OPERATION_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_OPERATION_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static @C("int") int CF_OPERATION_TRANSFER_DATA_FLAG_NONE() {
        return cfapi_h$constants$0.CF_OPERATION_TRANSFER_DATA_FLAG_NONE();
    }
    public static @C("int") int CF_OPERATION_RETRIEVE_DATA_FLAG_NONE() {
        return cfapi_h$constants$0.CF_OPERATION_RETRIEVE_DATA_FLAG_NONE();
    }
    public static @C("int") int CF_OPERATION_ACK_DATA_FLAG_NONE() {
        return cfapi_h$constants$0.CF_OPERATION_ACK_DATA_FLAG_NONE();
    }
    public static @C("int") int CF_OPERATION_RESTART_HYDRATION_FLAG_NONE() {
        return cfapi_h$constants$0.CF_OPERATION_RESTART_HYDRATION_FLAG_NONE();
    }
    public static @C("int") int CF_OPERATION_RESTART_HYDRATION_FLAG_MARK_IN_SYNC() {
        return cfapi_h$constants$0.CF_OPERATION_RESTART_HYDRATION_FLAG_MARK_IN_SYNC();
    }
    public static @C("int") int CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAG_NONE() {
        return cfapi_h$constants$0.CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAG_NONE();
    }
    public static @C("int") int CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAG_STOP_ON_ERROR() {
        return cfapi_h$constants$0.CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAG_STOP_ON_ERROR();
    }
    public static @C("int") int CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAG_DISABLE_ON_DEMAND_POPULATION() {
        return cfapi_h$constants$0.CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAG_DISABLE_ON_DEMAND_POPULATION();
    }
    public static @C("int") int CF_OPERATION_ACK_DEHYDRATE_FLAG_NONE() {
        return cfapi_h$constants$0.CF_OPERATION_ACK_DEHYDRATE_FLAG_NONE();
    }
    public static @C("int") int CF_OPERATION_ACK_RENAME_FLAG_NONE() {
        return cfapi_h$constants$0.CF_OPERATION_ACK_RENAME_FLAG_NONE();
    }
    public static @C("int") int CF_OPERATION_ACK_DELETE_FLAG_NONE() {
        return cfapi_h$constants$0.CF_OPERATION_ACK_DELETE_FLAG_NONE();
    }
    @C("struct CF_OPERATION_PARAMETERS")public static class CF_OPERATION_PARAMETERS {

        /* package-private */ CF_OPERATION_PARAMETERS() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$struct$LAYOUT();
        }
        public static VarHandle ParamSize$VH() {
            return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$ParamSize$VH();
        }
        public static  @C("ULONG") int ParamSize$get(@C("struct CF_OPERATION_PARAMETERS") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$ParamSize$VH().get(seg);
        }
        public static  @C("ULONG") int ParamSize$get(@C("struct CF_OPERATION_PARAMETERS") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$ParamSize$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ParamSize$set(@C("struct CF_OPERATION_PARAMETERS") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_OPERATION_PARAMETERS$ParamSize$VH().set(seg, x);
        }
        public static void ParamSize$set(@C("struct CF_OPERATION_PARAMETERS") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_OPERATION_PARAMETERS$ParamSize$VH().set(seg.asSlice(index*sizeof()), x);
        }
        @C("struct ")public static class TransferData {

            /* package-private */ TransferData() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$Flags$VH();
            }
            public static  @C("CF_OPERATION_TRANSFER_DATA_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$Flags$VH().get(seg);
            }
            public static  @C("CF_OPERATION_TRANSFER_DATA_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_OPERATION_TRANSFER_DATA_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_OPERATION_TRANSFER_DATA_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle CompletionStatus$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$CompletionStatus$VH();
            }
            public static  @C("NTSTATUS") int CompletionStatus$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$CompletionStatus$VH().get(seg);
            }
            public static  @C("NTSTATUS") int CompletionStatus$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$CompletionStatus$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void CompletionStatus$set(@C("struct ") MemorySegment seg, @C("NTSTATUS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$CompletionStatus$VH().set(seg, x);
            }
            public static void CompletionStatus$set(@C("struct ") MemorySegment seg, long index, @C("NTSTATUS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$CompletionStatus$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Buffer$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$Buffer$VH();
            }
            public static  @C("LPCVOID") MemoryAddress Buffer$get(@C("struct ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$Buffer$VH().get(seg);
            }
            public static  @C("LPCVOID") MemoryAddress Buffer$get(@C("struct ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$Buffer$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Buffer$set(@C("struct ") MemorySegment seg, @C("LPCVOID") MemoryAddress x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$Buffer$VH().set(seg, x);
            }
            public static void Buffer$set(@C("struct ") MemorySegment seg, long index, @C("LPCVOID") MemoryAddress x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferData$Buffer$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment Offset$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
            }
            public static MemorySegment Length$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment TransferData$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 32));
        }
        @C("struct ")public static class RetrieveData {

            /* package-private */ RetrieveData() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RetrieveData$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RetrieveData$Flags$VH();
            }
            public static  @C("CF_OPERATION_RETRIEVE_DATA_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RetrieveData$Flags$VH().get(seg);
            }
            public static  @C("CF_OPERATION_RETRIEVE_DATA_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RetrieveData$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_OPERATION_RETRIEVE_DATA_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RetrieveData$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_OPERATION_RETRIEVE_DATA_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RetrieveData$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle Buffer$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RetrieveData$Buffer$VH();
            }
            public static  @C("LPVOID") MemoryAddress Buffer$get(@C("struct ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RetrieveData$Buffer$VH().get(seg);
            }
            public static  @C("LPVOID") MemoryAddress Buffer$get(@C("struct ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RetrieveData$Buffer$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Buffer$set(@C("struct ") MemorySegment seg, @C("LPVOID") MemoryAddress x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RetrieveData$Buffer$VH().set(seg, x);
            }
            public static void Buffer$set(@C("struct ") MemorySegment seg, long index, @C("LPVOID") MemoryAddress x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RetrieveData$Buffer$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment Offset$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
            }
            public static MemorySegment Length$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
            }
            public static MemorySegment ReturnedLength$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(32, 8));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment RetrieveData$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 40));
        }
        @C("struct ")public static class AckData {

            /* package-private */ AckData() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckData$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckData$Flags$VH();
            }
            public static  @C("CF_OPERATION_ACK_DATA_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckData$Flags$VH().get(seg);
            }
            public static  @C("CF_OPERATION_ACK_DATA_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckData$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_OPERATION_ACK_DATA_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckData$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_OPERATION_ACK_DATA_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckData$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle CompletionStatus$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckData$CompletionStatus$VH();
            }
            public static  @C("NTSTATUS") int CompletionStatus$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckData$CompletionStatus$VH().get(seg);
            }
            public static  @C("NTSTATUS") int CompletionStatus$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckData$CompletionStatus$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void CompletionStatus$set(@C("struct ") MemorySegment seg, @C("NTSTATUS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckData$CompletionStatus$VH().set(seg, x);
            }
            public static void CompletionStatus$set(@C("struct ") MemorySegment seg, long index, @C("NTSTATUS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckData$CompletionStatus$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment Offset$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
            }
            public static MemorySegment Length$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment AckData$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(80, 24));
        }
        @C("struct ")public static class RestartHydration {

            /* package-private */ RestartHydration() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$Flags$VH();
            }
            public static  @C("CF_OPERATION_RESTART_HYDRATION_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$Flags$VH().get(seg);
            }
            public static  @C("CF_OPERATION_RESTART_HYDRATION_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_OPERATION_RESTART_HYDRATION_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_OPERATION_RESTART_HYDRATION_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle FsMetadata$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FsMetadata$VH();
            }
            public static  @C("const CF_FS_METADATA*") MemoryAddress FsMetadata$get(@C("struct ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FsMetadata$VH().get(seg);
            }
            public static  @C("const CF_FS_METADATA*") MemoryAddress FsMetadata$get(@C("struct ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FsMetadata$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void FsMetadata$set(@C("struct ") MemorySegment seg, @C("const CF_FS_METADATA*") MemoryAddress x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FsMetadata$VH().set(seg, x);
            }
            public static void FsMetadata$set(@C("struct ") MemorySegment seg, long index, @C("const CF_FS_METADATA*") MemoryAddress x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FsMetadata$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle FileIdentity$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FileIdentity$VH();
            }
            public static  @C("LPCVOID") MemoryAddress FileIdentity$get(@C("struct ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FileIdentity$VH().get(seg);
            }
            public static  @C("LPCVOID") MemoryAddress FileIdentity$get(@C("struct ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FileIdentity$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void FileIdentity$set(@C("struct ") MemorySegment seg, @C("LPCVOID") MemoryAddress x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FileIdentity$VH().set(seg, x);
            }
            public static void FileIdentity$set(@C("struct ") MemorySegment seg, long index, @C("LPCVOID") MemoryAddress x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FileIdentity$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle FileIdentityLength$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FileIdentityLength$VH();
            }
            public static  @C("DWORD") int FileIdentityLength$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FileIdentityLength$VH().get(seg);
            }
            public static  @C("DWORD") int FileIdentityLength$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FileIdentityLength$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void FileIdentityLength$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FileIdentityLength$VH().set(seg, x);
            }
            public static void FileIdentityLength$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$RestartHydration$FileIdentityLength$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment RestartHydration$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(104, 32));
        }
        @C("struct ")public static class TransferPlaceholders {

            /* package-private */ TransferPlaceholders() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$Flags$VH();
            }
            public static  @C("CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$Flags$VH().get(seg);
            }
            public static  @C("CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle CompletionStatus$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$CompletionStatus$VH();
            }
            public static  @C("NTSTATUS") int CompletionStatus$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$CompletionStatus$VH().get(seg);
            }
            public static  @C("NTSTATUS") int CompletionStatus$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$CompletionStatus$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void CompletionStatus$set(@C("struct ") MemorySegment seg, @C("NTSTATUS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$CompletionStatus$VH().set(seg, x);
            }
            public static void CompletionStatus$set(@C("struct ") MemorySegment seg, long index, @C("NTSTATUS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$CompletionStatus$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment PlaceholderTotalCount$slice(MemorySegment seg) {
                return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
            }
            public static VarHandle PlaceholderArray$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$PlaceholderArray$VH();
            }
            public static  @C("CF_PLACEHOLDER_CREATE_INFO*") MemoryAddress PlaceholderArray$get(@C("struct ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$PlaceholderArray$VH().get(seg);
            }
            public static  @C("CF_PLACEHOLDER_CREATE_INFO*") MemoryAddress PlaceholderArray$get(@C("struct ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$PlaceholderArray$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void PlaceholderArray$set(@C("struct ") MemorySegment seg, @C("CF_PLACEHOLDER_CREATE_INFO*") MemoryAddress x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$PlaceholderArray$VH().set(seg, x);
            }
            public static void PlaceholderArray$set(@C("struct ") MemorySegment seg, long index, @C("CF_PLACEHOLDER_CREATE_INFO*") MemoryAddress x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$PlaceholderArray$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle PlaceholderCount$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$PlaceholderCount$VH();
            }
            public static  @C("DWORD") int PlaceholderCount$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$PlaceholderCount$VH().get(seg);
            }
            public static  @C("DWORD") int PlaceholderCount$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$PlaceholderCount$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void PlaceholderCount$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$PlaceholderCount$VH().set(seg, x);
            }
            public static void PlaceholderCount$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$PlaceholderCount$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle EntriesProcessed$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$EntriesProcessed$VH();
            }
            public static  @C("DWORD") int EntriesProcessed$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$EntriesProcessed$VH().get(seg);
            }
            public static  @C("DWORD") int EntriesProcessed$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$EntriesProcessed$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void EntriesProcessed$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$EntriesProcessed$VH().set(seg, x);
            }
            public static void EntriesProcessed$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$TransferPlaceholders$EntriesProcessed$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment TransferPlaceholders$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(136, 32));
        }
        @C("struct ")public static class AckDehydrate {

            /* package-private */ AckDehydrate() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$Flags$VH();
            }
            public static  @C("CF_OPERATION_ACK_DEHYDRATE_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$Flags$VH().get(seg);
            }
            public static  @C("CF_OPERATION_ACK_DEHYDRATE_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_OPERATION_ACK_DEHYDRATE_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_OPERATION_ACK_DEHYDRATE_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle CompletionStatus$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$CompletionStatus$VH();
            }
            public static  @C("NTSTATUS") int CompletionStatus$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$CompletionStatus$VH().get(seg);
            }
            public static  @C("NTSTATUS") int CompletionStatus$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$CompletionStatus$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void CompletionStatus$set(@C("struct ") MemorySegment seg, @C("NTSTATUS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$CompletionStatus$VH().set(seg, x);
            }
            public static void CompletionStatus$set(@C("struct ") MemorySegment seg, long index, @C("NTSTATUS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$CompletionStatus$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle FileIdentity$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$FileIdentity$VH();
            }
            public static  @C("LPCVOID") MemoryAddress FileIdentity$get(@C("struct ") MemorySegment seg) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$FileIdentity$VH().get(seg);
            }
            public static  @C("LPCVOID") MemoryAddress FileIdentity$get(@C("struct ") MemorySegment seg, long index) {
                return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$FileIdentity$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void FileIdentity$set(@C("struct ") MemorySegment seg, @C("LPCVOID") MemoryAddress x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$FileIdentity$VH().set(seg, x);
            }
            public static void FileIdentity$set(@C("struct ") MemorySegment seg, long index, @C("LPCVOID") MemoryAddress x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$FileIdentity$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle FileIdentityLength$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$FileIdentityLength$VH();
            }
            public static  @C("DWORD") int FileIdentityLength$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$FileIdentityLength$VH().get(seg);
            }
            public static  @C("DWORD") int FileIdentityLength$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$FileIdentityLength$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void FileIdentityLength$set(@C("struct ") MemorySegment seg, @C("DWORD") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$FileIdentityLength$VH().set(seg, x);
            }
            public static void FileIdentityLength$set(@C("struct ") MemorySegment seg, long index, @C("DWORD") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDehydrate$FileIdentityLength$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment AckDehydrate$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(168, 24));
        }
        @C("struct ")public static class AckRename {

            /* package-private */ AckRename() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckRename$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckRename$Flags$VH();
            }
            public static  @C("CF_OPERATION_ACK_RENAME_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckRename$Flags$VH().get(seg);
            }
            public static  @C("CF_OPERATION_ACK_RENAME_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckRename$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_OPERATION_ACK_RENAME_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckRename$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_OPERATION_ACK_RENAME_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckRename$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle CompletionStatus$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckRename$CompletionStatus$VH();
            }
            public static  @C("NTSTATUS") int CompletionStatus$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckRename$CompletionStatus$VH().get(seg);
            }
            public static  @C("NTSTATUS") int CompletionStatus$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckRename$CompletionStatus$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void CompletionStatus$set(@C("struct ") MemorySegment seg, @C("NTSTATUS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckRename$CompletionStatus$VH().set(seg, x);
            }
            public static void CompletionStatus$set(@C("struct ") MemorySegment seg, long index, @C("NTSTATUS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckRename$CompletionStatus$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment AckRename$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(192, 8));
        }
        @C("struct ")public static class AckDelete {

            /* package-private */ AckDelete() {}
            public static MemoryLayout $LAYOUT() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDelete$struct$LAYOUT();
            }
            public static VarHandle Flags$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDelete$Flags$VH();
            }
            public static  @C("CF_OPERATION_ACK_DELETE_FLAGS") int Flags$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDelete$Flags$VH().get(seg);
            }
            public static  @C("CF_OPERATION_ACK_DELETE_FLAGS") int Flags$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDelete$Flags$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, @C("CF_OPERATION_ACK_DELETE_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDelete$Flags$VH().set(seg, x);
            }
            public static void Flags$set(@C("struct ") MemorySegment seg, long index, @C("CF_OPERATION_ACK_DELETE_FLAGS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDelete$Flags$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle CompletionStatus$VH() {
                return cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDelete$CompletionStatus$VH();
            }
            public static  @C("NTSTATUS") int CompletionStatus$get(@C("struct ") MemorySegment seg) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDelete$CompletionStatus$VH().get(seg);
            }
            public static  @C("NTSTATUS") int CompletionStatus$get(@C("struct ") MemorySegment seg, long index) {
                return (int)cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDelete$CompletionStatus$VH().get(seg.asSlice(index*sizeof()));
            }
            public static void CompletionStatus$set(@C("struct ") MemorySegment seg, @C("NTSTATUS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDelete$CompletionStatus$VH().set(seg, x);
            }
            public static void CompletionStatus$set(@C("struct ") MemorySegment seg, long index, @C("NTSTATUS") int x) {
                cfapi_h$constants$0.CF_OPERATION_PARAMETERS$AckDelete$CompletionStatus$VH().set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static @C("struct ") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
            public static @C("struct ") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
            public static @C("struct []") MemorySegment allocateArray(int len) {
                return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
            }            public static @C("struct []") MemorySegment allocateArray(int len, NativeScope scope) {
                return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
            }
            public static @C("struct *") MemorySegment allocatePointer() {
                return MemorySegment.allocateNative(C_POINTER);
            }
            public static @C("struct *") MemorySegment allocatePointer(NativeScope scope) {
                return scope.allocate(C_POINTER);
            }
            public static @C("struct ") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
        }

        public static MemorySegment AckDelete$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(200, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_OPERATION_PARAMETERS") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_OPERATION_PARAMETERS") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_OPERATION_PARAMETERS[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_OPERATION_PARAMETERS[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_OPERATION_PARAMETERS*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_OPERATION_PARAMETERS*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_OPERATION_PARAMETERS") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle CfExecute$MH() {
        return cfapi_h$constants$0.CfExecute$MH();
    }
    public static @C("HRESULT") int CfExecute (@C("const CF_OPERATION_INFO*") Addressable OpInfo, @C("CF_OPERATION_PARAMETERS*") Addressable OpParams) {
        try {
            return (int)cfapi_h$constants$0.CfExecute$MH().invokeExact(OpInfo.address(), OpParams.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfUpdateSyncProviderStatus$MH() {
        return cfapi_h$constants$0.CfUpdateSyncProviderStatus$MH();
    }
    public static @C("HRESULT") int CfUpdateSyncProviderStatus (@C("CF_CONNECTION_KEY") MemorySegment ConnectionKey, @C("CF_SYNC_PROVIDER_STATUS") int ProviderStatus) {
        try {
            return (int)cfapi_h$constants$0.CfUpdateSyncProviderStatus$MH().invokeExact(ConnectionKey, ProviderStatus);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfQuerySyncProviderStatus$MH() {
        return cfapi_h$constants$0.CfQuerySyncProviderStatus$MH();
    }
    public static @C("HRESULT") int CfQuerySyncProviderStatus (@C("CF_CONNECTION_KEY") MemorySegment ConnectionKey, @C("CF_SYNC_PROVIDER_STATUS*") Addressable ProviderStatus) {
        try {
            return (int)cfapi_h$constants$0.CfQuerySyncProviderStatus$MH().invokeExact(ConnectionKey, ProviderStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfReportSyncStatus$MH() {
        return cfapi_h$constants$0.CfReportSyncStatus$MH();
    }
    public static @C("HRESULT") int CfReportSyncStatus (@C("LPCWSTR") Addressable SyncRootPath, @C("CF_SYNC_STATUS*") Addressable SyncStatus) {
        try {
            return (int)cfapi_h$constants$0.CfReportSyncStatus$MH().invokeExact(SyncRootPath.address(), SyncStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_CREATE_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CREATE_FLAG_NONE();
    }
    public static @C("int") int CF_CREATE_FLAG_STOP_ON_ERROR() {
        return cfapi_h$constants$0.CF_CREATE_FLAG_STOP_ON_ERROR();
    }
    public static  MethodHandle CfCreatePlaceholders$MH() {
        return cfapi_h$constants$0.CfCreatePlaceholders$MH();
    }
    public static @C("HRESULT") int CfCreatePlaceholders (@C("LPCWSTR") Addressable BaseDirectoryPath, @C("CF_PLACEHOLDER_CREATE_INFO*") Addressable PlaceholderArray, @C("DWORD") int PlaceholderCount, @C("CF_CREATE_FLAGS") int CreateFlags, @C("PDWORD") Addressable EntriesProcessed) {
        try {
            return (int)cfapi_h$constants$0.CfCreatePlaceholders$MH().invokeExact(BaseDirectoryPath.address(), PlaceholderArray.address(), PlaceholderCount, CreateFlags, EntriesProcessed.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_OPEN_FILE_FLAG_NONE() {
        return cfapi_h$constants$0.CF_OPEN_FILE_FLAG_NONE();
    }
    public static @C("int") int CF_OPEN_FILE_FLAG_EXCLUSIVE() {
        return cfapi_h$constants$0.CF_OPEN_FILE_FLAG_EXCLUSIVE();
    }
    public static @C("int") int CF_OPEN_FILE_FLAG_WRITE_ACCESS() {
        return cfapi_h$constants$0.CF_OPEN_FILE_FLAG_WRITE_ACCESS();
    }
    public static @C("int") int CF_OPEN_FILE_FLAG_DELETE_ACCESS() {
        return cfapi_h$constants$0.CF_OPEN_FILE_FLAG_DELETE_ACCESS();
    }
    public static @C("int") int CF_OPEN_FILE_FLAG_FOREGROUND() {
        return cfapi_h$constants$0.CF_OPEN_FILE_FLAG_FOREGROUND();
    }
    public static  MethodHandle CfOpenFileWithOplock$MH() {
        return cfapi_h$constants$0.CfOpenFileWithOplock$MH();
    }
    public static @C("HRESULT") int CfOpenFileWithOplock (@C("LPCWSTR") Addressable FilePath, @C("CF_OPEN_FILE_FLAGS") int Flags, @C("PHANDLE") Addressable ProtectedHandle) {
        try {
            return (int)cfapi_h$constants$0.CfOpenFileWithOplock$MH().invokeExact(FilePath.address(), Flags, ProtectedHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfReferenceProtectedHandle$MH() {
        return cfapi_h$constants$0.CfReferenceProtectedHandle$MH();
    }
    public static @C("BOOLEAN") byte CfReferenceProtectedHandle (@C("HANDLE") Addressable ProtectedHandle) {
        try {
            return (byte)cfapi_h$constants$0.CfReferenceProtectedHandle$MH().invokeExact(ProtectedHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfGetWin32HandleFromProtectedHandle$MH() {
        return cfapi_h$constants$0.CfGetWin32HandleFromProtectedHandle$MH();
    }
    public static @C("HANDLE") MemoryAddress CfGetWin32HandleFromProtectedHandle (@C("HANDLE") Addressable ProtectedHandle) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$0.CfGetWin32HandleFromProtectedHandle$MH().invokeExact(ProtectedHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfReleaseProtectedHandle$MH() {
        return cfapi_h$constants$0.CfReleaseProtectedHandle$MH();
    }
    public static void CfReleaseProtectedHandle (@C("HANDLE") Addressable ProtectedHandle) {
        try {
            cfapi_h$constants$0.CfReleaseProtectedHandle$MH().invokeExact(ProtectedHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfCloseHandle$MH() {
        return cfapi_h$constants$0.CfCloseHandle$MH();
    }
    public static void CfCloseHandle (@C("HANDLE") Addressable FileHandle) {
        try {
            cfapi_h$constants$0.CfCloseHandle$MH().invokeExact(FileHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    @C("struct CF_FILE_RANGE")public static class CF_FILE_RANGE {

        /* package-private */ CF_FILE_RANGE() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_FILE_RANGE$struct$LAYOUT();
        }
        public static MemorySegment StartingOffset$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment Length$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_FILE_RANGE") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_FILE_RANGE") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_FILE_RANGE[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_FILE_RANGE[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_FILE_RANGE*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_FILE_RANGE*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_FILE_RANGE") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static @C("int") int CF_CONVERT_FLAG_NONE() {
        return cfapi_h$constants$0.CF_CONVERT_FLAG_NONE();
    }
    public static @C("int") int CF_CONVERT_FLAG_MARK_IN_SYNC() {
        return cfapi_h$constants$0.CF_CONVERT_FLAG_MARK_IN_SYNC();
    }
    public static @C("int") int CF_CONVERT_FLAG_DEHYDRATE() {
        return cfapi_h$constants$0.CF_CONVERT_FLAG_DEHYDRATE();
    }
    public static @C("int") int CF_CONVERT_FLAG_ENABLE_ON_DEMAND_POPULATION() {
        return cfapi_h$constants$0.CF_CONVERT_FLAG_ENABLE_ON_DEMAND_POPULATION();
    }
    public static @C("int") int CF_CONVERT_FLAG_ALWAYS_FULL() {
        return cfapi_h$constants$0.CF_CONVERT_FLAG_ALWAYS_FULL();
    }
    public static  MethodHandle CfConvertToPlaceholder$MH() {
        return cfapi_h$constants$0.CfConvertToPlaceholder$MH();
    }
    public static @C("HRESULT") int CfConvertToPlaceholder (@C("HANDLE") Addressable FileHandle, @C("LPCVOID") Addressable FileIdentity, @C("DWORD") int FileIdentityLength, @C("CF_CONVERT_FLAGS") int ConvertFlags, @C("USN*") Addressable ConvertUsn, @C("LPOVERLAPPED") Addressable Overlapped) {
        try {
            return (int)cfapi_h$constants$0.CfConvertToPlaceholder$MH().invokeExact(FileHandle.address(), FileIdentity.address(), FileIdentityLength, ConvertFlags, ConvertUsn.address(), Overlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_UPDATE_FLAG_NONE() {
        return cfapi_h$constants$0.CF_UPDATE_FLAG_NONE();
    }
    public static @C("int") int CF_UPDATE_FLAG_VERIFY_IN_SYNC() {
        return cfapi_h$constants$0.CF_UPDATE_FLAG_VERIFY_IN_SYNC();
    }
    public static @C("int") int CF_UPDATE_FLAG_MARK_IN_SYNC() {
        return cfapi_h$constants$0.CF_UPDATE_FLAG_MARK_IN_SYNC();
    }
    public static @C("int") int CF_UPDATE_FLAG_DEHYDRATE() {
        return cfapi_h$constants$0.CF_UPDATE_FLAG_DEHYDRATE();
    }
    public static @C("int") int CF_UPDATE_FLAG_ENABLE_ON_DEMAND_POPULATION() {
        return cfapi_h$constants$0.CF_UPDATE_FLAG_ENABLE_ON_DEMAND_POPULATION();
    }
    public static @C("int") int CF_UPDATE_FLAG_DISABLE_ON_DEMAND_POPULATION() {
        return cfapi_h$constants$0.CF_UPDATE_FLAG_DISABLE_ON_DEMAND_POPULATION();
    }
    public static @C("int") int CF_UPDATE_FLAG_REMOVE_FILE_IDENTITY() {
        return cfapi_h$constants$0.CF_UPDATE_FLAG_REMOVE_FILE_IDENTITY();
    }
    public static @C("int") int CF_UPDATE_FLAG_CLEAR_IN_SYNC() {
        return cfapi_h$constants$0.CF_UPDATE_FLAG_CLEAR_IN_SYNC();
    }
    public static @C("int") int CF_UPDATE_FLAG_REMOVE_PROPERTY() {
        return cfapi_h$constants$0.CF_UPDATE_FLAG_REMOVE_PROPERTY();
    }
    public static @C("int") int CF_UPDATE_FLAG_PASSTHROUGH_FS_METADATA() {
        return cfapi_h$constants$0.CF_UPDATE_FLAG_PASSTHROUGH_FS_METADATA();
    }
    public static @C("int") int CF_UPDATE_FLAG_ALWAYS_FULL() {
        return cfapi_h$constants$0.CF_UPDATE_FLAG_ALWAYS_FULL();
    }
    public static @C("int") int CF_UPDATE_FLAG_ALLOW_PARTIAL() {
        return cfapi_h$constants$0.CF_UPDATE_FLAG_ALLOW_PARTIAL();
    }
    public static  MethodHandle CfUpdatePlaceholder$MH() {
        return cfapi_h$constants$0.CfUpdatePlaceholder$MH();
    }
    public static @C("HRESULT") int CfUpdatePlaceholder (@C("HANDLE") Addressable FileHandle, @C("const CF_FS_METADATA*") Addressable FsMetadata, @C("LPCVOID") Addressable FileIdentity, @C("DWORD") int FileIdentityLength, @C("const CF_FILE_RANGE*") Addressable DehydrateRangeArray, @C("DWORD") int DehydrateRangeCount, @C("CF_UPDATE_FLAGS") int UpdateFlags, @C("USN*") Addressable UpdateUsn, @C("LPOVERLAPPED") Addressable Overlapped) {
        try {
            return (int)cfapi_h$constants$0.CfUpdatePlaceholder$MH().invokeExact(FileHandle.address(), FsMetadata.address(), FileIdentity.address(), FileIdentityLength, DehydrateRangeArray.address(), DehydrateRangeCount, UpdateFlags, UpdateUsn.address(), Overlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_REVERT_FLAG_NONE() {
        return cfapi_h$constants$0.CF_REVERT_FLAG_NONE();
    }
    public static  MethodHandle CfRevertPlaceholder$MH() {
        return cfapi_h$constants$0.CfRevertPlaceholder$MH();
    }
    public static @C("HRESULT") int CfRevertPlaceholder (@C("HANDLE") Addressable FileHandle, @C("CF_REVERT_FLAGS") int RevertFlags, @C("LPOVERLAPPED") Addressable Overlapped) {
        try {
            return (int)cfapi_h$constants$0.CfRevertPlaceholder$MH().invokeExact(FileHandle.address(), RevertFlags, Overlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_HYDRATE_FLAG_NONE() {
        return cfapi_h$constants$0.CF_HYDRATE_FLAG_NONE();
    }
    public static  MethodHandle CfHydratePlaceholder$MH() {
        return cfapi_h$constants$0.CfHydratePlaceholder$MH();
    }
    public static @C("HRESULT") int CfHydratePlaceholder (@C("HANDLE") Addressable FileHandle, @C("LARGE_INTEGER") MemorySegment StartingOffset, @C("LARGE_INTEGER") MemorySegment Length, @C("CF_HYDRATE_FLAGS") int HydrateFlags, @C("LPOVERLAPPED") Addressable Overlapped) {
        try {
            return (int)cfapi_h$constants$0.CfHydratePlaceholder$MH().invokeExact(FileHandle.address(), StartingOffset, Length, HydrateFlags, Overlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_DEHYDRATE_FLAG_NONE() {
        return cfapi_h$constants$0.CF_DEHYDRATE_FLAG_NONE();
    }
    public static @C("int") int CF_DEHYDRATE_FLAG_BACKGROUND() {
        return cfapi_h$constants$0.CF_DEHYDRATE_FLAG_BACKGROUND();
    }
    public static  MethodHandle CfDehydratePlaceholder$MH() {
        return cfapi_h$constants$0.CfDehydratePlaceholder$MH();
    }
    public static @C("HRESULT") int CfDehydratePlaceholder (@C("HANDLE") Addressable FileHandle, @C("LARGE_INTEGER") MemorySegment StartingOffset, @C("LARGE_INTEGER") MemorySegment Length, @C("CF_DEHYDRATE_FLAGS") int DehydrateFlags, @C("LPOVERLAPPED") Addressable Overlapped) {
        try {
            return (int)cfapi_h$constants$0.CfDehydratePlaceholder$MH().invokeExact(FileHandle.address(), StartingOffset, Length, DehydrateFlags, Overlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_PIN_STATE_UNSPECIFIED() {
        return cfapi_h$constants$0.CF_PIN_STATE_UNSPECIFIED();
    }
    public static @C("int") int CF_PIN_STATE_PINNED() {
        return cfapi_h$constants$0.CF_PIN_STATE_PINNED();
    }
    public static @C("int") int CF_PIN_STATE_UNPINNED() {
        return cfapi_h$constants$0.CF_PIN_STATE_UNPINNED();
    }
    public static @C("int") int CF_PIN_STATE_EXCLUDED() {
        return cfapi_h$constants$0.CF_PIN_STATE_EXCLUDED();
    }
    public static @C("int") int CF_PIN_STATE_INHERIT() {
        return cfapi_h$constants$0.CF_PIN_STATE_INHERIT();
    }
    public static @C("int") int CF_SET_PIN_FLAG_NONE() {
        return cfapi_h$constants$0.CF_SET_PIN_FLAG_NONE();
    }
    public static @C("int") int CF_SET_PIN_FLAG_RECURSE() {
        return cfapi_h$constants$0.CF_SET_PIN_FLAG_RECURSE();
    }
    public static @C("int") int CF_SET_PIN_FLAG_RECURSE_ONLY() {
        return cfapi_h$constants$0.CF_SET_PIN_FLAG_RECURSE_ONLY();
    }
    public static @C("int") int CF_SET_PIN_FLAG_RECURSE_STOP_ON_ERROR() {
        return cfapi_h$constants$0.CF_SET_PIN_FLAG_RECURSE_STOP_ON_ERROR();
    }
    public static  MethodHandle CfSetPinState$MH() {
        return cfapi_h$constants$0.CfSetPinState$MH();
    }
    public static @C("HRESULT") int CfSetPinState (@C("HANDLE") Addressable FileHandle, @C("CF_PIN_STATE") int PinState, @C("CF_SET_PIN_FLAGS") int PinFlags, @C("LPOVERLAPPED") Addressable Overlapped) {
        try {
            return (int)cfapi_h$constants$0.CfSetPinState$MH().invokeExact(FileHandle.address(), PinState, PinFlags, Overlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_IN_SYNC_STATE_NOT_IN_SYNC() {
        return cfapi_h$constants$0.CF_IN_SYNC_STATE_NOT_IN_SYNC();
    }
    public static @C("int") int CF_IN_SYNC_STATE_IN_SYNC() {
        return cfapi_h$constants$0.CF_IN_SYNC_STATE_IN_SYNC();
    }
    public static @C("int") int CF_SET_IN_SYNC_FLAG_NONE() {
        return cfapi_h$constants$0.CF_SET_IN_SYNC_FLAG_NONE();
    }
    public static  MethodHandle CfSetInSyncState$MH() {
        return cfapi_h$constants$0.CfSetInSyncState$MH();
    }
    public static @C("HRESULT") int CfSetInSyncState (@C("HANDLE") Addressable FileHandle, @C("CF_IN_SYNC_STATE") int InSyncState, @C("CF_SET_IN_SYNC_FLAGS") int InSyncFlags, @C("USN*") Addressable InSyncUsn) {
        try {
            return (int)cfapi_h$constants$0.CfSetInSyncState$MH().invokeExact(FileHandle.address(), InSyncState, InSyncFlags, InSyncUsn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfSetCorrelationVector$MH() {
        return cfapi_h$constants$0.CfSetCorrelationVector$MH();
    }
    public static @C("HRESULT") int CfSetCorrelationVector (@C("HANDLE") Addressable FileHandle, @C("const PCORRELATION_VECTOR") Addressable CorrelationVector) {
        try {
            return (int)cfapi_h$constants$0.CfSetCorrelationVector$MH().invokeExact(FileHandle.address(), CorrelationVector.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfGetCorrelationVector$MH() {
        return cfapi_h$constants$0.CfGetCorrelationVector$MH();
    }
    public static @C("HRESULT") int CfGetCorrelationVector (@C("HANDLE") Addressable FileHandle, @C("PCORRELATION_VECTOR") Addressable CorrelationVector) {
        try {
            return (int)cfapi_h$constants$0.CfGetCorrelationVector$MH().invokeExact(FileHandle.address(), CorrelationVector.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_PLACEHOLDER_STATE_NO_STATES() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_STATE_NO_STATES();
    }
    public static @C("int") int CF_PLACEHOLDER_STATE_PLACEHOLDER() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_STATE_PLACEHOLDER();
    }
    public static @C("int") int CF_PLACEHOLDER_STATE_SYNC_ROOT() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_STATE_SYNC_ROOT();
    }
    public static @C("int") int CF_PLACEHOLDER_STATE_ESSENTIAL_PROP_PRESENT() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_STATE_ESSENTIAL_PROP_PRESENT();
    }
    public static @C("int") int CF_PLACEHOLDER_STATE_IN_SYNC() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_STATE_IN_SYNC();
    }
    public static @C("int") int CF_PLACEHOLDER_STATE_PARTIAL() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_STATE_PARTIAL();
    }
    public static @C("int") int CF_PLACEHOLDER_STATE_PARTIALLY_ON_DISK() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_STATE_PARTIALLY_ON_DISK();
    }
    public static @C("int") int CF_PLACEHOLDER_STATE_INVALID() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_STATE_INVALID();
    }
    public static  MethodHandle CfGetPlaceholderStateFromAttributeTag$MH() {
        return cfapi_h$constants$0.CfGetPlaceholderStateFromAttributeTag$MH();
    }
    public static @C("CF_PLACEHOLDER_STATE") int CfGetPlaceholderStateFromAttributeTag (@C("DWORD") int FileAttributes, @C("DWORD") int ReparseTag) {
        try {
            return (int)cfapi_h$constants$0.CfGetPlaceholderStateFromAttributeTag$MH().invokeExact(FileAttributes, ReparseTag);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfGetPlaceholderStateFromFileInfo$MH() {
        return cfapi_h$constants$0.CfGetPlaceholderStateFromFileInfo$MH();
    }
    public static @C("CF_PLACEHOLDER_STATE") int CfGetPlaceholderStateFromFileInfo (@C("LPCVOID") Addressable InfoBuffer, @C("FILE_INFO_BY_HANDLE_CLASS") int InfoClass) {
        try {
            return (int)cfapi_h$constants$0.CfGetPlaceholderStateFromFileInfo$MH().invokeExact(InfoBuffer.address(), InfoClass);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfGetPlaceholderStateFromFindData$MH() {
        return cfapi_h$constants$0.CfGetPlaceholderStateFromFindData$MH();
    }
    public static @C("CF_PLACEHOLDER_STATE") int CfGetPlaceholderStateFromFindData (@C("const WIN32_FIND_DATA*") Addressable FindData) {
        try {
            return (int)cfapi_h$constants$0.CfGetPlaceholderStateFromFindData$MH().invokeExact(FindData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_PLACEHOLDER_INFO_BASIC() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_INFO_BASIC();
    }
    public static @C("int") int CF_PLACEHOLDER_INFO_STANDARD() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_INFO_STANDARD();
    }
    @C("struct CF_PLACEHOLDER_BASIC_INFO")public static class CF_PLACEHOLDER_BASIC_INFO {

        /* package-private */ CF_PLACEHOLDER_BASIC_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$struct$LAYOUT();
        }
        public static VarHandle PinState$VH() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$PinState$VH();
        }
        public static  @C("CF_PIN_STATE") int PinState$get(@C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$PinState$VH().get(seg);
        }
        public static  @C("CF_PIN_STATE") int PinState$get(@C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$PinState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PinState$set(@C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment seg, @C("CF_PIN_STATE") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$PinState$VH().set(seg, x);
        }
        public static void PinState$set(@C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment seg, long index, @C("CF_PIN_STATE") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$PinState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle InSyncState$VH() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$InSyncState$VH();
        }
        public static  @C("CF_IN_SYNC_STATE") int InSyncState$get(@C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$InSyncState$VH().get(seg);
        }
        public static  @C("CF_IN_SYNC_STATE") int InSyncState$get(@C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$InSyncState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void InSyncState$set(@C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment seg, @C("CF_IN_SYNC_STATE") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$InSyncState$VH().set(seg, x);
        }
        public static void InSyncState$set(@C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment seg, long index, @C("CF_IN_SYNC_STATE") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$InSyncState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment SyncRootFileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static VarHandle FileIdentityLength$VH() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$FileIdentityLength$VH();
        }
        public static  @C("ULONG") int FileIdentityLength$get(@C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$FileIdentityLength$VH().get(seg);
        }
        public static  @C("ULONG") int FileIdentityLength$get(@C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$FileIdentityLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileIdentityLength$set(@C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$FileIdentityLength$VH().set(seg, x);
        }
        public static void FileIdentityLength$set(@C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_BASIC_INFO$FileIdentityLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileIdentity$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 1));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_PLACEHOLDER_BASIC_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_PLACEHOLDER_BASIC_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_PLACEHOLDER_BASIC_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_PLACEHOLDER_BASIC_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_PLACEHOLDER_BASIC_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct CF_PLACEHOLDER_STANDARD_INFO")public static class CF_PLACEHOLDER_STANDARD_INFO {

        /* package-private */ CF_PLACEHOLDER_STANDARD_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$struct$LAYOUT();
        }
        public static MemorySegment OnDiskDataSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment ValidatedDataSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 8));
        }
        public static MemorySegment ModifiedDataSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(16, 8));
        }
        public static MemorySegment PropertiesSize$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(24, 8));
        }
        public static VarHandle PinState$VH() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$PinState$VH();
        }
        public static  @C("CF_PIN_STATE") int PinState$get(@C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$PinState$VH().get(seg);
        }
        public static  @C("CF_PIN_STATE") int PinState$get(@C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$PinState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void PinState$set(@C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment seg, @C("CF_PIN_STATE") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$PinState$VH().set(seg, x);
        }
        public static void PinState$set(@C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment seg, long index, @C("CF_PIN_STATE") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$PinState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle InSyncState$VH() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$InSyncState$VH();
        }
        public static  @C("CF_IN_SYNC_STATE") int InSyncState$get(@C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$InSyncState$VH().get(seg);
        }
        public static  @C("CF_IN_SYNC_STATE") int InSyncState$get(@C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$InSyncState$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void InSyncState$set(@C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment seg, @C("CF_IN_SYNC_STATE") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$InSyncState$VH().set(seg, x);
        }
        public static void InSyncState$set(@C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment seg, long index, @C("CF_IN_SYNC_STATE") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$InSyncState$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(40, 8));
        }
        public static MemorySegment SyncRootFileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(48, 8));
        }
        public static VarHandle FileIdentityLength$VH() {
            return cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$FileIdentityLength$VH();
        }
        public static  @C("ULONG") int FileIdentityLength$get(@C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$FileIdentityLength$VH().get(seg);
        }
        public static  @C("ULONG") int FileIdentityLength$get(@C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$FileIdentityLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void FileIdentityLength$set(@C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$FileIdentityLength$VH().set(seg, x);
        }
        public static void FileIdentityLength$set(@C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_PLACEHOLDER_STANDARD_INFO$FileIdentityLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment FileIdentity$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(60, 1));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_PLACEHOLDER_STANDARD_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_PLACEHOLDER_STANDARD_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_PLACEHOLDER_STANDARD_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_PLACEHOLDER_STANDARD_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_PLACEHOLDER_STANDARD_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle CfGetPlaceholderInfo$MH() {
        return cfapi_h$constants$0.CfGetPlaceholderInfo$MH();
    }
    public static @C("HRESULT") int CfGetPlaceholderInfo (@C("HANDLE") Addressable FileHandle, @C("CF_PLACEHOLDER_INFO_CLASS") int InfoClass, @C("PVOID") Addressable InfoBuffer, @C("DWORD") int InfoBufferLength, @C("PDWORD") Addressable ReturnedLength) {
        try {
            return (int)cfapi_h$constants$0.CfGetPlaceholderInfo$MH().invokeExact(FileHandle.address(), InfoClass, InfoBuffer.address(), InfoBufferLength, ReturnedLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_SYNC_ROOT_INFO_BASIC() {
        return cfapi_h$constants$0.CF_SYNC_ROOT_INFO_BASIC();
    }
    public static @C("int") int CF_SYNC_ROOT_INFO_STANDARD() {
        return cfapi_h$constants$0.CF_SYNC_ROOT_INFO_STANDARD();
    }
    public static @C("int") int CF_SYNC_ROOT_INFO_PROVIDER() {
        return cfapi_h$constants$0.CF_SYNC_ROOT_INFO_PROVIDER();
    }
    @C("struct CF_SYNC_ROOT_BASIC_INFO")public static class CF_SYNC_ROOT_BASIC_INFO {

        /* package-private */ CF_SYNC_ROOT_BASIC_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_SYNC_ROOT_BASIC_INFO$struct$LAYOUT();
        }
        public static MemorySegment SyncRootFileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_SYNC_ROOT_BASIC_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_SYNC_ROOT_BASIC_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_SYNC_ROOT_BASIC_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_SYNC_ROOT_BASIC_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_SYNC_ROOT_BASIC_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_SYNC_ROOT_BASIC_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_SYNC_ROOT_BASIC_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct CF_SYNC_ROOT_PROVIDER_INFO")public static class CF_SYNC_ROOT_PROVIDER_INFO {

        /* package-private */ CF_SYNC_ROOT_PROVIDER_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_SYNC_ROOT_PROVIDER_INFO$struct$LAYOUT();
        }
        public static VarHandle ProviderStatus$VH() {
            return cfapi_h$constants$0.CF_SYNC_ROOT_PROVIDER_INFO$ProviderStatus$VH();
        }
        public static  @C("CF_SYNC_PROVIDER_STATUS") int ProviderStatus$get(@C("struct CF_SYNC_ROOT_PROVIDER_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_ROOT_PROVIDER_INFO$ProviderStatus$VH().get(seg);
        }
        public static  @C("CF_SYNC_PROVIDER_STATUS") int ProviderStatus$get(@C("struct CF_SYNC_ROOT_PROVIDER_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_ROOT_PROVIDER_INFO$ProviderStatus$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProviderStatus$set(@C("struct CF_SYNC_ROOT_PROVIDER_INFO") MemorySegment seg, @C("CF_SYNC_PROVIDER_STATUS") int x) {
            cfapi_h$constants$0.CF_SYNC_ROOT_PROVIDER_INFO$ProviderStatus$VH().set(seg, x);
        }
        public static void ProviderStatus$set(@C("struct CF_SYNC_ROOT_PROVIDER_INFO") MemorySegment seg, long index, @C("CF_SYNC_PROVIDER_STATUS") int x) {
            cfapi_h$constants$0.CF_SYNC_ROOT_PROVIDER_INFO$ProviderStatus$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ProviderName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(4, 512));
        }
        public static MemorySegment ProviderVersion$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(516, 512));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_SYNC_ROOT_PROVIDER_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_SYNC_ROOT_PROVIDER_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_SYNC_ROOT_PROVIDER_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_SYNC_ROOT_PROVIDER_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_SYNC_ROOT_PROVIDER_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_SYNC_ROOT_PROVIDER_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_SYNC_ROOT_PROVIDER_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    @C("struct CF_SYNC_ROOT_STANDARD_INFO")public static class CF_SYNC_ROOT_STANDARD_INFO {

        /* package-private */ CF_SYNC_ROOT_STANDARD_INFO() {}
        public static MemoryLayout $LAYOUT() {
            return cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$struct$LAYOUT();
        }
        public static MemorySegment SyncRootFileId$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(0, 8));
        }
        public static MemorySegment HydrationPolicy$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(8, 4));
        }
        public static MemorySegment PopulationPolicy$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(12, 4));
        }
        public static VarHandle InSyncPolicy$VH() {
            return cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$InSyncPolicy$VH();
        }
        public static  @C("CF_INSYNC_POLICY") int InSyncPolicy$get(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$InSyncPolicy$VH().get(seg);
        }
        public static  @C("CF_INSYNC_POLICY") int InSyncPolicy$get(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$InSyncPolicy$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void InSyncPolicy$set(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg, @C("CF_INSYNC_POLICY") int x) {
            cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$InSyncPolicy$VH().set(seg, x);
        }
        public static void InSyncPolicy$set(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg, long index, @C("CF_INSYNC_POLICY") int x) {
            cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$InSyncPolicy$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle HardLinkPolicy$VH() {
            return cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$HardLinkPolicy$VH();
        }
        public static  @C("CF_HARDLINK_POLICY") int HardLinkPolicy$get(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$HardLinkPolicy$VH().get(seg);
        }
        public static  @C("CF_HARDLINK_POLICY") int HardLinkPolicy$get(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$HardLinkPolicy$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void HardLinkPolicy$set(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg, @C("CF_HARDLINK_POLICY") int x) {
            cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$HardLinkPolicy$VH().set(seg, x);
        }
        public static void HardLinkPolicy$set(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg, long index, @C("CF_HARDLINK_POLICY") int x) {
            cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$HardLinkPolicy$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle ProviderStatus$VH() {
            return cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$ProviderStatus$VH();
        }
        public static  @C("CF_SYNC_PROVIDER_STATUS") int ProviderStatus$get(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$ProviderStatus$VH().get(seg);
        }
        public static  @C("CF_SYNC_PROVIDER_STATUS") int ProviderStatus$get(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$ProviderStatus$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void ProviderStatus$set(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg, @C("CF_SYNC_PROVIDER_STATUS") int x) {
            cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$ProviderStatus$VH().set(seg, x);
        }
        public static void ProviderStatus$set(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg, long index, @C("CF_SYNC_PROVIDER_STATUS") int x) {
            cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$ProviderStatus$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment ProviderName$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(28, 512));
        }
        public static MemorySegment ProviderVersion$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(540, 512));
        }
        public static VarHandle SyncRootIdentityLength$VH() {
            return cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$SyncRootIdentityLength$VH();
        }
        public static  @C("ULONG") int SyncRootIdentityLength$get(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg) {
            return (int)cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$SyncRootIdentityLength$VH().get(seg);
        }
        public static  @C("ULONG") int SyncRootIdentityLength$get(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg, long index) {
            return (int)cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$SyncRootIdentityLength$VH().get(seg.asSlice(index*sizeof()));
        }
        public static void SyncRootIdentityLength$set(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$SyncRootIdentityLength$VH().set(seg, x);
        }
        public static void SyncRootIdentityLength$set(@C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment seg, long index, @C("ULONG") int x) {
            cfapi_h$constants$0.CF_SYNC_ROOT_STANDARD_INFO$SyncRootIdentityLength$VH().set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment SyncRootIdentity$slice(MemorySegment seg) {
            return RuntimeHelper.nonCloseableNonTransferableSegment(seg.asSlice(1056, 1));
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static @C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment allocate() { return MemorySegment.allocateNative($LAYOUT()); }
        public static @C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment allocate(NativeScope scope) { return scope.allocate($LAYOUT()); }
        public static @C("struct CF_SYNC_ROOT_STANDARD_INFO[]") MemorySegment allocateArray(int len) {
            return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));
        }        public static @C("struct CF_SYNC_ROOT_STANDARD_INFO[]") MemorySegment allocateArray(int len, NativeScope scope) {
            return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));
        }
        public static @C("struct CF_SYNC_ROOT_STANDARD_INFO*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("struct CF_SYNC_ROOT_STANDARD_INFO*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
        public static @C("struct CF_SYNC_ROOT_STANDARD_INFO") MemorySegment ofAddressRestricted(MemoryAddress addr) { return RuntimeHelper.asArrayRestricted(addr, $LAYOUT(), 1); }
    }

    public static  MethodHandle CfGetSyncRootInfoByPath$MH() {
        return cfapi_h$constants$0.CfGetSyncRootInfoByPath$MH();
    }
    public static @C("HRESULT") int CfGetSyncRootInfoByPath (@C("LPCWSTR") Addressable FilePath, @C("CF_SYNC_ROOT_INFO_CLASS") int InfoClass, @C("PVOID") Addressable InfoBuffer, @C("DWORD") int InfoBufferLength, @C("DWORD*") Addressable ReturnedLength) {
        try {
            return (int)cfapi_h$constants$0.CfGetSyncRootInfoByPath$MH().invokeExact(FilePath.address(), InfoClass, InfoBuffer.address(), InfoBufferLength, ReturnedLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfGetSyncRootInfoByHandle$MH() {
        return cfapi_h$constants$0.CfGetSyncRootInfoByHandle$MH();
    }
    public static @C("HRESULT") int CfGetSyncRootInfoByHandle (@C("HANDLE") Addressable FileHandle, @C("CF_SYNC_ROOT_INFO_CLASS") int InfoClass, @C("PVOID") Addressable InfoBuffer, @C("DWORD") int InfoBufferLength, @C("DWORD*") Addressable ReturnedLength) {
        try {
            return (int)cfapi_h$constants$0.CfGetSyncRootInfoByHandle$MH().invokeExact(FileHandle.address(), InfoClass, InfoBuffer.address(), InfoBufferLength, ReturnedLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int CF_PLACEHOLDER_RANGE_INFO_ONDISK() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_RANGE_INFO_ONDISK();
    }
    public static @C("int") int CF_PLACEHOLDER_RANGE_INFO_VALIDATED() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_RANGE_INFO_VALIDATED();
    }
    public static @C("int") int CF_PLACEHOLDER_RANGE_INFO_MODIFIED() {
        return cfapi_h$constants$0.CF_PLACEHOLDER_RANGE_INFO_MODIFIED();
    }
    public static  MethodHandle CfGetPlaceholderRangeInfo$MH() {
        return cfapi_h$constants$0.CfGetPlaceholderRangeInfo$MH();
    }
    public static @C("HRESULT") int CfGetPlaceholderRangeInfo (@C("HANDLE") Addressable FileHandle, @C("CF_PLACEHOLDER_RANGE_INFO_CLASS") int InfoClass, @C("LARGE_INTEGER") MemorySegment StartingOffset, @C("LARGE_INTEGER") MemorySegment Length, @C("PVOID") Addressable InfoBuffer, @C("DWORD") int InfoBufferLength, @C("PDWORD") Addressable ReturnedLength) {
        try {
            return (int)cfapi_h$constants$0.CfGetPlaceholderRangeInfo$MH().invokeExact(FileHandle.address(), InfoClass, StartingOffset, Length, InfoBuffer.address(), InfoBufferLength, ReturnedLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfReportProviderProgress$MH() {
        return cfapi_h$constants$0.CfReportProviderProgress$MH();
    }
    public static @C("HRESULT") int CfReportProviderProgress (@C("CF_CONNECTION_KEY") MemorySegment ConnectionKey, @C("CF_TRANSFER_KEY") MemorySegment TransferKey, @C("LARGE_INTEGER") MemorySegment ProviderProgressTotal, @C("LARGE_INTEGER") MemorySegment ProviderProgressCompleted) {
        try {
            return (int)cfapi_h$constants$0.CfReportProviderProgress$MH().invokeExact(ConnectionKey, TransferKey, ProviderProgressTotal, ProviderProgressCompleted);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CfReportProviderProgress2$MH() {
        return cfapi_h$constants$0.CfReportProviderProgress2$MH();
    }
    public static @C("HRESULT") int CfReportProviderProgress2 (@C("CF_CONNECTION_KEY") MemorySegment ConnectionKey, @C("CF_TRANSFER_KEY") MemorySegment TransferKey, @C("CF_REQUEST_KEY") MemorySegment RequestKey, @C("LARGE_INTEGER") MemorySegment ProviderProgressTotal, @C("LARGE_INTEGER") MemorySegment ProviderProgressCompleted, @C("DWORD") int TargetSessionId) {
        try {
            return (int)cfapi_h$constants$0.CfReportProviderProgress2$MH().invokeExact(ConnectionKey, TransferKey, RequestKey, ProviderProgressTotal, ProviderProgressCompleted, TargetSessionId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ALLOCATE_CF_CALLBACK$MH() {
        return cfapi_h$constants$0.ALLOCATE_CF_CALLBACK$MH();
    }
    public static void ALLOCATE_CF_CALLBACK (@C("void(*)(const CF_CALLBACK_INFO*,const CF_CALLBACK_PARAMETERS*)") Addressable CF_CALLBACK) {
        try {
            cfapi_h$constants$0.ALLOCATE_CF_CALLBACK$MH().invokeExact(CF_CALLBACK.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static interface ALLOCATE_CF_CALLBACK$CF_CALLBACK {

        void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);
        public static  @C("void(*)(const CF_CALLBACK_INFO*,const CF_CALLBACK_PARAMETERS*)") MemorySegment allocate(ALLOCATE_CF_CALLBACK$CF_CALLBACK fi) {
            return RuntimeHelper.upcallStub(ALLOCATE_CF_CALLBACK$CF_CALLBACK.class, fi, cfapi_h$constants$0.ALLOCATE_CF_CALLBACK$CF_CALLBACK$FUNC(), "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V");
        }
        public static  @C("void(*)(const CF_CALLBACK_INFO*,const CF_CALLBACK_PARAMETERS*)") MemorySegment allocate(ALLOCATE_CF_CALLBACK$CF_CALLBACK fi, NativeScope scope) {
            return allocate(fi).handoff(scope);
        }
    }

    public static @C("long long") long CF_EOF() {
        return cfapi_h$constants$0.CF_EOF();
    }
    public static @C("int") int CF_REQUEST_KEY_DEFAULT() {
        return cfapi_h$constants$0.CF_REQUEST_KEY_DEFAULT();
    }
    @C("union _LARGE_INTEGER")public static class CF_REQUEST_KEY {

        /* package-private */ CF_REQUEST_KEY() {}
        public static @C("union _LARGE_INTEGER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union _LARGE_INTEGER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
    }

    @C("union _LARGE_INTEGER")public static class CF_TRANSFER_KEY {

        /* package-private */ CF_TRANSFER_KEY() {}
        public static @C("union _LARGE_INTEGER*") MemorySegment allocatePointer() {
            return MemorySegment.allocateNative(C_POINTER);
        }
        public static @C("union _LARGE_INTEGER*") MemorySegment allocatePointer(NativeScope scope) {
            return scope.allocate(C_POINTER);
        }
    }

}


